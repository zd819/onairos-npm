(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('buffer'), require('util'), require('stream'), require('path'), require('http'), require('https'), require('url'), require('fs'), require('assert'), require('tty'), require('os'), require('zlib'), require('events'), require('crypto'), require('net'), require('querystring'), require('stream/web'), require('node:stream'), require('node:util'), require('node:events'), require('worker_threads'), require('perf_hooks'), require('util/types'), require('tls'), require('async_hooks'), require('console'), require('string_decoder'), require('diagnostics_channel'), require('node:crypto')) :
	typeof define === 'function' && define.amd ? define(['exports', 'buffer', 'util', 'stream', 'path', 'http', 'https', 'url', 'fs', 'assert', 'tty', 'os', 'zlib', 'events', 'crypto', 'net', 'querystring', 'stream/web', 'node:stream', 'node:util', 'node:events', 'worker_threads', 'perf_hooks', 'util/types', 'tls', 'async_hooks', 'console', 'string_decoder', 'diagnostics_channel', 'node:crypto'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Onairos = {}, global.require$$0$5, global.require$$1, global.stream, global.require$$1$1, global.require$$2, global.require$$4, global.require$$0$1, global.require$$6, global.require$$0$4, global.require$$0$3, global.require$$0$2, global.zlib, global.EventEmitter, global.require$$1$2, global.require$$4$1, global.require$$8, global.require$$13, global.require$$0$7, global.require$$1$3, global.require$$0$6, global.require$$0$8, global.require$$2$1, global.require$$5, global.require$$4$2, global.require$$4$3, global.require$$1$4, global.require$$6$1, global.require$$0$9, global.require$$1$5));
})(this, (function (exports, require$$0$5, require$$1, stream, require$$1$1, require$$2, require$$4, require$$0$1, require$$6, require$$0$4, require$$0$3, require$$0$2, zlib, EventEmitter, require$$1$2, require$$4$1, require$$8, require$$13, require$$0$7, require$$1$3, require$$0$6, require$$0$8, require$$2$1, require$$5, require$$4$2, require$$4$3, require$$1$4, require$$6$1, require$$0$9, require$$1$5) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var require$$0__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$0$5);
	var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
	var stream__default = /*#__PURE__*/_interopDefaultLegacy(stream);
	var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
	var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);
	var require$$4__default = /*#__PURE__*/_interopDefaultLegacy(require$$4);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);
	var require$$6__default = /*#__PURE__*/_interopDefaultLegacy(require$$6);
	var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$4);
	var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$3);
	var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);
	var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
	var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);
	var require$$1__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$1$2);
	var require$$4__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$4$1);
	var require$$8__default = /*#__PURE__*/_interopDefaultLegacy(require$$8);
	var require$$13__default = /*#__PURE__*/_interopDefaultLegacy(require$$13);
	var require$$0__default$6 = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
	var require$$1__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$1$3);
	var require$$0__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$0$6);
	var require$$0__default$7 = /*#__PURE__*/_interopDefaultLegacy(require$$0$8);
	var require$$2__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$2$1);
	var require$$5__default = /*#__PURE__*/_interopDefaultLegacy(require$$5);
	var require$$4__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$4$2);
	var require$$4__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$4$3);
	var require$$1__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
	var require$$6__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$6$1);
	var require$$0__default$8 = /*#__PURE__*/_interopDefaultLegacy(require$$0$9);
	var require$$1__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$1$5);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;

		var l = Symbol.for("react.element"),
		  n = Symbol.for("react.portal"),
		  p = Symbol.for("react.fragment"),
		  q = Symbol.for("react.strict_mode"),
		  r = Symbol.for("react.profiler"),
		  t = Symbol.for("react.provider"),
		  u = Symbol.for("react.context"),
		  v = Symbol.for("react.forward_ref"),
		  w = Symbol.for("react.suspense"),
		  x = Symbol.for("react.memo"),
		  y = Symbol.for("react.lazy"),
		  z = Symbol.iterator;
		function A(a) {
		  if (null === a || "object" !== typeof a) return null;
		  a = z && a[z] || a["@@iterator"];
		  return "function" === typeof a ? a : null;
		}
		var B = {
		    isMounted: function () {
		      return !1;
		    },
		    enqueueForceUpdate: function () {},
		    enqueueReplaceState: function () {},
		    enqueueSetState: function () {}
		  },
		  C = Object.assign,
		  D = {};
		function E(a, b, e) {
		  this.props = a;
		  this.context = b;
		  this.refs = D;
		  this.updater = e || B;
		}
		E.prototype.isReactComponent = {};
		E.prototype.setState = function (a, b) {
		  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
		  this.updater.enqueueSetState(this, a, b, "setState");
		};
		E.prototype.forceUpdate = function (a) {
		  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
		};
		function F() {}
		F.prototype = E.prototype;
		function G(a, b, e) {
		  this.props = a;
		  this.context = b;
		  this.refs = D;
		  this.updater = e || B;
		}
		var H = G.prototype = new F();
		H.constructor = G;
		C(H, E.prototype);
		H.isPureReactComponent = !0;
		var I = Array.isArray,
		  J = Object.prototype.hasOwnProperty,
		  K = {
		    current: null
		  },
		  L = {
		    key: !0,
		    ref: !0,
		    __self: !0,
		    __source: !0
		  };
		function M(a, b, e) {
		  var d,
		    c = {},
		    k = null,
		    h = null;
		  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
		  var g = arguments.length - 2;
		  if (1 === g) c.children = e;else if (1 < g) {
		    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
		    c.children = f;
		  }
		  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
		  return {
		    $$typeof: l,
		    type: a,
		    key: k,
		    ref: h,
		    props: c,
		    _owner: K.current
		  };
		}
		function N(a, b) {
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: b,
		    ref: a.ref,
		    props: a.props,
		    _owner: a._owner
		  };
		}
		function O(a) {
		  return "object" === typeof a && null !== a && a.$$typeof === l;
		}
		function escape(a) {
		  var b = {
		    "=": "=0",
		    ":": "=2"
		  };
		  return "$" + a.replace(/[=:]/g, function (a) {
		    return b[a];
		  });
		}
		var P = /\/+/g;
		function Q(a, b) {
		  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
		}
		function R(a, b, e, d, c) {
		  var k = typeof a;
		  if ("undefined" === k || "boolean" === k) a = null;
		  var h = !1;
		  if (null === a) h = !0;else switch (k) {
		    case "string":
		    case "number":
		      h = !0;
		      break;
		    case "object":
		      switch (a.$$typeof) {
		        case l:
		        case n:
		          h = !0;
		      }
		  }
		  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
		    return a;
		  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
		  h = 0;
		  d = "" === d ? "." : d + ":";
		  if (I(a)) for (var g = 0; g < a.length; g++) {
		    k = a[g];
		    var f = d + Q(k, g);
		    h += R(k, b, e, f, c);
		  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
		  return h;
		}
		function S(a, b, e) {
		  if (null == a) return a;
		  var d = [],
		    c = 0;
		  R(a, d, "", "", function (a) {
		    return b.call(e, a, c++);
		  });
		  return d;
		}
		function T(a) {
		  if (-1 === a._status) {
		    var b = a._result;
		    b = b();
		    b.then(function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
		    }, function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
		    });
		    -1 === a._status && (a._status = 0, a._result = b);
		  }
		  if (1 === a._status) return a._result.default;
		  throw a._result;
		}
		var U = {
		    current: null
		  },
		  V = {
		    transition: null
		  },
		  W = {
		    ReactCurrentDispatcher: U,
		    ReactCurrentBatchConfig: V,
		    ReactCurrentOwner: K
		  };
		react_production_min.Children = {
		  map: S,
		  forEach: function (a, b, e) {
		    S(a, function () {
		      b.apply(this, arguments);
		    }, e);
		  },
		  count: function (a) {
		    var b = 0;
		    S(a, function () {
		      b++;
		    });
		    return b;
		  },
		  toArray: function (a) {
		    return S(a, function (a) {
		      return a;
		    }) || [];
		  },
		  only: function (a) {
		    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
		    return a;
		  }
		};
		react_production_min.Component = E;
		react_production_min.Fragment = p;
		react_production_min.Profiler = r;
		react_production_min.PureComponent = G;
		react_production_min.StrictMode = q;
		react_production_min.Suspense = w;
		react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
		react_production_min.cloneElement = function (a, b, e) {
		  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
		  var d = C({}, a.props),
		    c = a.key,
		    k = a.ref,
		    h = a._owner;
		  if (null != b) {
		    void 0 !== b.ref && (k = b.ref, h = K.current);
		    void 0 !== b.key && (c = "" + b.key);
		    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
		    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
		  }
		  var f = arguments.length - 2;
		  if (1 === f) d.children = e;else if (1 < f) {
		    g = Array(f);
		    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
		    d.children = g;
		  }
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: c,
		    ref: k,
		    props: d,
		    _owner: h
		  };
		};
		react_production_min.createContext = function (a) {
		  a = {
		    $$typeof: u,
		    _currentValue: a,
		    _currentValue2: a,
		    _threadCount: 0,
		    Provider: null,
		    Consumer: null,
		    _defaultValue: null,
		    _globalName: null
		  };
		  a.Provider = {
		    $$typeof: t,
		    _context: a
		  };
		  return a.Consumer = a;
		};
		react_production_min.createElement = M;
		react_production_min.createFactory = function (a) {
		  var b = M.bind(null, a);
		  b.type = a;
		  return b;
		};
		react_production_min.createRef = function () {
		  return {
		    current: null
		  };
		};
		react_production_min.forwardRef = function (a) {
		  return {
		    $$typeof: v,
		    render: a
		  };
		};
		react_production_min.isValidElement = O;
		react_production_min.lazy = function (a) {
		  return {
		    $$typeof: y,
		    _payload: {
		      _status: -1,
		      _result: a
		    },
		    _init: T
		  };
		};
		react_production_min.memo = function (a, b) {
		  return {
		    $$typeof: x,
		    type: a,
		    compare: void 0 === b ? null : b
		  };
		};
		react_production_min.startTransition = function (a) {
		  var b = V.transition;
		  V.transition = {};
		  try {
		    a();
		  } finally {
		    V.transition = b;
		  }
		};
		react_production_min.unstable_act = function () {
		  throw Error("act(...) is not supported in production builds of React.");
		};
		react_production_min.useCallback = function (a, b) {
		  return U.current.useCallback(a, b);
		};
		react_production_min.useContext = function (a) {
		  return U.current.useContext(a);
		};
		react_production_min.useDebugValue = function () {};
		react_production_min.useDeferredValue = function (a) {
		  return U.current.useDeferredValue(a);
		};
		react_production_min.useEffect = function (a, b) {
		  return U.current.useEffect(a, b);
		};
		react_production_min.useId = function () {
		  return U.current.useId();
		};
		react_production_min.useImperativeHandle = function (a, b, e) {
		  return U.current.useImperativeHandle(a, b, e);
		};
		react_production_min.useInsertionEffect = function (a, b) {
		  return U.current.useInsertionEffect(a, b);
		};
		react_production_min.useLayoutEffect = function (a, b) {
		  return U.current.useLayoutEffect(a, b);
		};
		react_production_min.useMemo = function (a, b) {
		  return U.current.useMemo(a, b);
		};
		react_production_min.useReducer = function (a, b, e) {
		  return U.current.useReducer(a, b, e);
		};
		react_production_min.useRef = function (a) {
		  return U.current.useRef(a);
		};
		react_production_min.useState = function (a) {
		  return U.current.useState(a);
		};
		react_production_min.useSyncExternalStore = function (a, b, e) {
		  return U.current.useSyncExternalStore(a, b, e);
		};
		react_production_min.useTransition = function () {
		  return U.current.useTransition();
		};
		react_production_min.version = "18.2.0";
		return react_production_min;
	}

	var react_development = {exports: {}};

	/**
	 * @license React
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	react_development.exports;

	var hasRequiredReact_development;

	function requireReact_development () {
		if (hasRequiredReact_development) return react_development.exports;
		hasRequiredReact_development = 1;
		(function (module, exports) {

			if (process.env.NODE_ENV !== "production") {
			  (function () {

			    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
			      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
			    }
			    var ReactVersion = '18.2.0';

			    // ATTENTION
			    // When adding new symbols to this file,
			    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
			    // The Symbol used to tag the ReactElement-like types.
			    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
			    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
			    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
			    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
			    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
			    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
			    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
			    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
			    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
			    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
			    var REACT_MEMO_TYPE = Symbol.for('react.memo');
			    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
			    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
			    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
			    var FAUX_ITERATOR_SYMBOL = '@@iterator';
			    function getIteratorFn(maybeIterable) {
			      if (maybeIterable === null || typeof maybeIterable !== 'object') {
			        return null;
			      }
			      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
			      if (typeof maybeIterator === 'function') {
			        return maybeIterator;
			      }
			      return null;
			    }

			    /**
			     * Keeps track of the current dispatcher.
			     */
			    var ReactCurrentDispatcher = {
			      /**
			       * @internal
			       * @type {ReactComponent}
			       */
			      current: null
			    };

			    /**
			     * Keeps track of the current batch's configuration such as how long an update
			     * should suspend for if it needs to.
			     */
			    var ReactCurrentBatchConfig = {
			      transition: null
			    };
			    var ReactCurrentActQueue = {
			      current: null,
			      // Used to reproduce behavior of `batchedUpdates` in legacy mode.
			      isBatchingLegacy: false,
			      didScheduleLegacyUpdate: false
			    };

			    /**
			     * Keeps track of the current owner.
			     *
			     * The current owner is the component who should own any components that are
			     * currently being constructed.
			     */
			    var ReactCurrentOwner = {
			      /**
			       * @internal
			       * @type {ReactComponent}
			       */
			      current: null
			    };
			    var ReactDebugCurrentFrame = {};
			    var currentExtraStackFrame = null;
			    function setExtraStackFrame(stack) {
			      {
			        currentExtraStackFrame = stack;
			      }
			    }
			    {
			      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
			        {
			          currentExtraStackFrame = stack;
			        }
			      }; // Stack implementation injected by the current renderer.

			      ReactDebugCurrentFrame.getCurrentStack = null;
			      ReactDebugCurrentFrame.getStackAddendum = function () {
			        var stack = ''; // Add an extra top frame while an element is being validated

			        if (currentExtraStackFrame) {
			          stack += currentExtraStackFrame;
			        } // Delegate to the injected renderer-specific implementation

			        var impl = ReactDebugCurrentFrame.getCurrentStack;
			        if (impl) {
			          stack += impl() || '';
			        }
			        return stack;
			      };
			    }

			    // -----------------------------------------------------------------------------

			    var enableScopeAPI = false; // Experimental Create Event Handle API.
			    var enableCacheElement = false;
			    var enableTransitionTracing = false; // No known bugs, but needs performance testing

			    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
			    // stuff. Intended to enable React core members to more easily debug scheduling
			    // issues in DEV builds.

			    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

			    var ReactSharedInternals = {
			      ReactCurrentDispatcher: ReactCurrentDispatcher,
			      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
			      ReactCurrentOwner: ReactCurrentOwner
			    };
			    {
			      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
			      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
			    }

			    // by calls to these methods by a Babel plugin.
			    //
			    // In PROD (or in packages without access to React internals),
			    // they are left as they are instead.

			    function warn(format) {
			      {
			        {
			          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			            args[_key - 1] = arguments[_key];
			          }
			          printWarning('warn', format, args);
			        }
			      }
			    }
			    function error(format) {
			      {
			        {
			          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
			            args[_key2 - 1] = arguments[_key2];
			          }
			          printWarning('error', format, args);
			        }
			      }
			    }
			    function printWarning(level, format, args) {
			      // When changing this logic, you might want to also
			      // update consoleWithStackDev.www.js as well.
			      {
			        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
			        var stack = ReactDebugCurrentFrame.getStackAddendum();
			        if (stack !== '') {
			          format += '%s';
			          args = args.concat([stack]);
			        } // eslint-disable-next-line react-internal/safe-string-coercion

			        var argsWithFormat = args.map(function (item) {
			          return String(item);
			        }); // Careful: RN currently depends on this prefix

			        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
			        // breaks IE9: https://github.com/facebook/react/issues/13610
			        // eslint-disable-next-line react-internal/no-production-logging

			        Function.prototype.apply.call(console[level], console, argsWithFormat);
			      }
			    }
			    var didWarnStateUpdateForUnmountedComponent = {};
			    function warnNoop(publicInstance, callerName) {
			      {
			        var _constructor = publicInstance.constructor;
			        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
			        var warningKey = componentName + "." + callerName;
			        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
			          return;
			        }
			        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
			        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
			      }
			    }
			    /**
			     * This is the abstract API for an update queue.
			     */

			    var ReactNoopUpdateQueue = {
			      /**
			       * Checks whether or not this composite component is mounted.
			       * @param {ReactClass} publicInstance The instance we want to test.
			       * @return {boolean} True if mounted, false otherwise.
			       * @protected
			       * @final
			       */
			      isMounted: function (publicInstance) {
			        return false;
			      },
			      /**
			       * Forces an update. This should only be invoked when it is known with
			       * certainty that we are **not** in a DOM transaction.
			       *
			       * You may want to call this when you know that some deeper aspect of the
			       * component's state has changed but `setState` was not called.
			       *
			       * This will not invoke `shouldComponentUpdate`, but it will invoke
			       * `componentWillUpdate` and `componentDidUpdate`.
			       *
			       * @param {ReactClass} publicInstance The instance that should rerender.
			       * @param {?function} callback Called after component is updated.
			       * @param {?string} callerName name of the calling function in the public API.
			       * @internal
			       */
			      enqueueForceUpdate: function (publicInstance, callback, callerName) {
			        warnNoop(publicInstance, 'forceUpdate');
			      },
			      /**
			       * Replaces all of the state. Always use this or `setState` to mutate state.
			       * You should treat `this.state` as immutable.
			       *
			       * There is no guarantee that `this.state` will be immediately updated, so
			       * accessing `this.state` after calling this method may return the old value.
			       *
			       * @param {ReactClass} publicInstance The instance that should rerender.
			       * @param {object} completeState Next state.
			       * @param {?function} callback Called after component is updated.
			       * @param {?string} callerName name of the calling function in the public API.
			       * @internal
			       */
			      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
			        warnNoop(publicInstance, 'replaceState');
			      },
			      /**
			       * Sets a subset of the state. This only exists because _pendingState is
			       * internal. This provides a merging strategy that is not available to deep
			       * properties which is confusing. TODO: Expose pendingState or don't use it
			       * during the merge.
			       *
			       * @param {ReactClass} publicInstance The instance that should rerender.
			       * @param {object} partialState Next partial state to be merged with state.
			       * @param {?function} callback Called after component is updated.
			       * @param {?string} Name of the calling function in the public API.
			       * @internal
			       */
			      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
			        warnNoop(publicInstance, 'setState');
			      }
			    };
			    var assign = Object.assign;
			    var emptyObject = {};
			    {
			      Object.freeze(emptyObject);
			    }
			    /**
			     * Base class helpers for the updating state of a component.
			     */

			    function Component(props, context, updater) {
			      this.props = props;
			      this.context = context; // If a component has string refs, we will assign a different object later.

			      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
			      // renderer.

			      this.updater = updater || ReactNoopUpdateQueue;
			    }
			    Component.prototype.isReactComponent = {};
			    /**
			     * Sets a subset of the state. Always use this to mutate
			     * state. You should treat `this.state` as immutable.
			     *
			     * There is no guarantee that `this.state` will be immediately updated, so
			     * accessing `this.state` after calling this method may return the old value.
			     *
			     * There is no guarantee that calls to `setState` will run synchronously,
			     * as they may eventually be batched together.  You can provide an optional
			     * callback that will be executed when the call to setState is actually
			     * completed.
			     *
			     * When a function is provided to setState, it will be called at some point in
			     * the future (not synchronously). It will be called with the up to date
			     * component arguments (state, props, context). These values can be different
			     * from this.* because your function may be called after receiveProps but before
			     * shouldComponentUpdate, and this new state, props, and context will not yet be
			     * assigned to this.
			     *
			     * @param {object|function} partialState Next partial state or function to
			     *        produce next partial state to be merged with current state.
			     * @param {?function} callback Called after state is updated.
			     * @final
			     * @protected
			     */

			    Component.prototype.setState = function (partialState, callback) {
			      if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
			        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
			      }
			      this.updater.enqueueSetState(this, partialState, callback, 'setState');
			    };
			    /**
			     * Forces an update. This should only be invoked when it is known with
			     * certainty that we are **not** in a DOM transaction.
			     *
			     * You may want to call this when you know that some deeper aspect of the
			     * component's state has changed but `setState` was not called.
			     *
			     * This will not invoke `shouldComponentUpdate`, but it will invoke
			     * `componentWillUpdate` and `componentDidUpdate`.
			     *
			     * @param {?function} callback Called after update is complete.
			     * @final
			     * @protected
			     */

			    Component.prototype.forceUpdate = function (callback) {
			      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
			    };
			    /**
			     * Deprecated APIs. These APIs used to exist on classic React classes but since
			     * we would like to deprecate them, we're not going to move them over to this
			     * modern base class. Instead, we define a getter that warns if it's accessed.
			     */

			    {
			      var deprecatedAPIs = {
			        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
			        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
			      };
			      var defineDeprecationWarning = function (methodName, info) {
			        Object.defineProperty(Component.prototype, methodName, {
			          get: function () {
			            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
			            return undefined;
			          }
			        });
			      };
			      for (var fnName in deprecatedAPIs) {
			        if (deprecatedAPIs.hasOwnProperty(fnName)) {
			          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
			        }
			      }
			    }
			    function ComponentDummy() {}
			    ComponentDummy.prototype = Component.prototype;
			    /**
			     * Convenience component with default shallow equality check for sCU.
			     */

			    function PureComponent(props, context, updater) {
			      this.props = props;
			      this.context = context; // If a component has string refs, we will assign a different object later.

			      this.refs = emptyObject;
			      this.updater = updater || ReactNoopUpdateQueue;
			    }
			    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
			    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

			    assign(pureComponentPrototype, Component.prototype);
			    pureComponentPrototype.isPureReactComponent = true;

			    // an immutable object with a single mutable value
			    function createRef() {
			      var refObject = {
			        current: null
			      };
			      {
			        Object.seal(refObject);
			      }
			      return refObject;
			    }
			    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

			    function isArray(a) {
			      return isArrayImpl(a);
			    }

			    /*
			     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
			     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
			     *
			     * The functions in this module will throw an easier-to-understand,
			     * easier-to-debug exception with a clear errors message message explaining the
			     * problem. (Instead of a confusing exception thrown inside the implementation
			     * of the `value` object).
			     */
			    // $FlowFixMe only called in DEV, so void return is not possible.
			    function typeName(value) {
			      {
			        // toStringTag is needed for namespaced types like Temporal.Instant
			        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
			        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
			        return type;
			      }
			    } // $FlowFixMe only called in DEV, so void return is not possible.

			    function willCoercionThrow(value) {
			      {
			        try {
			          testStringCoercion(value);
			          return false;
			        } catch (e) {
			          return true;
			        }
			      }
			    }
			    function testStringCoercion(value) {
			      // If you ended up here by following an exception call stack, here's what's
			      // happened: you supplied an object or symbol value to React (as a prop, key,
			      // DOM attribute, CSS property, string ref, etc.) and when React tried to
			      // coerce it to a string using `'' + value`, an exception was thrown.
			      //
			      // The most common types that will cause this exception are `Symbol` instances
			      // and Temporal objects like `Temporal.Instant`. But any object that has a
			      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
			      // exception. (Library authors do this to prevent users from using built-in
			      // numeric operators like `+` or comparison operators like `>=` because custom
			      // methods are needed to perform accurate arithmetic or comparison.)
			      //
			      // To fix the problem, coerce this object or symbol value to a string before
			      // passing it to React. The most reliable way is usually `String(value)`.
			      //
			      // To find which value is throwing, check the browser or debugger console.
			      // Before this exception was thrown, there should be `console.error` output
			      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
			      // problem and how that type was used: key, atrribute, input value prop, etc.
			      // In most cases, this console output also shows the component and its
			      // ancestor components where the exception happened.
			      //
			      // eslint-disable-next-line react-internal/safe-string-coercion
			      return '' + value;
			    }
			    function checkKeyStringCoercion(value) {
			      {
			        if (willCoercionThrow(value)) {
			          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
			          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
			        }
			      }
			    }
			    function getWrappedName(outerType, innerType, wrapperName) {
			      var displayName = outerType.displayName;
			      if (displayName) {
			        return displayName;
			      }
			      var functionName = innerType.displayName || innerType.name || '';
			      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
			    } // Keep in sync with react-reconciler/getComponentNameFromFiber

			    function getContextName(type) {
			      return type.displayName || 'Context';
			    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

			    function getComponentNameFromType(type) {
			      if (type == null) {
			        // Host root, text node or just invalid type.
			        return null;
			      }
			      {
			        if (typeof type.tag === 'number') {
			          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
			        }
			      }
			      if (typeof type === 'function') {
			        return type.displayName || type.name || null;
			      }
			      if (typeof type === 'string') {
			        return type;
			      }
			      switch (type) {
			        case REACT_FRAGMENT_TYPE:
			          return 'Fragment';
			        case REACT_PORTAL_TYPE:
			          return 'Portal';
			        case REACT_PROFILER_TYPE:
			          return 'Profiler';
			        case REACT_STRICT_MODE_TYPE:
			          return 'StrictMode';
			        case REACT_SUSPENSE_TYPE:
			          return 'Suspense';
			        case REACT_SUSPENSE_LIST_TYPE:
			          return 'SuspenseList';
			      }
			      if (typeof type === 'object') {
			        switch (type.$$typeof) {
			          case REACT_CONTEXT_TYPE:
			            var context = type;
			            return getContextName(context) + '.Consumer';
			          case REACT_PROVIDER_TYPE:
			            var provider = type;
			            return getContextName(provider._context) + '.Provider';
			          case REACT_FORWARD_REF_TYPE:
			            return getWrappedName(type, type.render, 'ForwardRef');
			          case REACT_MEMO_TYPE:
			            var outerName = type.displayName || null;
			            if (outerName !== null) {
			              return outerName;
			            }
			            return getComponentNameFromType(type.type) || 'Memo';
			          case REACT_LAZY_TYPE:
			            {
			              var lazyComponent = type;
			              var payload = lazyComponent._payload;
			              var init = lazyComponent._init;
			              try {
			                return getComponentNameFromType(init(payload));
			              } catch (x) {
			                return null;
			              }
			            }

			          // eslint-disable-next-line no-fallthrough
			        }
			      }
			      return null;
			    }
			    var hasOwnProperty = Object.prototype.hasOwnProperty;
			    var RESERVED_PROPS = {
			      key: true,
			      ref: true,
			      __self: true,
			      __source: true
			    };
			    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
			    {
			      didWarnAboutStringRefs = {};
			    }
			    function hasValidRef(config) {
			      {
			        if (hasOwnProperty.call(config, 'ref')) {
			          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
			          if (getter && getter.isReactWarning) {
			            return false;
			          }
			        }
			      }
			      return config.ref !== undefined;
			    }
			    function hasValidKey(config) {
			      {
			        if (hasOwnProperty.call(config, 'key')) {
			          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
			          if (getter && getter.isReactWarning) {
			            return false;
			          }
			        }
			      }
			      return config.key !== undefined;
			    }
			    function defineKeyPropWarningGetter(props, displayName) {
			      var warnAboutAccessingKey = function () {
			        {
			          if (!specialPropKeyWarningShown) {
			            specialPropKeyWarningShown = true;
			            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
			          }
			        }
			      };
			      warnAboutAccessingKey.isReactWarning = true;
			      Object.defineProperty(props, 'key', {
			        get: warnAboutAccessingKey,
			        configurable: true
			      });
			    }
			    function defineRefPropWarningGetter(props, displayName) {
			      var warnAboutAccessingRef = function () {
			        {
			          if (!specialPropRefWarningShown) {
			            specialPropRefWarningShown = true;
			            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
			          }
			        }
			      };
			      warnAboutAccessingRef.isReactWarning = true;
			      Object.defineProperty(props, 'ref', {
			        get: warnAboutAccessingRef,
			        configurable: true
			      });
			    }
			    function warnIfStringRefCannotBeAutoConverted(config) {
			      {
			        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
			          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
			          if (!didWarnAboutStringRefs[componentName]) {
			            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
			            didWarnAboutStringRefs[componentName] = true;
			          }
			        }
			      }
			    }
			    /**
			     * Factory method to create a new React element. This no longer adheres to
			     * the class pattern, so do not use new to call it. Also, instanceof check
			     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
			     * if something is a React Element.
			     *
			     * @param {*} type
			     * @param {*} props
			     * @param {*} key
			     * @param {string|object} ref
			     * @param {*} owner
			     * @param {*} self A *temporary* helper to detect places where `this` is
			     * different from the `owner` when React.createElement is called, so that we
			     * can warn. We want to get rid of owner and replace string `ref`s with arrow
			     * functions, and as long as `this` and owner are the same, there will be no
			     * change in behavior.
			     * @param {*} source An annotation object (added by a transpiler or otherwise)
			     * indicating filename, line number, and/or other information.
			     * @internal
			     */

			    var ReactElement = function (type, key, ref, self, source, owner, props) {
			      var element = {
			        // This tag allows us to uniquely identify this as a React Element
			        $$typeof: REACT_ELEMENT_TYPE,
			        // Built-in properties that belong on the element
			        type: type,
			        key: key,
			        ref: ref,
			        props: props,
			        // Record the component responsible for creating this element.
			        _owner: owner
			      };
			      {
			        // The validation flag is currently mutative. We put it on
			        // an external backing store so that we can freeze the whole object.
			        // This can be replaced with a WeakMap once they are implemented in
			        // commonly used development environments.
			        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
			        // the validation flag non-enumerable (where possible, which should
			        // include every environment we run tests in), so the test framework
			        // ignores it.

			        Object.defineProperty(element._store, 'validated', {
			          configurable: false,
			          enumerable: false,
			          writable: true,
			          value: false
			        }); // self and source are DEV only properties.

			        Object.defineProperty(element, '_self', {
			          configurable: false,
			          enumerable: false,
			          writable: false,
			          value: self
			        }); // Two elements created in two different places should be considered
			        // equal for testing purposes and therefore we hide it from enumeration.

			        Object.defineProperty(element, '_source', {
			          configurable: false,
			          enumerable: false,
			          writable: false,
			          value: source
			        });
			        if (Object.freeze) {
			          Object.freeze(element.props);
			          Object.freeze(element);
			        }
			      }
			      return element;
			    };
			    /**
			     * Create and return a new ReactElement of the given type.
			     * See https://reactjs.org/docs/react-api.html#createelement
			     */

			    function createElement(type, config, children) {
			      var propName; // Reserved names are extracted

			      var props = {};
			      var key = null;
			      var ref = null;
			      var self = null;
			      var source = null;
			      if (config != null) {
			        if (hasValidRef(config)) {
			          ref = config.ref;
			          {
			            warnIfStringRefCannotBeAutoConverted(config);
			          }
			        }
			        if (hasValidKey(config)) {
			          {
			            checkKeyStringCoercion(config.key);
			          }
			          key = '' + config.key;
			        }
			        self = config.__self === undefined ? null : config.__self;
			        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

			        for (propName in config) {
			          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
			            props[propName] = config[propName];
			          }
			        }
			      } // Children can be more than one argument, and those are transferred onto
			      // the newly allocated props object.

			      var childrenLength = arguments.length - 2;
			      if (childrenLength === 1) {
			        props.children = children;
			      } else if (childrenLength > 1) {
			        var childArray = Array(childrenLength);
			        for (var i = 0; i < childrenLength; i++) {
			          childArray[i] = arguments[i + 2];
			        }
			        {
			          if (Object.freeze) {
			            Object.freeze(childArray);
			          }
			        }
			        props.children = childArray;
			      } // Resolve default props

			      if (type && type.defaultProps) {
			        var defaultProps = type.defaultProps;
			        for (propName in defaultProps) {
			          if (props[propName] === undefined) {
			            props[propName] = defaultProps[propName];
			          }
			        }
			      }
			      {
			        if (key || ref) {
			          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
			          if (key) {
			            defineKeyPropWarningGetter(props, displayName);
			          }
			          if (ref) {
			            defineRefPropWarningGetter(props, displayName);
			          }
			        }
			      }
			      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
			    }
			    function cloneAndReplaceKey(oldElement, newKey) {
			      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
			      return newElement;
			    }
			    /**
			     * Clone and return a new ReactElement using element as the starting point.
			     * See https://reactjs.org/docs/react-api.html#cloneelement
			     */

			    function cloneElement(element, config, children) {
			      if (element === null || element === undefined) {
			        throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
			      }
			      var propName; // Original props are copied

			      var props = assign({}, element.props); // Reserved names are extracted

			      var key = element.key;
			      var ref = element.ref; // Self is preserved since the owner is preserved.

			      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
			      // transpiler, and the original source is probably a better indicator of the
			      // true owner.

			      var source = element._source; // Owner will be preserved, unless ref is overridden

			      var owner = element._owner;
			      if (config != null) {
			        if (hasValidRef(config)) {
			          // Silently steal the ref from the parent.
			          ref = config.ref;
			          owner = ReactCurrentOwner.current;
			        }
			        if (hasValidKey(config)) {
			          {
			            checkKeyStringCoercion(config.key);
			          }
			          key = '' + config.key;
			        } // Remaining properties override existing props

			        var defaultProps;
			        if (element.type && element.type.defaultProps) {
			          defaultProps = element.type.defaultProps;
			        }
			        for (propName in config) {
			          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
			            if (config[propName] === undefined && defaultProps !== undefined) {
			              // Resolve default props
			              props[propName] = defaultProps[propName];
			            } else {
			              props[propName] = config[propName];
			            }
			          }
			        }
			      } // Children can be more than one argument, and those are transferred onto
			      // the newly allocated props object.

			      var childrenLength = arguments.length - 2;
			      if (childrenLength === 1) {
			        props.children = children;
			      } else if (childrenLength > 1) {
			        var childArray = Array(childrenLength);
			        for (var i = 0; i < childrenLength; i++) {
			          childArray[i] = arguments[i + 2];
			        }
			        props.children = childArray;
			      }
			      return ReactElement(element.type, key, ref, self, source, owner, props);
			    }
			    /**
			     * Verifies the object is a ReactElement.
			     * See https://reactjs.org/docs/react-api.html#isvalidelement
			     * @param {?object} object
			     * @return {boolean} True if `object` is a ReactElement.
			     * @final
			     */

			    function isValidElement(object) {
			      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
			    }
			    var SEPARATOR = '.';
			    var SUBSEPARATOR = ':';
			    /**
			     * Escape and wrap key so it is safe to use as a reactid
			     *
			     * @param {string} key to be escaped.
			     * @return {string} the escaped key.
			     */

			    function escape(key) {
			      var escapeRegex = /[=:]/g;
			      var escaperLookup = {
			        '=': '=0',
			        ':': '=2'
			      };
			      var escapedString = key.replace(escapeRegex, function (match) {
			        return escaperLookup[match];
			      });
			      return '$' + escapedString;
			    }
			    /**
			     * TODO: Test that a single child and an array with one item have the same key
			     * pattern.
			     */

			    var didWarnAboutMaps = false;
			    var userProvidedKeyEscapeRegex = /\/+/g;
			    function escapeUserProvidedKey(text) {
			      return text.replace(userProvidedKeyEscapeRegex, '$&/');
			    }
			    /**
			     * Generate a key string that identifies a element within a set.
			     *
			     * @param {*} element A element that could contain a manual key.
			     * @param {number} index Index that is used if a manual key is not provided.
			     * @return {string}
			     */

			    function getElementKey(element, index) {
			      // Do some typechecking here since we call this blindly. We want to ensure
			      // that we don't block potential future ES APIs.
			      if (typeof element === 'object' && element !== null && element.key != null) {
			        // Explicit key
			        {
			          checkKeyStringCoercion(element.key);
			        }
			        return escape('' + element.key);
			      } // Implicit key determined by the index in the set

			      return index.toString(36);
			    }
			    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
			      var type = typeof children;
			      if (type === 'undefined' || type === 'boolean') {
			        // All of the above are perceived as null.
			        children = null;
			      }
			      var invokeCallback = false;
			      if (children === null) {
			        invokeCallback = true;
			      } else {
			        switch (type) {
			          case 'string':
			          case 'number':
			            invokeCallback = true;
			            break;
			          case 'object':
			            switch (children.$$typeof) {
			              case REACT_ELEMENT_TYPE:
			              case REACT_PORTAL_TYPE:
			                invokeCallback = true;
			            }
			        }
			      }
			      if (invokeCallback) {
			        var _child = children;
			        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
			        // so that it's consistent if the number of children grows:

			        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
			        if (isArray(mappedChild)) {
			          var escapedChildKey = '';
			          if (childKey != null) {
			            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
			          }
			          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
			            return c;
			          });
			        } else if (mappedChild != null) {
			          if (isValidElement(mappedChild)) {
			            {
			              // The `if` statement here prevents auto-disabling of the safe
			              // coercion ESLint rule, so we must manually disable it below.
			              // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
			              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
			                checkKeyStringCoercion(mappedChild.key);
			              }
			            }
			            mappedChild = cloneAndReplaceKey(mappedChild,
			            // Keep both the (mapped) and old keys if they differ, just as
			            // traverseAllChildren used to do for objects as children
			            escapedPrefix + (
			            // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
			            mappedChild.key && (!_child || _child.key !== mappedChild.key) ?
			            // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
			            // eslint-disable-next-line react-internal/safe-string-coercion
			            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
			          }
			          array.push(mappedChild);
			        }
			        return 1;
			      }
			      var child;
			      var nextName;
			      var subtreeCount = 0; // Count of children found in the current subtree.

			      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
			      if (isArray(children)) {
			        for (var i = 0; i < children.length; i++) {
			          child = children[i];
			          nextName = nextNamePrefix + getElementKey(child, i);
			          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
			        }
			      } else {
			        var iteratorFn = getIteratorFn(children);
			        if (typeof iteratorFn === 'function') {
			          var iterableChildren = children;
			          {
			            // Warn about using Maps as children
			            if (iteratorFn === iterableChildren.entries) {
			              if (!didWarnAboutMaps) {
			                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
			              }
			              didWarnAboutMaps = true;
			            }
			          }
			          var iterator = iteratorFn.call(iterableChildren);
			          var step;
			          var ii = 0;
			          while (!(step = iterator.next()).done) {
			            child = step.value;
			            nextName = nextNamePrefix + getElementKey(child, ii++);
			            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
			          }
			        } else if (type === 'object') {
			          // eslint-disable-next-line react-internal/safe-string-coercion
			          var childrenString = String(children);
			          throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
			        }
			      }
			      return subtreeCount;
			    }

			    /**
			     * Maps children that are typically specified as `props.children`.
			     *
			     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
			     *
			     * The provided mapFunction(child, index) will be called for each
			     * leaf child.
			     *
			     * @param {?*} children Children tree container.
			     * @param {function(*, int)} func The map function.
			     * @param {*} context Context for mapFunction.
			     * @return {object} Object containing the ordered map of results.
			     */
			    function mapChildren(children, func, context) {
			      if (children == null) {
			        return children;
			      }
			      var result = [];
			      var count = 0;
			      mapIntoArray(children, result, '', '', function (child) {
			        return func.call(context, child, count++);
			      });
			      return result;
			    }
			    /**
			     * Count the number of children that are typically specified as
			     * `props.children`.
			     *
			     * See https://reactjs.org/docs/react-api.html#reactchildrencount
			     *
			     * @param {?*} children Children tree container.
			     * @return {number} The number of children.
			     */

			    function countChildren(children) {
			      var n = 0;
			      mapChildren(children, function () {
			        n++; // Don't return anything
			      });
			      return n;
			    }

			    /**
			     * Iterates through children that are typically specified as `props.children`.
			     *
			     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
			     *
			     * The provided forEachFunc(child, index) will be called for each
			     * leaf child.
			     *
			     * @param {?*} children Children tree container.
			     * @param {function(*, int)} forEachFunc
			     * @param {*} forEachContext Context for forEachContext.
			     */
			    function forEachChildren(children, forEachFunc, forEachContext) {
			      mapChildren(children, function () {
			        forEachFunc.apply(this, arguments); // Don't return anything.
			      }, forEachContext);
			    }
			    /**
			     * Flatten a children object (typically specified as `props.children`) and
			     * return an array with appropriately re-keyed children.
			     *
			     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
			     */

			    function toArray(children) {
			      return mapChildren(children, function (child) {
			        return child;
			      }) || [];
			    }
			    /**
			     * Returns the first child in a collection of children and verifies that there
			     * is only one child in the collection.
			     *
			     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
			     *
			     * The current implementation of this function assumes that a single child gets
			     * passed without a wrapper, but the purpose of this helper function is to
			     * abstract away the particular structure of children.
			     *
			     * @param {?object} children Child collection structure.
			     * @return {ReactElement} The first and only `ReactElement` contained in the
			     * structure.
			     */

			    function onlyChild(children) {
			      if (!isValidElement(children)) {
			        throw new Error('React.Children.only expected to receive a single React element child.');
			      }
			      return children;
			    }
			    function createContext(defaultValue) {
			      // TODO: Second argument used to be an optional `calculateChangedBits`
			      // function. Warn to reserve for future use?
			      var context = {
			        $$typeof: REACT_CONTEXT_TYPE,
			        // As a workaround to support multiple concurrent renderers, we categorize
			        // some renderers as primary and others as secondary. We only expect
			        // there to be two concurrent renderers at most: React Native (primary) and
			        // Fabric (secondary); React DOM (primary) and React ART (secondary).
			        // Secondary renderers store their context values on separate fields.
			        _currentValue: defaultValue,
			        _currentValue2: defaultValue,
			        // Used to track how many concurrent renderers this context currently
			        // supports within in a single renderer. Such as parallel server rendering.
			        _threadCount: 0,
			        // These are circular
			        Provider: null,
			        Consumer: null,
			        // Add these to use same hidden class in VM as ServerContext
			        _defaultValue: null,
			        _globalName: null
			      };
			      context.Provider = {
			        $$typeof: REACT_PROVIDER_TYPE,
			        _context: context
			      };
			      var hasWarnedAboutUsingNestedContextConsumers = false;
			      var hasWarnedAboutUsingConsumerProvider = false;
			      var hasWarnedAboutDisplayNameOnConsumer = false;
			      {
			        // A separate object, but proxies back to the original context object for
			        // backwards compatibility. It has a different $$typeof, so we can properly
			        // warn for the incorrect usage of Context as a Consumer.
			        var Consumer = {
			          $$typeof: REACT_CONTEXT_TYPE,
			          _context: context
			        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

			        Object.defineProperties(Consumer, {
			          Provider: {
			            get: function () {
			              if (!hasWarnedAboutUsingConsumerProvider) {
			                hasWarnedAboutUsingConsumerProvider = true;
			                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
			              }
			              return context.Provider;
			            },
			            set: function (_Provider) {
			              context.Provider = _Provider;
			            }
			          },
			          _currentValue: {
			            get: function () {
			              return context._currentValue;
			            },
			            set: function (_currentValue) {
			              context._currentValue = _currentValue;
			            }
			          },
			          _currentValue2: {
			            get: function () {
			              return context._currentValue2;
			            },
			            set: function (_currentValue2) {
			              context._currentValue2 = _currentValue2;
			            }
			          },
			          _threadCount: {
			            get: function () {
			              return context._threadCount;
			            },
			            set: function (_threadCount) {
			              context._threadCount = _threadCount;
			            }
			          },
			          Consumer: {
			            get: function () {
			              if (!hasWarnedAboutUsingNestedContextConsumers) {
			                hasWarnedAboutUsingNestedContextConsumers = true;
			                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
			              }
			              return context.Consumer;
			            }
			          },
			          displayName: {
			            get: function () {
			              return context.displayName;
			            },
			            set: function (displayName) {
			              if (!hasWarnedAboutDisplayNameOnConsumer) {
			                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
			                hasWarnedAboutDisplayNameOnConsumer = true;
			              }
			            }
			          }
			        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

			        context.Consumer = Consumer;
			      }
			      {
			        context._currentRenderer = null;
			        context._currentRenderer2 = null;
			      }
			      return context;
			    }
			    var Uninitialized = -1;
			    var Pending = 0;
			    var Resolved = 1;
			    var Rejected = 2;
			    function lazyInitializer(payload) {
			      if (payload._status === Uninitialized) {
			        var ctor = payload._result;
			        var thenable = ctor(); // Transition to the next state.
			        // This might throw either because it's missing or throws. If so, we treat it
			        // as still uninitialized and try again next time. Which is the same as what
			        // happens if the ctor or any wrappers processing the ctor throws. This might
			        // end up fixing it if the resolution was a concurrency bug.

			        thenable.then(function (moduleObject) {
			          if (payload._status === Pending || payload._status === Uninitialized) {
			            // Transition to the next state.
			            var resolved = payload;
			            resolved._status = Resolved;
			            resolved._result = moduleObject;
			          }
			        }, function (error) {
			          if (payload._status === Pending || payload._status === Uninitialized) {
			            // Transition to the next state.
			            var rejected = payload;
			            rejected._status = Rejected;
			            rejected._result = error;
			          }
			        });
			        if (payload._status === Uninitialized) {
			          // In case, we're still uninitialized, then we're waiting for the thenable
			          // to resolve. Set it as pending in the meantime.
			          var pending = payload;
			          pending._status = Pending;
			          pending._result = thenable;
			        }
			      }
			      if (payload._status === Resolved) {
			        var moduleObject = payload._result;
			        {
			          if (moduleObject === undefined) {
			            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
			            // Break up imports to avoid accidentally parsing them as dependencies.
			            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
			          }
			        }
			        {
			          if (!('default' in moduleObject)) {
			            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
			            // Break up imports to avoid accidentally parsing them as dependencies.
			            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
			          }
			        }
			        return moduleObject.default;
			      } else {
			        throw payload._result;
			      }
			    }
			    function lazy(ctor) {
			      var payload = {
			        // We use these fields to store the result.
			        _status: Uninitialized,
			        _result: ctor
			      };
			      var lazyType = {
			        $$typeof: REACT_LAZY_TYPE,
			        _payload: payload,
			        _init: lazyInitializer
			      };
			      {
			        // In production, this would just set it on the object.
			        var defaultProps;
			        var propTypes; // $FlowFixMe

			        Object.defineProperties(lazyType, {
			          defaultProps: {
			            configurable: true,
			            get: function () {
			              return defaultProps;
			            },
			            set: function (newDefaultProps) {
			              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
			              defaultProps = newDefaultProps; // Match production behavior more closely:
			              // $FlowFixMe

			              Object.defineProperty(lazyType, 'defaultProps', {
			                enumerable: true
			              });
			            }
			          },
			          propTypes: {
			            configurable: true,
			            get: function () {
			              return propTypes;
			            },
			            set: function (newPropTypes) {
			              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
			              propTypes = newPropTypes; // Match production behavior more closely:
			              // $FlowFixMe

			              Object.defineProperty(lazyType, 'propTypes', {
			                enumerable: true
			              });
			            }
			          }
			        });
			      }
			      return lazyType;
			    }
			    function forwardRef(render) {
			      {
			        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
			          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
			        } else if (typeof render !== 'function') {
			          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
			        } else {
			          if (render.length !== 0 && render.length !== 2) {
			            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
			          }
			        }
			        if (render != null) {
			          if (render.defaultProps != null || render.propTypes != null) {
			            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
			          }
			        }
			      }
			      var elementType = {
			        $$typeof: REACT_FORWARD_REF_TYPE,
			        render: render
			      };
			      {
			        var ownName;
			        Object.defineProperty(elementType, 'displayName', {
			          enumerable: false,
			          configurable: true,
			          get: function () {
			            return ownName;
			          },
			          set: function (name) {
			            ownName = name; // The inner component shouldn't inherit this display name in most cases,
			            // because the component may be used elsewhere.
			            // But it's nice for anonymous functions to inherit the name,
			            // so that our component-stack generation logic will display their frames.
			            // An anonymous function generally suggests a pattern like:
			            //   React.forwardRef((props, ref) => {...});
			            // This kind of inner function is not used elsewhere so the side effect is okay.

			            if (!render.name && !render.displayName) {
			              render.displayName = name;
			            }
			          }
			        });
			      }
			      return elementType;
			    }
			    var REACT_MODULE_REFERENCE;
			    {
			      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
			    }
			    function isValidElementType(type) {
			      if (typeof type === 'string' || typeof type === 'function') {
			        return true;
			      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

			      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
			        return true;
			      }
			      if (typeof type === 'object' && type !== null) {
			        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
			        // This needs to include all possible module reference object
			        // types supported by any Flight configuration anywhere since
			        // we don't know which Flight build this will end up being used
			        // with.
			        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
			          return true;
			        }
			      }
			      return false;
			    }
			    function memo(type, compare) {
			      {
			        if (!isValidElementType(type)) {
			          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
			        }
			      }
			      var elementType = {
			        $$typeof: REACT_MEMO_TYPE,
			        type: type,
			        compare: compare === undefined ? null : compare
			      };
			      {
			        var ownName;
			        Object.defineProperty(elementType, 'displayName', {
			          enumerable: false,
			          configurable: true,
			          get: function () {
			            return ownName;
			          },
			          set: function (name) {
			            ownName = name; // The inner component shouldn't inherit this display name in most cases,
			            // because the component may be used elsewhere.
			            // But it's nice for anonymous functions to inherit the name,
			            // so that our component-stack generation logic will display their frames.
			            // An anonymous function generally suggests a pattern like:
			            //   React.memo((props) => {...});
			            // This kind of inner function is not used elsewhere so the side effect is okay.

			            if (!type.name && !type.displayName) {
			              type.displayName = name;
			            }
			          }
			        });
			      }
			      return elementType;
			    }
			    function resolveDispatcher() {
			      var dispatcher = ReactCurrentDispatcher.current;
			      {
			        if (dispatcher === null) {
			          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
			        }
			      } // Will result in a null access error if accessed outside render phase. We
			      // intentionally don't throw our own error because this is in a hot path.
			      // Also helps ensure this is inlined.

			      return dispatcher;
			    }
			    function useContext(Context) {
			      var dispatcher = resolveDispatcher();
			      {
			        // TODO: add a more generic warning for invalid values.
			        if (Context._context !== undefined) {
			          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
			          // and nobody should be using this in existing code.

			          if (realContext.Consumer === Context) {
			            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
			          } else if (realContext.Provider === Context) {
			            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
			          }
			        }
			      }
			      return dispatcher.useContext(Context);
			    }
			    function useState(initialState) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useState(initialState);
			    }
			    function useReducer(reducer, initialArg, init) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useReducer(reducer, initialArg, init);
			    }
			    function useRef(initialValue) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useRef(initialValue);
			    }
			    function useEffect(create, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useEffect(create, deps);
			    }
			    function useInsertionEffect(create, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useInsertionEffect(create, deps);
			    }
			    function useLayoutEffect(create, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useLayoutEffect(create, deps);
			    }
			    function useCallback(callback, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useCallback(callback, deps);
			    }
			    function useMemo(create, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useMemo(create, deps);
			    }
			    function useImperativeHandle(ref, create, deps) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useImperativeHandle(ref, create, deps);
			    }
			    function useDebugValue(value, formatterFn) {
			      {
			        var dispatcher = resolveDispatcher();
			        return dispatcher.useDebugValue(value, formatterFn);
			      }
			    }
			    function useTransition() {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useTransition();
			    }
			    function useDeferredValue(value) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useDeferredValue(value);
			    }
			    function useId() {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useId();
			    }
			    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
			      var dispatcher = resolveDispatcher();
			      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
			    }

			    // Helpers to patch console.logs to avoid logging during side-effect free
			    // replaying on render function. This currently only patches the object
			    // lazily which won't cover if the log function was extracted eagerly.
			    // We could also eagerly patch the method.
			    var disabledDepth = 0;
			    var prevLog;
			    var prevInfo;
			    var prevWarn;
			    var prevError;
			    var prevGroup;
			    var prevGroupCollapsed;
			    var prevGroupEnd;
			    function disabledLog() {}
			    disabledLog.__reactDisabledLog = true;
			    function disableLogs() {
			      {
			        if (disabledDepth === 0) {
			          /* eslint-disable react-internal/no-production-logging */
			          prevLog = console.log;
			          prevInfo = console.info;
			          prevWarn = console.warn;
			          prevError = console.error;
			          prevGroup = console.group;
			          prevGroupCollapsed = console.groupCollapsed;
			          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

			          var props = {
			            configurable: true,
			            enumerable: true,
			            value: disabledLog,
			            writable: true
			          }; // $FlowFixMe Flow thinks console is immutable.

			          Object.defineProperties(console, {
			            info: props,
			            log: props,
			            warn: props,
			            error: props,
			            group: props,
			            groupCollapsed: props,
			            groupEnd: props
			          });
			          /* eslint-enable react-internal/no-production-logging */
			        }
			        disabledDepth++;
			      }
			    }
			    function reenableLogs() {
			      {
			        disabledDepth--;
			        if (disabledDepth === 0) {
			          /* eslint-disable react-internal/no-production-logging */
			          var props = {
			            configurable: true,
			            enumerable: true,
			            writable: true
			          }; // $FlowFixMe Flow thinks console is immutable.

			          Object.defineProperties(console, {
			            log: assign({}, props, {
			              value: prevLog
			            }),
			            info: assign({}, props, {
			              value: prevInfo
			            }),
			            warn: assign({}, props, {
			              value: prevWarn
			            }),
			            error: assign({}, props, {
			              value: prevError
			            }),
			            group: assign({}, props, {
			              value: prevGroup
			            }),
			            groupCollapsed: assign({}, props, {
			              value: prevGroupCollapsed
			            }),
			            groupEnd: assign({}, props, {
			              value: prevGroupEnd
			            })
			          });
			          /* eslint-enable react-internal/no-production-logging */
			        }
			        if (disabledDepth < 0) {
			          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
			        }
			      }
			    }
			    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
			    var prefix;
			    function describeBuiltInComponentFrame(name, source, ownerFn) {
			      {
			        if (prefix === undefined) {
			          // Extract the VM specific prefix used by each line.
			          try {
			            throw Error();
			          } catch (x) {
			            var match = x.stack.trim().match(/\n( *(at )?)/);
			            prefix = match && match[1] || '';
			          }
			        } // We use the prefix to ensure our stacks line up with native stack frames.

			        return '\n' + prefix + name;
			      }
			    }
			    var reentry = false;
			    var componentFrameCache;
			    {
			      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
			      componentFrameCache = new PossiblyWeakMap();
			    }
			    function describeNativeComponentFrame(fn, construct) {
			      // If something asked for a stack inside a fake render, it should get ignored.
			      if (!fn || reentry) {
			        return '';
			      }
			      {
			        var frame = componentFrameCache.get(fn);
			        if (frame !== undefined) {
			          return frame;
			        }
			      }
			      var control;
			      reentry = true;
			      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

			      Error.prepareStackTrace = undefined;
			      var previousDispatcher;
			      {
			        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
			        // for warnings.

			        ReactCurrentDispatcher$1.current = null;
			        disableLogs();
			      }
			      try {
			        // This should throw.
			        if (construct) {
			          // Something should be setting the props in the constructor.
			          var Fake = function () {
			            throw Error();
			          }; // $FlowFixMe

			          Object.defineProperty(Fake.prototype, 'props', {
			            set: function () {
			              // We use a throwing setter instead of frozen or non-writable props
			              // because that won't throw in a non-strict mode function.
			              throw Error();
			            }
			          });
			          if (typeof Reflect === 'object' && Reflect.construct) {
			            // We construct a different control for this case to include any extra
			            // frames added by the construct call.
			            try {
			              Reflect.construct(Fake, []);
			            } catch (x) {
			              control = x;
			            }
			            Reflect.construct(fn, [], Fake);
			          } else {
			            try {
			              Fake.call();
			            } catch (x) {
			              control = x;
			            }
			            fn.call(Fake.prototype);
			          }
			        } else {
			          try {
			            throw Error();
			          } catch (x) {
			            control = x;
			          }
			          fn();
			        }
			      } catch (sample) {
			        // This is inlined manually because closure doesn't do it for us.
			        if (sample && control && typeof sample.stack === 'string') {
			          // This extracts the first frame from the sample that isn't also in the control.
			          // Skipping one frame that we assume is the frame that calls the two.
			          var sampleLines = sample.stack.split('\n');
			          var controlLines = control.stack.split('\n');
			          var s = sampleLines.length - 1;
			          var c = controlLines.length - 1;
			          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
			            // We expect at least one stack frame to be shared.
			            // Typically this will be the root most one. However, stack frames may be
			            // cut off due to maximum stack limits. In this case, one maybe cut off
			            // earlier than the other. We assume that the sample is longer or the same
			            // and there for cut off earlier. So we should find the root most frame in
			            // the sample somewhere in the control.
			            c--;
			          }
			          for (; s >= 1 && c >= 0; s--, c--) {
			            // Next we find the first one that isn't the same which should be the
			            // frame that called our sample function and the control.
			            if (sampleLines[s] !== controlLines[c]) {
			              // In V8, the first line is describing the message but other VMs don't.
			              // If we're about to return the first line, and the control is also on the same
			              // line, that's a pretty good indicator that our sample threw at same line as
			              // the control. I.e. before we entered the sample frame. So we ignore this result.
			              // This can happen if you passed a class to function component, or non-function.
			              if (s !== 1 || c !== 1) {
			                do {
			                  s--;
			                  c--; // We may still have similar intermediate frames from the construct call.
			                  // The next one that isn't the same should be our match though.

			                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
			                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
			                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
			                    // but we have a user-provided "displayName"
			                    // splice it in to make the stack more readable.

			                    if (fn.displayName && _frame.includes('<anonymous>')) {
			                      _frame = _frame.replace('<anonymous>', fn.displayName);
			                    }
			                    {
			                      if (typeof fn === 'function') {
			                        componentFrameCache.set(fn, _frame);
			                      }
			                    } // Return the line we found.

			                    return _frame;
			                  }
			                } while (s >= 1 && c >= 0);
			              }
			              break;
			            }
			          }
			        }
			      } finally {
			        reentry = false;
			        {
			          ReactCurrentDispatcher$1.current = previousDispatcher;
			          reenableLogs();
			        }
			        Error.prepareStackTrace = previousPrepareStackTrace;
			      } // Fallback to just using the name if we couldn't make it throw.

			      var name = fn ? fn.displayName || fn.name : '';
			      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
			      {
			        if (typeof fn === 'function') {
			          componentFrameCache.set(fn, syntheticFrame);
			        }
			      }
			      return syntheticFrame;
			    }
			    function describeFunctionComponentFrame(fn, source, ownerFn) {
			      {
			        return describeNativeComponentFrame(fn, false);
			      }
			    }
			    function shouldConstruct(Component) {
			      var prototype = Component.prototype;
			      return !!(prototype && prototype.isReactComponent);
			    }
			    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
			      if (type == null) {
			        return '';
			      }
			      if (typeof type === 'function') {
			        {
			          return describeNativeComponentFrame(type, shouldConstruct(type));
			        }
			      }
			      if (typeof type === 'string') {
			        return describeBuiltInComponentFrame(type);
			      }
			      switch (type) {
			        case REACT_SUSPENSE_TYPE:
			          return describeBuiltInComponentFrame('Suspense');
			        case REACT_SUSPENSE_LIST_TYPE:
			          return describeBuiltInComponentFrame('SuspenseList');
			      }
			      if (typeof type === 'object') {
			        switch (type.$$typeof) {
			          case REACT_FORWARD_REF_TYPE:
			            return describeFunctionComponentFrame(type.render);
			          case REACT_MEMO_TYPE:
			            // Memo may contain any component type so we recursively resolve it.
			            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
			          case REACT_LAZY_TYPE:
			            {
			              var lazyComponent = type;
			              var payload = lazyComponent._payload;
			              var init = lazyComponent._init;
			              try {
			                // Lazy may contain any component type so we recursively resolve it.
			                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
			              } catch (x) {}
			            }
			        }
			      }
			      return '';
			    }
			    var loggedTypeFailures = {};
			    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
			    function setCurrentlyValidatingElement(element) {
			      {
			        if (element) {
			          var owner = element._owner;
			          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
			          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
			        } else {
			          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
			        }
			      }
			    }
			    function checkPropTypes(typeSpecs, values, location, componentName, element) {
			      {
			        // $FlowFixMe This is okay but Flow doesn't know it.
			        var has = Function.call.bind(hasOwnProperty);
			        for (var typeSpecName in typeSpecs) {
			          if (has(typeSpecs, typeSpecName)) {
			            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
			            // fail the render phase where it didn't fail before. So we log it.
			            // After these have been cleaned up, we'll let them throw.

			            try {
			              // This is intentionally an invariant that gets caught. It's the same
			              // behavior as without this statement except with a better message.
			              if (typeof typeSpecs[typeSpecName] !== 'function') {
			                // eslint-disable-next-line react-internal/prod-error-codes
			                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
			                err.name = 'Invariant Violation';
			                throw err;
			              }
			              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
			            } catch (ex) {
			              error$1 = ex;
			            }
			            if (error$1 && !(error$1 instanceof Error)) {
			              setCurrentlyValidatingElement(element);
			              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
			              setCurrentlyValidatingElement(null);
			            }
			            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
			              // Only monitor this failure once because there tends to be a lot of the
			              // same error.
			              loggedTypeFailures[error$1.message] = true;
			              setCurrentlyValidatingElement(element);
			              error('Failed %s type: %s', location, error$1.message);
			              setCurrentlyValidatingElement(null);
			            }
			          }
			        }
			      }
			    }
			    function setCurrentlyValidatingElement$1(element) {
			      {
			        if (element) {
			          var owner = element._owner;
			          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
			          setExtraStackFrame(stack);
			        } else {
			          setExtraStackFrame(null);
			        }
			      }
			    }
			    var propTypesMisspellWarningShown;
			    {
			      propTypesMisspellWarningShown = false;
			    }
			    function getDeclarationErrorAddendum() {
			      if (ReactCurrentOwner.current) {
			        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
			        if (name) {
			          return '\n\nCheck the render method of `' + name + '`.';
			        }
			      }
			      return '';
			    }
			    function getSourceInfoErrorAddendum(source) {
			      if (source !== undefined) {
			        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
			        var lineNumber = source.lineNumber;
			        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
			      }
			      return '';
			    }
			    function getSourceInfoErrorAddendumForProps(elementProps) {
			      if (elementProps !== null && elementProps !== undefined) {
			        return getSourceInfoErrorAddendum(elementProps.__source);
			      }
			      return '';
			    }
			    /**
			     * Warn if there's no key explicitly set on dynamic arrays of children or
			     * object keys are not valid. This allows us to keep track of children between
			     * updates.
			     */

			    var ownerHasKeyUseWarning = {};
			    function getCurrentComponentErrorInfo(parentType) {
			      var info = getDeclarationErrorAddendum();
			      if (!info) {
			        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
			        if (parentName) {
			          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
			        }
			      }
			      return info;
			    }
			    /**
			     * Warn if the element doesn't have an explicit key assigned to it.
			     * This element is in an array. The array could grow and shrink or be
			     * reordered. All children that haven't already been validated are required to
			     * have a "key" property assigned to it. Error statuses are cached so a warning
			     * will only be shown once.
			     *
			     * @internal
			     * @param {ReactElement} element Element that requires a key.
			     * @param {*} parentType element's parent's type.
			     */

			    function validateExplicitKey(element, parentType) {
			      if (!element._store || element._store.validated || element.key != null) {
			        return;
			      }
			      element._store.validated = true;
			      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
			      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
			        return;
			      }
			      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
			      // property, it may be the creator of the child that's responsible for
			      // assigning it a key.

			      var childOwner = '';
			      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
			        // Give the component that originally created this child.
			        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
			      }
			      {
			        setCurrentlyValidatingElement$1(element);
			        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
			        setCurrentlyValidatingElement$1(null);
			      }
			    }
			    /**
			     * Ensure that every element either is passed in a static location, in an
			     * array with an explicit keys property defined, or in an object literal
			     * with valid key property.
			     *
			     * @internal
			     * @param {ReactNode} node Statically passed child of any type.
			     * @param {*} parentType node's parent's type.
			     */

			    function validateChildKeys(node, parentType) {
			      if (typeof node !== 'object') {
			        return;
			      }
			      if (isArray(node)) {
			        for (var i = 0; i < node.length; i++) {
			          var child = node[i];
			          if (isValidElement(child)) {
			            validateExplicitKey(child, parentType);
			          }
			        }
			      } else if (isValidElement(node)) {
			        // This element was passed in a valid location.
			        if (node._store) {
			          node._store.validated = true;
			        }
			      } else if (node) {
			        var iteratorFn = getIteratorFn(node);
			        if (typeof iteratorFn === 'function') {
			          // Entry iterators used to provide implicit keys,
			          // but now we print a separate warning for them later.
			          if (iteratorFn !== node.entries) {
			            var iterator = iteratorFn.call(node);
			            var step;
			            while (!(step = iterator.next()).done) {
			              if (isValidElement(step.value)) {
			                validateExplicitKey(step.value, parentType);
			              }
			            }
			          }
			        }
			      }
			    }
			    /**
			     * Given an element, validate that its props follow the propTypes definition,
			     * provided by the type.
			     *
			     * @param {ReactElement} element
			     */

			    function validatePropTypes(element) {
			      {
			        var type = element.type;
			        if (type === null || type === undefined || typeof type === 'string') {
			          return;
			        }
			        var propTypes;
			        if (typeof type === 'function') {
			          propTypes = type.propTypes;
			        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
			        // Note: Memo only checks outer props here.
			        // Inner props are checked in the reconciler.
			        type.$$typeof === REACT_MEMO_TYPE)) {
			          propTypes = type.propTypes;
			        } else {
			          return;
			        }
			        if (propTypes) {
			          // Intentionally inside to avoid triggering lazy initializers:
			          var name = getComponentNameFromType(type);
			          checkPropTypes(propTypes, element.props, 'prop', name, element);
			        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
			          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

			          var _name = getComponentNameFromType(type);
			          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
			        }
			        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
			          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
			        }
			      }
			    }
			    /**
			     * Given a fragment, validate that it can only be provided with fragment props
			     * @param {ReactElement} fragment
			     */

			    function validateFragmentProps(fragment) {
			      {
			        var keys = Object.keys(fragment.props);
			        for (var i = 0; i < keys.length; i++) {
			          var key = keys[i];
			          if (key !== 'children' && key !== 'key') {
			            setCurrentlyValidatingElement$1(fragment);
			            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
			            setCurrentlyValidatingElement$1(null);
			            break;
			          }
			        }
			        if (fragment.ref !== null) {
			          setCurrentlyValidatingElement$1(fragment);
			          error('Invalid attribute `ref` supplied to `React.Fragment`.');
			          setCurrentlyValidatingElement$1(null);
			        }
			      }
			    }
			    function createElementWithValidation(type, props, children) {
			      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
			      // succeed and there will likely be errors in render.

			      if (!validType) {
			        var info = '';
			        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
			          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
			        }
			        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
			        if (sourceInfo) {
			          info += sourceInfo;
			        } else {
			          info += getDeclarationErrorAddendum();
			        }
			        var typeString;
			        if (type === null) {
			          typeString = 'null';
			        } else if (isArray(type)) {
			          typeString = 'array';
			        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
			          typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
			          info = ' Did you accidentally export a JSX literal instead of a component?';
			        } else {
			          typeString = typeof type;
			        }
			        {
			          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
			        }
			      }
			      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
			      // TODO: Drop this when these are no longer allowed as the type argument.

			      if (element == null) {
			        return element;
			      } // Skip key warning if the type isn't valid since our key validation logic
			      // doesn't expect a non-string/function type and can throw confusing errors.
			      // We don't want exception behavior to differ between dev and prod.
			      // (Rendering will throw with a helpful message and as soon as the type is
			      // fixed, the key warnings will appear.)

			      if (validType) {
			        for (var i = 2; i < arguments.length; i++) {
			          validateChildKeys(arguments[i], type);
			        }
			      }
			      if (type === REACT_FRAGMENT_TYPE) {
			        validateFragmentProps(element);
			      } else {
			        validatePropTypes(element);
			      }
			      return element;
			    }
			    var didWarnAboutDeprecatedCreateFactory = false;
			    function createFactoryWithValidation(type) {
			      var validatedFactory = createElementWithValidation.bind(null, type);
			      validatedFactory.type = type;
			      {
			        if (!didWarnAboutDeprecatedCreateFactory) {
			          didWarnAboutDeprecatedCreateFactory = true;
			          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
			        } // Legacy hook: remove it

			        Object.defineProperty(validatedFactory, 'type', {
			          enumerable: false,
			          get: function () {
			            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
			            Object.defineProperty(this, 'type', {
			              value: type
			            });
			            return type;
			          }
			        });
			      }
			      return validatedFactory;
			    }
			    function cloneElementWithValidation(element, props, children) {
			      var newElement = cloneElement.apply(this, arguments);
			      for (var i = 2; i < arguments.length; i++) {
			        validateChildKeys(arguments[i], newElement.type);
			      }
			      validatePropTypes(newElement);
			      return newElement;
			    }
			    function startTransition(scope, options) {
			      var prevTransition = ReactCurrentBatchConfig.transition;
			      ReactCurrentBatchConfig.transition = {};
			      var currentTransition = ReactCurrentBatchConfig.transition;
			      {
			        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
			      }
			      try {
			        scope();
			      } finally {
			        ReactCurrentBatchConfig.transition = prevTransition;
			        {
			          if (prevTransition === null && currentTransition._updatedFibers) {
			            var updatedFibersCount = currentTransition._updatedFibers.size;
			            if (updatedFibersCount > 10) {
			              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
			            }
			            currentTransition._updatedFibers.clear();
			          }
			        }
			      }
			    }
			    var didWarnAboutMessageChannel = false;
			    var enqueueTaskImpl = null;
			    function enqueueTask(task) {
			      if (enqueueTaskImpl === null) {
			        try {
			          // read require off the module object to get around the bundlers.
			          // we don't want them to detect a require and bundle a Node polyfill.
			          var requireString = ('require' + Math.random()).slice(0, 7);
			          var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
			          // version of setImmediate, bypassing fake timers if any.

			          enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
			        } catch (_err) {
			          // we're in a browser
			          // we can't use regular timers because they may still be faked
			          // so we try MessageChannel+postMessage instead
			          enqueueTaskImpl = function (callback) {
			            {
			              if (didWarnAboutMessageChannel === false) {
			                didWarnAboutMessageChannel = true;
			                if (typeof MessageChannel === 'undefined') {
			                  error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
			                }
			              }
			            }
			            var channel = new MessageChannel();
			            channel.port1.onmessage = callback;
			            channel.port2.postMessage(undefined);
			          };
			        }
			      }
			      return enqueueTaskImpl(task);
			    }
			    var actScopeDepth = 0;
			    var didWarnNoAwaitAct = false;
			    function act(callback) {
			      {
			        // `act` calls can be nested, so we track the depth. This represents the
			        // number of `act` scopes on the stack.
			        var prevActScopeDepth = actScopeDepth;
			        actScopeDepth++;
			        if (ReactCurrentActQueue.current === null) {
			          // This is the outermost `act` scope. Initialize the queue. The reconciler
			          // will detect the queue and use it instead of Scheduler.
			          ReactCurrentActQueue.current = [];
			        }
			        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
			        var result;
			        try {
			          // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
			          // set to `true` while the given callback is executed, not for updates
			          // triggered during an async event, because this is how the legacy
			          // implementation of `act` behaved.
			          ReactCurrentActQueue.isBatchingLegacy = true;
			          result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
			          // which flushed updates immediately after the scope function exits, even
			          // if it's an async function.

			          if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
			            var queue = ReactCurrentActQueue.current;
			            if (queue !== null) {
			              ReactCurrentActQueue.didScheduleLegacyUpdate = false;
			              flushActQueue(queue);
			            }
			          }
			        } catch (error) {
			          popActScope(prevActScopeDepth);
			          throw error;
			        } finally {
			          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
			        }
			        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
			          var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
			          // for it to resolve before exiting the current scope.

			          var wasAwaited = false;
			          var thenable = {
			            then: function (resolve, reject) {
			              wasAwaited = true;
			              thenableResult.then(function (returnValue) {
			                popActScope(prevActScopeDepth);
			                if (actScopeDepth === 0) {
			                  // We've exited the outermost act scope. Recursively flush the
			                  // queue until there's no remaining work.
			                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			                } else {
			                  resolve(returnValue);
			                }
			              }, function (error) {
			                // The callback threw an error.
			                popActScope(prevActScopeDepth);
			                reject(error);
			              });
			            }
			          };
			          {
			            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
			              // eslint-disable-next-line no-undef
			              Promise.resolve().then(function () {}).then(function () {
			                if (!wasAwaited) {
			                  didWarnNoAwaitAct = true;
			                  error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
			                }
			              });
			            }
			          }
			          return thenable;
			        } else {
			          var returnValue = result; // The callback is not an async function. Exit the current scope
			          // immediately, without awaiting.

			          popActScope(prevActScopeDepth);
			          if (actScopeDepth === 0) {
			            // Exiting the outermost act scope. Flush the queue.
			            var _queue = ReactCurrentActQueue.current;
			            if (_queue !== null) {
			              flushActQueue(_queue);
			              ReactCurrentActQueue.current = null;
			            } // Return a thenable. If the user awaits it, we'll flush again in
			            // case additional work was scheduled by a microtask.

			            var _thenable = {
			              then: function (resolve, reject) {
			                // Confirm we haven't re-entered another `act` scope, in case
			                // the user does something weird like await the thenable
			                // multiple times.
			                if (ReactCurrentActQueue.current === null) {
			                  // Recursively flush the queue until there's no remaining work.
			                  ReactCurrentActQueue.current = [];
			                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			                } else {
			                  resolve(returnValue);
			                }
			              }
			            };
			            return _thenable;
			          } else {
			            // Since we're inside a nested `act` scope, the returned thenable
			            // immediately resolves. The outer scope will flush the queue.
			            var _thenable2 = {
			              then: function (resolve, reject) {
			                resolve(returnValue);
			              }
			            };
			            return _thenable2;
			          }
			        }
			      }
			    }
			    function popActScope(prevActScopeDepth) {
			      {
			        if (prevActScopeDepth !== actScopeDepth - 1) {
			          error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
			        }
			        actScopeDepth = prevActScopeDepth;
			      }
			    }
			    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
			      {
			        var queue = ReactCurrentActQueue.current;
			        if (queue !== null) {
			          try {
			            flushActQueue(queue);
			            enqueueTask(function () {
			              if (queue.length === 0) {
			                // No additional work was scheduled. Finish.
			                ReactCurrentActQueue.current = null;
			                resolve(returnValue);
			              } else {
			                // Keep flushing work until there's none left.
			                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
			              }
			            });
			          } catch (error) {
			            reject(error);
			          }
			        } else {
			          resolve(returnValue);
			        }
			      }
			    }
			    var isFlushing = false;
			    function flushActQueue(queue) {
			      {
			        if (!isFlushing) {
			          // Prevent re-entrance.
			          isFlushing = true;
			          var i = 0;
			          try {
			            for (; i < queue.length; i++) {
			              var callback = queue[i];
			              do {
			                callback = callback(true);
			              } while (callback !== null);
			            }
			            queue.length = 0;
			          } catch (error) {
			            // If something throws, leave the remaining callbacks on the queue.
			            queue = queue.slice(i + 1);
			            throw error;
			          } finally {
			            isFlushing = false;
			          }
			        }
			      }
			    }
			    var createElement$1 = createElementWithValidation;
			    var cloneElement$1 = cloneElementWithValidation;
			    var createFactory = createFactoryWithValidation;
			    var Children = {
			      map: mapChildren,
			      forEach: forEachChildren,
			      count: countChildren,
			      toArray: toArray,
			      only: onlyChild
			    };
			    exports.Children = Children;
			    exports.Component = Component;
			    exports.Fragment = REACT_FRAGMENT_TYPE;
			    exports.Profiler = REACT_PROFILER_TYPE;
			    exports.PureComponent = PureComponent;
			    exports.StrictMode = REACT_STRICT_MODE_TYPE;
			    exports.Suspense = REACT_SUSPENSE_TYPE;
			    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
			    exports.cloneElement = cloneElement$1;
			    exports.createContext = createContext;
			    exports.createElement = createElement$1;
			    exports.createFactory = createFactory;
			    exports.createRef = createRef;
			    exports.forwardRef = forwardRef;
			    exports.isValidElement = isValidElement;
			    exports.lazy = lazy;
			    exports.memo = memo;
			    exports.startTransition = startTransition;
			    exports.unstable_act = act;
			    exports.useCallback = useCallback;
			    exports.useContext = useContext;
			    exports.useDebugValue = useDebugValue;
			    exports.useDeferredValue = useDeferredValue;
			    exports.useEffect = useEffect;
			    exports.useId = useId;
			    exports.useImperativeHandle = useImperativeHandle;
			    exports.useInsertionEffect = useInsertionEffect;
			    exports.useLayoutEffect = useLayoutEffect;
			    exports.useMemo = useMemo;
			    exports.useReducer = useReducer;
			    exports.useRef = useRef;
			    exports.useState = useState;
			    exports.useSyncExternalStore = useSyncExternalStore;
			    exports.useTransition = useTransition;
			    exports.version = ReactVersion;
			    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
			    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
			      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
			    }
			  })();
			} 
		} (react_development, react_development.exports));
		return react_development.exports;
	}

	var hasRequiredReact;

	function requireReact () {
		if (hasRequiredReact) return react.exports;
		hasRequiredReact = 1;

		if (process.env.NODE_ENV === 'production') {
		  react.exports = requireReact_production_min();
		} else {
		  react.exports = requireReact_development();
		}
		return react.exports;
	}

	var reactExports = requireReact();
	var React$1 = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	function e(e, t) {
	  var i = {};
	  for (var o in e) Object.prototype.hasOwnProperty.call(e, o) && t.indexOf(o) < 0 && (i[o] = e[o]);
	  if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
	    var n = 0;
	    for (o = Object.getOwnPropertySymbols(e); n < o.length; n++) t.indexOf(o[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, o[n]) && (i[o[n]] = e[o[n]]);
	  }
	  return i;
	}
	"function" == typeof SuppressedError && SuppressedError;
	var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
	function i(e) {
	  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
	}
	function o(e, t) {
	  return e(t = {
	    exports: {}
	  }, t.exports), t.exports;
	}
	var n = o(function (e, t) {
	  Object.defineProperty(t, "__esModule", {
	    value: !0
	  });
	  var i = function () {
	    function e() {
	      var e = this;
	      this.locked = new Map(), this.addToLocked = function (t, i) {
	        var o = e.locked.get(t);
	        void 0 === o ? void 0 === i ? e.locked.set(t, []) : e.locked.set(t, [i]) : void 0 !== i && (o.unshift(i), e.locked.set(t, o));
	      }, this.isLocked = function (t) {
	        return e.locked.has(t);
	      }, this.lock = function (t) {
	        return new Promise(function (i, o) {
	          e.isLocked(t) ? e.addToLocked(t, i) : (e.addToLocked(t), i());
	        });
	      }, this.unlock = function (t) {
	        var i = e.locked.get(t);
	        if (void 0 !== i && 0 !== i.length) {
	          var o = i.pop();
	          e.locked.set(t, i), void 0 !== o && setTimeout(o, 0);
	        } else e.locked.delete(t);
	      };
	    }
	    return e.getInstance = function () {
	      return void 0 === e.instance && (e.instance = new e()), e.instance;
	    }, e;
	  }();
	  t.default = function () {
	    return i.getInstance();
	  };
	});
	i(n);
	var a = i(o(function (e, i) {
	  var o = t && t.__awaiter || function (e, t, i, o) {
	      return new (i || (i = Promise))(function (n, a) {
	        function r(e) {
	          try {
	            c(o.next(e));
	          } catch (e) {
	            a(e);
	          }
	        }
	        function s(e) {
	          try {
	            c(o.throw(e));
	          } catch (e) {
	            a(e);
	          }
	        }
	        function c(e) {
	          e.done ? n(e.value) : new i(function (t) {
	            t(e.value);
	          }).then(r, s);
	        }
	        c((o = o.apply(e, t || [])).next());
	      });
	    },
	    a = t && t.__generator || function (e, t) {
	      var i,
	        o,
	        n,
	        a,
	        r = {
	          label: 0,
	          sent: function () {
	            if (1 & n[0]) throw n[1];
	            return n[1];
	          },
	          trys: [],
	          ops: []
	        };
	      return a = {
	        next: s(0),
	        throw: s(1),
	        return: s(2)
	      }, "function" == typeof Symbol && (a[Symbol.iterator] = function () {
	        return this;
	      }), a;
	      function s(a) {
	        return function (s) {
	          return function (a) {
	            if (i) throw new TypeError("Generator is already executing.");
	            for (; r;) try {
	              if (i = 1, o && (n = 2 & a[0] ? o.return : a[0] ? o.throw || ((n = o.return) && n.call(o), 0) : o.next) && !(n = n.call(o, a[1])).done) return n;
	              switch (o = 0, n && (a = [2 & a[0], n.value]), a[0]) {
	                case 0:
	                case 1:
	                  n = a;
	                  break;
	                case 4:
	                  return r.label++, {
	                    value: a[1],
	                    done: !1
	                  };
	                case 5:
	                  r.label++, o = a[1], a = [0];
	                  continue;
	                case 7:
	                  a = r.ops.pop(), r.trys.pop();
	                  continue;
	                default:
	                  if (!(n = r.trys, (n = n.length > 0 && n[n.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
	                    r = 0;
	                    continue;
	                  }
	                  if (3 === a[0] && (!n || a[1] > n[0] && a[1] < n[3])) {
	                    r.label = a[1];
	                    break;
	                  }
	                  if (6 === a[0] && r.label < n[1]) {
	                    r.label = n[1], n = a;
	                    break;
	                  }
	                  if (n && r.label < n[2]) {
	                    r.label = n[2], r.ops.push(a);
	                    break;
	                  }
	                  n[2] && r.ops.pop(), r.trys.pop();
	                  continue;
	              }
	              a = t.call(e, r);
	            } catch (e) {
	              a = [6, e], o = 0;
	            } finally {
	              i = n = 0;
	            }
	            if (5 & a[0]) throw a[1];
	            return {
	              value: a[0] ? a[1] : void 0,
	              done: !0
	            };
	          }([a, s]);
	        };
	      }
	    },
	    r = t;
	  Object.defineProperty(i, "__esModule", {
	    value: !0
	  });
	  var s = "browser-tabs-lock-key",
	    c = {
	      key: function (e) {
	        return o(r, void 0, void 0, function () {
	          return a(this, function (e) {
	            throw new Error("Unsupported");
	          });
	        });
	      },
	      getItem: function (e) {
	        return o(r, void 0, void 0, function () {
	          return a(this, function (e) {
	            throw new Error("Unsupported");
	          });
	        });
	      },
	      clear: function () {
	        return o(r, void 0, void 0, function () {
	          return a(this, function (e) {
	            return [2, window.localStorage.clear()];
	          });
	        });
	      },
	      removeItem: function (e) {
	        return o(r, void 0, void 0, function () {
	          return a(this, function (e) {
	            throw new Error("Unsupported");
	          });
	        });
	      },
	      setItem: function (e, t) {
	        return o(r, void 0, void 0, function () {
	          return a(this, function (e) {
	            throw new Error("Unsupported");
	          });
	        });
	      },
	      keySync: function (e) {
	        return window.localStorage.key(e);
	      },
	      getItemSync: function (e) {
	        return window.localStorage.getItem(e);
	      },
	      clearSync: function () {
	        return window.localStorage.clear();
	      },
	      removeItemSync: function (e) {
	        return window.localStorage.removeItem(e);
	      },
	      setItemSync: function (e, t) {
	        return window.localStorage.setItem(e, t);
	      }
	    };
	  function d(e) {
	    return new Promise(function (t) {
	      return setTimeout(t, e);
	    });
	  }
	  function u(e) {
	    for (var t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz", i = "", o = 0; o < e; o++) {
	      i += t[Math.floor(Math.random() * t.length)];
	    }
	    return i;
	  }
	  var l = function () {
	    function e(t) {
	      this.acquiredIatSet = new Set(), this.storageHandler = void 0, this.id = Date.now().toString() + u(15), this.acquireLock = this.acquireLock.bind(this), this.releaseLock = this.releaseLock.bind(this), this.releaseLock__private__ = this.releaseLock__private__.bind(this), this.waitForSomethingToChange = this.waitForSomethingToChange.bind(this), this.refreshLockWhileAcquired = this.refreshLockWhileAcquired.bind(this), this.storageHandler = t, void 0 === e.waiters && (e.waiters = []);
	    }
	    return e.prototype.acquireLock = function (t, i) {
	      return void 0 === i && (i = 5e3), o(this, void 0, void 0, function () {
	        var o, n, r, l, h, p, m;
	        return a(this, function (a) {
	          switch (a.label) {
	            case 0:
	              o = Date.now() + u(4), n = Date.now() + i, r = s + "-" + t, l = void 0 === this.storageHandler ? c : this.storageHandler, a.label = 1;
	            case 1:
	              return Date.now() < n ? [4, d(30)] : [3, 8];
	            case 2:
	              return a.sent(), null !== l.getItemSync(r) ? [3, 5] : (h = this.id + "-" + t + "-" + o, [4, d(Math.floor(25 * Math.random()))]);
	            case 3:
	              return a.sent(), l.setItemSync(r, JSON.stringify({
	                id: this.id,
	                iat: o,
	                timeoutKey: h,
	                timeAcquired: Date.now(),
	                timeRefreshed: Date.now()
	              })), [4, d(30)];
	            case 4:
	              return a.sent(), null !== (p = l.getItemSync(r)) && (m = JSON.parse(p)).id === this.id && m.iat === o ? (this.acquiredIatSet.add(o), this.refreshLockWhileAcquired(r, o), [2, !0]) : [3, 7];
	            case 5:
	              return e.lockCorrector(void 0 === this.storageHandler ? c : this.storageHandler), [4, this.waitForSomethingToChange(n)];
	            case 6:
	              a.sent(), a.label = 7;
	            case 7:
	              return o = Date.now() + u(4), [3, 1];
	            case 8:
	              return [2, !1];
	          }
	        });
	      });
	    }, e.prototype.refreshLockWhileAcquired = function (e, t) {
	      return o(this, void 0, void 0, function () {
	        var i = this;
	        return a(this, function (r) {
	          return setTimeout(function () {
	            return o(i, void 0, void 0, function () {
	              var i, o, r;
	              return a(this, function (a) {
	                switch (a.label) {
	                  case 0:
	                    return [4, n.default().lock(t)];
	                  case 1:
	                    return a.sent(), this.acquiredIatSet.has(t) ? (i = void 0 === this.storageHandler ? c : this.storageHandler, null === (o = i.getItemSync(e)) ? (n.default().unlock(t), [2]) : ((r = JSON.parse(o)).timeRefreshed = Date.now(), i.setItemSync(e, JSON.stringify(r)), n.default().unlock(t), this.refreshLockWhileAcquired(e, t), [2])) : (n.default().unlock(t), [2]);
	                }
	              });
	            });
	          }, 1e3), [2];
	        });
	      });
	    }, e.prototype.waitForSomethingToChange = function (t) {
	      return o(this, void 0, void 0, function () {
	        return a(this, function (i) {
	          switch (i.label) {
	            case 0:
	              return [4, new Promise(function (i) {
	                var o = !1,
	                  n = Date.now(),
	                  a = !1;
	                function r() {
	                  if (a || (window.removeEventListener("storage", r), e.removeFromWaiting(r), clearTimeout(s), a = !0), !o) {
	                    o = !0;
	                    var t = 50 - (Date.now() - n);
	                    t > 0 ? setTimeout(i, t) : i(null);
	                  }
	                }
	                window.addEventListener("storage", r), e.addToWaiting(r);
	                var s = setTimeout(r, Math.max(0, t - Date.now()));
	              })];
	            case 1:
	              return i.sent(), [2];
	          }
	        });
	      });
	    }, e.addToWaiting = function (t) {
	      this.removeFromWaiting(t), void 0 !== e.waiters && e.waiters.push(t);
	    }, e.removeFromWaiting = function (t) {
	      void 0 !== e.waiters && (e.waiters = e.waiters.filter(function (e) {
	        return e !== t;
	      }));
	    }, e.notifyWaiters = function () {
	      void 0 !== e.waiters && e.waiters.slice().forEach(function (e) {
	        return e();
	      });
	    }, e.prototype.releaseLock = function (e) {
	      return o(this, void 0, void 0, function () {
	        return a(this, function (t) {
	          switch (t.label) {
	            case 0:
	              return [4, this.releaseLock__private__(e)];
	            case 1:
	              return [2, t.sent()];
	          }
	        });
	      });
	    }, e.prototype.releaseLock__private__ = function (t) {
	      return o(this, void 0, void 0, function () {
	        var i, o, r, d;
	        return a(this, function (a) {
	          switch (a.label) {
	            case 0:
	              return i = void 0 === this.storageHandler ? c : this.storageHandler, o = s + "-" + t, null === (r = i.getItemSync(o)) ? [2] : (d = JSON.parse(r)).id !== this.id ? [3, 2] : [4, n.default().lock(d.iat)];
	            case 1:
	              a.sent(), this.acquiredIatSet.delete(d.iat), i.removeItemSync(o), n.default().unlock(d.iat), e.notifyWaiters(), a.label = 2;
	            case 2:
	              return [2];
	          }
	        });
	      });
	    }, e.lockCorrector = function (t) {
	      for (var i = Date.now() - 5e3, o = t, n = [], a = 0;;) {
	        var r = o.keySync(a);
	        if (null === r) break;
	        n.push(r), a++;
	      }
	      for (var c = !1, d = 0; d < n.length; d++) {
	        var u = n[d];
	        if (u.includes(s)) {
	          var l = o.getItemSync(u);
	          if (null !== l) {
	            var h = JSON.parse(l);
	            (void 0 === h.timeRefreshed && h.timeAcquired < i || void 0 !== h.timeRefreshed && h.timeRefreshed < i) && (o.removeItemSync(u), c = !0);
	          }
	        }
	      }
	      c && e.notifyWaiters();
	    }, e.waiters = void 0, e;
	  }();
	  i.default = l;
	}));
	const r = {
	    timeoutInSeconds: 60
	  },
	  s = {
	    name: "auth0-spa-js",
	    version: "2.1.3"
	  },
	  c$1 = () => Date.now();
	class d$1 extends Error {
	  constructor(e, t) {
	    super(t), this.error = e, this.error_description = t, Object.setPrototypeOf(this, d$1.prototype);
	  }
	  static fromPayload({
	    error: e,
	    error_description: t
	  }) {
	    return new d$1(e, t);
	  }
	}
	class u extends d$1 {
	  constructor(e, t, i, o = null) {
	    super(e, t), this.state = i, this.appState = o, Object.setPrototypeOf(this, u.prototype);
	  }
	}
	class l extends d$1 {
	  constructor() {
	    super("timeout", "Timeout"), Object.setPrototypeOf(this, l.prototype);
	  }
	}
	class h$1 extends l {
	  constructor(e) {
	    super(), this.popup = e, Object.setPrototypeOf(this, h$1.prototype);
	  }
	}
	class p$1 extends d$1 {
	  constructor(e) {
	    super("cancelled", "Popup closed"), this.popup = e, Object.setPrototypeOf(this, p$1.prototype);
	  }
	}
	class m extends d$1 {
	  constructor(e, t, i) {
	    super(e, t), this.mfa_token = i, Object.setPrototypeOf(this, m.prototype);
	  }
	}
	class f extends d$1 {
	  constructor(e, t) {
	    super("missing_refresh_token", `Missing Refresh Token (audience: '${g(e, ["default"])}', scope: '${g(t)}')`), this.audience = e, this.scope = t, Object.setPrototypeOf(this, f.prototype);
	  }
	}
	function g(e, t = []) {
	  return e && !t.includes(e) ? e : "";
	}
	const w$1 = () => window.crypto,
	  y = () => {
	    const e = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~.";
	    let t = "";
	    return Array.from(w$1().getRandomValues(new Uint8Array(43))).forEach(i => t += e[i % e.length]), t;
	  },
	  k$1 = e => btoa(e),
	  v = t => {
	    var {
	        clientId: i
	      } = t,
	      o = e(t, ["clientId"]);
	    return new URLSearchParams((e => Object.keys(e).filter(t => void 0 !== e[t]).reduce((t, i) => Object.assign(Object.assign({}, t), {
	      [i]: e[i]
	    }), {}))(Object.assign({
	      client_id: i
	    }, o))).toString();
	  },
	  b$1 = e => (e => decodeURIComponent(atob(e).split("").map(e => "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2)).join("")))(e.replace(/_/g, "/").replace(/-/g, "+")),
	  _$1 = async (e, t) => {
	    const i = await fetch(e, t);
	    return {
	      ok: i.ok,
	      json: await i.json()
	    };
	  },
	  I$1 = async (e, t, i) => {
	    const o = new AbortController();
	    let n;
	    return t.signal = o.signal, Promise.race([_$1(e, t), new Promise((e, t) => {
	      n = setTimeout(() => {
	        o.abort(), t(new Error("Timeout when executing 'fetch'"));
	      }, i);
	    })]).finally(() => {
	      clearTimeout(n);
	    });
	  },
	  S$1 = async (e, t, i, o, n, a, r) => {
	    return s = {
	      auth: {
	        audience: t,
	        scope: i
	      },
	      timeout: n,
	      fetchUrl: e,
	      fetchOptions: o,
	      useFormData: r
	    }, c = a, new Promise(function (e, t) {
	      const i = new MessageChannel();
	      i.port1.onmessage = function (o) {
	        o.data.error ? t(new Error(o.data.error)) : e(o.data), i.port1.close();
	      }, c.postMessage(s, [i.port2]);
	    });
	    var s, c;
	  },
	  O$1 = async (e, t, i, o, n, a, r = 1e4) => n ? S$1(e, t, i, o, r, n, a) : I$1(e, o, r);
	async function T(t, i) {
	  var {
	      baseUrl: o,
	      timeout: n,
	      audience: a,
	      scope: r,
	      auth0Client: c,
	      useFormData: u
	    } = t,
	    l = e(t, ["baseUrl", "timeout", "audience", "scope", "auth0Client", "useFormData"]);
	  const h = u ? v(l) : JSON.stringify(l);
	  return await async function (t, i, o, n, a, r, s) {
	    let c,
	      u = null;
	    for (let e = 0; e < 3; e++) try {
	      c = await O$1(t, o, n, a, r, s, i), u = null;
	      break;
	    } catch (e) {
	      u = e;
	    }
	    if (u) throw u;
	    const l = c.json,
	      {
	        error: h,
	        error_description: p
	      } = l,
	      g = e(l, ["error", "error_description"]),
	      {
	        ok: w
	      } = c;
	    if (!w) {
	      const e = p || `HTTP error. Unable to fetch ${t}`;
	      if ("mfa_required" === h) throw new m(h, e, g.mfa_token);
	      if ("missing_refresh_token" === h) throw new f(o, n);
	      throw new d$1(h || "request_error", e);
	    }
	    return g;
	  }(`${o}/oauth/token`, n, a || "default", r, {
	    method: "POST",
	    body: h,
	    headers: {
	      "Content-Type": u ? "application/x-www-form-urlencoded" : "application/json",
	      "Auth0-Client": btoa(JSON.stringify(c || s))
	    }
	  }, i, u);
	}
	const j = (...e) => {
	  return (t = e.filter(Boolean).join(" ").trim().split(/\s+/), Array.from(new Set(t))).join(" ");
	  var t;
	};
	class C$1 {
	  constructor(e, t = "@@auth0spajs@@", i) {
	    this.prefix = t, this.suffix = i, this.clientId = e.clientId, this.scope = e.scope, this.audience = e.audience;
	  }
	  toKey() {
	    return [this.prefix, this.clientId, this.audience, this.scope, this.suffix].filter(Boolean).join("::");
	  }
	  static fromKey(e) {
	    const [t, i, o, n] = e.split("::");
	    return new C$1({
	      clientId: i,
	      scope: n,
	      audience: o
	    }, t);
	  }
	  static fromCacheEntry(e) {
	    const {
	      scope: t,
	      audience: i,
	      client_id: o
	    } = e;
	    return new C$1({
	      scope: t,
	      audience: i,
	      clientId: o
	    });
	  }
	}
	class z$1 {
	  set(e, t) {
	    localStorage.setItem(e, JSON.stringify(t));
	  }
	  get(e) {
	    const t = window.localStorage.getItem(e);
	    if (t) try {
	      return JSON.parse(t);
	    } catch (e) {
	      return;
	    }
	  }
	  remove(e) {
	    localStorage.removeItem(e);
	  }
	  allKeys() {
	    return Object.keys(window.localStorage).filter(e => e.startsWith("@@auth0spajs@@"));
	  }
	}
	class P$1 {
	  constructor() {
	    this.enclosedCache = function () {
	      let e = {};
	      return {
	        set(t, i) {
	          e[t] = i;
	        },
	        get(t) {
	          const i = e[t];
	          if (i) return i;
	        },
	        remove(t) {
	          delete e[t];
	        },
	        allKeys: () => Object.keys(e)
	      };
	    }();
	  }
	}
	class x$1 {
	  constructor(e, t, i) {
	    this.cache = e, this.keyManifest = t, this.nowProvider = i || c$1;
	  }
	  async setIdToken(e, t, i) {
	    var o;
	    const n = this.getIdTokenCacheKey(e);
	    await this.cache.set(n, {
	      id_token: t,
	      decodedToken: i
	    }), await (null === (o = this.keyManifest) || void 0 === o ? void 0 : o.add(n));
	  }
	  async getIdToken(e) {
	    const t = await this.cache.get(this.getIdTokenCacheKey(e.clientId));
	    if (!t && e.scope && e.audience) {
	      const t = await this.get(e);
	      if (!t) return;
	      if (!t.id_token || !t.decodedToken) return;
	      return {
	        id_token: t.id_token,
	        decodedToken: t.decodedToken
	      };
	    }
	    if (t) return {
	      id_token: t.id_token,
	      decodedToken: t.decodedToken
	    };
	  }
	  async get(e, t = 0) {
	    var i;
	    let o = await this.cache.get(e.toKey());
	    if (!o) {
	      const t = await this.getCacheKeys();
	      if (!t) return;
	      const i = this.matchExistingCacheKey(e, t);
	      i && (o = await this.cache.get(i));
	    }
	    if (!o) return;
	    const n = await this.nowProvider(),
	      a = Math.floor(n / 1e3);
	    return o.expiresAt - t < a ? o.body.refresh_token ? (o.body = {
	      refresh_token: o.body.refresh_token
	    }, await this.cache.set(e.toKey(), o), o.body) : (await this.cache.remove(e.toKey()), void (await (null === (i = this.keyManifest) || void 0 === i ? void 0 : i.remove(e.toKey())))) : o.body;
	  }
	  async set(e) {
	    var t;
	    const i = new C$1({
	        clientId: e.client_id,
	        scope: e.scope,
	        audience: e.audience
	      }),
	      o = await this.wrapCacheEntry(e);
	    await this.cache.set(i.toKey(), o), await (null === (t = this.keyManifest) || void 0 === t ? void 0 : t.add(i.toKey()));
	  }
	  async clear(e) {
	    var t;
	    const i = await this.getCacheKeys();
	    i && (await i.filter(t => !e || t.includes(e)).reduce(async (e, t) => {
	      await e, await this.cache.remove(t);
	    }, Promise.resolve()), await (null === (t = this.keyManifest) || void 0 === t ? void 0 : t.clear()));
	  }
	  async wrapCacheEntry(e) {
	    const t = await this.nowProvider();
	    return {
	      body: e,
	      expiresAt: Math.floor(t / 1e3) + e.expires_in
	    };
	  }
	  async getCacheKeys() {
	    var e;
	    return this.keyManifest ? null === (e = await this.keyManifest.get()) || void 0 === e ? void 0 : e.keys : this.cache.allKeys ? this.cache.allKeys() : void 0;
	  }
	  getIdTokenCacheKey(e) {
	    return new C$1({
	      clientId: e
	    }, "@@auth0spajs@@", "@@user@@").toKey();
	  }
	  matchExistingCacheKey(e, t) {
	    return t.filter(t => {
	      var i;
	      const o = C$1.fromKey(t),
	        n = new Set(o.scope && o.scope.split(" ")),
	        a = (null === (i = e.scope) || void 0 === i ? void 0 : i.split(" ")) || [],
	        r = o.scope && a.reduce((e, t) => e && n.has(t), !0);
	      return "@@auth0spajs@@" === o.prefix && o.clientId === e.clientId && o.audience === e.audience && r;
	    })[0];
	  }
	}
	class Z$1 {
	  constructor(e, t, i) {
	    this.storage = e, this.clientId = t, this.cookieDomain = i, this.storageKey = `a0.spajs.txs.${this.clientId}`;
	  }
	  create(e) {
	    this.storage.save(this.storageKey, e, {
	      daysUntilExpire: 1,
	      cookieDomain: this.cookieDomain
	    });
	  }
	  get() {
	    return this.storage.get(this.storageKey);
	  }
	  remove() {
	    this.storage.remove(this.storageKey, {
	      cookieDomain: this.cookieDomain
	    });
	  }
	}
	const K = e => "number" == typeof e,
	  W = ["iss", "aud", "exp", "nbf", "iat", "jti", "azp", "nonce", "auth_time", "at_hash", "c_hash", "acr", "amr", "sub_jwk", "cnf", "sip_from_tag", "sip_date", "sip_callid", "sip_cseq_num", "sip_via_branch", "orig", "dest", "mky", "events", "toe", "txn", "rph", "sid", "vot", "vtm"],
	  E$1 = e => {
	    if (!e.id_token) throw new Error("ID token is required but missing");
	    const t = (e => {
	      const t = e.split("."),
	        [i, o, n] = t;
	      if (3 !== t.length || !i || !o || !n) throw new Error("ID token could not be decoded");
	      const a = JSON.parse(b$1(o)),
	        r = {
	          __raw: e
	        },
	        s = {};
	      return Object.keys(a).forEach(e => {
	        r[e] = a[e], W.includes(e) || (s[e] = a[e]);
	      }), {
	        encoded: {
	          header: i,
	          payload: o,
	          signature: n
	        },
	        header: JSON.parse(b$1(i)),
	        claims: r,
	        user: s
	      };
	    })(e.id_token);
	    if (!t.claims.iss) throw new Error("Issuer (iss) claim must be a string present in the ID token");
	    if (t.claims.iss !== e.iss) throw new Error(`Issuer (iss) claim mismatch in the ID token; expected "${e.iss}", found "${t.claims.iss}"`);
	    if (!t.user.sub) throw new Error("Subject (sub) claim must be a string present in the ID token");
	    if ("RS256" !== t.header.alg) throw new Error(`Signature algorithm of "${t.header.alg}" is not supported. Expected the ID token to be signed with "RS256".`);
	    if (!t.claims.aud || "string" != typeof t.claims.aud && !Array.isArray(t.claims.aud)) throw new Error("Audience (aud) claim must be a string or array of strings present in the ID token");
	    if (Array.isArray(t.claims.aud)) {
	      if (!t.claims.aud.includes(e.aud)) throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e.aud}" but was not one of "${t.claims.aud.join(", ")}"`);
	      if (t.claims.aud.length > 1) {
	        if (!t.claims.azp) throw new Error("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values");
	        if (t.claims.azp !== e.aud) throw new Error(`Authorized Party (azp) claim mismatch in the ID token; expected "${e.aud}", found "${t.claims.azp}"`);
	      }
	    } else if (t.claims.aud !== e.aud) throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e.aud}" but found "${t.claims.aud}"`);
	    if (e.nonce) {
	      if (!t.claims.nonce) throw new Error("Nonce (nonce) claim must be a string present in the ID token");
	      if (t.claims.nonce !== e.nonce) throw new Error(`Nonce (nonce) claim mismatch in the ID token; expected "${e.nonce}", found "${t.claims.nonce}"`);
	    }
	    if (e.max_age && !K(t.claims.auth_time)) throw new Error("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified");
	    if (null == t.claims.exp || !K(t.claims.exp)) throw new Error("Expiration Time (exp) claim must be a number present in the ID token");
	    if (!K(t.claims.iat)) throw new Error("Issued At (iat) claim must be a number present in the ID token");
	    const i = e.leeway || 60,
	      o = new Date(e.now || Date.now()),
	      n = new Date(0);
	    if (n.setUTCSeconds(t.claims.exp + i), o > n) throw new Error(`Expiration Time (exp) claim error in the ID token; current time (${o}) is after expiration time (${n})`);
	    if (null != t.claims.nbf && K(t.claims.nbf)) {
	      const e = new Date(0);
	      if (e.setUTCSeconds(t.claims.nbf - i), o < e) throw new Error(`Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Current time (${o}) is before ${e}`);
	    }
	    if (null != t.claims.auth_time && K(t.claims.auth_time)) {
	      const n = new Date(0);
	      if (n.setUTCSeconds(parseInt(t.claims.auth_time) + e.max_age + i), o > n) throw new Error(`Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Current time (${o}) is after last auth at ${n}`);
	    }
	    if (e.organization) {
	      const i = e.organization.trim();
	      if (i.startsWith("org_")) {
	        const e = i;
	        if (!t.claims.org_id) throw new Error("Organization ID (org_id) claim must be a string present in the ID token");
	        if (e !== t.claims.org_id) throw new Error(`Organization ID (org_id) claim mismatch in the ID token; expected "${e}", found "${t.claims.org_id}"`);
	      } else {
	        const e = i.toLowerCase();
	        if (!t.claims.org_name) throw new Error("Organization Name (org_name) claim must be a string present in the ID token");
	        if (e !== t.claims.org_name) throw new Error(`Organization Name (org_name) claim mismatch in the ID token; expected "${e}", found "${t.claims.org_name}"`);
	      }
	    }
	    return t;
	  };
	var R = o(function (e, i) {
	  var o = t && t.__assign || function () {
	    return o = Object.assign || function (e) {
	      for (var t, i = 1, o = arguments.length; i < o; i++) for (var n in t = arguments[i]) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
	      return e;
	    }, o.apply(this, arguments);
	  };
	  function n(e, t) {
	    if (!t) return "";
	    var i = "; " + e;
	    return !0 === t ? i : i + "=" + t;
	  }
	  function a(e, t, i) {
	    return encodeURIComponent(e).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/\(/g, "%28").replace(/\)/g, "%29") + "=" + encodeURIComponent(t).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent) + function (e) {
	      if ("number" == typeof e.expires) {
	        var t = new Date();
	        t.setMilliseconds(t.getMilliseconds() + 864e5 * e.expires), e.expires = t;
	      }
	      return n("Expires", e.expires ? e.expires.toUTCString() : "") + n("Domain", e.domain) + n("Path", e.path) + n("Secure", e.secure) + n("SameSite", e.sameSite);
	    }(i);
	  }
	  function r(e) {
	    for (var t = {}, i = e ? e.split("; ") : [], o = /(%[\dA-F]{2})+/gi, n = 0; n < i.length; n++) {
	      var a = i[n].split("="),
	        r = a.slice(1).join("=");
	      '"' === r.charAt(0) && (r = r.slice(1, -1));
	      try {
	        t[a[0].replace(o, decodeURIComponent)] = r.replace(o, decodeURIComponent);
	      } catch (e) {}
	    }
	    return t;
	  }
	  function s() {
	    return r(document.cookie);
	  }
	  function c(e, t, i) {
	    document.cookie = a(e, t, o({
	      path: "/"
	    }, i));
	  }
	  i.__esModule = !0, i.encode = a, i.parse = r, i.getAll = s, i.get = function (e) {
	    return s()[e];
	  }, i.set = c, i.remove = function (e, t) {
	    c(e, "", o(o({}, t), {
	      expires: -1
	    }));
	  };
	});
	i(R), R.encode, R.parse, R.getAll;
	var U$1 = R.get,
	  L = R.set,
	  D$1 = R.remove;
	const X$1 = {
	    get(e) {
	      const t = U$1(e);
	      if (void 0 !== t) return JSON.parse(t);
	    },
	    save(e, t, i) {
	      let o = {};
	      "https:" === window.location.protocol && (o = {
	        secure: !0,
	        sameSite: "none"
	      }), (null == i ? void 0 : i.daysUntilExpire) && (o.expires = i.daysUntilExpire), (null == i ? void 0 : i.cookieDomain) && (o.domain = i.cookieDomain), L(e, JSON.stringify(t), o);
	    },
	    remove(e, t) {
	      let i = {};
	      (null == t ? void 0 : t.cookieDomain) && (i.domain = t.cookieDomain), D$1(e, i);
	    }
	  },
	  N$1 = {
	    get(e) {
	      const t = X$1.get(e);
	      return t || X$1.get(`_legacy_${e}`);
	    },
	    save(e, t, i) {
	      let o = {};
	      "https:" === window.location.protocol && (o = {
	        secure: !0
	      }), (null == i ? void 0 : i.daysUntilExpire) && (o.expires = i.daysUntilExpire), (null == i ? void 0 : i.cookieDomain) && (o.domain = i.cookieDomain), L(`_legacy_${e}`, JSON.stringify(t), o), X$1.save(e, t, i);
	    },
	    remove(e, t) {
	      let i = {};
	      (null == t ? void 0 : t.cookieDomain) && (i.domain = t.cookieDomain), D$1(e, i), X$1.remove(e, t), X$1.remove(`_legacy_${e}`, t);
	    }
	  },
	  J$1 = {
	    get(e) {
	      if ("undefined" == typeof sessionStorage) return;
	      const t = sessionStorage.getItem(e);
	      return null != t ? JSON.parse(t) : void 0;
	    },
	    save(e, t) {
	      sessionStorage.setItem(e, JSON.stringify(t));
	    },
	    remove(e) {
	      sessionStorage.removeItem(e);
	    }
	  };
	function F$1(e, t, i) {
	  var o = void 0 === t ? null : t,
	    n = function (e, t) {
	      var i = atob(e);
	      if (t) {
	        for (var o = new Uint8Array(i.length), n = 0, a = i.length; n < a; ++n) o[n] = i.charCodeAt(n);
	        return String.fromCharCode.apply(null, new Uint16Array(o.buffer));
	      }
	      return i;
	    }(e, void 0 !== i && i),
	    a = n.indexOf("\n", 10) + 1,
	    r = n.substring(a) + (o ? "//# sourceMappingURL=" + o : ""),
	    s = new Blob([r], {
	      type: "application/javascript"
	    });
	  return URL.createObjectURL(s);
	}
	var H,
	  Y$1,
	  G$1,
	  V$1,
	  M = (H = "Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgZSBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHQscil7c3VwZXIociksdGhpcy5lcnJvcj10LHRoaXMuZXJyb3JfZGVzY3JpcHRpb249cixPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxlLnByb3RvdHlwZSl9c3RhdGljIGZyb21QYXlsb2FkKHtlcnJvcjp0LGVycm9yX2Rlc2NyaXB0aW9uOnJ9KXtyZXR1cm4gbmV3IGUodCxyKX19Y2xhc3MgdCBleHRlbmRzIGV7Y29uc3RydWN0b3IoZSxzKXtzdXBlcigibWlzc2luZ19yZWZyZXNoX3Rva2VuIixgTWlzc2luZyBSZWZyZXNoIFRva2VuIChhdWRpZW5jZTogJyR7cihlLFsiZGVmYXVsdCJdKX0nLCBzY29wZTogJyR7cihzKX0nKWApLHRoaXMuYXVkaWVuY2U9ZSx0aGlzLnNjb3BlPXMsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsdC5wcm90b3R5cGUpfX1mdW5jdGlvbiByKGUsdD1bXSl7cmV0dXJuIGUmJiF0LmluY2x1ZGVzKGUpP2U6IiJ9ImZ1bmN0aW9uIj09dHlwZW9mIFN1cHByZXNzZWRFcnJvciYmU3VwcHJlc3NlZEVycm9yO2NvbnN0IHM9ZT0+e3ZhcntjbGllbnRJZDp0fT1lLHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj17fTtmb3IodmFyIHMgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSYmdC5pbmRleE9mKHMpPDAmJihyW3NdPWVbc10pO2lmKG51bGwhPWUmJiJmdW5jdGlvbiI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz0wO2ZvcihzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7bzxzLmxlbmd0aDtvKyspdC5pbmRleE9mKHNbb10pPDAmJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLHNbb10pJiYocltzW29dXT1lW3Nbb11dKX1yZXR1cm4gcn0oZSxbImNsaWVudElkIl0pO3JldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKChlPT5PYmplY3Qua2V5cyhlKS5maWx0ZXIoKHQ9PnZvaWQgMCE9PWVbdF0pKS5yZWR1Y2UoKCh0LHIpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCkse1tyXTplW3JdfSkpLHt9KSkoT2JqZWN0LmFzc2lnbih7Y2xpZW50X2lkOnR9LHIpKSkudG9TdHJpbmcoKX07bGV0IG89e307Y29uc3Qgbj0oZSx0KT0+YCR7ZX18JHt0fWA7YWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsKGFzeW5jKHtkYXRhOnt0aW1lb3V0OmUsYXV0aDpyLGZldGNoVXJsOmksZmV0Y2hPcHRpb25zOmMsdXNlRm9ybURhdGE6YX0scG9ydHM6W3BdfSk9PntsZXQgZjtjb25zdHthdWRpZW5jZTp1LHNjb3BlOmx9PXJ8fHt9O3RyeXtjb25zdCByPWE/KGU9Pntjb25zdCB0PW5ldyBVUkxTZWFyY2hQYXJhbXMoZSkscj17fTtyZXR1cm4gdC5mb3JFYWNoKCgoZSx0KT0+e3JbdF09ZX0pKSxyfSkoYy5ib2R5KTpKU09OLnBhcnNlKGMuYm9keSk7aWYoIXIucmVmcmVzaF90b2tlbiYmInJlZnJlc2hfdG9rZW4iPT09ci5ncmFudF90eXBlKXtjb25zdCBlPSgoZSx0KT0+b1tuKGUsdCldKSh1LGwpO2lmKCFlKXRocm93IG5ldyB0KHUsbCk7Yy5ib2R5PWE/cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKTpKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKX1sZXQgaCxnOyJmdW5jdGlvbiI9PXR5cGVvZiBBYm9ydENvbnRyb2xsZXImJihoPW5ldyBBYm9ydENvbnRyb2xsZXIsYy5zaWduYWw9aC5zaWduYWwpO3RyeXtnPWF3YWl0IFByb21pc2UucmFjZShbKGQ9ZSxuZXcgUHJvbWlzZSgoZT0+c2V0VGltZW91dChlLGQpKSkpLGZldGNoKGksT2JqZWN0LmFzc2lnbih7fSxjKSldKX1jYXRjaChlKXtyZXR1cm4gdm9pZCBwLnBvc3RNZXNzYWdlKHtlcnJvcjplLm1lc3NhZ2V9KX1pZighZylyZXR1cm4gaCYmaC5hYm9ydCgpLHZvaWQgcC5wb3N0TWVzc2FnZSh7ZXJyb3I6IlRpbWVvdXQgd2hlbiBleGVjdXRpbmcgJ2ZldGNoJyJ9KTtmPWF3YWl0IGcuanNvbigpLGYucmVmcmVzaF90b2tlbj8oKChlLHQscik9PntvW24odCxyKV09ZX0pKGYucmVmcmVzaF90b2tlbix1LGwpLGRlbGV0ZSBmLnJlZnJlc2hfdG9rZW4pOigoZSx0KT0+e2RlbGV0ZSBvW24oZSx0KV19KSh1LGwpLHAucG9zdE1lc3NhZ2Uoe29rOmcub2ssanNvbjpmfSl9Y2F0Y2goZSl7cC5wb3N0TWVzc2FnZSh7b2s6ITEsanNvbjp7ZXJyb3I6ZS5lcnJvcixlcnJvcl9kZXNjcmlwdGlvbjplLm1lc3NhZ2V9fSl9dmFyIGR9KSl9KCk7Cgo=", Y$1 = null, G$1 = !1, function (e) {
	    return V$1 = V$1 || F$1(H, Y$1, G$1), new Worker(V$1, e);
	  });
	const A$1 = {};
	class B$1 {
	  constructor(e, t) {
	    this.cache = e, this.clientId = t, this.manifestKey = this.createManifestKeyFrom(this.clientId);
	  }
	  async add(e) {
	    var t;
	    const i = new Set((null === (t = await this.cache.get(this.manifestKey)) || void 0 === t ? void 0 : t.keys) || []);
	    i.add(e), await this.cache.set(this.manifestKey, {
	      keys: [...i]
	    });
	  }
	  async remove(e) {
	    const t = await this.cache.get(this.manifestKey);
	    if (t) {
	      const i = new Set(t.keys);
	      return i.delete(e), i.size > 0 ? await this.cache.set(this.manifestKey, {
	        keys: [...i]
	      }) : await this.cache.remove(this.manifestKey);
	    }
	  }
	  get() {
	    return this.cache.get(this.manifestKey);
	  }
	  clear() {
	    return this.cache.remove(this.manifestKey);
	  }
	  createManifestKeyFrom(e) {
	    return `@@auth0spajs@@::${e}`;
	  }
	}
	const $$1 = {
	    memory: () => new P$1().enclosedCache,
	    localstorage: () => new z$1()
	  },
	  q$1 = e => $$1[e],
	  Q$1 = t => {
	    const {
	        openUrl: i,
	        onRedirect: o
	      } = t,
	      n = e(t, ["openUrl", "onRedirect"]);
	    return Object.assign(Object.assign({}, n), {
	      openUrl: !1 === i || i ? i : o
	    });
	  },
	  ee$1 = new a();
	class te$1 {
	  constructor(e) {
	    let t, i;
	    if (this.userCache = new P$1().enclosedCache, this.defaultOptions = {
	      authorizationParams: {
	        scope: "openid profile email"
	      },
	      useRefreshTokensFallback: !1,
	      useFormData: !0
	    }, this._releaseLockOnPageHide = async () => {
	      await ee$1.releaseLock("auth0.lock.getTokenSilently"), window.removeEventListener("pagehide", this._releaseLockOnPageHide);
	    }, this.options = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), e), {
	      authorizationParams: Object.assign(Object.assign({}, this.defaultOptions.authorizationParams), e.authorizationParams)
	    }), "undefined" != typeof window && (() => {
	      if (!w$1()) throw new Error("For security reasons, `window.crypto` is required to run `auth0-spa-js`.");
	      if (void 0 === w$1().subtle) throw new Error("\n      auth0-spa-js must run on a secure origin. See https://github.com/auth0/auth0-spa-js/blob/main/FAQ.md#why-do-i-get-auth0-spa-js-must-run-on-a-secure-origin for more information.\n    ");
	    })(), e.cache && e.cacheLocation && console.warn("Both `cache` and `cacheLocation` options have been specified in the Auth0Client configuration; ignoring `cacheLocation` and using `cache`."), e.cache) i = e.cache;else {
	      if (t = e.cacheLocation || "memory", !q$1(t)) throw new Error(`Invalid cache location "${t}"`);
	      i = q$1(t)();
	    }
	    this.httpTimeoutMs = e.httpTimeoutInSeconds ? 1e3 * e.httpTimeoutInSeconds : 1e4, this.cookieStorage = !1 === e.legacySameSiteCookie ? X$1 : N$1, this.orgHintCookieName = `auth0.${this.options.clientId}.organization_hint`, this.isAuthenticatedCookieName = (e => `auth0.${e}.is.authenticated`)(this.options.clientId), this.sessionCheckExpiryDays = e.sessionCheckExpiryDays || 1;
	    const o = e.useCookiesForTransactions ? this.cookieStorage : J$1;
	    var n;
	    this.scope = j("openid", this.options.authorizationParams.scope, this.options.useRefreshTokens ? "offline_access" : ""), this.transactionManager = new Z$1(o, this.options.clientId, this.options.cookieDomain), this.nowProvider = this.options.nowProvider || c$1, this.cacheManager = new x$1(i, i.allKeys ? void 0 : new B$1(i, this.options.clientId), this.nowProvider), this.domainUrl = (n = this.options.domain, /^https?:\/\//.test(n) ? n : `https://${n}`), this.tokenIssuer = ((e, t) => e ? e.startsWith("https://") ? e : `https://${e}/` : `${t}/`)(this.options.issuer, this.domainUrl), "undefined" != typeof window && window.Worker && this.options.useRefreshTokens && "memory" === t && (this.options.workerUrl ? this.worker = new Worker(this.options.workerUrl) : this.worker = new M());
	  }
	  _url(e) {
	    const t = encodeURIComponent(btoa(JSON.stringify(this.options.auth0Client || s)));
	    return `${this.domainUrl}${e}&auth0Client=${t}`;
	  }
	  _authorizeUrl(e) {
	    return this._url(`/authorize?${v(e)}`);
	  }
	  async _verifyIdToken(e, t, i) {
	    const o = await this.nowProvider();
	    return E$1({
	      iss: this.tokenIssuer,
	      aud: this.options.clientId,
	      id_token: e,
	      nonce: t,
	      organization: i,
	      leeway: this.options.leeway,
	      max_age: (n = this.options.authorizationParams.max_age, "string" != typeof n ? n : parseInt(n, 10) || void 0),
	      now: o
	    });
	    var n;
	  }
	  _processOrgHint(e) {
	    e ? this.cookieStorage.save(this.orgHintCookieName, e, {
	      daysUntilExpire: this.sessionCheckExpiryDays,
	      cookieDomain: this.options.cookieDomain
	    }) : this.cookieStorage.remove(this.orgHintCookieName, {
	      cookieDomain: this.options.cookieDomain
	    });
	  }
	  async _prepareAuthorizeUrl(e, t, i) {
	    const o = k$1(y()),
	      n = k$1(y()),
	      a = y(),
	      r = (e => {
	        const t = new Uint8Array(e);
	        return (e => {
	          const t = {
	            "+": "-",
	            "/": "_",
	            "=": ""
	          };
	          return e.replace(/[+/=]/g, e => t[e]);
	        })(window.btoa(String.fromCharCode(...Array.from(t))));
	      })(await (async e => {
	        const t = w$1().subtle.digest({
	          name: "SHA-256"
	        }, new TextEncoder().encode(e));
	        return await t;
	      })(a)),
	      s = ((e, t, i, o, n, a, r, s) => Object.assign(Object.assign(Object.assign({
	        client_id: e.clientId
	      }, e.authorizationParams), i), {
	        scope: j(t, i.scope),
	        response_type: "code",
	        response_mode: s || "query",
	        state: o,
	        nonce: n,
	        redirect_uri: r || e.authorizationParams.redirect_uri,
	        code_challenge: a,
	        code_challenge_method: "S256"
	      }))(this.options, this.scope, e, o, n, r, e.redirect_uri || this.options.authorizationParams.redirect_uri || i, null == t ? void 0 : t.response_mode),
	      c = this._authorizeUrl(s);
	    return {
	      nonce: n,
	      code_verifier: a,
	      scope: s.scope,
	      audience: s.audience || "default",
	      redirect_uri: s.redirect_uri,
	      state: o,
	      url: c
	    };
	  }
	  async loginWithPopup(e, t) {
	    var i;
	    if (e = e || {}, !(t = t || {}).popup && (t.popup = (e => {
	      const t = window.screenX + (window.innerWidth - 400) / 2,
	        i = window.screenY + (window.innerHeight - 600) / 2;
	      return window.open(e, "auth0:authorize:popup", `left=${t},top=${i},width=400,height=600,resizable,scrollbars=yes,status=1`);
	    })(""), !t.popup)) throw new Error("Unable to open a popup for loginWithPopup - window.open returned `null`");
	    const o = await this._prepareAuthorizeUrl(e.authorizationParams || {}, {
	      response_mode: "web_message"
	    }, window.location.origin);
	    t.popup.location.href = o.url;
	    const n = await (e => new Promise((t, i) => {
	      let o;
	      const n = setInterval(() => {
	          e.popup && e.popup.closed && (clearInterval(n), clearTimeout(a), window.removeEventListener("message", o, !1), i(new p$1(e.popup)));
	        }, 1e3),
	        a = setTimeout(() => {
	          clearInterval(n), i(new h$1(e.popup)), window.removeEventListener("message", o, !1);
	        }, 1e3 * (e.timeoutInSeconds || 60));
	      o = function (r) {
	        if (r.data && "authorization_response" === r.data.type) {
	          if (clearTimeout(a), clearInterval(n), window.removeEventListener("message", o, !1), e.popup.close(), r.data.response.error) return i(d$1.fromPayload(r.data.response));
	          t(r.data.response);
	        }
	      }, window.addEventListener("message", o);
	    }))(Object.assign(Object.assign({}, t), {
	      timeoutInSeconds: t.timeoutInSeconds || this.options.authorizeTimeoutInSeconds || 60
	    }));
	    if (o.state !== n.state) throw new d$1("state_mismatch", "Invalid state");
	    const a = (null === (i = e.authorizationParams) || void 0 === i ? void 0 : i.organization) || this.options.authorizationParams.organization;
	    await this._requestToken({
	      audience: o.audience,
	      scope: o.scope,
	      code_verifier: o.code_verifier,
	      grant_type: "authorization_code",
	      code: n.code,
	      redirect_uri: o.redirect_uri
	    }, {
	      nonceIn: o.nonce,
	      organization: a
	    });
	  }
	  async getUser() {
	    var e;
	    const t = await this._getIdTokenFromCache();
	    return null === (e = null == t ? void 0 : t.decodedToken) || void 0 === e ? void 0 : e.user;
	  }
	  async getIdTokenClaims() {
	    var e;
	    const t = await this._getIdTokenFromCache();
	    return null === (e = null == t ? void 0 : t.decodedToken) || void 0 === e ? void 0 : e.claims;
	  }
	  async loginWithRedirect(t = {}) {
	    var i;
	    const o = Q$1(t),
	      {
	        openUrl: n,
	        fragment: a,
	        appState: r
	      } = o,
	      s = e(o, ["openUrl", "fragment", "appState"]),
	      c = (null === (i = s.authorizationParams) || void 0 === i ? void 0 : i.organization) || this.options.authorizationParams.organization,
	      d = await this._prepareAuthorizeUrl(s.authorizationParams || {}),
	      {
	        url: u
	      } = d,
	      l = e(d, ["url"]);
	    this.transactionManager.create(Object.assign(Object.assign(Object.assign({}, l), {
	      appState: r
	    }), c && {
	      organization: c
	    }));
	    const h = a ? `${u}#${a}` : u;
	    n ? await n(h) : window.location.assign(h);
	  }
	  async handleRedirectCallback(e = window.location.href) {
	    const t = e.split("?").slice(1);
	    if (0 === t.length) throw new Error("There are no query params available for parsing.");
	    const {
	        state: i,
	        code: o,
	        error: n,
	        error_description: a
	      } = (e => {
	        e.indexOf("#") > -1 && (e = e.substring(0, e.indexOf("#")));
	        const t = new URLSearchParams(e);
	        return {
	          state: t.get("state"),
	          code: t.get("code") || void 0,
	          error: t.get("error") || void 0,
	          error_description: t.get("error_description") || void 0
	        };
	      })(t.join("")),
	      r = this.transactionManager.get();
	    if (!r) throw new d$1("missing_transaction", "Invalid state");
	    if (this.transactionManager.remove(), n) throw new u(n, a || n, i, r.appState);
	    if (!r.code_verifier || r.state && r.state !== i) throw new d$1("state_mismatch", "Invalid state");
	    const s = r.organization,
	      c = r.nonce,
	      l = r.redirect_uri;
	    return await this._requestToken(Object.assign({
	      audience: r.audience,
	      scope: r.scope,
	      code_verifier: r.code_verifier,
	      grant_type: "authorization_code",
	      code: o
	    }, l ? {
	      redirect_uri: l
	    } : {}), {
	      nonceIn: c,
	      organization: s
	    }), {
	      appState: r.appState
	    };
	  }
	  async checkSession(e) {
	    if (!this.cookieStorage.get(this.isAuthenticatedCookieName)) {
	      if (!this.cookieStorage.get("auth0.is.authenticated")) return;
	      this.cookieStorage.save(this.isAuthenticatedCookieName, !0, {
	        daysUntilExpire: this.sessionCheckExpiryDays,
	        cookieDomain: this.options.cookieDomain
	      }), this.cookieStorage.remove("auth0.is.authenticated");
	    }
	    try {
	      await this.getTokenSilently(e);
	    } catch (e) {}
	  }
	  async getTokenSilently(e = {}) {
	    var t;
	    const i = Object.assign(Object.assign({
	        cacheMode: "on"
	      }, e), {
	        authorizationParams: Object.assign(Object.assign(Object.assign({}, this.options.authorizationParams), e.authorizationParams), {
	          scope: j(this.scope, null === (t = e.authorizationParams) || void 0 === t ? void 0 : t.scope)
	        })
	      }),
	      o = await ((e, t) => {
	        let i = A$1[t];
	        return i || (i = e().finally(() => {
	          delete A$1[t], i = null;
	        }), A$1[t] = i), i;
	      })(() => this._getTokenSilently(i), `${this.options.clientId}::${i.authorizationParams.audience}::${i.authorizationParams.scope}`);
	    return e.detailedResponse ? o : null == o ? void 0 : o.access_token;
	  }
	  async _getTokenSilently(t) {
	    const {
	        cacheMode: i
	      } = t,
	      o = e(t, ["cacheMode"]);
	    if ("off" !== i) {
	      const e = await this._getEntryFromCache({
	        scope: o.authorizationParams.scope,
	        audience: o.authorizationParams.audience || "default",
	        clientId: this.options.clientId
	      });
	      if (e) return e;
	    }
	    if ("cache-only" !== i) {
	      if (!(await (async (e, t = 3) => {
	        for (let i = 0; i < t; i++) if (await e()) return !0;
	        return !1;
	      })(() => ee$1.acquireLock("auth0.lock.getTokenSilently", 5e3), 10))) throw new l();
	      try {
	        if (window.addEventListener("pagehide", this._releaseLockOnPageHide), "off" !== i) {
	          const e = await this._getEntryFromCache({
	            scope: o.authorizationParams.scope,
	            audience: o.authorizationParams.audience || "default",
	            clientId: this.options.clientId
	          });
	          if (e) return e;
	        }
	        const e = this.options.useRefreshTokens ? await this._getTokenUsingRefreshToken(o) : await this._getTokenFromIFrame(o),
	          {
	            id_token: t,
	            access_token: n,
	            oauthTokenScope: a,
	            expires_in: r
	          } = e;
	        return Object.assign(Object.assign({
	          id_token: t,
	          access_token: n
	        }, a ? {
	          scope: a
	        } : null), {
	          expires_in: r
	        });
	      } finally {
	        await ee$1.releaseLock("auth0.lock.getTokenSilently"), window.removeEventListener("pagehide", this._releaseLockOnPageHide);
	      }
	    }
	  }
	  async getTokenWithPopup(e = {}, t = {}) {
	    var i;
	    const o = Object.assign(Object.assign({}, e), {
	      authorizationParams: Object.assign(Object.assign(Object.assign({}, this.options.authorizationParams), e.authorizationParams), {
	        scope: j(this.scope, null === (i = e.authorizationParams) || void 0 === i ? void 0 : i.scope)
	      })
	    });
	    t = Object.assign(Object.assign({}, r), t), await this.loginWithPopup(o, t);
	    return (await this.cacheManager.get(new C$1({
	      scope: o.authorizationParams.scope,
	      audience: o.authorizationParams.audience || "default",
	      clientId: this.options.clientId
	    }))).access_token;
	  }
	  async isAuthenticated() {
	    return !!(await this.getUser());
	  }
	  _buildLogoutUrl(t) {
	    null !== t.clientId ? t.clientId = t.clientId || this.options.clientId : delete t.clientId;
	    const i = t.logoutParams || {},
	      {
	        federated: o
	      } = i,
	      n = e(i, ["federated"]),
	      a = o ? "&federated" : "";
	    return this._url(`/v2/logout?${v(Object.assign({
      clientId: t.clientId
    }, n))}`) + a;
	  }
	  async logout(t = {}) {
	    const i = Q$1(t),
	      {
	        openUrl: o
	      } = i,
	      n = e(i, ["openUrl"]);
	    null === t.clientId ? await this.cacheManager.clear() : await this.cacheManager.clear(t.clientId || this.options.clientId), this.cookieStorage.remove(this.orgHintCookieName, {
	      cookieDomain: this.options.cookieDomain
	    }), this.cookieStorage.remove(this.isAuthenticatedCookieName, {
	      cookieDomain: this.options.cookieDomain
	    }), this.userCache.remove("@@user@@");
	    const a = this._buildLogoutUrl(n);
	    o ? await o(a) : !1 !== o && window.location.assign(a);
	  }
	  async _getTokenFromIFrame(e) {
	    const t = Object.assign(Object.assign({}, e.authorizationParams), {
	        prompt: "none"
	      }),
	      i = this.cookieStorage.get(this.orgHintCookieName);
	    i && !t.organization && (t.organization = i);
	    const {
	      url: o,
	      state: n,
	      nonce: a,
	      code_verifier: r,
	      redirect_uri: s,
	      scope: c,
	      audience: u
	    } = await this._prepareAuthorizeUrl(t, {
	      response_mode: "web_message"
	    }, window.location.origin);
	    try {
	      if (window.crossOriginIsolated) throw new d$1("login_required", "The application is running in a Cross-Origin Isolated context, silently retrieving a token without refresh token is not possible.");
	      const i = e.timeoutInSeconds || this.options.authorizeTimeoutInSeconds,
	        h = await ((e, t, i = 60) => new Promise((o, n) => {
	          const a = window.document.createElement("iframe");
	          a.setAttribute("width", "0"), a.setAttribute("height", "0"), a.style.display = "none";
	          const r = () => {
	            window.document.body.contains(a) && (window.document.body.removeChild(a), window.removeEventListener("message", s, !1));
	          };
	          let s;
	          const c = setTimeout(() => {
	            n(new l()), r();
	          }, 1e3 * i);
	          s = function (e) {
	            if (e.origin != t) return;
	            if (!e.data || "authorization_response" !== e.data.type) return;
	            const i = e.source;
	            i && i.close(), e.data.response.error ? n(d$1.fromPayload(e.data.response)) : o(e.data.response), clearTimeout(c), window.removeEventListener("message", s, !1), setTimeout(r, 2e3);
	          }, window.addEventListener("message", s, !1), window.document.body.appendChild(a), a.setAttribute("src", e);
	        }))(o, this.domainUrl, i);
	      if (n !== h.state) throw new d$1("state_mismatch", "Invalid state");
	      const p = await this._requestToken(Object.assign(Object.assign({}, e.authorizationParams), {
	        code_verifier: r,
	        code: h.code,
	        grant_type: "authorization_code",
	        redirect_uri: s,
	        timeout: e.authorizationParams.timeout || this.httpTimeoutMs
	      }), {
	        nonceIn: a,
	        organization: t.organization
	      });
	      return Object.assign(Object.assign({}, p), {
	        scope: c,
	        oauthTokenScope: p.scope,
	        audience: u
	      });
	    } catch (e) {
	      throw "login_required" === e.error && this.logout({
	        openUrl: !1
	      }), e;
	    }
	  }
	  async _getTokenUsingRefreshToken(e) {
	    const t = await this.cacheManager.get(new C$1({
	      scope: e.authorizationParams.scope,
	      audience: e.authorizationParams.audience || "default",
	      clientId: this.options.clientId
	    }));
	    if (!(t && t.refresh_token || this.worker)) {
	      if (this.options.useRefreshTokensFallback) return await this._getTokenFromIFrame(e);
	      throw new f(e.authorizationParams.audience || "default", e.authorizationParams.scope);
	    }
	    const i = e.authorizationParams.redirect_uri || this.options.authorizationParams.redirect_uri || window.location.origin,
	      o = "number" == typeof e.timeoutInSeconds ? 1e3 * e.timeoutInSeconds : null;
	    try {
	      const n = await this._requestToken(Object.assign(Object.assign(Object.assign({}, e.authorizationParams), {
	        grant_type: "refresh_token",
	        refresh_token: t && t.refresh_token,
	        redirect_uri: i
	      }), o && {
	        timeout: o
	      }));
	      return Object.assign(Object.assign({}, n), {
	        scope: e.authorizationParams.scope,
	        oauthTokenScope: n.scope,
	        audience: e.authorizationParams.audience || "default"
	      });
	    } catch (t) {
	      if ((t.message.indexOf("Missing Refresh Token") > -1 || t.message && t.message.indexOf("invalid refresh token") > -1) && this.options.useRefreshTokensFallback) return await this._getTokenFromIFrame(e);
	      throw t;
	    }
	  }
	  async _saveEntryInCache(t) {
	    const {
	        id_token: i,
	        decodedToken: o
	      } = t,
	      n = e(t, ["id_token", "decodedToken"]);
	    this.userCache.set("@@user@@", {
	      id_token: i,
	      decodedToken: o
	    }), await this.cacheManager.setIdToken(this.options.clientId, t.id_token, t.decodedToken), await this.cacheManager.set(n);
	  }
	  async _getIdTokenFromCache() {
	    const e = this.options.authorizationParams.audience || "default",
	      t = await this.cacheManager.getIdToken(new C$1({
	        clientId: this.options.clientId,
	        audience: e,
	        scope: this.scope
	      })),
	      i = this.userCache.get("@@user@@");
	    return t && t.id_token === (null == i ? void 0 : i.id_token) ? i : (this.userCache.set("@@user@@", t), t);
	  }
	  async _getEntryFromCache({
	    scope: e,
	    audience: t,
	    clientId: i
	  }) {
	    const o = await this.cacheManager.get(new C$1({
	      scope: e,
	      audience: t,
	      clientId: i
	    }), 60);
	    if (o && o.access_token) {
	      const {
	          access_token: e,
	          oauthTokenScope: t,
	          expires_in: i
	        } = o,
	        n = await this._getIdTokenFromCache();
	      return n && Object.assign(Object.assign({
	        id_token: n.id_token,
	        access_token: e
	      }, t ? {
	        scope: t
	      } : null), {
	        expires_in: i
	      });
	    }
	  }
	  async _requestToken(e, t) {
	    const {
	        nonceIn: i,
	        organization: o
	      } = t || {},
	      n = await T(Object.assign({
	        baseUrl: this.domainUrl,
	        client_id: this.options.clientId,
	        auth0Client: this.options.auth0Client,
	        useFormData: this.options.useFormData,
	        timeout: this.httpTimeoutMs
	      }, e), this.worker),
	      a = await this._verifyIdToken(n.id_token, i, o);
	    return await this._saveEntryInCache(Object.assign(Object.assign(Object.assign(Object.assign({}, n), {
	      decodedToken: a,
	      scope: e.scope,
	      audience: e.audience || "default"
	    }), n.scope ? {
	      oauthTokenScope: n.scope
	    } : null), {
	      client_id: this.options.clientId
	    })), this.cookieStorage.save(this.isAuthenticatedCookieName, !0, {
	      daysUntilExpire: this.sessionCheckExpiryDays,
	      cookieDomain: this.options.cookieDomain
	    }), this._processOrgHint(o || a.claims.org_id), Object.assign(Object.assign({}, n), {
	      decodedToken: a
	    });
	  }
	}
	async function oe$1(e) {
	  const t = new te$1(e);
	  return await t.checkSession(), t;
	}

	var extend$2;
	var hasRequiredExtend;

	function requireExtend () {
		if (hasRequiredExtend) return extend$2;
		hasRequiredExtend = 1;

		var hasOwn = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var defineProperty = Object.defineProperty;
		var gOPD = Object.getOwnPropertyDescriptor;
		var isArray = function isArray(arr) {
		  if (typeof Array.isArray === 'function') {
		    return Array.isArray(arr);
		  }
		  return toStr.call(arr) === '[object Array]';
		};
		var isPlainObject = function isPlainObject(obj) {
		  if (!obj || toStr.call(obj) !== '[object Object]') {
		    return false;
		  }
		  var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		  // Not own constructor property must be Object
		  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		    return false;
		  }

		  // Own properties are enumerated firstly, so to speed up,
		  // if last one is own, then all properties are own.
		  var key;
		  for (key in obj) {/**/}
		  return typeof key === 'undefined' || hasOwn.call(obj, key);
		};

		// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
		var setProperty = function setProperty(target, options) {
		  if (defineProperty && options.name === '__proto__') {
		    defineProperty(target, options.name, {
		      enumerable: true,
		      configurable: true,
		      value: options.newValue,
		      writable: true
		    });
		  } else {
		    target[options.name] = options.newValue;
		  }
		};

		// Return undefined instead of __proto__ if '__proto__' is not an own property
		var getProperty = function getProperty(obj, name) {
		  if (name === '__proto__') {
		    if (!hasOwn.call(obj, name)) {
		      return void 0;
		    } else if (gOPD) {
		      // In early versions of node, obj['__proto__'] is buggy when obj has
		      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
		      return gOPD(obj, name).value;
		    }
		  }
		  return obj[name];
		};
		extend$2 = function extend() {
		  var options, name, src, copy, copyIsArray, clone;
		  var target = arguments[0];
		  var i = 1;
		  var length = arguments.length;
		  var deep = false;

		  // Handle a deep copy situation
		  if (typeof target === 'boolean') {
		    deep = target;
		    target = arguments[1] || {};
		    // skip the boolean and the target
		    i = 2;
		  }
		  if (target == null || typeof target !== 'object' && typeof target !== 'function') {
		    target = {};
		  }
		  for (; i < length; ++i) {
		    options = arguments[i];
		    // Only deal with non-null/undefined values
		    if (options != null) {
		      // Extend the base object
		      for (name in options) {
		        src = getProperty(target, name);
		        copy = getProperty(options, name);

		        // Prevent never-ending loop
		        if (target !== copy) {
		          // Recurse if we're merging plain objects or arrays
		          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
		            if (copyIsArray) {
		              copyIsArray = false;
		              clone = src && isArray(src) ? src : [];
		            } else {
		              clone = src && isPlainObject(src) ? src : {};
		            }

		            // Never move original objects, clone them
		            setProperty(target, {
		              name: name,
		              newValue: extend(deep, clone, copy)
		            });

		            // Don't bring in undefined values
		          } else if (typeof copy !== 'undefined') {
		            setProperty(target, {
		              name: name,
		              newValue: copy
		            });
		          }
		        }
		      }
		    }
		  }

		  // Return the modified object
		  return target;
		};
		return extend$2;
	}

	var extendExports = requireExtend();
	var extend$1 = /*@__PURE__*/getDefaultExportFromCjs(extendExports);

	function bind(fn, thisArg) {
	  return function wrap() {
	    return fn.apply(thisArg, arguments);
	  };
	}

	// utils is a library of generic helper functions non-specific to axios

	const {
	  toString
	} = Object.prototype;
	const {
	  getPrototypeOf
	} = Object;
	const kindOf = (cache => thing => {
	  const str = toString.call(thing);
	  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
	})(Object.create(null));
	const kindOfTest = type => {
	  type = type.toLowerCase();
	  return thing => kindOf(thing) === type;
	};
	const typeOfTest = type => thing => typeof thing === type;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 *
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	const {
	  isArray
	} = Array;

	/**
	 * Determine if a value is undefined
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	const isUndefined = typeOfTest('undefined');

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	const isArrayBuffer = kindOfTest('ArrayBuffer');

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  let result;
	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = val && val.buffer && isArrayBuffer(val.buffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	const isString = typeOfTest('string');

	/**
	 * Determine if a value is a Function
	 *
	 * @param {*} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	const isFunction = typeOfTest('function');

	/**
	 * Determine if a value is a Number
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	const isNumber = typeOfTest('number');

	/**
	 * Determine if a value is an Object
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	const isObject = thing => thing !== null && typeof thing === 'object';

	/**
	 * Determine if a value is a Boolean
	 *
	 * @param {*} thing The value to test
	 * @returns {boolean} True if value is a Boolean, otherwise false
	 */
	const isBoolean = thing => thing === true || thing === false;

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a plain Object, otherwise false
	 */
	const isPlainObject = val => {
	  if (kindOf(val) !== 'object') {
	    return false;
	  }
	  const prototype = getPrototypeOf(val);
	  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
	};

	/**
	 * Determine if a value is a Date
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	const isDate = kindOfTest('Date');

	/**
	 * Determine if a value is a File
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFile = kindOfTest('File');

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	const isBlob = kindOfTest('Blob');

	/**
	 * Determine if a value is a FileList
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFileList = kindOfTest('FileList');

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	const isStream = val => isObject(val) && isFunction(val.pipe);

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	const isFormData = thing => {
	  let kind;
	  return thing && (typeof FormData === 'function' && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === 'formdata' ||
	  // detect form-data instance
	  kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]'));
	};

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	const isURLSearchParams = kindOfTest('URLSearchParams');

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 *
	 * @returns {String} The String freed of excess whitespace
	 */
	const trim = str => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 *
	 * @param {Boolean} [allOwnKeys = false]
	 * @returns {any}
	 */
	function forEach(obj, fn, {
	  allOwnKeys = false
	} = {}) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	  let i;
	  let l;

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
	    const len = keys.length;
	    let key;
	    for (i = 0; i < len; i++) {
	      key = keys[i];
	      fn.call(null, obj[key], key, obj);
	    }
	  }
	}
	function findKey(obj, key) {
	  key = key.toLowerCase();
	  const keys = Object.keys(obj);
	  let i = keys.length;
	  let _key;
	  while (i-- > 0) {
	    _key = keys[i];
	    if (key === _key.toLowerCase()) {
	      return _key;
	    }
	  }
	  return null;
	}
	const _global = (() => {
	  /*eslint no-undef:0*/
	  if (typeof globalThis !== "undefined") return globalThis;
	  return typeof self !== "undefined" ? self : typeof window !== 'undefined' ? window : global;
	})();
	const isContextDefined = context => !isUndefined(context) && context !== _global;

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 *
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */
	) {
	  const {
	    caseless
	  } = isContextDefined(this) && this || {};
	  const result = {};
	  const assignValue = (val, key) => {
	    const targetKey = caseless && findKey(result, key) || key;
	    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
	      result[targetKey] = merge(result[targetKey], val);
	    } else if (isPlainObject(val)) {
	      result[targetKey] = merge({}, val);
	    } else if (isArray(val)) {
	      result[targetKey] = val.slice();
	    } else {
	      result[targetKey] = val;
	    }
	  };
	  for (let i = 0, l = arguments.length; i < l; i++) {
	    arguments[i] && forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 *
	 * @param {Boolean} [allOwnKeys]
	 * @returns {Object} The resulting value of object a
	 */
	const extend = (a, b, thisArg, {
	  allOwnKeys
	} = {}) => {
	  forEach(b, (val, key) => {
	    if (thisArg && isFunction(val)) {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  }, {
	    allOwnKeys
	  });
	  return a;
	};

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 *
	 * @returns {string} content value without BOM
	 */
	const stripBOM = content => {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	};

	/**
	 * Inherit the prototype methods from one constructor into another
	 * @param {function} constructor
	 * @param {function} superConstructor
	 * @param {object} [props]
	 * @param {object} [descriptors]
	 *
	 * @returns {void}
	 */
	const inherits$1 = (constructor, superConstructor, props, descriptors) => {
	  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
	  constructor.prototype.constructor = constructor;
	  Object.defineProperty(constructor, 'super', {
	    value: superConstructor.prototype
	  });
	  props && Object.assign(constructor.prototype, props);
	};

	/**
	 * Resolve object with deep prototype chain to a flat object
	 * @param {Object} sourceObj source object
	 * @param {Object} [destObj]
	 * @param {Function|Boolean} [filter]
	 * @param {Function} [propFilter]
	 *
	 * @returns {Object}
	 */
	const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
	  let props;
	  let i;
	  let prop;
	  const merged = {};
	  destObj = destObj || {};
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  if (sourceObj == null) return destObj;
	  do {
	    props = Object.getOwnPropertyNames(sourceObj);
	    i = props.length;
	    while (i-- > 0) {
	      prop = props[i];
	      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
	        destObj[prop] = sourceObj[prop];
	        merged[prop] = true;
	      }
	    }
	    sourceObj = filter !== false && getPrototypeOf(sourceObj);
	  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
	  return destObj;
	};

	/**
	 * Determines whether a string ends with the characters of a specified string
	 *
	 * @param {String} str
	 * @param {String} searchString
	 * @param {Number} [position= 0]
	 *
	 * @returns {boolean}
	 */
	const endsWith = (str, searchString, position) => {
	  str = String(str);
	  if (position === undefined || position > str.length) {
	    position = str.length;
	  }
	  position -= searchString.length;
	  const lastIndex = str.indexOf(searchString, position);
	  return lastIndex !== -1 && lastIndex === position;
	};

	/**
	 * Returns new array from array like object or null if failed
	 *
	 * @param {*} [thing]
	 *
	 * @returns {?Array}
	 */
	const toArray = thing => {
	  if (!thing) return null;
	  if (isArray(thing)) return thing;
	  let i = thing.length;
	  if (!isNumber(i)) return null;
	  const arr = new Array(i);
	  while (i-- > 0) {
	    arr[i] = thing[i];
	  }
	  return arr;
	};

	/**
	 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
	 * thing passed in is an instance of Uint8Array
	 *
	 * @param {TypedArray}
	 *
	 * @returns {Array}
	 */
	// eslint-disable-next-line func-names
	const isTypedArray = (TypedArray => {
	  // eslint-disable-next-line func-names
	  return thing => {
	    return TypedArray && thing instanceof TypedArray;
	  };
	})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

	/**
	 * For each entry in the object, call the function with the key and value.
	 *
	 * @param {Object<any, any>} obj - The object to iterate over.
	 * @param {Function} fn - The function to call for each entry.
	 *
	 * @returns {void}
	 */
	const forEachEntry = (obj, fn) => {
	  const generator = obj && obj[Symbol.iterator];
	  const iterator = generator.call(obj);
	  let result;
	  while ((result = iterator.next()) && !result.done) {
	    const pair = result.value;
	    fn.call(obj, pair[0], pair[1]);
	  }
	};

	/**
	 * It takes a regular expression and a string, and returns an array of all the matches
	 *
	 * @param {string} regExp - The regular expression to match against.
	 * @param {string} str - The string to search.
	 *
	 * @returns {Array<boolean>}
	 */
	const matchAll = (regExp, str) => {
	  let matches;
	  const arr = [];
	  while ((matches = regExp.exec(str)) !== null) {
	    arr.push(matches);
	  }
	  return arr;
	};

	/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
	const isHTMLForm = kindOfTest('HTMLFormElement');
	const toCamelCase = str => {
	  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
	    return p1.toUpperCase() + p2;
	  });
	};

	/* Creating a function that will check if an object has a property. */
	const hasOwnProperty = (({
	  hasOwnProperty
	}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

	/**
	 * Determine if a value is a RegExp object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a RegExp object, otherwise false
	 */
	const isRegExp = kindOfTest('RegExp');
	const reduceDescriptors = (obj, reducer) => {
	  const descriptors = Object.getOwnPropertyDescriptors(obj);
	  const reducedDescriptors = {};
	  forEach(descriptors, (descriptor, name) => {
	    let ret;
	    if ((ret = reducer(descriptor, name, obj)) !== false) {
	      reducedDescriptors[name] = ret || descriptor;
	    }
	  });
	  Object.defineProperties(obj, reducedDescriptors);
	};

	/**
	 * Makes all methods read-only
	 * @param {Object} obj
	 */

	const freezeMethods = obj => {
	  reduceDescriptors(obj, (descriptor, name) => {
	    // skip restricted props in strict mode
	    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
	      return false;
	    }
	    const value = obj[name];
	    if (!isFunction(value)) return;
	    descriptor.enumerable = false;
	    if ('writable' in descriptor) {
	      descriptor.writable = false;
	      return;
	    }
	    if (!descriptor.set) {
	      descriptor.set = () => {
	        throw Error('Can not rewrite read-only method \'' + name + '\'');
	      };
	    }
	  });
	};
	const toObjectSet = (arrayOrString, delimiter) => {
	  const obj = {};
	  const define = arr => {
	    arr.forEach(value => {
	      obj[value] = true;
	    });
	  };
	  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
	  return obj;
	};
	const noop$1 = () => {};
	const toFiniteNumber = (value, defaultValue) => {
	  value = +value;
	  return Number.isFinite(value) ? value : defaultValue;
	};
	const ALPHA = 'abcdefghijklmnopqrstuvwxyz';
	const DIGIT = '0123456789';
	const ALPHABET = {
	  DIGIT,
	  ALPHA,
	  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
	};
	const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
	  let str = '';
	  const {
	    length
	  } = alphabet;
	  while (size--) {
	    str += alphabet[Math.random() * length | 0];
	  }
	  return str;
	};

	/**
	 * If the thing is a FormData object, return true, otherwise return false.
	 *
	 * @param {unknown} thing - The thing to check.
	 *
	 * @returns {boolean}
	 */
	function isSpecCompliantForm(thing) {
	  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
	}
	const toJSONObject = obj => {
	  const stack = new Array(10);
	  const visit = (source, i) => {
	    if (isObject(source)) {
	      if (stack.indexOf(source) >= 0) {
	        return;
	      }
	      if (!('toJSON' in source)) {
	        stack[i] = source;
	        const target = isArray(source) ? [] : {};
	        forEach(source, (value, key) => {
	          const reducedValue = visit(value, i + 1);
	          !isUndefined(reducedValue) && (target[key] = reducedValue);
	        });
	        stack[i] = undefined;
	        return target;
	      }
	    }
	    return source;
	  };
	  return visit(obj, 0);
	};
	const isAsyncFn = kindOfTest('AsyncFunction');
	const isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
	var utils$3 = {
	  isArray,
	  isArrayBuffer,
	  isBuffer,
	  isFormData,
	  isArrayBufferView,
	  isString,
	  isNumber,
	  isBoolean,
	  isObject,
	  isPlainObject,
	  isUndefined,
	  isDate,
	  isFile,
	  isBlob,
	  isRegExp,
	  isFunction,
	  isStream,
	  isURLSearchParams,
	  isTypedArray,
	  isFileList,
	  forEach,
	  merge,
	  extend,
	  trim,
	  stripBOM,
	  inherits: inherits$1,
	  toFlatObject,
	  kindOf,
	  kindOfTest,
	  endsWith,
	  toArray,
	  forEachEntry,
	  matchAll,
	  isHTMLForm,
	  hasOwnProperty,
	  hasOwnProp: hasOwnProperty,
	  // an alias to avoid ESLint no-prototype-builtins detection
	  reduceDescriptors,
	  freezeMethods,
	  toObjectSet,
	  toCamelCase,
	  noop: noop$1,
	  toFiniteNumber,
	  findKey,
	  global: _global,
	  isContextDefined,
	  ALPHABET,
	  generateString,
	  isSpecCompliantForm,
	  toJSONObject,
	  isAsyncFn,
	  isThenable
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [config] The config.
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 *
	 * @returns {Error} The created error.
	 */
	function AxiosError$1(message, code, config, request, response) {
	  Error.call(this);
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = new Error().stack;
	  }
	  this.message = message;
	  this.name = 'AxiosError';
	  code && (this.code = code);
	  config && (this.config = config);
	  request && (this.request = request);
	  response && (this.response = response);
	}
	utils$3.inherits(AxiosError$1, Error, {
	  toJSON: function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: utils$3.toJSONObject(this.config),
	      code: this.code,
	      status: this.response && this.response.status ? this.response.status : null
	    };
	  }
	});
	const prototype$1 = AxiosError$1.prototype;
	const descriptors = {};
	['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED', 'ERR_NOT_SUPPORT', 'ERR_INVALID_URL'
	// eslint-disable-next-line func-names
	].forEach(code => {
	  descriptors[code] = {
	    value: code
	  };
	});
	Object.defineProperties(AxiosError$1, descriptors);
	Object.defineProperty(prototype$1, 'isAxiosError', {
	  value: true
	});

	// eslint-disable-next-line func-names
	AxiosError$1.from = (error, code, config, request, response, customProps) => {
	  const axiosError = Object.create(prototype$1);
	  utils$3.toFlatObject(error, axiosError, function filter(obj) {
	    return obj !== Error.prototype;
	  }, prop => {
	    return prop !== 'isAxiosError';
	  });
	  AxiosError$1.call(axiosError, error.message, code, config, request, response);
	  axiosError.cause = error;
	  axiosError.name = error.name;
	  customProps && Object.assign(axiosError, customProps);
	  return axiosError;
	};

	var delayed_stream;
	var hasRequiredDelayed_stream;

	function requireDelayed_stream () {
		if (hasRequiredDelayed_stream) return delayed_stream;
		hasRequiredDelayed_stream = 1;
		var Stream = stream__default["default"].Stream;
		var util = require$$1__default["default"];
		delayed_stream = DelayedStream;
		function DelayedStream() {
		  this.source = null;
		  this.dataSize = 0;
		  this.maxDataSize = 1024 * 1024;
		  this.pauseStream = true;
		  this._maxDataSizeExceeded = false;
		  this._released = false;
		  this._bufferedEvents = [];
		}
		util.inherits(DelayedStream, Stream);
		DelayedStream.create = function (source, options) {
		  var delayedStream = new this();
		  options = options || {};
		  for (var option in options) {
		    delayedStream[option] = options[option];
		  }
		  delayedStream.source = source;
		  var realEmit = source.emit;
		  source.emit = function () {
		    delayedStream._handleEmit(arguments);
		    return realEmit.apply(source, arguments);
		  };
		  source.on('error', function () {});
		  if (delayedStream.pauseStream) {
		    source.pause();
		  }
		  return delayedStream;
		};
		Object.defineProperty(DelayedStream.prototype, 'readable', {
		  configurable: true,
		  enumerable: true,
		  get: function () {
		    return this.source.readable;
		  }
		});
		DelayedStream.prototype.setEncoding = function () {
		  return this.source.setEncoding.apply(this.source, arguments);
		};
		DelayedStream.prototype.resume = function () {
		  if (!this._released) {
		    this.release();
		  }
		  this.source.resume();
		};
		DelayedStream.prototype.pause = function () {
		  this.source.pause();
		};
		DelayedStream.prototype.release = function () {
		  this._released = true;
		  this._bufferedEvents.forEach(function (args) {
		    this.emit.apply(this, args);
		  }.bind(this));
		  this._bufferedEvents = [];
		};
		DelayedStream.prototype.pipe = function () {
		  var r = Stream.prototype.pipe.apply(this, arguments);
		  this.resume();
		  return r;
		};
		DelayedStream.prototype._handleEmit = function (args) {
		  if (this._released) {
		    this.emit.apply(this, args);
		    return;
		  }
		  if (args[0] === 'data') {
		    this.dataSize += args[1].length;
		    this._checkIfMaxDataSizeExceeded();
		  }
		  this._bufferedEvents.push(args);
		};
		DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
		  if (this._maxDataSizeExceeded) {
		    return;
		  }
		  if (this.dataSize <= this.maxDataSize) {
		    return;
		  }
		  this._maxDataSizeExceeded = true;
		  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
		  this.emit('error', new Error(message));
		};
		return delayed_stream;
	}

	var combined_stream;
	var hasRequiredCombined_stream;

	function requireCombined_stream () {
		if (hasRequiredCombined_stream) return combined_stream;
		hasRequiredCombined_stream = 1;
		var util = require$$1__default["default"];
		var Stream = stream__default["default"].Stream;
		var DelayedStream = requireDelayed_stream();
		combined_stream = CombinedStream;
		function CombinedStream() {
		  this.writable = false;
		  this.readable = true;
		  this.dataSize = 0;
		  this.maxDataSize = 2 * 1024 * 1024;
		  this.pauseStreams = true;
		  this._released = false;
		  this._streams = [];
		  this._currentStream = null;
		  this._insideLoop = false;
		  this._pendingNext = false;
		}
		util.inherits(CombinedStream, Stream);
		CombinedStream.create = function (options) {
		  var combinedStream = new this();
		  options = options || {};
		  for (var option in options) {
		    combinedStream[option] = options[option];
		  }
		  return combinedStream;
		};
		CombinedStream.isStreamLike = function (stream) {
		  return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
		};
		CombinedStream.prototype.append = function (stream) {
		  var isStreamLike = CombinedStream.isStreamLike(stream);
		  if (isStreamLike) {
		    if (!(stream instanceof DelayedStream)) {
		      var newStream = DelayedStream.create(stream, {
		        maxDataSize: Infinity,
		        pauseStream: this.pauseStreams
		      });
		      stream.on('data', this._checkDataSize.bind(this));
		      stream = newStream;
		    }
		    this._handleErrors(stream);
		    if (this.pauseStreams) {
		      stream.pause();
		    }
		  }
		  this._streams.push(stream);
		  return this;
		};
		CombinedStream.prototype.pipe = function (dest, options) {
		  Stream.prototype.pipe.call(this, dest, options);
		  this.resume();
		  return dest;
		};
		CombinedStream.prototype._getNext = function () {
		  this._currentStream = null;
		  if (this._insideLoop) {
		    this._pendingNext = true;
		    return; // defer call
		  }
		  this._insideLoop = true;
		  try {
		    do {
		      this._pendingNext = false;
		      this._realGetNext();
		    } while (this._pendingNext);
		  } finally {
		    this._insideLoop = false;
		  }
		};
		CombinedStream.prototype._realGetNext = function () {
		  var stream = this._streams.shift();
		  if (typeof stream == 'undefined') {
		    this.end();
		    return;
		  }
		  if (typeof stream !== 'function') {
		    this._pipeNext(stream);
		    return;
		  }
		  var getStream = stream;
		  getStream(function (stream) {
		    var isStreamLike = CombinedStream.isStreamLike(stream);
		    if (isStreamLike) {
		      stream.on('data', this._checkDataSize.bind(this));
		      this._handleErrors(stream);
		    }
		    this._pipeNext(stream);
		  }.bind(this));
		};
		CombinedStream.prototype._pipeNext = function (stream) {
		  this._currentStream = stream;
		  var isStreamLike = CombinedStream.isStreamLike(stream);
		  if (isStreamLike) {
		    stream.on('end', this._getNext.bind(this));
		    stream.pipe(this, {
		      end: false
		    });
		    return;
		  }
		  var value = stream;
		  this.write(value);
		  this._getNext();
		};
		CombinedStream.prototype._handleErrors = function (stream) {
		  var self = this;
		  stream.on('error', function (err) {
		    self._emitError(err);
		  });
		};
		CombinedStream.prototype.write = function (data) {
		  this.emit('data', data);
		};
		CombinedStream.prototype.pause = function () {
		  if (!this.pauseStreams) {
		    return;
		  }
		  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
		  this.emit('pause');
		};
		CombinedStream.prototype.resume = function () {
		  if (!this._released) {
		    this._released = true;
		    this.writable = true;
		    this._getNext();
		  }
		  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
		  this.emit('resume');
		};
		CombinedStream.prototype.end = function () {
		  this._reset();
		  this.emit('end');
		};
		CombinedStream.prototype.destroy = function () {
		  this._reset();
		  this.emit('close');
		};
		CombinedStream.prototype._reset = function () {
		  this.writable = false;
		  this._streams = [];
		  this._currentStream = null;
		};
		CombinedStream.prototype._checkDataSize = function () {
		  this._updateDataSize();
		  if (this.dataSize <= this.maxDataSize) {
		    return;
		  }
		  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
		  this._emitError(new Error(message));
		};
		CombinedStream.prototype._updateDataSize = function () {
		  this.dataSize = 0;
		  var self = this;
		  this._streams.forEach(function (stream) {
		    if (!stream.dataSize) {
		      return;
		    }
		    self.dataSize += stream.dataSize;
		  });
		  if (this._currentStream && this._currentStream.dataSize) {
		    this.dataSize += this._currentStream.dataSize;
		  }
		};
		CombinedStream.prototype._emitError = function (err) {
		  this._reset();
		  this.emit('error', err);
		};
		return combined_stream;
	}

	var mimeTypes = {};

	var require$$0 = {
		"application/1d-interleaved-parityfec": {
		source: "iana"
	},
		"application/3gpdash-qoe-report+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/3gpp-ims+xml": {
		source: "iana",
		compressible: true
	},
		"application/3gpphal+json": {
		source: "iana",
		compressible: true
	},
		"application/3gpphalforms+json": {
		source: "iana",
		compressible: true
	},
		"application/a2l": {
		source: "iana"
	},
		"application/ace+cbor": {
		source: "iana"
	},
		"application/activemessage": {
		source: "iana"
	},
		"application/activity+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-costmap+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-costmapfilter+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-directory+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointcost+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointcostparams+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointprop+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-endpointpropparams+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-error+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-networkmap+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-networkmapfilter+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-updatestreamcontrol+json": {
		source: "iana",
		compressible: true
	},
		"application/alto-updatestreamparams+json": {
		source: "iana",
		compressible: true
	},
		"application/aml": {
		source: "iana"
	},
		"application/andrew-inset": {
		source: "iana",
		extensions: [
			"ez"
		]
	},
		"application/applefile": {
		source: "iana"
	},
		"application/applixware": {
		source: "apache",
		extensions: [
			"aw"
		]
	},
		"application/at+jwt": {
		source: "iana"
	},
		"application/atf": {
		source: "iana"
	},
		"application/atfx": {
		source: "iana"
	},
		"application/atom+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atom"
		]
	},
		"application/atomcat+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomcat"
		]
	},
		"application/atomdeleted+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomdeleted"
		]
	},
		"application/atomicmail": {
		source: "iana"
	},
		"application/atomsvc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"atomsvc"
		]
	},
		"application/atsc-dwd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dwd"
		]
	},
		"application/atsc-dynamic-event-message": {
		source: "iana"
	},
		"application/atsc-held+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"held"
		]
	},
		"application/atsc-rdt+json": {
		source: "iana",
		compressible: true
	},
		"application/atsc-rsat+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rsat"
		]
	},
		"application/atxml": {
		source: "iana"
	},
		"application/auth-policy+xml": {
		source: "iana",
		compressible: true
	},
		"application/bacnet-xdd+zip": {
		source: "iana",
		compressible: false
	},
		"application/batch-smtp": {
		source: "iana"
	},
		"application/bdoc": {
		compressible: false,
		extensions: [
			"bdoc"
		]
	},
		"application/beep+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/calendar+json": {
		source: "iana",
		compressible: true
	},
		"application/calendar+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xcs"
		]
	},
		"application/call-completion": {
		source: "iana"
	},
		"application/cals-1840": {
		source: "iana"
	},
		"application/captive+json": {
		source: "iana",
		compressible: true
	},
		"application/cbor": {
		source: "iana"
	},
		"application/cbor-seq": {
		source: "iana"
	},
		"application/cccex": {
		source: "iana"
	},
		"application/ccmp+xml": {
		source: "iana",
		compressible: true
	},
		"application/ccxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ccxml"
		]
	},
		"application/cdfx+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"cdfx"
		]
	},
		"application/cdmi-capability": {
		source: "iana",
		extensions: [
			"cdmia"
		]
	},
		"application/cdmi-container": {
		source: "iana",
		extensions: [
			"cdmic"
		]
	},
		"application/cdmi-domain": {
		source: "iana",
		extensions: [
			"cdmid"
		]
	},
		"application/cdmi-object": {
		source: "iana",
		extensions: [
			"cdmio"
		]
	},
		"application/cdmi-queue": {
		source: "iana",
		extensions: [
			"cdmiq"
		]
	},
		"application/cdni": {
		source: "iana"
	},
		"application/cea": {
		source: "iana"
	},
		"application/cea-2018+xml": {
		source: "iana",
		compressible: true
	},
		"application/cellml+xml": {
		source: "iana",
		compressible: true
	},
		"application/cfw": {
		source: "iana"
	},
		"application/city+json": {
		source: "iana",
		compressible: true
	},
		"application/clr": {
		source: "iana"
	},
		"application/clue+xml": {
		source: "iana",
		compressible: true
	},
		"application/clue_info+xml": {
		source: "iana",
		compressible: true
	},
		"application/cms": {
		source: "iana"
	},
		"application/cnrp+xml": {
		source: "iana",
		compressible: true
	},
		"application/coap-group+json": {
		source: "iana",
		compressible: true
	},
		"application/coap-payload": {
		source: "iana"
	},
		"application/commonground": {
		source: "iana"
	},
		"application/conference-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/cose": {
		source: "iana"
	},
		"application/cose-key": {
		source: "iana"
	},
		"application/cose-key-set": {
		source: "iana"
	},
		"application/cpl+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"cpl"
		]
	},
		"application/csrattrs": {
		source: "iana"
	},
		"application/csta+xml": {
		source: "iana",
		compressible: true
	},
		"application/cstadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/csvm+json": {
		source: "iana",
		compressible: true
	},
		"application/cu-seeme": {
		source: "apache",
		extensions: [
			"cu"
		]
	},
		"application/cwt": {
		source: "iana"
	},
		"application/cybercash": {
		source: "iana"
	},
		"application/dart": {
		compressible: true
	},
		"application/dash+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpd"
		]
	},
		"application/dash-patch+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpp"
		]
	},
		"application/dashdelta": {
		source: "iana"
	},
		"application/davmount+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"davmount"
		]
	},
		"application/dca-rft": {
		source: "iana"
	},
		"application/dcd": {
		source: "iana"
	},
		"application/dec-dx": {
		source: "iana"
	},
		"application/dialog-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/dicom": {
		source: "iana"
	},
		"application/dicom+json": {
		source: "iana",
		compressible: true
	},
		"application/dicom+xml": {
		source: "iana",
		compressible: true
	},
		"application/dii": {
		source: "iana"
	},
		"application/dit": {
		source: "iana"
	},
		"application/dns": {
		source: "iana"
	},
		"application/dns+json": {
		source: "iana",
		compressible: true
	},
		"application/dns-message": {
		source: "iana"
	},
		"application/docbook+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"dbk"
		]
	},
		"application/dots+cbor": {
		source: "iana"
	},
		"application/dskpp+xml": {
		source: "iana",
		compressible: true
	},
		"application/dssc+der": {
		source: "iana",
		extensions: [
			"dssc"
		]
	},
		"application/dssc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdssc"
		]
	},
		"application/dvcs": {
		source: "iana"
	},
		"application/ecmascript": {
		source: "iana",
		compressible: true,
		extensions: [
			"es",
			"ecma"
		]
	},
		"application/edi-consent": {
		source: "iana"
	},
		"application/edi-x12": {
		source: "iana",
		compressible: false
	},
		"application/edifact": {
		source: "iana",
		compressible: false
	},
		"application/efi": {
		source: "iana"
	},
		"application/elm+json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/elm+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.cap+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/emergencycalldata.comment+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.control+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.deviceinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.ecall.msd": {
		source: "iana"
	},
		"application/emergencycalldata.providerinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.serviceinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.subscriberinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/emergencycalldata.veds+xml": {
		source: "iana",
		compressible: true
	},
		"application/emma+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"emma"
		]
	},
		"application/emotionml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"emotionml"
		]
	},
		"application/encaprtp": {
		source: "iana"
	},
		"application/epp+xml": {
		source: "iana",
		compressible: true
	},
		"application/epub+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"epub"
		]
	},
		"application/eshop": {
		source: "iana"
	},
		"application/exi": {
		source: "iana",
		extensions: [
			"exi"
		]
	},
		"application/expect-ct-report+json": {
		source: "iana",
		compressible: true
	},
		"application/express": {
		source: "iana",
		extensions: [
			"exp"
		]
	},
		"application/fastinfoset": {
		source: "iana"
	},
		"application/fastsoap": {
		source: "iana"
	},
		"application/fdt+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"fdt"
		]
	},
		"application/fhir+json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/fhir+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/fido.trusted-apps+json": {
		compressible: true
	},
		"application/fits": {
		source: "iana"
	},
		"application/flexfec": {
		source: "iana"
	},
		"application/font-sfnt": {
		source: "iana"
	},
		"application/font-tdpfr": {
		source: "iana",
		extensions: [
			"pfr"
		]
	},
		"application/font-woff": {
		source: "iana",
		compressible: false
	},
		"application/framework-attributes+xml": {
		source: "iana",
		compressible: true
	},
		"application/geo+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"geojson"
		]
	},
		"application/geo+json-seq": {
		source: "iana"
	},
		"application/geopackage+sqlite3": {
		source: "iana"
	},
		"application/geoxacml+xml": {
		source: "iana",
		compressible: true
	},
		"application/gltf-buffer": {
		source: "iana"
	},
		"application/gml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"gml"
		]
	},
		"application/gpx+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"gpx"
		]
	},
		"application/gxf": {
		source: "apache",
		extensions: [
			"gxf"
		]
	},
		"application/gzip": {
		source: "iana",
		compressible: false,
		extensions: [
			"gz"
		]
	},
		"application/h224": {
		source: "iana"
	},
		"application/held+xml": {
		source: "iana",
		compressible: true
	},
		"application/hjson": {
		extensions: [
			"hjson"
		]
	},
		"application/http": {
		source: "iana"
	},
		"application/hyperstudio": {
		source: "iana",
		extensions: [
			"stk"
		]
	},
		"application/ibe-key-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/ibe-pkg-reply+xml": {
		source: "iana",
		compressible: true
	},
		"application/ibe-pp-data": {
		source: "iana"
	},
		"application/iges": {
		source: "iana"
	},
		"application/im-iscomposing+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/index": {
		source: "iana"
	},
		"application/index.cmd": {
		source: "iana"
	},
		"application/index.obj": {
		source: "iana"
	},
		"application/index.response": {
		source: "iana"
	},
		"application/index.vnd": {
		source: "iana"
	},
		"application/inkml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ink",
			"inkml"
		]
	},
		"application/iotp": {
		source: "iana"
	},
		"application/ipfix": {
		source: "iana",
		extensions: [
			"ipfix"
		]
	},
		"application/ipp": {
		source: "iana"
	},
		"application/isup": {
		source: "iana"
	},
		"application/its+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"its"
		]
	},
		"application/java-archive": {
		source: "apache",
		compressible: false,
		extensions: [
			"jar",
			"war",
			"ear"
		]
	},
		"application/java-serialized-object": {
		source: "apache",
		compressible: false,
		extensions: [
			"ser"
		]
	},
		"application/java-vm": {
		source: "apache",
		compressible: false,
		extensions: [
			"class"
		]
	},
		"application/javascript": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"js",
			"mjs"
		]
	},
		"application/jf2feed+json": {
		source: "iana",
		compressible: true
	},
		"application/jose": {
		source: "iana"
	},
		"application/jose+json": {
		source: "iana",
		compressible: true
	},
		"application/jrd+json": {
		source: "iana",
		compressible: true
	},
		"application/jscalendar+json": {
		source: "iana",
		compressible: true
	},
		"application/json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"json",
			"map"
		]
	},
		"application/json-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/json-seq": {
		source: "iana"
	},
		"application/json5": {
		extensions: [
			"json5"
		]
	},
		"application/jsonml+json": {
		source: "apache",
		compressible: true,
		extensions: [
			"jsonml"
		]
	},
		"application/jwk+json": {
		source: "iana",
		compressible: true
	},
		"application/jwk-set+json": {
		source: "iana",
		compressible: true
	},
		"application/jwt": {
		source: "iana"
	},
		"application/kpml-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/kpml-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/ld+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"jsonld"
		]
	},
		"application/lgr+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lgr"
		]
	},
		"application/link-format": {
		source: "iana"
	},
		"application/load-control+xml": {
		source: "iana",
		compressible: true
	},
		"application/lost+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lostxml"
		]
	},
		"application/lostsync+xml": {
		source: "iana",
		compressible: true
	},
		"application/lpf+zip": {
		source: "iana",
		compressible: false
	},
		"application/lxf": {
		source: "iana"
	},
		"application/mac-binhex40": {
		source: "iana",
		extensions: [
			"hqx"
		]
	},
		"application/mac-compactpro": {
		source: "apache",
		extensions: [
			"cpt"
		]
	},
		"application/macwriteii": {
		source: "iana"
	},
		"application/mads+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mads"
		]
	},
		"application/manifest+json": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"webmanifest"
		]
	},
		"application/marc": {
		source: "iana",
		extensions: [
			"mrc"
		]
	},
		"application/marcxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mrcx"
		]
	},
		"application/mathematica": {
		source: "iana",
		extensions: [
			"ma",
			"nb",
			"mb"
		]
	},
		"application/mathml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mathml"
		]
	},
		"application/mathml-content+xml": {
		source: "iana",
		compressible: true
	},
		"application/mathml-presentation+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-associated-procedure-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-deregister+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-envelope+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-msk+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-msk-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-protection-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-reception-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-register+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-register-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-schedule+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbms-user-service-description+xml": {
		source: "iana",
		compressible: true
	},
		"application/mbox": {
		source: "iana",
		extensions: [
			"mbox"
		]
	},
		"application/media-policy-dataset+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpf"
		]
	},
		"application/media_control+xml": {
		source: "iana",
		compressible: true
	},
		"application/mediaservercontrol+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mscml"
		]
	},
		"application/merge-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/metalink+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"metalink"
		]
	},
		"application/metalink4+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"meta4"
		]
	},
		"application/mets+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mets"
		]
	},
		"application/mf4": {
		source: "iana"
	},
		"application/mikey": {
		source: "iana"
	},
		"application/mipc": {
		source: "iana"
	},
		"application/missing-blocks+cbor-seq": {
		source: "iana"
	},
		"application/mmt-aei+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"maei"
		]
	},
		"application/mmt-usd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"musd"
		]
	},
		"application/mods+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mods"
		]
	},
		"application/moss-keys": {
		source: "iana"
	},
		"application/moss-signature": {
		source: "iana"
	},
		"application/mosskey-data": {
		source: "iana"
	},
		"application/mosskey-request": {
		source: "iana"
	},
		"application/mp21": {
		source: "iana",
		extensions: [
			"m21",
			"mp21"
		]
	},
		"application/mp4": {
		source: "iana",
		extensions: [
			"mp4s",
			"m4p"
		]
	},
		"application/mpeg4-generic": {
		source: "iana"
	},
		"application/mpeg4-iod": {
		source: "iana"
	},
		"application/mpeg4-iod-xmt": {
		source: "iana"
	},
		"application/mrb-consumer+xml": {
		source: "iana",
		compressible: true
	},
		"application/mrb-publish+xml": {
		source: "iana",
		compressible: true
	},
		"application/msc-ivr+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/msc-mixer+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/msword": {
		source: "iana",
		compressible: false,
		extensions: [
			"doc",
			"dot"
		]
	},
		"application/mud+json": {
		source: "iana",
		compressible: true
	},
		"application/multipart-core": {
		source: "iana"
	},
		"application/mxf": {
		source: "iana",
		extensions: [
			"mxf"
		]
	},
		"application/n-quads": {
		source: "iana",
		extensions: [
			"nq"
		]
	},
		"application/n-triples": {
		source: "iana",
		extensions: [
			"nt"
		]
	},
		"application/nasdata": {
		source: "iana"
	},
		"application/news-checkgroups": {
		source: "iana",
		charset: "US-ASCII"
	},
		"application/news-groupinfo": {
		source: "iana",
		charset: "US-ASCII"
	},
		"application/news-transmission": {
		source: "iana"
	},
		"application/nlsml+xml": {
		source: "iana",
		compressible: true
	},
		"application/node": {
		source: "iana",
		extensions: [
			"cjs"
		]
	},
		"application/nss": {
		source: "iana"
	},
		"application/oauth-authz-req+jwt": {
		source: "iana"
	},
		"application/oblivious-dns-message": {
		source: "iana"
	},
		"application/ocsp-request": {
		source: "iana"
	},
		"application/ocsp-response": {
		source: "iana"
	},
		"application/octet-stream": {
		source: "iana",
		compressible: false,
		extensions: [
			"bin",
			"dms",
			"lrf",
			"mar",
			"so",
			"dist",
			"distz",
			"pkg",
			"bpk",
			"dump",
			"elc",
			"deploy",
			"exe",
			"dll",
			"deb",
			"dmg",
			"iso",
			"img",
			"msi",
			"msp",
			"msm",
			"buffer"
		]
	},
		"application/oda": {
		source: "iana",
		extensions: [
			"oda"
		]
	},
		"application/odm+xml": {
		source: "iana",
		compressible: true
	},
		"application/odx": {
		source: "iana"
	},
		"application/oebps-package+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"opf"
		]
	},
		"application/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"ogx"
		]
	},
		"application/omdoc+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"omdoc"
		]
	},
		"application/onenote": {
		source: "apache",
		extensions: [
			"onetoc",
			"onetoc2",
			"onetmp",
			"onepkg"
		]
	},
		"application/opc-nodeset+xml": {
		source: "iana",
		compressible: true
	},
		"application/oscore": {
		source: "iana"
	},
		"application/oxps": {
		source: "iana",
		extensions: [
			"oxps"
		]
	},
		"application/p21": {
		source: "iana"
	},
		"application/p21+zip": {
		source: "iana",
		compressible: false
	},
		"application/p2p-overlay+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"relo"
		]
	},
		"application/parityfec": {
		source: "iana"
	},
		"application/passport": {
		source: "iana"
	},
		"application/patch-ops-error+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xer"
		]
	},
		"application/pdf": {
		source: "iana",
		compressible: false,
		extensions: [
			"pdf"
		]
	},
		"application/pdx": {
		source: "iana"
	},
		"application/pem-certificate-chain": {
		source: "iana"
	},
		"application/pgp-encrypted": {
		source: "iana",
		compressible: false,
		extensions: [
			"pgp"
		]
	},
		"application/pgp-keys": {
		source: "iana",
		extensions: [
			"asc"
		]
	},
		"application/pgp-signature": {
		source: "iana",
		extensions: [
			"asc",
			"sig"
		]
	},
		"application/pics-rules": {
		source: "apache",
		extensions: [
			"prf"
		]
	},
		"application/pidf+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/pidf-diff+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/pkcs10": {
		source: "iana",
		extensions: [
			"p10"
		]
	},
		"application/pkcs12": {
		source: "iana"
	},
		"application/pkcs7-mime": {
		source: "iana",
		extensions: [
			"p7m",
			"p7c"
		]
	},
		"application/pkcs7-signature": {
		source: "iana",
		extensions: [
			"p7s"
		]
	},
		"application/pkcs8": {
		source: "iana",
		extensions: [
			"p8"
		]
	},
		"application/pkcs8-encrypted": {
		source: "iana"
	},
		"application/pkix-attr-cert": {
		source: "iana",
		extensions: [
			"ac"
		]
	},
		"application/pkix-cert": {
		source: "iana",
		extensions: [
			"cer"
		]
	},
		"application/pkix-crl": {
		source: "iana",
		extensions: [
			"crl"
		]
	},
		"application/pkix-pkipath": {
		source: "iana",
		extensions: [
			"pkipath"
		]
	},
		"application/pkixcmp": {
		source: "iana",
		extensions: [
			"pki"
		]
	},
		"application/pls+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"pls"
		]
	},
		"application/poc-settings+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/postscript": {
		source: "iana",
		compressible: true,
		extensions: [
			"ai",
			"eps",
			"ps"
		]
	},
		"application/ppsp-tracker+json": {
		source: "iana",
		compressible: true
	},
		"application/problem+json": {
		source: "iana",
		compressible: true
	},
		"application/problem+xml": {
		source: "iana",
		compressible: true
	},
		"application/provenance+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"provx"
		]
	},
		"application/prs.alvestrand.titrax-sheet": {
		source: "iana"
	},
		"application/prs.cww": {
		source: "iana",
		extensions: [
			"cww"
		]
	},
		"application/prs.cyn": {
		source: "iana",
		charset: "7-BIT"
	},
		"application/prs.hpub+zip": {
		source: "iana",
		compressible: false
	},
		"application/prs.nprend": {
		source: "iana"
	},
		"application/prs.plucker": {
		source: "iana"
	},
		"application/prs.rdf-xml-crypt": {
		source: "iana"
	},
		"application/prs.xsf+xml": {
		source: "iana",
		compressible: true
	},
		"application/pskc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"pskcxml"
		]
	},
		"application/pvd+json": {
		source: "iana",
		compressible: true
	},
		"application/qsig": {
		source: "iana"
	},
		"application/raml+yaml": {
		compressible: true,
		extensions: [
			"raml"
		]
	},
		"application/raptorfec": {
		source: "iana"
	},
		"application/rdap+json": {
		source: "iana",
		compressible: true
	},
		"application/rdf+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rdf",
			"owl"
		]
	},
		"application/reginfo+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rif"
		]
	},
		"application/relax-ng-compact-syntax": {
		source: "iana",
		extensions: [
			"rnc"
		]
	},
		"application/remote-printing": {
		source: "iana"
	},
		"application/reputon+json": {
		source: "iana",
		compressible: true
	},
		"application/resource-lists+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rl"
		]
	},
		"application/resource-lists-diff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rld"
		]
	},
		"application/rfc+xml": {
		source: "iana",
		compressible: true
	},
		"application/riscos": {
		source: "iana"
	},
		"application/rlmi+xml": {
		source: "iana",
		compressible: true
	},
		"application/rls-services+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rs"
		]
	},
		"application/route-apd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rapd"
		]
	},
		"application/route-s-tsid+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sls"
		]
	},
		"application/route-usd+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rusd"
		]
	},
		"application/rpki-ghostbusters": {
		source: "iana",
		extensions: [
			"gbr"
		]
	},
		"application/rpki-manifest": {
		source: "iana",
		extensions: [
			"mft"
		]
	},
		"application/rpki-publication": {
		source: "iana"
	},
		"application/rpki-roa": {
		source: "iana",
		extensions: [
			"roa"
		]
	},
		"application/rpki-updown": {
		source: "iana"
	},
		"application/rsd+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"rsd"
		]
	},
		"application/rss+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"rss"
		]
	},
		"application/rtf": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtf"
		]
	},
		"application/rtploopback": {
		source: "iana"
	},
		"application/rtx": {
		source: "iana"
	},
		"application/samlassertion+xml": {
		source: "iana",
		compressible: true
	},
		"application/samlmetadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/sarif+json": {
		source: "iana",
		compressible: true
	},
		"application/sarif-external-properties+json": {
		source: "iana",
		compressible: true
	},
		"application/sbe": {
		source: "iana"
	},
		"application/sbml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sbml"
		]
	},
		"application/scaip+xml": {
		source: "iana",
		compressible: true
	},
		"application/scim+json": {
		source: "iana",
		compressible: true
	},
		"application/scvp-cv-request": {
		source: "iana",
		extensions: [
			"scq"
		]
	},
		"application/scvp-cv-response": {
		source: "iana",
		extensions: [
			"scs"
		]
	},
		"application/scvp-vp-request": {
		source: "iana",
		extensions: [
			"spq"
		]
	},
		"application/scvp-vp-response": {
		source: "iana",
		extensions: [
			"spp"
		]
	},
		"application/sdp": {
		source: "iana",
		extensions: [
			"sdp"
		]
	},
		"application/secevent+jwt": {
		source: "iana"
	},
		"application/senml+cbor": {
		source: "iana"
	},
		"application/senml+json": {
		source: "iana",
		compressible: true
	},
		"application/senml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"senmlx"
		]
	},
		"application/senml-etch+cbor": {
		source: "iana"
	},
		"application/senml-etch+json": {
		source: "iana",
		compressible: true
	},
		"application/senml-exi": {
		source: "iana"
	},
		"application/sensml+cbor": {
		source: "iana"
	},
		"application/sensml+json": {
		source: "iana",
		compressible: true
	},
		"application/sensml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sensmlx"
		]
	},
		"application/sensml-exi": {
		source: "iana"
	},
		"application/sep+xml": {
		source: "iana",
		compressible: true
	},
		"application/sep-exi": {
		source: "iana"
	},
		"application/session-info": {
		source: "iana"
	},
		"application/set-payment": {
		source: "iana"
	},
		"application/set-payment-initiation": {
		source: "iana",
		extensions: [
			"setpay"
		]
	},
		"application/set-registration": {
		source: "iana"
	},
		"application/set-registration-initiation": {
		source: "iana",
		extensions: [
			"setreg"
		]
	},
		"application/sgml": {
		source: "iana"
	},
		"application/sgml-open-catalog": {
		source: "iana"
	},
		"application/shf+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"shf"
		]
	},
		"application/sieve": {
		source: "iana",
		extensions: [
			"siv",
			"sieve"
		]
	},
		"application/simple-filter+xml": {
		source: "iana",
		compressible: true
	},
		"application/simple-message-summary": {
		source: "iana"
	},
		"application/simplesymbolcontainer": {
		source: "iana"
	},
		"application/sipc": {
		source: "iana"
	},
		"application/slate": {
		source: "iana"
	},
		"application/smil": {
		source: "iana"
	},
		"application/smil+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"smi",
			"smil"
		]
	},
		"application/smpte336m": {
		source: "iana"
	},
		"application/soap+fastinfoset": {
		source: "iana"
	},
		"application/soap+xml": {
		source: "iana",
		compressible: true
	},
		"application/sparql-query": {
		source: "iana",
		extensions: [
			"rq"
		]
	},
		"application/sparql-results+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"srx"
		]
	},
		"application/spdx+json": {
		source: "iana",
		compressible: true
	},
		"application/spirits-event+xml": {
		source: "iana",
		compressible: true
	},
		"application/sql": {
		source: "iana"
	},
		"application/srgs": {
		source: "iana",
		extensions: [
			"gram"
		]
	},
		"application/srgs+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"grxml"
		]
	},
		"application/sru+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sru"
		]
	},
		"application/ssdl+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"ssdl"
		]
	},
		"application/ssml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ssml"
		]
	},
		"application/stix+json": {
		source: "iana",
		compressible: true
	},
		"application/swid+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"swidtag"
		]
	},
		"application/tamp-apex-update": {
		source: "iana"
	},
		"application/tamp-apex-update-confirm": {
		source: "iana"
	},
		"application/tamp-community-update": {
		source: "iana"
	},
		"application/tamp-community-update-confirm": {
		source: "iana"
	},
		"application/tamp-error": {
		source: "iana"
	},
		"application/tamp-sequence-adjust": {
		source: "iana"
	},
		"application/tamp-sequence-adjust-confirm": {
		source: "iana"
	},
		"application/tamp-status-query": {
		source: "iana"
	},
		"application/tamp-status-response": {
		source: "iana"
	},
		"application/tamp-update": {
		source: "iana"
	},
		"application/tamp-update-confirm": {
		source: "iana"
	},
		"application/tar": {
		compressible: true
	},
		"application/taxii+json": {
		source: "iana",
		compressible: true
	},
		"application/td+json": {
		source: "iana",
		compressible: true
	},
		"application/tei+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"tei",
			"teicorpus"
		]
	},
		"application/tetra_isi": {
		source: "iana"
	},
		"application/thraud+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"tfi"
		]
	},
		"application/timestamp-query": {
		source: "iana"
	},
		"application/timestamp-reply": {
		source: "iana"
	},
		"application/timestamped-data": {
		source: "iana",
		extensions: [
			"tsd"
		]
	},
		"application/tlsrpt+gzip": {
		source: "iana"
	},
		"application/tlsrpt+json": {
		source: "iana",
		compressible: true
	},
		"application/tnauthlist": {
		source: "iana"
	},
		"application/token-introspection+jwt": {
		source: "iana"
	},
		"application/toml": {
		compressible: true,
		extensions: [
			"toml"
		]
	},
		"application/trickle-ice-sdpfrag": {
		source: "iana"
	},
		"application/trig": {
		source: "iana",
		extensions: [
			"trig"
		]
	},
		"application/ttml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ttml"
		]
	},
		"application/tve-trigger": {
		source: "iana"
	},
		"application/tzif": {
		source: "iana"
	},
		"application/tzif-leap": {
		source: "iana"
	},
		"application/ubjson": {
		compressible: false,
		extensions: [
			"ubj"
		]
	},
		"application/ulpfec": {
		source: "iana"
	},
		"application/urc-grpsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/urc-ressheet+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"rsheet"
		]
	},
		"application/urc-targetdesc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"td"
		]
	},
		"application/urc-uisocketdesc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vcard+json": {
		source: "iana",
		compressible: true
	},
		"application/vcard+xml": {
		source: "iana",
		compressible: true
	},
		"application/vemmi": {
		source: "iana"
	},
		"application/vividence.scriptfile": {
		source: "apache"
	},
		"application/vnd.1000minds.decision-model+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"1km"
		]
	},
		"application/vnd.3gpp-prose+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp-prose-pc3ch+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp-v2x-local-service-information": {
		source: "iana"
	},
		"application/vnd.3gpp.5gnas": {
		source: "iana"
	},
		"application/vnd.3gpp.access-transfer-events+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.bsf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.gmop+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.gtpc": {
		source: "iana"
	},
		"application/vnd.3gpp.interworking-data": {
		source: "iana"
	},
		"application/vnd.3gpp.lpp": {
		source: "iana"
	},
		"application/vnd.3gpp.mc-signalling-ear": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-payload": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-signalling": {
		source: "iana"
	},
		"application/vnd.3gpp.mcdata-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcdata-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-floor-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-location-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-signed+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-ue-init-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcptt-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-location-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-service-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-transmission-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-ue-config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mcvideo-user-profile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.mid-call+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.ngap": {
		source: "iana"
	},
		"application/vnd.3gpp.pfcp": {
		source: "iana"
	},
		"application/vnd.3gpp.pic-bw-large": {
		source: "iana",
		extensions: [
			"plb"
		]
	},
		"application/vnd.3gpp.pic-bw-small": {
		source: "iana",
		extensions: [
			"psb"
		]
	},
		"application/vnd.3gpp.pic-bw-var": {
		source: "iana",
		extensions: [
			"pvb"
		]
	},
		"application/vnd.3gpp.s1ap": {
		source: "iana"
	},
		"application/vnd.3gpp.sms": {
		source: "iana"
	},
		"application/vnd.3gpp.sms+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.srvcc-ext+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.srvcc-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.state-and-event-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp.ussd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp2.bcmcsinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.3gpp2.sms": {
		source: "iana"
	},
		"application/vnd.3gpp2.tcap": {
		source: "iana",
		extensions: [
			"tcap"
		]
	},
		"application/vnd.3lightssoftware.imagescal": {
		source: "iana"
	},
		"application/vnd.3m.post-it-notes": {
		source: "iana",
		extensions: [
			"pwn"
		]
	},
		"application/vnd.accpac.simply.aso": {
		source: "iana",
		extensions: [
			"aso"
		]
	},
		"application/vnd.accpac.simply.imp": {
		source: "iana",
		extensions: [
			"imp"
		]
	},
		"application/vnd.acucobol": {
		source: "iana",
		extensions: [
			"acu"
		]
	},
		"application/vnd.acucorp": {
		source: "iana",
		extensions: [
			"atc",
			"acutc"
		]
	},
		"application/vnd.adobe.air-application-installer-package+zip": {
		source: "apache",
		compressible: false,
		extensions: [
			"air"
		]
	},
		"application/vnd.adobe.flash.movie": {
		source: "iana"
	},
		"application/vnd.adobe.formscentral.fcdt": {
		source: "iana",
		extensions: [
			"fcdt"
		]
	},
		"application/vnd.adobe.fxp": {
		source: "iana",
		extensions: [
			"fxp",
			"fxpl"
		]
	},
		"application/vnd.adobe.partial-upload": {
		source: "iana"
	},
		"application/vnd.adobe.xdp+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdp"
		]
	},
		"application/vnd.adobe.xfdf": {
		source: "iana",
		extensions: [
			"xfdf"
		]
	},
		"application/vnd.aether.imp": {
		source: "iana"
	},
		"application/vnd.afpc.afplinedata": {
		source: "iana"
	},
		"application/vnd.afpc.afplinedata-pagedef": {
		source: "iana"
	},
		"application/vnd.afpc.cmoca-cmresource": {
		source: "iana"
	},
		"application/vnd.afpc.foca-charset": {
		source: "iana"
	},
		"application/vnd.afpc.foca-codedfont": {
		source: "iana"
	},
		"application/vnd.afpc.foca-codepage": {
		source: "iana"
	},
		"application/vnd.afpc.modca": {
		source: "iana"
	},
		"application/vnd.afpc.modca-cmtable": {
		source: "iana"
	},
		"application/vnd.afpc.modca-formdef": {
		source: "iana"
	},
		"application/vnd.afpc.modca-mediummap": {
		source: "iana"
	},
		"application/vnd.afpc.modca-objectcontainer": {
		source: "iana"
	},
		"application/vnd.afpc.modca-overlay": {
		source: "iana"
	},
		"application/vnd.afpc.modca-pagesegment": {
		source: "iana"
	},
		"application/vnd.age": {
		source: "iana",
		extensions: [
			"age"
		]
	},
		"application/vnd.ah-barcode": {
		source: "iana"
	},
		"application/vnd.ahead.space": {
		source: "iana",
		extensions: [
			"ahead"
		]
	},
		"application/vnd.airzip.filesecure.azf": {
		source: "iana",
		extensions: [
			"azf"
		]
	},
		"application/vnd.airzip.filesecure.azs": {
		source: "iana",
		extensions: [
			"azs"
		]
	},
		"application/vnd.amadeus+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.amazon.ebook": {
		source: "apache",
		extensions: [
			"azw"
		]
	},
		"application/vnd.amazon.mobi8-ebook": {
		source: "iana"
	},
		"application/vnd.americandynamics.acc": {
		source: "iana",
		extensions: [
			"acc"
		]
	},
		"application/vnd.amiga.ami": {
		source: "iana",
		extensions: [
			"ami"
		]
	},
		"application/vnd.amundsen.maze+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.android.ota": {
		source: "iana"
	},
		"application/vnd.android.package-archive": {
		source: "apache",
		compressible: false,
		extensions: [
			"apk"
		]
	},
		"application/vnd.anki": {
		source: "iana"
	},
		"application/vnd.anser-web-certificate-issue-initiation": {
		source: "iana",
		extensions: [
			"cii"
		]
	},
		"application/vnd.anser-web-funds-transfer-initiation": {
		source: "apache",
		extensions: [
			"fti"
		]
	},
		"application/vnd.antix.game-component": {
		source: "iana",
		extensions: [
			"atx"
		]
	},
		"application/vnd.apache.arrow.file": {
		source: "iana"
	},
		"application/vnd.apache.arrow.stream": {
		source: "iana"
	},
		"application/vnd.apache.thrift.binary": {
		source: "iana"
	},
		"application/vnd.apache.thrift.compact": {
		source: "iana"
	},
		"application/vnd.apache.thrift.json": {
		source: "iana"
	},
		"application/vnd.api+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.aplextor.warrp+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.apothekende.reservation+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.apple.installer+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mpkg"
		]
	},
		"application/vnd.apple.keynote": {
		source: "iana",
		extensions: [
			"key"
		]
	},
		"application/vnd.apple.mpegurl": {
		source: "iana",
		extensions: [
			"m3u8"
		]
	},
		"application/vnd.apple.numbers": {
		source: "iana",
		extensions: [
			"numbers"
		]
	},
		"application/vnd.apple.pages": {
		source: "iana",
		extensions: [
			"pages"
		]
	},
		"application/vnd.apple.pkpass": {
		compressible: false,
		extensions: [
			"pkpass"
		]
	},
		"application/vnd.arastra.swi": {
		source: "iana"
	},
		"application/vnd.aristanetworks.swi": {
		source: "iana",
		extensions: [
			"swi"
		]
	},
		"application/vnd.artisan+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.artsquare": {
		source: "iana"
	},
		"application/vnd.astraea-software.iota": {
		source: "iana",
		extensions: [
			"iota"
		]
	},
		"application/vnd.audiograph": {
		source: "iana",
		extensions: [
			"aep"
		]
	},
		"application/vnd.autopackage": {
		source: "iana"
	},
		"application/vnd.avalon+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.avistar+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.balsamiq.bmml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"bmml"
		]
	},
		"application/vnd.balsamiq.bmpr": {
		source: "iana"
	},
		"application/vnd.banana-accounting": {
		source: "iana"
	},
		"application/vnd.bbf.usp.error": {
		source: "iana"
	},
		"application/vnd.bbf.usp.msg": {
		source: "iana"
	},
		"application/vnd.bbf.usp.msg+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.bekitzur-stech+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.bint.med-content": {
		source: "iana"
	},
		"application/vnd.biopax.rdf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.blink-idb-value-wrapper": {
		source: "iana"
	},
		"application/vnd.blueice.multipass": {
		source: "iana",
		extensions: [
			"mpm"
		]
	},
		"application/vnd.bluetooth.ep.oob": {
		source: "iana"
	},
		"application/vnd.bluetooth.le.oob": {
		source: "iana"
	},
		"application/vnd.bmi": {
		source: "iana",
		extensions: [
			"bmi"
		]
	},
		"application/vnd.bpf": {
		source: "iana"
	},
		"application/vnd.bpf3": {
		source: "iana"
	},
		"application/vnd.businessobjects": {
		source: "iana",
		extensions: [
			"rep"
		]
	},
		"application/vnd.byu.uapi+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cab-jscript": {
		source: "iana"
	},
		"application/vnd.canon-cpdl": {
		source: "iana"
	},
		"application/vnd.canon-lips": {
		source: "iana"
	},
		"application/vnd.capasystems-pg+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cendio.thinlinc.clientconf": {
		source: "iana"
	},
		"application/vnd.century-systems.tcp_stream": {
		source: "iana"
	},
		"application/vnd.chemdraw+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"cdxml"
		]
	},
		"application/vnd.chess-pgn": {
		source: "iana"
	},
		"application/vnd.chipnuts.karaoke-mmd": {
		source: "iana",
		extensions: [
			"mmd"
		]
	},
		"application/vnd.ciedi": {
		source: "iana"
	},
		"application/vnd.cinderella": {
		source: "iana",
		extensions: [
			"cdy"
		]
	},
		"application/vnd.cirpack.isdn-ext": {
		source: "iana"
	},
		"application/vnd.citationstyles.style+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"csl"
		]
	},
		"application/vnd.claymore": {
		source: "iana",
		extensions: [
			"cla"
		]
	},
		"application/vnd.cloanto.rp9": {
		source: "iana",
		extensions: [
			"rp9"
		]
	},
		"application/vnd.clonk.c4group": {
		source: "iana",
		extensions: [
			"c4g",
			"c4d",
			"c4f",
			"c4p",
			"c4u"
		]
	},
		"application/vnd.cluetrust.cartomobile-config": {
		source: "iana",
		extensions: [
			"c11amc"
		]
	},
		"application/vnd.cluetrust.cartomobile-config-pkg": {
		source: "iana",
		extensions: [
			"c11amz"
		]
	},
		"application/vnd.coffeescript": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.document": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.document-template": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.presentation": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.presentation-template": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.spreadsheet": {
		source: "iana"
	},
		"application/vnd.collabio.xodocuments.spreadsheet-template": {
		source: "iana"
	},
		"application/vnd.collection+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.collection.doc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.collection.next+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.comicbook+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.comicbook-rar": {
		source: "iana"
	},
		"application/vnd.commerce-battelle": {
		source: "iana"
	},
		"application/vnd.commonspace": {
		source: "iana",
		extensions: [
			"csp"
		]
	},
		"application/vnd.contact.cmsg": {
		source: "iana",
		extensions: [
			"cdbcmsg"
		]
	},
		"application/vnd.coreos.ignition+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cosmocaller": {
		source: "iana",
		extensions: [
			"cmc"
		]
	},
		"application/vnd.crick.clicker": {
		source: "iana",
		extensions: [
			"clkx"
		]
	},
		"application/vnd.crick.clicker.keyboard": {
		source: "iana",
		extensions: [
			"clkk"
		]
	},
		"application/vnd.crick.clicker.palette": {
		source: "iana",
		extensions: [
			"clkp"
		]
	},
		"application/vnd.crick.clicker.template": {
		source: "iana",
		extensions: [
			"clkt"
		]
	},
		"application/vnd.crick.clicker.wordbank": {
		source: "iana",
		extensions: [
			"clkw"
		]
	},
		"application/vnd.criticaltools.wbs+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wbs"
		]
	},
		"application/vnd.cryptii.pipe+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.crypto-shade-file": {
		source: "iana"
	},
		"application/vnd.cryptomator.encrypted": {
		source: "iana"
	},
		"application/vnd.cryptomator.vault": {
		source: "iana"
	},
		"application/vnd.ctc-posml": {
		source: "iana",
		extensions: [
			"pml"
		]
	},
		"application/vnd.ctct.ws+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cups-pdf": {
		source: "iana"
	},
		"application/vnd.cups-postscript": {
		source: "iana"
	},
		"application/vnd.cups-ppd": {
		source: "iana",
		extensions: [
			"ppd"
		]
	},
		"application/vnd.cups-raster": {
		source: "iana"
	},
		"application/vnd.cups-raw": {
		source: "iana"
	},
		"application/vnd.curl": {
		source: "iana"
	},
		"application/vnd.curl.car": {
		source: "apache",
		extensions: [
			"car"
		]
	},
		"application/vnd.curl.pcurl": {
		source: "apache",
		extensions: [
			"pcurl"
		]
	},
		"application/vnd.cyan.dean.root+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cybank": {
		source: "iana"
	},
		"application/vnd.cyclonedx+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.cyclonedx+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.d2l.coursepackage1p0+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.d3m-dataset": {
		source: "iana"
	},
		"application/vnd.d3m-problem": {
		source: "iana"
	},
		"application/vnd.dart": {
		source: "iana",
		compressible: true,
		extensions: [
			"dart"
		]
	},
		"application/vnd.data-vision.rdz": {
		source: "iana",
		extensions: [
			"rdz"
		]
	},
		"application/vnd.datapackage+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dataresource+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dbf": {
		source: "iana",
		extensions: [
			"dbf"
		]
	},
		"application/vnd.debian.binary-package": {
		source: "iana"
	},
		"application/vnd.dece.data": {
		source: "iana",
		extensions: [
			"uvf",
			"uvvf",
			"uvd",
			"uvvd"
		]
	},
		"application/vnd.dece.ttml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"uvt",
			"uvvt"
		]
	},
		"application/vnd.dece.unspecified": {
		source: "iana",
		extensions: [
			"uvx",
			"uvvx"
		]
	},
		"application/vnd.dece.zip": {
		source: "iana",
		extensions: [
			"uvz",
			"uvvz"
		]
	},
		"application/vnd.denovo.fcselayout-link": {
		source: "iana",
		extensions: [
			"fe_launch"
		]
	},
		"application/vnd.desmume.movie": {
		source: "iana"
	},
		"application/vnd.dir-bi.plate-dl-nosuffix": {
		source: "iana"
	},
		"application/vnd.dm.delegation+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dna": {
		source: "iana",
		extensions: [
			"dna"
		]
	},
		"application/vnd.document+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dolby.mlp": {
		source: "apache",
		extensions: [
			"mlp"
		]
	},
		"application/vnd.dolby.mobile.1": {
		source: "iana"
	},
		"application/vnd.dolby.mobile.2": {
		source: "iana"
	},
		"application/vnd.doremir.scorecloud-binary-document": {
		source: "iana"
	},
		"application/vnd.dpgraph": {
		source: "iana",
		extensions: [
			"dpg"
		]
	},
		"application/vnd.dreamfactory": {
		source: "iana",
		extensions: [
			"dfac"
		]
	},
		"application/vnd.drive+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ds-keypoint": {
		source: "apache",
		extensions: [
			"kpxx"
		]
	},
		"application/vnd.dtg.local": {
		source: "iana"
	},
		"application/vnd.dtg.local.flash": {
		source: "iana"
	},
		"application/vnd.dtg.local.html": {
		source: "iana"
	},
		"application/vnd.dvb.ait": {
		source: "iana",
		extensions: [
			"ait"
		]
	},
		"application/vnd.dvb.dvbisl+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.dvbj": {
		source: "iana"
	},
		"application/vnd.dvb.esgcontainer": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcdftnotifaccess": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgaccess": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgaccess2": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcesgpdd": {
		source: "iana"
	},
		"application/vnd.dvb.ipdcroaming": {
		source: "iana"
	},
		"application/vnd.dvb.iptv.alfec-base": {
		source: "iana"
	},
		"application/vnd.dvb.iptv.alfec-enhancement": {
		source: "iana"
	},
		"application/vnd.dvb.notif-aggregate-root+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-container+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-generic+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-msglist+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-registration-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-ia-registration-response+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.notif-init+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.dvb.pfr": {
		source: "iana"
	},
		"application/vnd.dvb.service": {
		source: "iana",
		extensions: [
			"svc"
		]
	},
		"application/vnd.dxr": {
		source: "iana"
	},
		"application/vnd.dynageo": {
		source: "iana",
		extensions: [
			"geo"
		]
	},
		"application/vnd.dzr": {
		source: "iana"
	},
		"application/vnd.easykaraoke.cdgdownload": {
		source: "iana"
	},
		"application/vnd.ecdis-update": {
		source: "iana"
	},
		"application/vnd.ecip.rlp": {
		source: "iana"
	},
		"application/vnd.eclipse.ditto+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ecowin.chart": {
		source: "iana",
		extensions: [
			"mag"
		]
	},
		"application/vnd.ecowin.filerequest": {
		source: "iana"
	},
		"application/vnd.ecowin.fileupdate": {
		source: "iana"
	},
		"application/vnd.ecowin.series": {
		source: "iana"
	},
		"application/vnd.ecowin.seriesrequest": {
		source: "iana"
	},
		"application/vnd.ecowin.seriesupdate": {
		source: "iana"
	},
		"application/vnd.efi.img": {
		source: "iana"
	},
		"application/vnd.efi.iso": {
		source: "iana"
	},
		"application/vnd.emclient.accessrequest+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.enliven": {
		source: "iana",
		extensions: [
			"nml"
		]
	},
		"application/vnd.enphase.envoy": {
		source: "iana"
	},
		"application/vnd.eprints.data+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.epson.esf": {
		source: "iana",
		extensions: [
			"esf"
		]
	},
		"application/vnd.epson.msf": {
		source: "iana",
		extensions: [
			"msf"
		]
	},
		"application/vnd.epson.quickanime": {
		source: "iana",
		extensions: [
			"qam"
		]
	},
		"application/vnd.epson.salt": {
		source: "iana",
		extensions: [
			"slt"
		]
	},
		"application/vnd.epson.ssf": {
		source: "iana",
		extensions: [
			"ssf"
		]
	},
		"application/vnd.ericsson.quickcall": {
		source: "iana"
	},
		"application/vnd.espass-espass+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.eszigno3+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"es3",
			"et3"
		]
	},
		"application/vnd.etsi.aoc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.asic-e+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.etsi.asic-s+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.etsi.cug+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvcommand+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvdiscovery+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-bc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-cod+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsad-npvr+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvservice+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvsync+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.iptvueprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.mcid+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.mheg5": {
		source: "iana"
	},
		"application/vnd.etsi.overload-control-policy-dataset+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.pstn+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.sci+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.simservs+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.timestamp-token": {
		source: "iana"
	},
		"application/vnd.etsi.tsl+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.etsi.tsl.der": {
		source: "iana"
	},
		"application/vnd.eu.kasparian.car+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.eudora.data": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.profile": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.settings": {
		source: "iana"
	},
		"application/vnd.evolv.ecig.theme": {
		source: "iana"
	},
		"application/vnd.exstream-empower+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.exstream-package": {
		source: "iana"
	},
		"application/vnd.ezpix-album": {
		source: "iana",
		extensions: [
			"ez2"
		]
	},
		"application/vnd.ezpix-package": {
		source: "iana",
		extensions: [
			"ez3"
		]
	},
		"application/vnd.f-secure.mobile": {
		source: "iana"
	},
		"application/vnd.familysearch.gedcom+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.fastcopy-disk-image": {
		source: "iana"
	},
		"application/vnd.fdf": {
		source: "iana",
		extensions: [
			"fdf"
		]
	},
		"application/vnd.fdsn.mseed": {
		source: "iana",
		extensions: [
			"mseed"
		]
	},
		"application/vnd.fdsn.seed": {
		source: "iana",
		extensions: [
			"seed",
			"dataless"
		]
	},
		"application/vnd.ffsns": {
		source: "iana"
	},
		"application/vnd.ficlab.flb+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.filmit.zfc": {
		source: "iana"
	},
		"application/vnd.fints": {
		source: "iana"
	},
		"application/vnd.firemonkeys.cloudcell": {
		source: "iana"
	},
		"application/vnd.flographit": {
		source: "iana",
		extensions: [
			"gph"
		]
	},
		"application/vnd.fluxtime.clip": {
		source: "iana",
		extensions: [
			"ftc"
		]
	},
		"application/vnd.font-fontforge-sfd": {
		source: "iana"
	},
		"application/vnd.framemaker": {
		source: "iana",
		extensions: [
			"fm",
			"frame",
			"maker",
			"book"
		]
	},
		"application/vnd.frogans.fnc": {
		source: "iana",
		extensions: [
			"fnc"
		]
	},
		"application/vnd.frogans.ltf": {
		source: "iana",
		extensions: [
			"ltf"
		]
	},
		"application/vnd.fsc.weblaunch": {
		source: "iana",
		extensions: [
			"fsc"
		]
	},
		"application/vnd.fujifilm.fb.docuworks": {
		source: "iana"
	},
		"application/vnd.fujifilm.fb.docuworks.binder": {
		source: "iana"
	},
		"application/vnd.fujifilm.fb.docuworks.container": {
		source: "iana"
	},
		"application/vnd.fujifilm.fb.jfi+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.fujitsu.oasys": {
		source: "iana",
		extensions: [
			"oas"
		]
	},
		"application/vnd.fujitsu.oasys2": {
		source: "iana",
		extensions: [
			"oa2"
		]
	},
		"application/vnd.fujitsu.oasys3": {
		source: "iana",
		extensions: [
			"oa3"
		]
	},
		"application/vnd.fujitsu.oasysgp": {
		source: "iana",
		extensions: [
			"fg5"
		]
	},
		"application/vnd.fujitsu.oasysprs": {
		source: "iana",
		extensions: [
			"bh2"
		]
	},
		"application/vnd.fujixerox.art-ex": {
		source: "iana"
	},
		"application/vnd.fujixerox.art4": {
		source: "iana"
	},
		"application/vnd.fujixerox.ddd": {
		source: "iana",
		extensions: [
			"ddd"
		]
	},
		"application/vnd.fujixerox.docuworks": {
		source: "iana",
		extensions: [
			"xdw"
		]
	},
		"application/vnd.fujixerox.docuworks.binder": {
		source: "iana",
		extensions: [
			"xbd"
		]
	},
		"application/vnd.fujixerox.docuworks.container": {
		source: "iana"
	},
		"application/vnd.fujixerox.hbpl": {
		source: "iana"
	},
		"application/vnd.fut-misnet": {
		source: "iana"
	},
		"application/vnd.futoin+cbor": {
		source: "iana"
	},
		"application/vnd.futoin+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.fuzzysheet": {
		source: "iana",
		extensions: [
			"fzs"
		]
	},
		"application/vnd.genomatix.tuxedo": {
		source: "iana",
		extensions: [
			"txd"
		]
	},
		"application/vnd.gentics.grd+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geo+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geocube+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.geogebra.file": {
		source: "iana",
		extensions: [
			"ggb"
		]
	},
		"application/vnd.geogebra.slides": {
		source: "iana"
	},
		"application/vnd.geogebra.tool": {
		source: "iana",
		extensions: [
			"ggt"
		]
	},
		"application/vnd.geometry-explorer": {
		source: "iana",
		extensions: [
			"gex",
			"gre"
		]
	},
		"application/vnd.geonext": {
		source: "iana",
		extensions: [
			"gxt"
		]
	},
		"application/vnd.geoplan": {
		source: "iana",
		extensions: [
			"g2w"
		]
	},
		"application/vnd.geospace": {
		source: "iana",
		extensions: [
			"g3w"
		]
	},
		"application/vnd.gerber": {
		source: "iana"
	},
		"application/vnd.globalplatform.card-content-mgt": {
		source: "iana"
	},
		"application/vnd.globalplatform.card-content-mgt-response": {
		source: "iana"
	},
		"application/vnd.gmx": {
		source: "iana",
		extensions: [
			"gmx"
		]
	},
		"application/vnd.google-apps.document": {
		compressible: false,
		extensions: [
			"gdoc"
		]
	},
		"application/vnd.google-apps.presentation": {
		compressible: false,
		extensions: [
			"gslides"
		]
	},
		"application/vnd.google-apps.spreadsheet": {
		compressible: false,
		extensions: [
			"gsheet"
		]
	},
		"application/vnd.google-earth.kml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"kml"
		]
	},
		"application/vnd.google-earth.kmz": {
		source: "iana",
		compressible: false,
		extensions: [
			"kmz"
		]
	},
		"application/vnd.gov.sk.e-form+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.gov.sk.e-form+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.gov.sk.xmldatacontainer+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.grafeq": {
		source: "iana",
		extensions: [
			"gqf",
			"gqs"
		]
	},
		"application/vnd.gridmp": {
		source: "iana"
	},
		"application/vnd.groove-account": {
		source: "iana",
		extensions: [
			"gac"
		]
	},
		"application/vnd.groove-help": {
		source: "iana",
		extensions: [
			"ghf"
		]
	},
		"application/vnd.groove-identity-message": {
		source: "iana",
		extensions: [
			"gim"
		]
	},
		"application/vnd.groove-injector": {
		source: "iana",
		extensions: [
			"grv"
		]
	},
		"application/vnd.groove-tool-message": {
		source: "iana",
		extensions: [
			"gtm"
		]
	},
		"application/vnd.groove-tool-template": {
		source: "iana",
		extensions: [
			"tpl"
		]
	},
		"application/vnd.groove-vcard": {
		source: "iana",
		extensions: [
			"vcg"
		]
	},
		"application/vnd.hal+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hal+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"hal"
		]
	},
		"application/vnd.handheld-entertainment+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"zmm"
		]
	},
		"application/vnd.hbci": {
		source: "iana",
		extensions: [
			"hbci"
		]
	},
		"application/vnd.hc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hcl-bireports": {
		source: "iana"
	},
		"application/vnd.hdt": {
		source: "iana"
	},
		"application/vnd.heroku+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hhe.lesson-player": {
		source: "iana",
		extensions: [
			"les"
		]
	},
		"application/vnd.hl7cda+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.hl7v2+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.hp-hpgl": {
		source: "iana",
		extensions: [
			"hpgl"
		]
	},
		"application/vnd.hp-hpid": {
		source: "iana",
		extensions: [
			"hpid"
		]
	},
		"application/vnd.hp-hps": {
		source: "iana",
		extensions: [
			"hps"
		]
	},
		"application/vnd.hp-jlyt": {
		source: "iana",
		extensions: [
			"jlt"
		]
	},
		"application/vnd.hp-pcl": {
		source: "iana",
		extensions: [
			"pcl"
		]
	},
		"application/vnd.hp-pclxl": {
		source: "iana",
		extensions: [
			"pclxl"
		]
	},
		"application/vnd.httphone": {
		source: "iana"
	},
		"application/vnd.hydrostatix.sof-data": {
		source: "iana",
		extensions: [
			"sfd-hdstx"
		]
	},
		"application/vnd.hyper+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hyper-item+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hyperdrive+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.hzn-3d-crossword": {
		source: "iana"
	},
		"application/vnd.ibm.afplinedata": {
		source: "iana"
	},
		"application/vnd.ibm.electronic-media": {
		source: "iana"
	},
		"application/vnd.ibm.minipay": {
		source: "iana",
		extensions: [
			"mpy"
		]
	},
		"application/vnd.ibm.modcap": {
		source: "iana",
		extensions: [
			"afp",
			"listafp",
			"list3820"
		]
	},
		"application/vnd.ibm.rights-management": {
		source: "iana",
		extensions: [
			"irm"
		]
	},
		"application/vnd.ibm.secure-container": {
		source: "iana",
		extensions: [
			"sc"
		]
	},
		"application/vnd.iccprofile": {
		source: "iana",
		extensions: [
			"icc",
			"icm"
		]
	},
		"application/vnd.ieee.1905": {
		source: "iana"
	},
		"application/vnd.igloader": {
		source: "iana",
		extensions: [
			"igl"
		]
	},
		"application/vnd.imagemeter.folder+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.imagemeter.image+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.immervision-ivp": {
		source: "iana",
		extensions: [
			"ivp"
		]
	},
		"application/vnd.immervision-ivu": {
		source: "iana",
		extensions: [
			"ivu"
		]
	},
		"application/vnd.ims.imsccv1p1": {
		source: "iana"
	},
		"application/vnd.ims.imsccv1p2": {
		source: "iana"
	},
		"application/vnd.ims.imsccv1p3": {
		source: "iana"
	},
		"application/vnd.ims.lis.v2.result+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolproxy+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolproxy.id+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolsettings+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ims.lti.v2.toolsettings.simple+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.informedcontrol.rms+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.informix-visionary": {
		source: "iana"
	},
		"application/vnd.infotech.project": {
		source: "iana"
	},
		"application/vnd.infotech.project+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.innopath.wamp.notification": {
		source: "iana"
	},
		"application/vnd.insors.igm": {
		source: "iana",
		extensions: [
			"igm"
		]
	},
		"application/vnd.intercon.formnet": {
		source: "iana",
		extensions: [
			"xpw",
			"xpx"
		]
	},
		"application/vnd.intergeo": {
		source: "iana",
		extensions: [
			"i2g"
		]
	},
		"application/vnd.intertrust.digibox": {
		source: "iana"
	},
		"application/vnd.intertrust.nncp": {
		source: "iana"
	},
		"application/vnd.intu.qbo": {
		source: "iana",
		extensions: [
			"qbo"
		]
	},
		"application/vnd.intu.qfx": {
		source: "iana",
		extensions: [
			"qfx"
		]
	},
		"application/vnd.iptc.g2.catalogitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.conceptitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.knowledgeitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.newsitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.newsmessage+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.packageitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.iptc.g2.planningitem+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ipunplugged.rcprofile": {
		source: "iana",
		extensions: [
			"rcprofile"
		]
	},
		"application/vnd.irepository.package+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"irp"
		]
	},
		"application/vnd.is-xpr": {
		source: "iana",
		extensions: [
			"xpr"
		]
	},
		"application/vnd.isac.fcs": {
		source: "iana",
		extensions: [
			"fcs"
		]
	},
		"application/vnd.iso11783-10+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.jam": {
		source: "iana",
		extensions: [
			"jam"
		]
	},
		"application/vnd.japannet-directory-service": {
		source: "iana"
	},
		"application/vnd.japannet-jpnstore-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-payment-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-registration": {
		source: "iana"
	},
		"application/vnd.japannet-registration-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-setstore-wakeup": {
		source: "iana"
	},
		"application/vnd.japannet-verification": {
		source: "iana"
	},
		"application/vnd.japannet-verification-wakeup": {
		source: "iana"
	},
		"application/vnd.jcp.javame.midlet-rms": {
		source: "iana",
		extensions: [
			"rms"
		]
	},
		"application/vnd.jisp": {
		source: "iana",
		extensions: [
			"jisp"
		]
	},
		"application/vnd.joost.joda-archive": {
		source: "iana",
		extensions: [
			"joda"
		]
	},
		"application/vnd.jsk.isdn-ngn": {
		source: "iana"
	},
		"application/vnd.kahootz": {
		source: "iana",
		extensions: [
			"ktz",
			"ktr"
		]
	},
		"application/vnd.kde.karbon": {
		source: "iana",
		extensions: [
			"karbon"
		]
	},
		"application/vnd.kde.kchart": {
		source: "iana",
		extensions: [
			"chrt"
		]
	},
		"application/vnd.kde.kformula": {
		source: "iana",
		extensions: [
			"kfo"
		]
	},
		"application/vnd.kde.kivio": {
		source: "iana",
		extensions: [
			"flw"
		]
	},
		"application/vnd.kde.kontour": {
		source: "iana",
		extensions: [
			"kon"
		]
	},
		"application/vnd.kde.kpresenter": {
		source: "iana",
		extensions: [
			"kpr",
			"kpt"
		]
	},
		"application/vnd.kde.kspread": {
		source: "iana",
		extensions: [
			"ksp"
		]
	},
		"application/vnd.kde.kword": {
		source: "iana",
		extensions: [
			"kwd",
			"kwt"
		]
	},
		"application/vnd.kenameaapp": {
		source: "iana",
		extensions: [
			"htke"
		]
	},
		"application/vnd.kidspiration": {
		source: "iana",
		extensions: [
			"kia"
		]
	},
		"application/vnd.kinar": {
		source: "iana",
		extensions: [
			"kne",
			"knp"
		]
	},
		"application/vnd.koan": {
		source: "iana",
		extensions: [
			"skp",
			"skd",
			"skt",
			"skm"
		]
	},
		"application/vnd.kodak-descriptor": {
		source: "iana",
		extensions: [
			"sse"
		]
	},
		"application/vnd.las": {
		source: "iana"
	},
		"application/vnd.las.las+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.las.las+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lasxml"
		]
	},
		"application/vnd.laszip": {
		source: "iana"
	},
		"application/vnd.leap+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.liberty-request+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.llamagraphics.life-balance.desktop": {
		source: "iana",
		extensions: [
			"lbd"
		]
	},
		"application/vnd.llamagraphics.life-balance.exchange+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"lbe"
		]
	},
		"application/vnd.logipipe.circuit+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.loom": {
		source: "iana"
	},
		"application/vnd.lotus-1-2-3": {
		source: "iana",
		extensions: [
			"123"
		]
	},
		"application/vnd.lotus-approach": {
		source: "iana",
		extensions: [
			"apr"
		]
	},
		"application/vnd.lotus-freelance": {
		source: "iana",
		extensions: [
			"pre"
		]
	},
		"application/vnd.lotus-notes": {
		source: "iana",
		extensions: [
			"nsf"
		]
	},
		"application/vnd.lotus-organizer": {
		source: "iana",
		extensions: [
			"org"
		]
	},
		"application/vnd.lotus-screencam": {
		source: "iana",
		extensions: [
			"scm"
		]
	},
		"application/vnd.lotus-wordpro": {
		source: "iana",
		extensions: [
			"lwp"
		]
	},
		"application/vnd.macports.portpkg": {
		source: "iana",
		extensions: [
			"portpkg"
		]
	},
		"application/vnd.mapbox-vector-tile": {
		source: "iana",
		extensions: [
			"mvt"
		]
	},
		"application/vnd.marlin.drm.actiontoken+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.conftoken+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.license+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.marlin.drm.mdcf": {
		source: "iana"
	},
		"application/vnd.mason+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.maxar.archive.3tz+zip": {
		source: "iana",
		compressible: false
	},
		"application/vnd.maxmind.maxmind-db": {
		source: "iana"
	},
		"application/vnd.mcd": {
		source: "iana",
		extensions: [
			"mcd"
		]
	},
		"application/vnd.medcalcdata": {
		source: "iana",
		extensions: [
			"mc1"
		]
	},
		"application/vnd.mediastation.cdkey": {
		source: "iana",
		extensions: [
			"cdkey"
		]
	},
		"application/vnd.meridian-slingshot": {
		source: "iana"
	},
		"application/vnd.mfer": {
		source: "iana",
		extensions: [
			"mwf"
		]
	},
		"application/vnd.mfmp": {
		source: "iana",
		extensions: [
			"mfm"
		]
	},
		"application/vnd.micro+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.micrografx.flo": {
		source: "iana",
		extensions: [
			"flo"
		]
	},
		"application/vnd.micrografx.igx": {
		source: "iana",
		extensions: [
			"igx"
		]
	},
		"application/vnd.microsoft.portable-executable": {
		source: "iana"
	},
		"application/vnd.microsoft.windows.thumbnail-cache": {
		source: "iana"
	},
		"application/vnd.miele+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.mif": {
		source: "iana",
		extensions: [
			"mif"
		]
	},
		"application/vnd.minisoft-hp3000-save": {
		source: "iana"
	},
		"application/vnd.mitsubishi.misty-guard.trustweb": {
		source: "iana"
	},
		"application/vnd.mobius.daf": {
		source: "iana",
		extensions: [
			"daf"
		]
	},
		"application/vnd.mobius.dis": {
		source: "iana",
		extensions: [
			"dis"
		]
	},
		"application/vnd.mobius.mbk": {
		source: "iana",
		extensions: [
			"mbk"
		]
	},
		"application/vnd.mobius.mqy": {
		source: "iana",
		extensions: [
			"mqy"
		]
	},
		"application/vnd.mobius.msl": {
		source: "iana",
		extensions: [
			"msl"
		]
	},
		"application/vnd.mobius.plc": {
		source: "iana",
		extensions: [
			"plc"
		]
	},
		"application/vnd.mobius.txf": {
		source: "iana",
		extensions: [
			"txf"
		]
	},
		"application/vnd.mophun.application": {
		source: "iana",
		extensions: [
			"mpn"
		]
	},
		"application/vnd.mophun.certificate": {
		source: "iana",
		extensions: [
			"mpc"
		]
	},
		"application/vnd.motorola.flexsuite": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.adsi": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.fis": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.gotap": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.kmr": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.ttc": {
		source: "iana"
	},
		"application/vnd.motorola.flexsuite.wem": {
		source: "iana"
	},
		"application/vnd.motorola.iprm": {
		source: "iana"
	},
		"application/vnd.mozilla.xul+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xul"
		]
	},
		"application/vnd.ms-3mfdocument": {
		source: "iana"
	},
		"application/vnd.ms-artgalry": {
		source: "iana",
		extensions: [
			"cil"
		]
	},
		"application/vnd.ms-asf": {
		source: "iana"
	},
		"application/vnd.ms-cab-compressed": {
		source: "iana",
		extensions: [
			"cab"
		]
	},
		"application/vnd.ms-color.iccprofile": {
		source: "apache"
	},
		"application/vnd.ms-excel": {
		source: "iana",
		compressible: false,
		extensions: [
			"xls",
			"xlm",
			"xla",
			"xlc",
			"xlt",
			"xlw"
		]
	},
		"application/vnd.ms-excel.addin.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlam"
		]
	},
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlsb"
		]
	},
		"application/vnd.ms-excel.sheet.macroenabled.12": {
		source: "iana",
		extensions: [
			"xlsm"
		]
	},
		"application/vnd.ms-excel.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"xltm"
		]
	},
		"application/vnd.ms-fontobject": {
		source: "iana",
		compressible: true,
		extensions: [
			"eot"
		]
	},
		"application/vnd.ms-htmlhelp": {
		source: "iana",
		extensions: [
			"chm"
		]
	},
		"application/vnd.ms-ims": {
		source: "iana",
		extensions: [
			"ims"
		]
	},
		"application/vnd.ms-lrm": {
		source: "iana",
		extensions: [
			"lrm"
		]
	},
		"application/vnd.ms-office.activex+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-officetheme": {
		source: "iana",
		extensions: [
			"thmx"
		]
	},
		"application/vnd.ms-opentype": {
		source: "apache",
		compressible: true
	},
		"application/vnd.ms-outlook": {
		compressible: false,
		extensions: [
			"msg"
		]
	},
		"application/vnd.ms-package.obfuscated-opentype": {
		source: "apache"
	},
		"application/vnd.ms-pki.seccat": {
		source: "apache",
		extensions: [
			"cat"
		]
	},
		"application/vnd.ms-pki.stl": {
		source: "apache",
		extensions: [
			"stl"
		]
	},
		"application/vnd.ms-playready.initiator+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-powerpoint": {
		source: "iana",
		compressible: false,
		extensions: [
			"ppt",
			"pps",
			"pot"
		]
	},
		"application/vnd.ms-powerpoint.addin.macroenabled.12": {
		source: "iana",
		extensions: [
			"ppam"
		]
	},
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
		source: "iana",
		extensions: [
			"pptm"
		]
	},
		"application/vnd.ms-powerpoint.slide.macroenabled.12": {
		source: "iana",
		extensions: [
			"sldm"
		]
	},
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
		source: "iana",
		extensions: [
			"ppsm"
		]
	},
		"application/vnd.ms-powerpoint.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"potm"
		]
	},
		"application/vnd.ms-printdevicecapabilities+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-printing.printticket+xml": {
		source: "apache",
		compressible: true
	},
		"application/vnd.ms-printschematicket+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ms-project": {
		source: "iana",
		extensions: [
			"mpp",
			"mpt"
		]
	},
		"application/vnd.ms-tnef": {
		source: "iana"
	},
		"application/vnd.ms-windows.devicepairing": {
		source: "iana"
	},
		"application/vnd.ms-windows.nwprinting.oob": {
		source: "iana"
	},
		"application/vnd.ms-windows.printerpairing": {
		source: "iana"
	},
		"application/vnd.ms-windows.wsd.oob": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.lic-chlg-req": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.lic-resp": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.meter-chlg-req": {
		source: "iana"
	},
		"application/vnd.ms-wmdrm.meter-resp": {
		source: "iana"
	},
		"application/vnd.ms-word.document.macroenabled.12": {
		source: "iana",
		extensions: [
			"docm"
		]
	},
		"application/vnd.ms-word.template.macroenabled.12": {
		source: "iana",
		extensions: [
			"dotm"
		]
	},
		"application/vnd.ms-works": {
		source: "iana",
		extensions: [
			"wps",
			"wks",
			"wcm",
			"wdb"
		]
	},
		"application/vnd.ms-wpl": {
		source: "iana",
		extensions: [
			"wpl"
		]
	},
		"application/vnd.ms-xpsdocument": {
		source: "iana",
		compressible: false,
		extensions: [
			"xps"
		]
	},
		"application/vnd.msa-disk-image": {
		source: "iana"
	},
		"application/vnd.mseq": {
		source: "iana",
		extensions: [
			"mseq"
		]
	},
		"application/vnd.msign": {
		source: "iana"
	},
		"application/vnd.multiad.creator": {
		source: "iana"
	},
		"application/vnd.multiad.creator.cif": {
		source: "iana"
	},
		"application/vnd.music-niff": {
		source: "iana"
	},
		"application/vnd.musician": {
		source: "iana",
		extensions: [
			"mus"
		]
	},
		"application/vnd.muvee.style": {
		source: "iana",
		extensions: [
			"msty"
		]
	},
		"application/vnd.mynfc": {
		source: "iana",
		extensions: [
			"taglet"
		]
	},
		"application/vnd.nacamar.ybrid+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.ncd.control": {
		source: "iana"
	},
		"application/vnd.ncd.reference": {
		source: "iana"
	},
		"application/vnd.nearst.inv+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nebumind.line": {
		source: "iana"
	},
		"application/vnd.nervana": {
		source: "iana"
	},
		"application/vnd.netfpx": {
		source: "iana"
	},
		"application/vnd.neurolanguage.nlu": {
		source: "iana",
		extensions: [
			"nlu"
		]
	},
		"application/vnd.nimn": {
		source: "iana"
	},
		"application/vnd.nintendo.nitro.rom": {
		source: "iana"
	},
		"application/vnd.nintendo.snes.rom": {
		source: "iana"
	},
		"application/vnd.nitf": {
		source: "iana",
		extensions: [
			"ntf",
			"nitf"
		]
	},
		"application/vnd.noblenet-directory": {
		source: "iana",
		extensions: [
			"nnd"
		]
	},
		"application/vnd.noblenet-sealer": {
		source: "iana",
		extensions: [
			"nns"
		]
	},
		"application/vnd.noblenet-web": {
		source: "iana",
		extensions: [
			"nnw"
		]
	},
		"application/vnd.nokia.catalogs": {
		source: "iana"
	},
		"application/vnd.nokia.conml+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.conml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.iptv.config+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.isds-radio-presets": {
		source: "iana"
	},
		"application/vnd.nokia.landmark+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.landmark+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.landmarkcollection+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.n-gage.ac+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"ac"
		]
	},
		"application/vnd.nokia.n-gage.data": {
		source: "iana",
		extensions: [
			"ngdat"
		]
	},
		"application/vnd.nokia.n-gage.symbian.install": {
		source: "iana",
		extensions: [
			"n-gage"
		]
	},
		"application/vnd.nokia.ncd": {
		source: "iana"
	},
		"application/vnd.nokia.pcd+wbxml": {
		source: "iana"
	},
		"application/vnd.nokia.pcd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.nokia.radio-preset": {
		source: "iana",
		extensions: [
			"rpst"
		]
	},
		"application/vnd.nokia.radio-presets": {
		source: "iana",
		extensions: [
			"rpss"
		]
	},
		"application/vnd.novadigm.edm": {
		source: "iana",
		extensions: [
			"edm"
		]
	},
		"application/vnd.novadigm.edx": {
		source: "iana",
		extensions: [
			"edx"
		]
	},
		"application/vnd.novadigm.ext": {
		source: "iana",
		extensions: [
			"ext"
		]
	},
		"application/vnd.ntt-local.content-share": {
		source: "iana"
	},
		"application/vnd.ntt-local.file-transfer": {
		source: "iana"
	},
		"application/vnd.ntt-local.ogw_remote-access": {
		source: "iana"
	},
		"application/vnd.ntt-local.sip-ta_remote": {
		source: "iana"
	},
		"application/vnd.ntt-local.sip-ta_tcp_stream": {
		source: "iana"
	},
		"application/vnd.oasis.opendocument.chart": {
		source: "iana",
		extensions: [
			"odc"
		]
	},
		"application/vnd.oasis.opendocument.chart-template": {
		source: "iana",
		extensions: [
			"otc"
		]
	},
		"application/vnd.oasis.opendocument.database": {
		source: "iana",
		extensions: [
			"odb"
		]
	},
		"application/vnd.oasis.opendocument.formula": {
		source: "iana",
		extensions: [
			"odf"
		]
	},
		"application/vnd.oasis.opendocument.formula-template": {
		source: "iana",
		extensions: [
			"odft"
		]
	},
		"application/vnd.oasis.opendocument.graphics": {
		source: "iana",
		compressible: false,
		extensions: [
			"odg"
		]
	},
		"application/vnd.oasis.opendocument.graphics-template": {
		source: "iana",
		extensions: [
			"otg"
		]
	},
		"application/vnd.oasis.opendocument.image": {
		source: "iana",
		extensions: [
			"odi"
		]
	},
		"application/vnd.oasis.opendocument.image-template": {
		source: "iana",
		extensions: [
			"oti"
		]
	},
		"application/vnd.oasis.opendocument.presentation": {
		source: "iana",
		compressible: false,
		extensions: [
			"odp"
		]
	},
		"application/vnd.oasis.opendocument.presentation-template": {
		source: "iana",
		extensions: [
			"otp"
		]
	},
		"application/vnd.oasis.opendocument.spreadsheet": {
		source: "iana",
		compressible: false,
		extensions: [
			"ods"
		]
	},
		"application/vnd.oasis.opendocument.spreadsheet-template": {
		source: "iana",
		extensions: [
			"ots"
		]
	},
		"application/vnd.oasis.opendocument.text": {
		source: "iana",
		compressible: false,
		extensions: [
			"odt"
		]
	},
		"application/vnd.oasis.opendocument.text-master": {
		source: "iana",
		extensions: [
			"odm"
		]
	},
		"application/vnd.oasis.opendocument.text-template": {
		source: "iana",
		extensions: [
			"ott"
		]
	},
		"application/vnd.oasis.opendocument.text-web": {
		source: "iana",
		extensions: [
			"oth"
		]
	},
		"application/vnd.obn": {
		source: "iana"
	},
		"application/vnd.ocf+cbor": {
		source: "iana"
	},
		"application/vnd.oci.image.manifest.v1+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oftn.l10n+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.contentaccessdownload+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.contentaccessstreaming+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.cspg-hexbinary": {
		source: "iana"
	},
		"application/vnd.oipf.dae.svg+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.dae.xhtml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.mippvcontrolmessage+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.pae.gem": {
		source: "iana"
	},
		"application/vnd.oipf.spdiscovery+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.spdlist+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.ueprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oipf.userprofile+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.olpc-sugar": {
		source: "iana",
		extensions: [
			"xo"
		]
	},
		"application/vnd.oma-scws-config": {
		source: "iana"
	},
		"application/vnd.oma-scws-http-request": {
		source: "iana"
	},
		"application/vnd.oma-scws-http-response": {
		source: "iana"
	},
		"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.drm-trigger+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.imd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.ltkm": {
		source: "iana"
	},
		"application/vnd.oma.bcast.notification+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.provisioningtrigger": {
		source: "iana"
	},
		"application/vnd.oma.bcast.sgboot": {
		source: "iana"
	},
		"application/vnd.oma.bcast.sgdd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.sgdu": {
		source: "iana"
	},
		"application/vnd.oma.bcast.simple-symbol-container": {
		source: "iana"
	},
		"application/vnd.oma.bcast.smartcard-trigger+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.sprov+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.bcast.stkm": {
		source: "iana"
	},
		"application/vnd.oma.cab-address-book+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-feature-handler+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-pcc+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-subs-invite+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.cab-user-prefs+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.dcd": {
		source: "iana"
	},
		"application/vnd.oma.dcdc": {
		source: "iana"
	},
		"application/vnd.oma.dd2+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dd2"
		]
	},
		"application/vnd.oma.drm.risd+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.group-usage-list+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.lwm2m+cbor": {
		source: "iana"
	},
		"application/vnd.oma.lwm2m+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.lwm2m+tlv": {
		source: "iana"
	},
		"application/vnd.oma.pal+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.detailed-progress-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.final-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.groups+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.invocation-descriptor+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.poc.optimized-progress-report+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.push": {
		source: "iana"
	},
		"application/vnd.oma.scidm.messages+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oma.xcap-directory+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.omads-email+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omads-file+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omads-folder+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.omaloc-supl-init": {
		source: "iana"
	},
		"application/vnd.onepager": {
		source: "iana"
	},
		"application/vnd.onepagertamp": {
		source: "iana"
	},
		"application/vnd.onepagertamx": {
		source: "iana"
	},
		"application/vnd.onepagertat": {
		source: "iana"
	},
		"application/vnd.onepagertatp": {
		source: "iana"
	},
		"application/vnd.onepagertatx": {
		source: "iana"
	},
		"application/vnd.openblox.game+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"obgx"
		]
	},
		"application/vnd.openblox.game-binary": {
		source: "iana"
	},
		"application/vnd.openeye.oeb": {
		source: "iana"
	},
		"application/vnd.openofficeorg.extension": {
		source: "apache",
		extensions: [
			"oxt"
		]
	},
		"application/vnd.openstreetmap.data+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"osm"
		]
	},
		"application/vnd.opentimestamps.ots": {
		source: "iana"
	},
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawing+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
		source: "iana",
		compressible: false,
		extensions: [
			"pptx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slide": {
		source: "iana",
		extensions: [
			"sldx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
		source: "iana",
		extensions: [
			"ppsx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.template": {
		source: "iana",
		extensions: [
			"potx"
		]
	},
		"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
		source: "iana",
		compressible: false,
		extensions: [
			"xlsx"
		]
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
		source: "iana",
		extensions: [
			"xltx"
		]
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.theme+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.vmldrawing": {
		source: "iana"
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
		source: "iana",
		compressible: false,
		extensions: [
			"docx"
		]
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
		source: "iana",
		extensions: [
			"dotx"
		]
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.core-properties+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.openxmlformats-package.relationships+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oracle.resource+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.orange.indata": {
		source: "iana"
	},
		"application/vnd.osa.netdeploy": {
		source: "iana"
	},
		"application/vnd.osgeo.mapguide.package": {
		source: "iana",
		extensions: [
			"mgp"
		]
	},
		"application/vnd.osgi.bundle": {
		source: "iana"
	},
		"application/vnd.osgi.dp": {
		source: "iana",
		extensions: [
			"dp"
		]
	},
		"application/vnd.osgi.subsystem": {
		source: "iana",
		extensions: [
			"esa"
		]
	},
		"application/vnd.otps.ct-kip+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.oxli.countgraph": {
		source: "iana"
	},
		"application/vnd.pagerduty+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.palm": {
		source: "iana",
		extensions: [
			"pdb",
			"pqa",
			"oprc"
		]
	},
		"application/vnd.panoply": {
		source: "iana"
	},
		"application/vnd.paos.xml": {
		source: "iana"
	},
		"application/vnd.patentdive": {
		source: "iana"
	},
		"application/vnd.patientecommsdoc": {
		source: "iana"
	},
		"application/vnd.pawaafile": {
		source: "iana",
		extensions: [
			"paw"
		]
	},
		"application/vnd.pcos": {
		source: "iana"
	},
		"application/vnd.pg.format": {
		source: "iana",
		extensions: [
			"str"
		]
	},
		"application/vnd.pg.osasli": {
		source: "iana",
		extensions: [
			"ei6"
		]
	},
		"application/vnd.piaccess.application-licence": {
		source: "iana"
	},
		"application/vnd.picsel": {
		source: "iana",
		extensions: [
			"efif"
		]
	},
		"application/vnd.pmi.widget": {
		source: "iana",
		extensions: [
			"wg"
		]
	},
		"application/vnd.poc.group-advertisement+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.pocketlearn": {
		source: "iana",
		extensions: [
			"plf"
		]
	},
		"application/vnd.powerbuilder6": {
		source: "iana",
		extensions: [
			"pbd"
		]
	},
		"application/vnd.powerbuilder6-s": {
		source: "iana"
	},
		"application/vnd.powerbuilder7": {
		source: "iana"
	},
		"application/vnd.powerbuilder7-s": {
		source: "iana"
	},
		"application/vnd.powerbuilder75": {
		source: "iana"
	},
		"application/vnd.powerbuilder75-s": {
		source: "iana"
	},
		"application/vnd.preminet": {
		source: "iana"
	},
		"application/vnd.previewsystems.box": {
		source: "iana",
		extensions: [
			"box"
		]
	},
		"application/vnd.proteus.magazine": {
		source: "iana",
		extensions: [
			"mgz"
		]
	},
		"application/vnd.psfs": {
		source: "iana"
	},
		"application/vnd.publishare-delta-tree": {
		source: "iana",
		extensions: [
			"qps"
		]
	},
		"application/vnd.pvi.ptid1": {
		source: "iana",
		extensions: [
			"ptid"
		]
	},
		"application/vnd.pwg-multiplexed": {
		source: "iana"
	},
		"application/vnd.pwg-xhtml-print+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.qualcomm.brew-app-res": {
		source: "iana"
	},
		"application/vnd.quarantainenet": {
		source: "iana"
	},
		"application/vnd.quark.quarkxpress": {
		source: "iana",
		extensions: [
			"qxd",
			"qxt",
			"qwd",
			"qwt",
			"qxl",
			"qxb"
		]
	},
		"application/vnd.quobject-quoxdocument": {
		source: "iana"
	},
		"application/vnd.radisys.moml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-conf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-conn+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-dialog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-audit-stream+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-conf+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-base+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-fax-detect+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-group+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-speech+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.radisys.msml-dialog-transform+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.rainstor.data": {
		source: "iana"
	},
		"application/vnd.rapid": {
		source: "iana"
	},
		"application/vnd.rar": {
		source: "iana",
		extensions: [
			"rar"
		]
	},
		"application/vnd.realvnc.bed": {
		source: "iana",
		extensions: [
			"bed"
		]
	},
		"application/vnd.recordare.musicxml": {
		source: "iana",
		extensions: [
			"mxl"
		]
	},
		"application/vnd.recordare.musicxml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"musicxml"
		]
	},
		"application/vnd.renlearn.rlprint": {
		source: "iana"
	},
		"application/vnd.resilient.logic": {
		source: "iana"
	},
		"application/vnd.restful+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.rig.cryptonote": {
		source: "iana",
		extensions: [
			"cryptonote"
		]
	},
		"application/vnd.rim.cod": {
		source: "apache",
		extensions: [
			"cod"
		]
	},
		"application/vnd.rn-realmedia": {
		source: "apache",
		extensions: [
			"rm"
		]
	},
		"application/vnd.rn-realmedia-vbr": {
		source: "apache",
		extensions: [
			"rmvb"
		]
	},
		"application/vnd.route66.link66+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"link66"
		]
	},
		"application/vnd.rs-274x": {
		source: "iana"
	},
		"application/vnd.ruckus.download": {
		source: "iana"
	},
		"application/vnd.s3sms": {
		source: "iana"
	},
		"application/vnd.sailingtracker.track": {
		source: "iana",
		extensions: [
			"st"
		]
	},
		"application/vnd.sar": {
		source: "iana"
	},
		"application/vnd.sbm.cid": {
		source: "iana"
	},
		"application/vnd.sbm.mid2": {
		source: "iana"
	},
		"application/vnd.scribus": {
		source: "iana"
	},
		"application/vnd.sealed.3df": {
		source: "iana"
	},
		"application/vnd.sealed.csf": {
		source: "iana"
	},
		"application/vnd.sealed.doc": {
		source: "iana"
	},
		"application/vnd.sealed.eml": {
		source: "iana"
	},
		"application/vnd.sealed.mht": {
		source: "iana"
	},
		"application/vnd.sealed.net": {
		source: "iana"
	},
		"application/vnd.sealed.ppt": {
		source: "iana"
	},
		"application/vnd.sealed.tiff": {
		source: "iana"
	},
		"application/vnd.sealed.xls": {
		source: "iana"
	},
		"application/vnd.sealedmedia.softseal.html": {
		source: "iana"
	},
		"application/vnd.sealedmedia.softseal.pdf": {
		source: "iana"
	},
		"application/vnd.seemail": {
		source: "iana",
		extensions: [
			"see"
		]
	},
		"application/vnd.seis+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.sema": {
		source: "iana",
		extensions: [
			"sema"
		]
	},
		"application/vnd.semd": {
		source: "iana",
		extensions: [
			"semd"
		]
	},
		"application/vnd.semf": {
		source: "iana",
		extensions: [
			"semf"
		]
	},
		"application/vnd.shade-save-file": {
		source: "iana"
	},
		"application/vnd.shana.informed.formdata": {
		source: "iana",
		extensions: [
			"ifm"
		]
	},
		"application/vnd.shana.informed.formtemplate": {
		source: "iana",
		extensions: [
			"itp"
		]
	},
		"application/vnd.shana.informed.interchange": {
		source: "iana",
		extensions: [
			"iif"
		]
	},
		"application/vnd.shana.informed.package": {
		source: "iana",
		extensions: [
			"ipk"
		]
	},
		"application/vnd.shootproof+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.shopkick+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.shp": {
		source: "iana"
	},
		"application/vnd.shx": {
		source: "iana"
	},
		"application/vnd.sigrok.session": {
		source: "iana"
	},
		"application/vnd.simtech-mindmapper": {
		source: "iana",
		extensions: [
			"twd",
			"twds"
		]
	},
		"application/vnd.siren+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.smaf": {
		source: "iana",
		extensions: [
			"mmf"
		]
	},
		"application/vnd.smart.notebook": {
		source: "iana"
	},
		"application/vnd.smart.teacher": {
		source: "iana",
		extensions: [
			"teacher"
		]
	},
		"application/vnd.snesdev-page-table": {
		source: "iana"
	},
		"application/vnd.software602.filler.form+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"fo"
		]
	},
		"application/vnd.software602.filler.form-xml-zip": {
		source: "iana"
	},
		"application/vnd.solent.sdkm+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"sdkm",
			"sdkd"
		]
	},
		"application/vnd.spotfire.dxp": {
		source: "iana",
		extensions: [
			"dxp"
		]
	},
		"application/vnd.spotfire.sfs": {
		source: "iana",
		extensions: [
			"sfs"
		]
	},
		"application/vnd.sqlite3": {
		source: "iana"
	},
		"application/vnd.sss-cod": {
		source: "iana"
	},
		"application/vnd.sss-dtf": {
		source: "iana"
	},
		"application/vnd.sss-ntf": {
		source: "iana"
	},
		"application/vnd.stardivision.calc": {
		source: "apache",
		extensions: [
			"sdc"
		]
	},
		"application/vnd.stardivision.draw": {
		source: "apache",
		extensions: [
			"sda"
		]
	},
		"application/vnd.stardivision.impress": {
		source: "apache",
		extensions: [
			"sdd"
		]
	},
		"application/vnd.stardivision.math": {
		source: "apache",
		extensions: [
			"smf"
		]
	},
		"application/vnd.stardivision.writer": {
		source: "apache",
		extensions: [
			"sdw",
			"vor"
		]
	},
		"application/vnd.stardivision.writer-global": {
		source: "apache",
		extensions: [
			"sgl"
		]
	},
		"application/vnd.stepmania.package": {
		source: "iana",
		extensions: [
			"smzip"
		]
	},
		"application/vnd.stepmania.stepchart": {
		source: "iana",
		extensions: [
			"sm"
		]
	},
		"application/vnd.street-stream": {
		source: "iana"
	},
		"application/vnd.sun.wadl+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wadl"
		]
	},
		"application/vnd.sun.xml.calc": {
		source: "apache",
		extensions: [
			"sxc"
		]
	},
		"application/vnd.sun.xml.calc.template": {
		source: "apache",
		extensions: [
			"stc"
		]
	},
		"application/vnd.sun.xml.draw": {
		source: "apache",
		extensions: [
			"sxd"
		]
	},
		"application/vnd.sun.xml.draw.template": {
		source: "apache",
		extensions: [
			"std"
		]
	},
		"application/vnd.sun.xml.impress": {
		source: "apache",
		extensions: [
			"sxi"
		]
	},
		"application/vnd.sun.xml.impress.template": {
		source: "apache",
		extensions: [
			"sti"
		]
	},
		"application/vnd.sun.xml.math": {
		source: "apache",
		extensions: [
			"sxm"
		]
	},
		"application/vnd.sun.xml.writer": {
		source: "apache",
		extensions: [
			"sxw"
		]
	},
		"application/vnd.sun.xml.writer.global": {
		source: "apache",
		extensions: [
			"sxg"
		]
	},
		"application/vnd.sun.xml.writer.template": {
		source: "apache",
		extensions: [
			"stw"
		]
	},
		"application/vnd.sus-calendar": {
		source: "iana",
		extensions: [
			"sus",
			"susp"
		]
	},
		"application/vnd.svd": {
		source: "iana",
		extensions: [
			"svd"
		]
	},
		"application/vnd.swiftview-ics": {
		source: "iana"
	},
		"application/vnd.sycle+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.syft+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.symbian.install": {
		source: "apache",
		extensions: [
			"sis",
			"sisx"
		]
	},
		"application/vnd.syncml+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"xsm"
		]
	},
		"application/vnd.syncml.dm+wbxml": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"bdm"
		]
	},
		"application/vnd.syncml.dm+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"xdm"
		]
	},
		"application/vnd.syncml.dm.notification": {
		source: "iana"
	},
		"application/vnd.syncml.dmddf+wbxml": {
		source: "iana"
	},
		"application/vnd.syncml.dmddf+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"ddf"
		]
	},
		"application/vnd.syncml.dmtnds+wbxml": {
		source: "iana"
	},
		"application/vnd.syncml.dmtnds+xml": {
		source: "iana",
		charset: "UTF-8",
		compressible: true
	},
		"application/vnd.syncml.ds.notification": {
		source: "iana"
	},
		"application/vnd.tableschema+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tao.intent-module-archive": {
		source: "iana",
		extensions: [
			"tao"
		]
	},
		"application/vnd.tcpdump.pcap": {
		source: "iana",
		extensions: [
			"pcap",
			"cap",
			"dmp"
		]
	},
		"application/vnd.think-cell.ppttc+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tmd.mediaflex.api+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.tml": {
		source: "iana"
	},
		"application/vnd.tmobile-livetv": {
		source: "iana",
		extensions: [
			"tmo"
		]
	},
		"application/vnd.tri.onesource": {
		source: "iana"
	},
		"application/vnd.trid.tpt": {
		source: "iana",
		extensions: [
			"tpt"
		]
	},
		"application/vnd.triscape.mxs": {
		source: "iana",
		extensions: [
			"mxs"
		]
	},
		"application/vnd.trueapp": {
		source: "iana",
		extensions: [
			"tra"
		]
	},
		"application/vnd.truedoc": {
		source: "iana"
	},
		"application/vnd.ubisoft.webplayer": {
		source: "iana"
	},
		"application/vnd.ufdl": {
		source: "iana",
		extensions: [
			"ufd",
			"ufdl"
		]
	},
		"application/vnd.uiq.theme": {
		source: "iana",
		extensions: [
			"utz"
		]
	},
		"application/vnd.umajin": {
		source: "iana",
		extensions: [
			"umj"
		]
	},
		"application/vnd.unity": {
		source: "iana",
		extensions: [
			"unityweb"
		]
	},
		"application/vnd.uoml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"uoml"
		]
	},
		"application/vnd.uplanet.alert": {
		source: "iana"
	},
		"application/vnd.uplanet.alert-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.bearer-choice": {
		source: "iana"
	},
		"application/vnd.uplanet.bearer-choice-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.cacheop": {
		source: "iana"
	},
		"application/vnd.uplanet.cacheop-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.channel": {
		source: "iana"
	},
		"application/vnd.uplanet.channel-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.list": {
		source: "iana"
	},
		"application/vnd.uplanet.list-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.listcmd": {
		source: "iana"
	},
		"application/vnd.uplanet.listcmd-wbxml": {
		source: "iana"
	},
		"application/vnd.uplanet.signal": {
		source: "iana"
	},
		"application/vnd.uri-map": {
		source: "iana"
	},
		"application/vnd.valve.source.material": {
		source: "iana"
	},
		"application/vnd.vcx": {
		source: "iana",
		extensions: [
			"vcx"
		]
	},
		"application/vnd.vd-study": {
		source: "iana"
	},
		"application/vnd.vectorworks": {
		source: "iana"
	},
		"application/vnd.vel+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.verimatrix.vcas": {
		source: "iana"
	},
		"application/vnd.veritone.aion+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.veryant.thin": {
		source: "iana"
	},
		"application/vnd.ves.encrypted": {
		source: "iana"
	},
		"application/vnd.vidsoft.vidconference": {
		source: "iana"
	},
		"application/vnd.visio": {
		source: "iana",
		extensions: [
			"vsd",
			"vst",
			"vss",
			"vsw"
		]
	},
		"application/vnd.visionary": {
		source: "iana",
		extensions: [
			"vis"
		]
	},
		"application/vnd.vividence.scriptfile": {
		source: "iana"
	},
		"application/vnd.vsf": {
		source: "iana",
		extensions: [
			"vsf"
		]
	},
		"application/vnd.wap.sic": {
		source: "iana"
	},
		"application/vnd.wap.slc": {
		source: "iana"
	},
		"application/vnd.wap.wbxml": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"wbxml"
		]
	},
		"application/vnd.wap.wmlc": {
		source: "iana",
		extensions: [
			"wmlc"
		]
	},
		"application/vnd.wap.wmlscriptc": {
		source: "iana",
		extensions: [
			"wmlsc"
		]
	},
		"application/vnd.webturbo": {
		source: "iana",
		extensions: [
			"wtb"
		]
	},
		"application/vnd.wfa.dpp": {
		source: "iana"
	},
		"application/vnd.wfa.p2p": {
		source: "iana"
	},
		"application/vnd.wfa.wsc": {
		source: "iana"
	},
		"application/vnd.windows.devicepairing": {
		source: "iana"
	},
		"application/vnd.wmc": {
		source: "iana"
	},
		"application/vnd.wmf.bootstrap": {
		source: "iana"
	},
		"application/vnd.wolfram.mathematica": {
		source: "iana"
	},
		"application/vnd.wolfram.mathematica.package": {
		source: "iana"
	},
		"application/vnd.wolfram.player": {
		source: "iana",
		extensions: [
			"nbp"
		]
	},
		"application/vnd.wordperfect": {
		source: "iana",
		extensions: [
			"wpd"
		]
	},
		"application/vnd.wqd": {
		source: "iana",
		extensions: [
			"wqd"
		]
	},
		"application/vnd.wrq-hp3000-labelled": {
		source: "iana"
	},
		"application/vnd.wt.stf": {
		source: "iana",
		extensions: [
			"stf"
		]
	},
		"application/vnd.wv.csp+wbxml": {
		source: "iana"
	},
		"application/vnd.wv.csp+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.wv.ssp+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xacml+json": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xara": {
		source: "iana",
		extensions: [
			"xar"
		]
	},
		"application/vnd.xfdl": {
		source: "iana",
		extensions: [
			"xfdl"
		]
	},
		"application/vnd.xfdl.webform": {
		source: "iana"
	},
		"application/vnd.xmi+xml": {
		source: "iana",
		compressible: true
	},
		"application/vnd.xmpie.cpkg": {
		source: "iana"
	},
		"application/vnd.xmpie.dpkg": {
		source: "iana"
	},
		"application/vnd.xmpie.plan": {
		source: "iana"
	},
		"application/vnd.xmpie.ppkg": {
		source: "iana"
	},
		"application/vnd.xmpie.xlim": {
		source: "iana"
	},
		"application/vnd.yamaha.hv-dic": {
		source: "iana",
		extensions: [
			"hvd"
		]
	},
		"application/vnd.yamaha.hv-script": {
		source: "iana",
		extensions: [
			"hvs"
		]
	},
		"application/vnd.yamaha.hv-voice": {
		source: "iana",
		extensions: [
			"hvp"
		]
	},
		"application/vnd.yamaha.openscoreformat": {
		source: "iana",
		extensions: [
			"osf"
		]
	},
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"osfpvg"
		]
	},
		"application/vnd.yamaha.remote-setup": {
		source: "iana"
	},
		"application/vnd.yamaha.smaf-audio": {
		source: "iana",
		extensions: [
			"saf"
		]
	},
		"application/vnd.yamaha.smaf-phrase": {
		source: "iana",
		extensions: [
			"spf"
		]
	},
		"application/vnd.yamaha.through-ngn": {
		source: "iana"
	},
		"application/vnd.yamaha.tunnel-udpencap": {
		source: "iana"
	},
		"application/vnd.yaoweme": {
		source: "iana"
	},
		"application/vnd.yellowriver-custom-menu": {
		source: "iana",
		extensions: [
			"cmp"
		]
	},
		"application/vnd.youtube.yt": {
		source: "iana"
	},
		"application/vnd.zul": {
		source: "iana",
		extensions: [
			"zir",
			"zirz"
		]
	},
		"application/vnd.zzazz.deck+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"zaz"
		]
	},
		"application/voicexml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"vxml"
		]
	},
		"application/voucher-cms+json": {
		source: "iana",
		compressible: true
	},
		"application/vq-rtcpxr": {
		source: "iana"
	},
		"application/wasm": {
		source: "iana",
		compressible: true,
		extensions: [
			"wasm"
		]
	},
		"application/watcherinfo+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wif"
		]
	},
		"application/webpush-options+json": {
		source: "iana",
		compressible: true
	},
		"application/whoispp-query": {
		source: "iana"
	},
		"application/whoispp-response": {
		source: "iana"
	},
		"application/widget": {
		source: "iana",
		extensions: [
			"wgt"
		]
	},
		"application/winhlp": {
		source: "apache",
		extensions: [
			"hlp"
		]
	},
		"application/wita": {
		source: "iana"
	},
		"application/wordperfect5.1": {
		source: "iana"
	},
		"application/wsdl+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wsdl"
		]
	},
		"application/wspolicy+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"wspolicy"
		]
	},
		"application/x-7z-compressed": {
		source: "apache",
		compressible: false,
		extensions: [
			"7z"
		]
	},
		"application/x-abiword": {
		source: "apache",
		extensions: [
			"abw"
		]
	},
		"application/x-ace-compressed": {
		source: "apache",
		extensions: [
			"ace"
		]
	},
		"application/x-amf": {
		source: "apache"
	},
		"application/x-apple-diskimage": {
		source: "apache",
		extensions: [
			"dmg"
		]
	},
		"application/x-arj": {
		compressible: false,
		extensions: [
			"arj"
		]
	},
		"application/x-authorware-bin": {
		source: "apache",
		extensions: [
			"aab",
			"x32",
			"u32",
			"vox"
		]
	},
		"application/x-authorware-map": {
		source: "apache",
		extensions: [
			"aam"
		]
	},
		"application/x-authorware-seg": {
		source: "apache",
		extensions: [
			"aas"
		]
	},
		"application/x-bcpio": {
		source: "apache",
		extensions: [
			"bcpio"
		]
	},
		"application/x-bdoc": {
		compressible: false,
		extensions: [
			"bdoc"
		]
	},
		"application/x-bittorrent": {
		source: "apache",
		extensions: [
			"torrent"
		]
	},
		"application/x-blorb": {
		source: "apache",
		extensions: [
			"blb",
			"blorb"
		]
	},
		"application/x-bzip": {
		source: "apache",
		compressible: false,
		extensions: [
			"bz"
		]
	},
		"application/x-bzip2": {
		source: "apache",
		compressible: false,
		extensions: [
			"bz2",
			"boz"
		]
	},
		"application/x-cbr": {
		source: "apache",
		extensions: [
			"cbr",
			"cba",
			"cbt",
			"cbz",
			"cb7"
		]
	},
		"application/x-cdlink": {
		source: "apache",
		extensions: [
			"vcd"
		]
	},
		"application/x-cfs-compressed": {
		source: "apache",
		extensions: [
			"cfs"
		]
	},
		"application/x-chat": {
		source: "apache",
		extensions: [
			"chat"
		]
	},
		"application/x-chess-pgn": {
		source: "apache",
		extensions: [
			"pgn"
		]
	},
		"application/x-chrome-extension": {
		extensions: [
			"crx"
		]
	},
		"application/x-cocoa": {
		source: "nginx",
		extensions: [
			"cco"
		]
	},
		"application/x-compress": {
		source: "apache"
	},
		"application/x-conference": {
		source: "apache",
		extensions: [
			"nsc"
		]
	},
		"application/x-cpio": {
		source: "apache",
		extensions: [
			"cpio"
		]
	},
		"application/x-csh": {
		source: "apache",
		extensions: [
			"csh"
		]
	},
		"application/x-deb": {
		compressible: false
	},
		"application/x-debian-package": {
		source: "apache",
		extensions: [
			"deb",
			"udeb"
		]
	},
		"application/x-dgc-compressed": {
		source: "apache",
		extensions: [
			"dgc"
		]
	},
		"application/x-director": {
		source: "apache",
		extensions: [
			"dir",
			"dcr",
			"dxr",
			"cst",
			"cct",
			"cxt",
			"w3d",
			"fgd",
			"swa"
		]
	},
		"application/x-doom": {
		source: "apache",
		extensions: [
			"wad"
		]
	},
		"application/x-dtbncx+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"ncx"
		]
	},
		"application/x-dtbook+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"dtb"
		]
	},
		"application/x-dtbresource+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"res"
		]
	},
		"application/x-dvi": {
		source: "apache",
		compressible: false,
		extensions: [
			"dvi"
		]
	},
		"application/x-envoy": {
		source: "apache",
		extensions: [
			"evy"
		]
	},
		"application/x-eva": {
		source: "apache",
		extensions: [
			"eva"
		]
	},
		"application/x-font-bdf": {
		source: "apache",
		extensions: [
			"bdf"
		]
	},
		"application/x-font-dos": {
		source: "apache"
	},
		"application/x-font-framemaker": {
		source: "apache"
	},
		"application/x-font-ghostscript": {
		source: "apache",
		extensions: [
			"gsf"
		]
	},
		"application/x-font-libgrx": {
		source: "apache"
	},
		"application/x-font-linux-psf": {
		source: "apache",
		extensions: [
			"psf"
		]
	},
		"application/x-font-pcf": {
		source: "apache",
		extensions: [
			"pcf"
		]
	},
		"application/x-font-snf": {
		source: "apache",
		extensions: [
			"snf"
		]
	},
		"application/x-font-speedo": {
		source: "apache"
	},
		"application/x-font-sunos-news": {
		source: "apache"
	},
		"application/x-font-type1": {
		source: "apache",
		extensions: [
			"pfa",
			"pfb",
			"pfm",
			"afm"
		]
	},
		"application/x-font-vfont": {
		source: "apache"
	},
		"application/x-freearc": {
		source: "apache",
		extensions: [
			"arc"
		]
	},
		"application/x-futuresplash": {
		source: "apache",
		extensions: [
			"spl"
		]
	},
		"application/x-gca-compressed": {
		source: "apache",
		extensions: [
			"gca"
		]
	},
		"application/x-glulx": {
		source: "apache",
		extensions: [
			"ulx"
		]
	},
		"application/x-gnumeric": {
		source: "apache",
		extensions: [
			"gnumeric"
		]
	},
		"application/x-gramps-xml": {
		source: "apache",
		extensions: [
			"gramps"
		]
	},
		"application/x-gtar": {
		source: "apache",
		extensions: [
			"gtar"
		]
	},
		"application/x-gzip": {
		source: "apache"
	},
		"application/x-hdf": {
		source: "apache",
		extensions: [
			"hdf"
		]
	},
		"application/x-httpd-php": {
		compressible: true,
		extensions: [
			"php"
		]
	},
		"application/x-install-instructions": {
		source: "apache",
		extensions: [
			"install"
		]
	},
		"application/x-iso9660-image": {
		source: "apache",
		extensions: [
			"iso"
		]
	},
		"application/x-iwork-keynote-sffkey": {
		extensions: [
			"key"
		]
	},
		"application/x-iwork-numbers-sffnumbers": {
		extensions: [
			"numbers"
		]
	},
		"application/x-iwork-pages-sffpages": {
		extensions: [
			"pages"
		]
	},
		"application/x-java-archive-diff": {
		source: "nginx",
		extensions: [
			"jardiff"
		]
	},
		"application/x-java-jnlp-file": {
		source: "apache",
		compressible: false,
		extensions: [
			"jnlp"
		]
	},
		"application/x-javascript": {
		compressible: true
	},
		"application/x-keepass2": {
		extensions: [
			"kdbx"
		]
	},
		"application/x-latex": {
		source: "apache",
		compressible: false,
		extensions: [
			"latex"
		]
	},
		"application/x-lua-bytecode": {
		extensions: [
			"luac"
		]
	},
		"application/x-lzh-compressed": {
		source: "apache",
		extensions: [
			"lzh",
			"lha"
		]
	},
		"application/x-makeself": {
		source: "nginx",
		extensions: [
			"run"
		]
	},
		"application/x-mie": {
		source: "apache",
		extensions: [
			"mie"
		]
	},
		"application/x-mobipocket-ebook": {
		source: "apache",
		extensions: [
			"prc",
			"mobi"
		]
	},
		"application/x-mpegurl": {
		compressible: false
	},
		"application/x-ms-application": {
		source: "apache",
		extensions: [
			"application"
		]
	},
		"application/x-ms-shortcut": {
		source: "apache",
		extensions: [
			"lnk"
		]
	},
		"application/x-ms-wmd": {
		source: "apache",
		extensions: [
			"wmd"
		]
	},
		"application/x-ms-wmz": {
		source: "apache",
		extensions: [
			"wmz"
		]
	},
		"application/x-ms-xbap": {
		source: "apache",
		extensions: [
			"xbap"
		]
	},
		"application/x-msaccess": {
		source: "apache",
		extensions: [
			"mdb"
		]
	},
		"application/x-msbinder": {
		source: "apache",
		extensions: [
			"obd"
		]
	},
		"application/x-mscardfile": {
		source: "apache",
		extensions: [
			"crd"
		]
	},
		"application/x-msclip": {
		source: "apache",
		extensions: [
			"clp"
		]
	},
		"application/x-msdos-program": {
		extensions: [
			"exe"
		]
	},
		"application/x-msdownload": {
		source: "apache",
		extensions: [
			"exe",
			"dll",
			"com",
			"bat",
			"msi"
		]
	},
		"application/x-msmediaview": {
		source: "apache",
		extensions: [
			"mvb",
			"m13",
			"m14"
		]
	},
		"application/x-msmetafile": {
		source: "apache",
		extensions: [
			"wmf",
			"wmz",
			"emf",
			"emz"
		]
	},
		"application/x-msmoney": {
		source: "apache",
		extensions: [
			"mny"
		]
	},
		"application/x-mspublisher": {
		source: "apache",
		extensions: [
			"pub"
		]
	},
		"application/x-msschedule": {
		source: "apache",
		extensions: [
			"scd"
		]
	},
		"application/x-msterminal": {
		source: "apache",
		extensions: [
			"trm"
		]
	},
		"application/x-mswrite": {
		source: "apache",
		extensions: [
			"wri"
		]
	},
		"application/x-netcdf": {
		source: "apache",
		extensions: [
			"nc",
			"cdf"
		]
	},
		"application/x-ns-proxy-autoconfig": {
		compressible: true,
		extensions: [
			"pac"
		]
	},
		"application/x-nzb": {
		source: "apache",
		extensions: [
			"nzb"
		]
	},
		"application/x-perl": {
		source: "nginx",
		extensions: [
			"pl",
			"pm"
		]
	},
		"application/x-pilot": {
		source: "nginx",
		extensions: [
			"prc",
			"pdb"
		]
	},
		"application/x-pkcs12": {
		source: "apache",
		compressible: false,
		extensions: [
			"p12",
			"pfx"
		]
	},
		"application/x-pkcs7-certificates": {
		source: "apache",
		extensions: [
			"p7b",
			"spc"
		]
	},
		"application/x-pkcs7-certreqresp": {
		source: "apache",
		extensions: [
			"p7r"
		]
	},
		"application/x-pki-message": {
		source: "iana"
	},
		"application/x-rar-compressed": {
		source: "apache",
		compressible: false,
		extensions: [
			"rar"
		]
	},
		"application/x-redhat-package-manager": {
		source: "nginx",
		extensions: [
			"rpm"
		]
	},
		"application/x-research-info-systems": {
		source: "apache",
		extensions: [
			"ris"
		]
	},
		"application/x-sea": {
		source: "nginx",
		extensions: [
			"sea"
		]
	},
		"application/x-sh": {
		source: "apache",
		compressible: true,
		extensions: [
			"sh"
		]
	},
		"application/x-shar": {
		source: "apache",
		extensions: [
			"shar"
		]
	},
		"application/x-shockwave-flash": {
		source: "apache",
		compressible: false,
		extensions: [
			"swf"
		]
	},
		"application/x-silverlight-app": {
		source: "apache",
		extensions: [
			"xap"
		]
	},
		"application/x-sql": {
		source: "apache",
		extensions: [
			"sql"
		]
	},
		"application/x-stuffit": {
		source: "apache",
		compressible: false,
		extensions: [
			"sit"
		]
	},
		"application/x-stuffitx": {
		source: "apache",
		extensions: [
			"sitx"
		]
	},
		"application/x-subrip": {
		source: "apache",
		extensions: [
			"srt"
		]
	},
		"application/x-sv4cpio": {
		source: "apache",
		extensions: [
			"sv4cpio"
		]
	},
		"application/x-sv4crc": {
		source: "apache",
		extensions: [
			"sv4crc"
		]
	},
		"application/x-t3vm-image": {
		source: "apache",
		extensions: [
			"t3"
		]
	},
		"application/x-tads": {
		source: "apache",
		extensions: [
			"gam"
		]
	},
		"application/x-tar": {
		source: "apache",
		compressible: true,
		extensions: [
			"tar"
		]
	},
		"application/x-tcl": {
		source: "apache",
		extensions: [
			"tcl",
			"tk"
		]
	},
		"application/x-tex": {
		source: "apache",
		extensions: [
			"tex"
		]
	},
		"application/x-tex-tfm": {
		source: "apache",
		extensions: [
			"tfm"
		]
	},
		"application/x-texinfo": {
		source: "apache",
		extensions: [
			"texinfo",
			"texi"
		]
	},
		"application/x-tgif": {
		source: "apache",
		extensions: [
			"obj"
		]
	},
		"application/x-ustar": {
		source: "apache",
		extensions: [
			"ustar"
		]
	},
		"application/x-virtualbox-hdd": {
		compressible: true,
		extensions: [
			"hdd"
		]
	},
		"application/x-virtualbox-ova": {
		compressible: true,
		extensions: [
			"ova"
		]
	},
		"application/x-virtualbox-ovf": {
		compressible: true,
		extensions: [
			"ovf"
		]
	},
		"application/x-virtualbox-vbox": {
		compressible: true,
		extensions: [
			"vbox"
		]
	},
		"application/x-virtualbox-vbox-extpack": {
		compressible: false,
		extensions: [
			"vbox-extpack"
		]
	},
		"application/x-virtualbox-vdi": {
		compressible: true,
		extensions: [
			"vdi"
		]
	},
		"application/x-virtualbox-vhd": {
		compressible: true,
		extensions: [
			"vhd"
		]
	},
		"application/x-virtualbox-vmdk": {
		compressible: true,
		extensions: [
			"vmdk"
		]
	},
		"application/x-wais-source": {
		source: "apache",
		extensions: [
			"src"
		]
	},
		"application/x-web-app-manifest+json": {
		compressible: true,
		extensions: [
			"webapp"
		]
	},
		"application/x-www-form-urlencoded": {
		source: "iana",
		compressible: true
	},
		"application/x-x509-ca-cert": {
		source: "iana",
		extensions: [
			"der",
			"crt",
			"pem"
		]
	},
		"application/x-x509-ca-ra-cert": {
		source: "iana"
	},
		"application/x-x509-next-ca-cert": {
		source: "iana"
	},
		"application/x-xfig": {
		source: "apache",
		extensions: [
			"fig"
		]
	},
		"application/x-xliff+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xlf"
		]
	},
		"application/x-xpinstall": {
		source: "apache",
		compressible: false,
		extensions: [
			"xpi"
		]
	},
		"application/x-xz": {
		source: "apache",
		extensions: [
			"xz"
		]
	},
		"application/x-zmachine": {
		source: "apache",
		extensions: [
			"z1",
			"z2",
			"z3",
			"z4",
			"z5",
			"z6",
			"z7",
			"z8"
		]
	},
		"application/x400-bp": {
		source: "iana"
	},
		"application/xacml+xml": {
		source: "iana",
		compressible: true
	},
		"application/xaml+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xaml"
		]
	},
		"application/xcap-att+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xav"
		]
	},
		"application/xcap-caps+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xca"
		]
	},
		"application/xcap-diff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xdf"
		]
	},
		"application/xcap-el+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xel"
		]
	},
		"application/xcap-error+xml": {
		source: "iana",
		compressible: true
	},
		"application/xcap-ns+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xns"
		]
	},
		"application/xcon-conference-info+xml": {
		source: "iana",
		compressible: true
	},
		"application/xcon-conference-info-diff+xml": {
		source: "iana",
		compressible: true
	},
		"application/xenc+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xenc"
		]
	},
		"application/xhtml+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xhtml",
			"xht"
		]
	},
		"application/xhtml-voice+xml": {
		source: "apache",
		compressible: true
	},
		"application/xliff+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xlf"
		]
	},
		"application/xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xml",
			"xsl",
			"xsd",
			"rng"
		]
	},
		"application/xml-dtd": {
		source: "iana",
		compressible: true,
		extensions: [
			"dtd"
		]
	},
		"application/xml-external-parsed-entity": {
		source: "iana"
	},
		"application/xml-patch+xml": {
		source: "iana",
		compressible: true
	},
		"application/xmpp+xml": {
		source: "iana",
		compressible: true
	},
		"application/xop+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xop"
		]
	},
		"application/xproc+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xpl"
		]
	},
		"application/xslt+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xsl",
			"xslt"
		]
	},
		"application/xspf+xml": {
		source: "apache",
		compressible: true,
		extensions: [
			"xspf"
		]
	},
		"application/xv+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"mxml",
			"xhvml",
			"xvml",
			"xvm"
		]
	},
		"application/yang": {
		source: "iana",
		extensions: [
			"yang"
		]
	},
		"application/yang-data+json": {
		source: "iana",
		compressible: true
	},
		"application/yang-data+xml": {
		source: "iana",
		compressible: true
	},
		"application/yang-patch+json": {
		source: "iana",
		compressible: true
	},
		"application/yang-patch+xml": {
		source: "iana",
		compressible: true
	},
		"application/yin+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"yin"
		]
	},
		"application/zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"zip"
		]
	},
		"application/zlib": {
		source: "iana"
	},
		"application/zstd": {
		source: "iana"
	},
		"audio/1d-interleaved-parityfec": {
		source: "iana"
	},
		"audio/32kadpcm": {
		source: "iana"
	},
		"audio/3gpp": {
		source: "iana",
		compressible: false,
		extensions: [
			"3gpp"
		]
	},
		"audio/3gpp2": {
		source: "iana"
	},
		"audio/aac": {
		source: "iana"
	},
		"audio/ac3": {
		source: "iana"
	},
		"audio/adpcm": {
		source: "apache",
		extensions: [
			"adp"
		]
	},
		"audio/amr": {
		source: "iana",
		extensions: [
			"amr"
		]
	},
		"audio/amr-wb": {
		source: "iana"
	},
		"audio/amr-wb+": {
		source: "iana"
	},
		"audio/aptx": {
		source: "iana"
	},
		"audio/asc": {
		source: "iana"
	},
		"audio/atrac-advanced-lossless": {
		source: "iana"
	},
		"audio/atrac-x": {
		source: "iana"
	},
		"audio/atrac3": {
		source: "iana"
	},
		"audio/basic": {
		source: "iana",
		compressible: false,
		extensions: [
			"au",
			"snd"
		]
	},
		"audio/bv16": {
		source: "iana"
	},
		"audio/bv32": {
		source: "iana"
	},
		"audio/clearmode": {
		source: "iana"
	},
		"audio/cn": {
		source: "iana"
	},
		"audio/dat12": {
		source: "iana"
	},
		"audio/dls": {
		source: "iana"
	},
		"audio/dsr-es201108": {
		source: "iana"
	},
		"audio/dsr-es202050": {
		source: "iana"
	},
		"audio/dsr-es202211": {
		source: "iana"
	},
		"audio/dsr-es202212": {
		source: "iana"
	},
		"audio/dv": {
		source: "iana"
	},
		"audio/dvi4": {
		source: "iana"
	},
		"audio/eac3": {
		source: "iana"
	},
		"audio/encaprtp": {
		source: "iana"
	},
		"audio/evrc": {
		source: "iana"
	},
		"audio/evrc-qcp": {
		source: "iana"
	},
		"audio/evrc0": {
		source: "iana"
	},
		"audio/evrc1": {
		source: "iana"
	},
		"audio/evrcb": {
		source: "iana"
	},
		"audio/evrcb0": {
		source: "iana"
	},
		"audio/evrcb1": {
		source: "iana"
	},
		"audio/evrcnw": {
		source: "iana"
	},
		"audio/evrcnw0": {
		source: "iana"
	},
		"audio/evrcnw1": {
		source: "iana"
	},
		"audio/evrcwb": {
		source: "iana"
	},
		"audio/evrcwb0": {
		source: "iana"
	},
		"audio/evrcwb1": {
		source: "iana"
	},
		"audio/evs": {
		source: "iana"
	},
		"audio/flexfec": {
		source: "iana"
	},
		"audio/fwdred": {
		source: "iana"
	},
		"audio/g711-0": {
		source: "iana"
	},
		"audio/g719": {
		source: "iana"
	},
		"audio/g722": {
		source: "iana"
	},
		"audio/g7221": {
		source: "iana"
	},
		"audio/g723": {
		source: "iana"
	},
		"audio/g726-16": {
		source: "iana"
	},
		"audio/g726-24": {
		source: "iana"
	},
		"audio/g726-32": {
		source: "iana"
	},
		"audio/g726-40": {
		source: "iana"
	},
		"audio/g728": {
		source: "iana"
	},
		"audio/g729": {
		source: "iana"
	},
		"audio/g7291": {
		source: "iana"
	},
		"audio/g729d": {
		source: "iana"
	},
		"audio/g729e": {
		source: "iana"
	},
		"audio/gsm": {
		source: "iana"
	},
		"audio/gsm-efr": {
		source: "iana"
	},
		"audio/gsm-hr-08": {
		source: "iana"
	},
		"audio/ilbc": {
		source: "iana"
	},
		"audio/ip-mr_v2.5": {
		source: "iana"
	},
		"audio/isac": {
		source: "apache"
	},
		"audio/l16": {
		source: "iana"
	},
		"audio/l20": {
		source: "iana"
	},
		"audio/l24": {
		source: "iana",
		compressible: false
	},
		"audio/l8": {
		source: "iana"
	},
		"audio/lpc": {
		source: "iana"
	},
		"audio/melp": {
		source: "iana"
	},
		"audio/melp1200": {
		source: "iana"
	},
		"audio/melp2400": {
		source: "iana"
	},
		"audio/melp600": {
		source: "iana"
	},
		"audio/mhas": {
		source: "iana"
	},
		"audio/midi": {
		source: "apache",
		extensions: [
			"mid",
			"midi",
			"kar",
			"rmi"
		]
	},
		"audio/mobile-xmf": {
		source: "iana",
		extensions: [
			"mxmf"
		]
	},
		"audio/mp3": {
		compressible: false,
		extensions: [
			"mp3"
		]
	},
		"audio/mp4": {
		source: "iana",
		compressible: false,
		extensions: [
			"m4a",
			"mp4a"
		]
	},
		"audio/mp4a-latm": {
		source: "iana"
	},
		"audio/mpa": {
		source: "iana"
	},
		"audio/mpa-robust": {
		source: "iana"
	},
		"audio/mpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"mpga",
			"mp2",
			"mp2a",
			"mp3",
			"m2a",
			"m3a"
		]
	},
		"audio/mpeg4-generic": {
		source: "iana"
	},
		"audio/musepack": {
		source: "apache"
	},
		"audio/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"oga",
			"ogg",
			"spx",
			"opus"
		]
	},
		"audio/opus": {
		source: "iana"
	},
		"audio/parityfec": {
		source: "iana"
	},
		"audio/pcma": {
		source: "iana"
	},
		"audio/pcma-wb": {
		source: "iana"
	},
		"audio/pcmu": {
		source: "iana"
	},
		"audio/pcmu-wb": {
		source: "iana"
	},
		"audio/prs.sid": {
		source: "iana"
	},
		"audio/qcelp": {
		source: "iana"
	},
		"audio/raptorfec": {
		source: "iana"
	},
		"audio/red": {
		source: "iana"
	},
		"audio/rtp-enc-aescm128": {
		source: "iana"
	},
		"audio/rtp-midi": {
		source: "iana"
	},
		"audio/rtploopback": {
		source: "iana"
	},
		"audio/rtx": {
		source: "iana"
	},
		"audio/s3m": {
		source: "apache",
		extensions: [
			"s3m"
		]
	},
		"audio/scip": {
		source: "iana"
	},
		"audio/silk": {
		source: "apache",
		extensions: [
			"sil"
		]
	},
		"audio/smv": {
		source: "iana"
	},
		"audio/smv-qcp": {
		source: "iana"
	},
		"audio/smv0": {
		source: "iana"
	},
		"audio/sofa": {
		source: "iana"
	},
		"audio/sp-midi": {
		source: "iana"
	},
		"audio/speex": {
		source: "iana"
	},
		"audio/t140c": {
		source: "iana"
	},
		"audio/t38": {
		source: "iana"
	},
		"audio/telephone-event": {
		source: "iana"
	},
		"audio/tetra_acelp": {
		source: "iana"
	},
		"audio/tetra_acelp_bb": {
		source: "iana"
	},
		"audio/tone": {
		source: "iana"
	},
		"audio/tsvcis": {
		source: "iana"
	},
		"audio/uemclip": {
		source: "iana"
	},
		"audio/ulpfec": {
		source: "iana"
	},
		"audio/usac": {
		source: "iana"
	},
		"audio/vdvi": {
		source: "iana"
	},
		"audio/vmr-wb": {
		source: "iana"
	},
		"audio/vnd.3gpp.iufp": {
		source: "iana"
	},
		"audio/vnd.4sb": {
		source: "iana"
	},
		"audio/vnd.audiokoz": {
		source: "iana"
	},
		"audio/vnd.celp": {
		source: "iana"
	},
		"audio/vnd.cisco.nse": {
		source: "iana"
	},
		"audio/vnd.cmles.radio-events": {
		source: "iana"
	},
		"audio/vnd.cns.anp1": {
		source: "iana"
	},
		"audio/vnd.cns.inf1": {
		source: "iana"
	},
		"audio/vnd.dece.audio": {
		source: "iana",
		extensions: [
			"uva",
			"uvva"
		]
	},
		"audio/vnd.digital-winds": {
		source: "iana",
		extensions: [
			"eol"
		]
	},
		"audio/vnd.dlna.adts": {
		source: "iana"
	},
		"audio/vnd.dolby.heaac.1": {
		source: "iana"
	},
		"audio/vnd.dolby.heaac.2": {
		source: "iana"
	},
		"audio/vnd.dolby.mlp": {
		source: "iana"
	},
		"audio/vnd.dolby.mps": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2x": {
		source: "iana"
	},
		"audio/vnd.dolby.pl2z": {
		source: "iana"
	},
		"audio/vnd.dolby.pulse.1": {
		source: "iana"
	},
		"audio/vnd.dra": {
		source: "iana",
		extensions: [
			"dra"
		]
	},
		"audio/vnd.dts": {
		source: "iana",
		extensions: [
			"dts"
		]
	},
		"audio/vnd.dts.hd": {
		source: "iana",
		extensions: [
			"dtshd"
		]
	},
		"audio/vnd.dts.uhd": {
		source: "iana"
	},
		"audio/vnd.dvb.file": {
		source: "iana"
	},
		"audio/vnd.everad.plj": {
		source: "iana"
	},
		"audio/vnd.hns.audio": {
		source: "iana"
	},
		"audio/vnd.lucent.voice": {
		source: "iana",
		extensions: [
			"lvp"
		]
	},
		"audio/vnd.ms-playready.media.pya": {
		source: "iana",
		extensions: [
			"pya"
		]
	},
		"audio/vnd.nokia.mobile-xmf": {
		source: "iana"
	},
		"audio/vnd.nortel.vbk": {
		source: "iana"
	},
		"audio/vnd.nuera.ecelp4800": {
		source: "iana",
		extensions: [
			"ecelp4800"
		]
	},
		"audio/vnd.nuera.ecelp7470": {
		source: "iana",
		extensions: [
			"ecelp7470"
		]
	},
		"audio/vnd.nuera.ecelp9600": {
		source: "iana",
		extensions: [
			"ecelp9600"
		]
	},
		"audio/vnd.octel.sbc": {
		source: "iana"
	},
		"audio/vnd.presonus.multitrack": {
		source: "iana"
	},
		"audio/vnd.qcelp": {
		source: "iana"
	},
		"audio/vnd.rhetorex.32kadpcm": {
		source: "iana"
	},
		"audio/vnd.rip": {
		source: "iana",
		extensions: [
			"rip"
		]
	},
		"audio/vnd.rn-realaudio": {
		compressible: false
	},
		"audio/vnd.sealedmedia.softseal.mpeg": {
		source: "iana"
	},
		"audio/vnd.vmx.cvsd": {
		source: "iana"
	},
		"audio/vnd.wave": {
		compressible: false
	},
		"audio/vorbis": {
		source: "iana",
		compressible: false
	},
		"audio/vorbis-config": {
		source: "iana"
	},
		"audio/wav": {
		compressible: false,
		extensions: [
			"wav"
		]
	},
		"audio/wave": {
		compressible: false,
		extensions: [
			"wav"
		]
	},
		"audio/webm": {
		source: "apache",
		compressible: false,
		extensions: [
			"weba"
		]
	},
		"audio/x-aac": {
		source: "apache",
		compressible: false,
		extensions: [
			"aac"
		]
	},
		"audio/x-aiff": {
		source: "apache",
		extensions: [
			"aif",
			"aiff",
			"aifc"
		]
	},
		"audio/x-caf": {
		source: "apache",
		compressible: false,
		extensions: [
			"caf"
		]
	},
		"audio/x-flac": {
		source: "apache",
		extensions: [
			"flac"
		]
	},
		"audio/x-m4a": {
		source: "nginx",
		extensions: [
			"m4a"
		]
	},
		"audio/x-matroska": {
		source: "apache",
		extensions: [
			"mka"
		]
	},
		"audio/x-mpegurl": {
		source: "apache",
		extensions: [
			"m3u"
		]
	},
		"audio/x-ms-wax": {
		source: "apache",
		extensions: [
			"wax"
		]
	},
		"audio/x-ms-wma": {
		source: "apache",
		extensions: [
			"wma"
		]
	},
		"audio/x-pn-realaudio": {
		source: "apache",
		extensions: [
			"ram",
			"ra"
		]
	},
		"audio/x-pn-realaudio-plugin": {
		source: "apache",
		extensions: [
			"rmp"
		]
	},
		"audio/x-realaudio": {
		source: "nginx",
		extensions: [
			"ra"
		]
	},
		"audio/x-tta": {
		source: "apache"
	},
		"audio/x-wav": {
		source: "apache",
		extensions: [
			"wav"
		]
	},
		"audio/xm": {
		source: "apache",
		extensions: [
			"xm"
		]
	},
		"chemical/x-cdx": {
		source: "apache",
		extensions: [
			"cdx"
		]
	},
		"chemical/x-cif": {
		source: "apache",
		extensions: [
			"cif"
		]
	},
		"chemical/x-cmdf": {
		source: "apache",
		extensions: [
			"cmdf"
		]
	},
		"chemical/x-cml": {
		source: "apache",
		extensions: [
			"cml"
		]
	},
		"chemical/x-csml": {
		source: "apache",
		extensions: [
			"csml"
		]
	},
		"chemical/x-pdb": {
		source: "apache"
	},
		"chemical/x-xyz": {
		source: "apache",
		extensions: [
			"xyz"
		]
	},
		"font/collection": {
		source: "iana",
		extensions: [
			"ttc"
		]
	},
		"font/otf": {
		source: "iana",
		compressible: true,
		extensions: [
			"otf"
		]
	},
		"font/sfnt": {
		source: "iana"
	},
		"font/ttf": {
		source: "iana",
		compressible: true,
		extensions: [
			"ttf"
		]
	},
		"font/woff": {
		source: "iana",
		extensions: [
			"woff"
		]
	},
		"font/woff2": {
		source: "iana",
		extensions: [
			"woff2"
		]
	},
		"image/aces": {
		source: "iana",
		extensions: [
			"exr"
		]
	},
		"image/apng": {
		compressible: false,
		extensions: [
			"apng"
		]
	},
		"image/avci": {
		source: "iana",
		extensions: [
			"avci"
		]
	},
		"image/avcs": {
		source: "iana",
		extensions: [
			"avcs"
		]
	},
		"image/avif": {
		source: "iana",
		compressible: false,
		extensions: [
			"avif"
		]
	},
		"image/bmp": {
		source: "iana",
		compressible: true,
		extensions: [
			"bmp"
		]
	},
		"image/cgm": {
		source: "iana",
		extensions: [
			"cgm"
		]
	},
		"image/dicom-rle": {
		source: "iana",
		extensions: [
			"drle"
		]
	},
		"image/emf": {
		source: "iana",
		extensions: [
			"emf"
		]
	},
		"image/fits": {
		source: "iana",
		extensions: [
			"fits"
		]
	},
		"image/g3fax": {
		source: "iana",
		extensions: [
			"g3"
		]
	},
		"image/gif": {
		source: "iana",
		compressible: false,
		extensions: [
			"gif"
		]
	},
		"image/heic": {
		source: "iana",
		extensions: [
			"heic"
		]
	},
		"image/heic-sequence": {
		source: "iana",
		extensions: [
			"heics"
		]
	},
		"image/heif": {
		source: "iana",
		extensions: [
			"heif"
		]
	},
		"image/heif-sequence": {
		source: "iana",
		extensions: [
			"heifs"
		]
	},
		"image/hej2k": {
		source: "iana",
		extensions: [
			"hej2"
		]
	},
		"image/hsj2": {
		source: "iana",
		extensions: [
			"hsj2"
		]
	},
		"image/ief": {
		source: "iana",
		extensions: [
			"ief"
		]
	},
		"image/jls": {
		source: "iana",
		extensions: [
			"jls"
		]
	},
		"image/jp2": {
		source: "iana",
		compressible: false,
		extensions: [
			"jp2",
			"jpg2"
		]
	},
		"image/jpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpeg",
			"jpg",
			"jpe"
		]
	},
		"image/jph": {
		source: "iana",
		extensions: [
			"jph"
		]
	},
		"image/jphc": {
		source: "iana",
		extensions: [
			"jhc"
		]
	},
		"image/jpm": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpm"
		]
	},
		"image/jpx": {
		source: "iana",
		compressible: false,
		extensions: [
			"jpx",
			"jpf"
		]
	},
		"image/jxr": {
		source: "iana",
		extensions: [
			"jxr"
		]
	},
		"image/jxra": {
		source: "iana",
		extensions: [
			"jxra"
		]
	},
		"image/jxrs": {
		source: "iana",
		extensions: [
			"jxrs"
		]
	},
		"image/jxs": {
		source: "iana",
		extensions: [
			"jxs"
		]
	},
		"image/jxsc": {
		source: "iana",
		extensions: [
			"jxsc"
		]
	},
		"image/jxsi": {
		source: "iana",
		extensions: [
			"jxsi"
		]
	},
		"image/jxss": {
		source: "iana",
		extensions: [
			"jxss"
		]
	},
		"image/ktx": {
		source: "iana",
		extensions: [
			"ktx"
		]
	},
		"image/ktx2": {
		source: "iana",
		extensions: [
			"ktx2"
		]
	},
		"image/naplps": {
		source: "iana"
	},
		"image/pjpeg": {
		compressible: false
	},
		"image/png": {
		source: "iana",
		compressible: false,
		extensions: [
			"png"
		]
	},
		"image/prs.btif": {
		source: "iana",
		extensions: [
			"btif"
		]
	},
		"image/prs.pti": {
		source: "iana",
		extensions: [
			"pti"
		]
	},
		"image/pwg-raster": {
		source: "iana"
	},
		"image/sgi": {
		source: "apache",
		extensions: [
			"sgi"
		]
	},
		"image/svg+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"svg",
			"svgz"
		]
	},
		"image/t38": {
		source: "iana",
		extensions: [
			"t38"
		]
	},
		"image/tiff": {
		source: "iana",
		compressible: false,
		extensions: [
			"tif",
			"tiff"
		]
	},
		"image/tiff-fx": {
		source: "iana",
		extensions: [
			"tfx"
		]
	},
		"image/vnd.adobe.photoshop": {
		source: "iana",
		compressible: true,
		extensions: [
			"psd"
		]
	},
		"image/vnd.airzip.accelerator.azv": {
		source: "iana",
		extensions: [
			"azv"
		]
	},
		"image/vnd.cns.inf2": {
		source: "iana"
	},
		"image/vnd.dece.graphic": {
		source: "iana",
		extensions: [
			"uvi",
			"uvvi",
			"uvg",
			"uvvg"
		]
	},
		"image/vnd.djvu": {
		source: "iana",
		extensions: [
			"djvu",
			"djv"
		]
	},
		"image/vnd.dvb.subtitle": {
		source: "iana",
		extensions: [
			"sub"
		]
	},
		"image/vnd.dwg": {
		source: "iana",
		extensions: [
			"dwg"
		]
	},
		"image/vnd.dxf": {
		source: "iana",
		extensions: [
			"dxf"
		]
	},
		"image/vnd.fastbidsheet": {
		source: "iana",
		extensions: [
			"fbs"
		]
	},
		"image/vnd.fpx": {
		source: "iana",
		extensions: [
			"fpx"
		]
	},
		"image/vnd.fst": {
		source: "iana",
		extensions: [
			"fst"
		]
	},
		"image/vnd.fujixerox.edmics-mmr": {
		source: "iana",
		extensions: [
			"mmr"
		]
	},
		"image/vnd.fujixerox.edmics-rlc": {
		source: "iana",
		extensions: [
			"rlc"
		]
	},
		"image/vnd.globalgraphics.pgb": {
		source: "iana"
	},
		"image/vnd.microsoft.icon": {
		source: "iana",
		compressible: true,
		extensions: [
			"ico"
		]
	},
		"image/vnd.mix": {
		source: "iana"
	},
		"image/vnd.mozilla.apng": {
		source: "iana"
	},
		"image/vnd.ms-dds": {
		compressible: true,
		extensions: [
			"dds"
		]
	},
		"image/vnd.ms-modi": {
		source: "iana",
		extensions: [
			"mdi"
		]
	},
		"image/vnd.ms-photo": {
		source: "apache",
		extensions: [
			"wdp"
		]
	},
		"image/vnd.net-fpx": {
		source: "iana",
		extensions: [
			"npx"
		]
	},
		"image/vnd.pco.b16": {
		source: "iana",
		extensions: [
			"b16"
		]
	},
		"image/vnd.radiance": {
		source: "iana"
	},
		"image/vnd.sealed.png": {
		source: "iana"
	},
		"image/vnd.sealedmedia.softseal.gif": {
		source: "iana"
	},
		"image/vnd.sealedmedia.softseal.jpg": {
		source: "iana"
	},
		"image/vnd.svf": {
		source: "iana"
	},
		"image/vnd.tencent.tap": {
		source: "iana",
		extensions: [
			"tap"
		]
	},
		"image/vnd.valve.source.texture": {
		source: "iana",
		extensions: [
			"vtf"
		]
	},
		"image/vnd.wap.wbmp": {
		source: "iana",
		extensions: [
			"wbmp"
		]
	},
		"image/vnd.xiff": {
		source: "iana",
		extensions: [
			"xif"
		]
	},
		"image/vnd.zbrush.pcx": {
		source: "iana",
		extensions: [
			"pcx"
		]
	},
		"image/webp": {
		source: "apache",
		extensions: [
			"webp"
		]
	},
		"image/wmf": {
		source: "iana",
		extensions: [
			"wmf"
		]
	},
		"image/x-3ds": {
		source: "apache",
		extensions: [
			"3ds"
		]
	},
		"image/x-cmu-raster": {
		source: "apache",
		extensions: [
			"ras"
		]
	},
		"image/x-cmx": {
		source: "apache",
		extensions: [
			"cmx"
		]
	},
		"image/x-freehand": {
		source: "apache",
		extensions: [
			"fh",
			"fhc",
			"fh4",
			"fh5",
			"fh7"
		]
	},
		"image/x-icon": {
		source: "apache",
		compressible: true,
		extensions: [
			"ico"
		]
	},
		"image/x-jng": {
		source: "nginx",
		extensions: [
			"jng"
		]
	},
		"image/x-mrsid-image": {
		source: "apache",
		extensions: [
			"sid"
		]
	},
		"image/x-ms-bmp": {
		source: "nginx",
		compressible: true,
		extensions: [
			"bmp"
		]
	},
		"image/x-pcx": {
		source: "apache",
		extensions: [
			"pcx"
		]
	},
		"image/x-pict": {
		source: "apache",
		extensions: [
			"pic",
			"pct"
		]
	},
		"image/x-portable-anymap": {
		source: "apache",
		extensions: [
			"pnm"
		]
	},
		"image/x-portable-bitmap": {
		source: "apache",
		extensions: [
			"pbm"
		]
	},
		"image/x-portable-graymap": {
		source: "apache",
		extensions: [
			"pgm"
		]
	},
		"image/x-portable-pixmap": {
		source: "apache",
		extensions: [
			"ppm"
		]
	},
		"image/x-rgb": {
		source: "apache",
		extensions: [
			"rgb"
		]
	},
		"image/x-tga": {
		source: "apache",
		extensions: [
			"tga"
		]
	},
		"image/x-xbitmap": {
		source: "apache",
		extensions: [
			"xbm"
		]
	},
		"image/x-xcf": {
		compressible: false
	},
		"image/x-xpixmap": {
		source: "apache",
		extensions: [
			"xpm"
		]
	},
		"image/x-xwindowdump": {
		source: "apache",
		extensions: [
			"xwd"
		]
	},
		"message/cpim": {
		source: "iana"
	},
		"message/delivery-status": {
		source: "iana"
	},
		"message/disposition-notification": {
		source: "iana",
		extensions: [
			"disposition-notification"
		]
	},
		"message/external-body": {
		source: "iana"
	},
		"message/feedback-report": {
		source: "iana"
	},
		"message/global": {
		source: "iana",
		extensions: [
			"u8msg"
		]
	},
		"message/global-delivery-status": {
		source: "iana",
		extensions: [
			"u8dsn"
		]
	},
		"message/global-disposition-notification": {
		source: "iana",
		extensions: [
			"u8mdn"
		]
	},
		"message/global-headers": {
		source: "iana",
		extensions: [
			"u8hdr"
		]
	},
		"message/http": {
		source: "iana",
		compressible: false
	},
		"message/imdn+xml": {
		source: "iana",
		compressible: true
	},
		"message/news": {
		source: "iana"
	},
		"message/partial": {
		source: "iana",
		compressible: false
	},
		"message/rfc822": {
		source: "iana",
		compressible: true,
		extensions: [
			"eml",
			"mime"
		]
	},
		"message/s-http": {
		source: "iana"
	},
		"message/sip": {
		source: "iana"
	},
		"message/sipfrag": {
		source: "iana"
	},
		"message/tracking-status": {
		source: "iana"
	},
		"message/vnd.si.simp": {
		source: "iana"
	},
		"message/vnd.wfa.wsc": {
		source: "iana",
		extensions: [
			"wsc"
		]
	},
		"model/3mf": {
		source: "iana",
		extensions: [
			"3mf"
		]
	},
		"model/e57": {
		source: "iana"
	},
		"model/gltf+json": {
		source: "iana",
		compressible: true,
		extensions: [
			"gltf"
		]
	},
		"model/gltf-binary": {
		source: "iana",
		compressible: true,
		extensions: [
			"glb"
		]
	},
		"model/iges": {
		source: "iana",
		compressible: false,
		extensions: [
			"igs",
			"iges"
		]
	},
		"model/mesh": {
		source: "iana",
		compressible: false,
		extensions: [
			"msh",
			"mesh",
			"silo"
		]
	},
		"model/mtl": {
		source: "iana",
		extensions: [
			"mtl"
		]
	},
		"model/obj": {
		source: "iana",
		extensions: [
			"obj"
		]
	},
		"model/step": {
		source: "iana"
	},
		"model/step+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"stpx"
		]
	},
		"model/step+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"stpz"
		]
	},
		"model/step-xml+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"stpxz"
		]
	},
		"model/stl": {
		source: "iana",
		extensions: [
			"stl"
		]
	},
		"model/vnd.collada+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"dae"
		]
	},
		"model/vnd.dwf": {
		source: "iana",
		extensions: [
			"dwf"
		]
	},
		"model/vnd.flatland.3dml": {
		source: "iana"
	},
		"model/vnd.gdl": {
		source: "iana",
		extensions: [
			"gdl"
		]
	},
		"model/vnd.gs-gdl": {
		source: "apache"
	},
		"model/vnd.gs.gdl": {
		source: "iana"
	},
		"model/vnd.gtw": {
		source: "iana",
		extensions: [
			"gtw"
		]
	},
		"model/vnd.moml+xml": {
		source: "iana",
		compressible: true
	},
		"model/vnd.mts": {
		source: "iana",
		extensions: [
			"mts"
		]
	},
		"model/vnd.opengex": {
		source: "iana",
		extensions: [
			"ogex"
		]
	},
		"model/vnd.parasolid.transmit.binary": {
		source: "iana",
		extensions: [
			"x_b"
		]
	},
		"model/vnd.parasolid.transmit.text": {
		source: "iana",
		extensions: [
			"x_t"
		]
	},
		"model/vnd.pytha.pyox": {
		source: "iana"
	},
		"model/vnd.rosette.annotated-data-model": {
		source: "iana"
	},
		"model/vnd.sap.vds": {
		source: "iana",
		extensions: [
			"vds"
		]
	},
		"model/vnd.usdz+zip": {
		source: "iana",
		compressible: false,
		extensions: [
			"usdz"
		]
	},
		"model/vnd.valve.source.compiled-map": {
		source: "iana",
		extensions: [
			"bsp"
		]
	},
		"model/vnd.vtu": {
		source: "iana",
		extensions: [
			"vtu"
		]
	},
		"model/vrml": {
		source: "iana",
		compressible: false,
		extensions: [
			"wrl",
			"vrml"
		]
	},
		"model/x3d+binary": {
		source: "apache",
		compressible: false,
		extensions: [
			"x3db",
			"x3dbz"
		]
	},
		"model/x3d+fastinfoset": {
		source: "iana",
		extensions: [
			"x3db"
		]
	},
		"model/x3d+vrml": {
		source: "apache",
		compressible: false,
		extensions: [
			"x3dv",
			"x3dvz"
		]
	},
		"model/x3d+xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"x3d",
			"x3dz"
		]
	},
		"model/x3d-vrml": {
		source: "iana",
		extensions: [
			"x3dv"
		]
	},
		"multipart/alternative": {
		source: "iana",
		compressible: false
	},
		"multipart/appledouble": {
		source: "iana"
	},
		"multipart/byteranges": {
		source: "iana"
	},
		"multipart/digest": {
		source: "iana"
	},
		"multipart/encrypted": {
		source: "iana",
		compressible: false
	},
		"multipart/form-data": {
		source: "iana",
		compressible: false
	},
		"multipart/header-set": {
		source: "iana"
	},
		"multipart/mixed": {
		source: "iana"
	},
		"multipart/multilingual": {
		source: "iana"
	},
		"multipart/parallel": {
		source: "iana"
	},
		"multipart/related": {
		source: "iana",
		compressible: false
	},
		"multipart/report": {
		source: "iana"
	},
		"multipart/signed": {
		source: "iana",
		compressible: false
	},
		"multipart/vnd.bint.med-plus": {
		source: "iana"
	},
		"multipart/voice-message": {
		source: "iana"
	},
		"multipart/x-mixed-replace": {
		source: "iana"
	},
		"text/1d-interleaved-parityfec": {
		source: "iana"
	},
		"text/cache-manifest": {
		source: "iana",
		compressible: true,
		extensions: [
			"appcache",
			"manifest"
		]
	},
		"text/calendar": {
		source: "iana",
		extensions: [
			"ics",
			"ifb"
		]
	},
		"text/calender": {
		compressible: true
	},
		"text/cmd": {
		compressible: true
	},
		"text/coffeescript": {
		extensions: [
			"coffee",
			"litcoffee"
		]
	},
		"text/cql": {
		source: "iana"
	},
		"text/cql-expression": {
		source: "iana"
	},
		"text/cql-identifier": {
		source: "iana"
	},
		"text/css": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"css"
		]
	},
		"text/csv": {
		source: "iana",
		compressible: true,
		extensions: [
			"csv"
		]
	},
		"text/csv-schema": {
		source: "iana"
	},
		"text/directory": {
		source: "iana"
	},
		"text/dns": {
		source: "iana"
	},
		"text/ecmascript": {
		source: "iana"
	},
		"text/encaprtp": {
		source: "iana"
	},
		"text/enriched": {
		source: "iana"
	},
		"text/fhirpath": {
		source: "iana"
	},
		"text/flexfec": {
		source: "iana"
	},
		"text/fwdred": {
		source: "iana"
	},
		"text/gff3": {
		source: "iana"
	},
		"text/grammar-ref-list": {
		source: "iana"
	},
		"text/html": {
		source: "iana",
		compressible: true,
		extensions: [
			"html",
			"htm",
			"shtml"
		]
	},
		"text/jade": {
		extensions: [
			"jade"
		]
	},
		"text/javascript": {
		source: "iana",
		compressible: true
	},
		"text/jcr-cnd": {
		source: "iana"
	},
		"text/jsx": {
		compressible: true,
		extensions: [
			"jsx"
		]
	},
		"text/less": {
		compressible: true,
		extensions: [
			"less"
		]
	},
		"text/markdown": {
		source: "iana",
		compressible: true,
		extensions: [
			"markdown",
			"md"
		]
	},
		"text/mathml": {
		source: "nginx",
		extensions: [
			"mml"
		]
	},
		"text/mdx": {
		compressible: true,
		extensions: [
			"mdx"
		]
	},
		"text/mizar": {
		source: "iana"
	},
		"text/n3": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"n3"
		]
	},
		"text/parameters": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/parityfec": {
		source: "iana"
	},
		"text/plain": {
		source: "iana",
		compressible: true,
		extensions: [
			"txt",
			"text",
			"conf",
			"def",
			"list",
			"log",
			"in",
			"ini"
		]
	},
		"text/provenance-notation": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/prs.fallenstein.rst": {
		source: "iana"
	},
		"text/prs.lines.tag": {
		source: "iana",
		extensions: [
			"dsc"
		]
	},
		"text/prs.prop.logic": {
		source: "iana"
	},
		"text/raptorfec": {
		source: "iana"
	},
		"text/red": {
		source: "iana"
	},
		"text/rfc822-headers": {
		source: "iana"
	},
		"text/richtext": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtx"
		]
	},
		"text/rtf": {
		source: "iana",
		compressible: true,
		extensions: [
			"rtf"
		]
	},
		"text/rtp-enc-aescm128": {
		source: "iana"
	},
		"text/rtploopback": {
		source: "iana"
	},
		"text/rtx": {
		source: "iana"
	},
		"text/sgml": {
		source: "iana",
		extensions: [
			"sgml",
			"sgm"
		]
	},
		"text/shaclc": {
		source: "iana"
	},
		"text/shex": {
		source: "iana",
		extensions: [
			"shex"
		]
	},
		"text/slim": {
		extensions: [
			"slim",
			"slm"
		]
	},
		"text/spdx": {
		source: "iana",
		extensions: [
			"spdx"
		]
	},
		"text/strings": {
		source: "iana"
	},
		"text/stylus": {
		extensions: [
			"stylus",
			"styl"
		]
	},
		"text/t140": {
		source: "iana"
	},
		"text/tab-separated-values": {
		source: "iana",
		compressible: true,
		extensions: [
			"tsv"
		]
	},
		"text/troff": {
		source: "iana",
		extensions: [
			"t",
			"tr",
			"roff",
			"man",
			"me",
			"ms"
		]
	},
		"text/turtle": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"ttl"
		]
	},
		"text/ulpfec": {
		source: "iana"
	},
		"text/uri-list": {
		source: "iana",
		compressible: true,
		extensions: [
			"uri",
			"uris",
			"urls"
		]
	},
		"text/vcard": {
		source: "iana",
		compressible: true,
		extensions: [
			"vcard"
		]
	},
		"text/vnd.a": {
		source: "iana"
	},
		"text/vnd.abc": {
		source: "iana"
	},
		"text/vnd.ascii-art": {
		source: "iana"
	},
		"text/vnd.curl": {
		source: "iana",
		extensions: [
			"curl"
		]
	},
		"text/vnd.curl.dcurl": {
		source: "apache",
		extensions: [
			"dcurl"
		]
	},
		"text/vnd.curl.mcurl": {
		source: "apache",
		extensions: [
			"mcurl"
		]
	},
		"text/vnd.curl.scurl": {
		source: "apache",
		extensions: [
			"scurl"
		]
	},
		"text/vnd.debian.copyright": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.dmclientscript": {
		source: "iana"
	},
		"text/vnd.dvb.subtitle": {
		source: "iana",
		extensions: [
			"sub"
		]
	},
		"text/vnd.esmertec.theme-descriptor": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.familysearch.gedcom": {
		source: "iana",
		extensions: [
			"ged"
		]
	},
		"text/vnd.ficlab.flt": {
		source: "iana"
	},
		"text/vnd.fly": {
		source: "iana",
		extensions: [
			"fly"
		]
	},
		"text/vnd.fmi.flexstor": {
		source: "iana",
		extensions: [
			"flx"
		]
	},
		"text/vnd.gml": {
		source: "iana"
	},
		"text/vnd.graphviz": {
		source: "iana",
		extensions: [
			"gv"
		]
	},
		"text/vnd.hans": {
		source: "iana"
	},
		"text/vnd.hgl": {
		source: "iana"
	},
		"text/vnd.in3d.3dml": {
		source: "iana",
		extensions: [
			"3dml"
		]
	},
		"text/vnd.in3d.spot": {
		source: "iana",
		extensions: [
			"spot"
		]
	},
		"text/vnd.iptc.newsml": {
		source: "iana"
	},
		"text/vnd.iptc.nitf": {
		source: "iana"
	},
		"text/vnd.latex-z": {
		source: "iana"
	},
		"text/vnd.motorola.reflex": {
		source: "iana"
	},
		"text/vnd.ms-mediapackage": {
		source: "iana"
	},
		"text/vnd.net2phone.commcenter.command": {
		source: "iana"
	},
		"text/vnd.radisys.msml-basic-layout": {
		source: "iana"
	},
		"text/vnd.senx.warpscript": {
		source: "iana"
	},
		"text/vnd.si.uricatalogue": {
		source: "iana"
	},
		"text/vnd.sosi": {
		source: "iana"
	},
		"text/vnd.sun.j2me.app-descriptor": {
		source: "iana",
		charset: "UTF-8",
		extensions: [
			"jad"
		]
	},
		"text/vnd.trolltech.linguist": {
		source: "iana",
		charset: "UTF-8"
	},
		"text/vnd.wap.si": {
		source: "iana"
	},
		"text/vnd.wap.sl": {
		source: "iana"
	},
		"text/vnd.wap.wml": {
		source: "iana",
		extensions: [
			"wml"
		]
	},
		"text/vnd.wap.wmlscript": {
		source: "iana",
		extensions: [
			"wmls"
		]
	},
		"text/vtt": {
		source: "iana",
		charset: "UTF-8",
		compressible: true,
		extensions: [
			"vtt"
		]
	},
		"text/x-asm": {
		source: "apache",
		extensions: [
			"s",
			"asm"
		]
	},
		"text/x-c": {
		source: "apache",
		extensions: [
			"c",
			"cc",
			"cxx",
			"cpp",
			"h",
			"hh",
			"dic"
		]
	},
		"text/x-component": {
		source: "nginx",
		extensions: [
			"htc"
		]
	},
		"text/x-fortran": {
		source: "apache",
		extensions: [
			"f",
			"for",
			"f77",
			"f90"
		]
	},
		"text/x-gwt-rpc": {
		compressible: true
	},
		"text/x-handlebars-template": {
		extensions: [
			"hbs"
		]
	},
		"text/x-java-source": {
		source: "apache",
		extensions: [
			"java"
		]
	},
		"text/x-jquery-tmpl": {
		compressible: true
	},
		"text/x-lua": {
		extensions: [
			"lua"
		]
	},
		"text/x-markdown": {
		compressible: true,
		extensions: [
			"mkd"
		]
	},
		"text/x-nfo": {
		source: "apache",
		extensions: [
			"nfo"
		]
	},
		"text/x-opml": {
		source: "apache",
		extensions: [
			"opml"
		]
	},
		"text/x-org": {
		compressible: true,
		extensions: [
			"org"
		]
	},
		"text/x-pascal": {
		source: "apache",
		extensions: [
			"p",
			"pas"
		]
	},
		"text/x-processing": {
		compressible: true,
		extensions: [
			"pde"
		]
	},
		"text/x-sass": {
		extensions: [
			"sass"
		]
	},
		"text/x-scss": {
		extensions: [
			"scss"
		]
	},
		"text/x-setext": {
		source: "apache",
		extensions: [
			"etx"
		]
	},
		"text/x-sfv": {
		source: "apache",
		extensions: [
			"sfv"
		]
	},
		"text/x-suse-ymp": {
		compressible: true,
		extensions: [
			"ymp"
		]
	},
		"text/x-uuencode": {
		source: "apache",
		extensions: [
			"uu"
		]
	},
		"text/x-vcalendar": {
		source: "apache",
		extensions: [
			"vcs"
		]
	},
		"text/x-vcard": {
		source: "apache",
		extensions: [
			"vcf"
		]
	},
		"text/xml": {
		source: "iana",
		compressible: true,
		extensions: [
			"xml"
		]
	},
		"text/xml-external-parsed-entity": {
		source: "iana"
	},
		"text/yaml": {
		compressible: true,
		extensions: [
			"yaml",
			"yml"
		]
	},
		"video/1d-interleaved-parityfec": {
		source: "iana"
	},
		"video/3gpp": {
		source: "iana",
		extensions: [
			"3gp",
			"3gpp"
		]
	},
		"video/3gpp-tt": {
		source: "iana"
	},
		"video/3gpp2": {
		source: "iana",
		extensions: [
			"3g2"
		]
	},
		"video/av1": {
		source: "iana"
	},
		"video/bmpeg": {
		source: "iana"
	},
		"video/bt656": {
		source: "iana"
	},
		"video/celb": {
		source: "iana"
	},
		"video/dv": {
		source: "iana"
	},
		"video/encaprtp": {
		source: "iana"
	},
		"video/ffv1": {
		source: "iana"
	},
		"video/flexfec": {
		source: "iana"
	},
		"video/h261": {
		source: "iana",
		extensions: [
			"h261"
		]
	},
		"video/h263": {
		source: "iana",
		extensions: [
			"h263"
		]
	},
		"video/h263-1998": {
		source: "iana"
	},
		"video/h263-2000": {
		source: "iana"
	},
		"video/h264": {
		source: "iana",
		extensions: [
			"h264"
		]
	},
		"video/h264-rcdo": {
		source: "iana"
	},
		"video/h264-svc": {
		source: "iana"
	},
		"video/h265": {
		source: "iana"
	},
		"video/iso.segment": {
		source: "iana",
		extensions: [
			"m4s"
		]
	},
		"video/jpeg": {
		source: "iana",
		extensions: [
			"jpgv"
		]
	},
		"video/jpeg2000": {
		source: "iana"
	},
		"video/jpm": {
		source: "apache",
		extensions: [
			"jpm",
			"jpgm"
		]
	},
		"video/jxsv": {
		source: "iana"
	},
		"video/mj2": {
		source: "iana",
		extensions: [
			"mj2",
			"mjp2"
		]
	},
		"video/mp1s": {
		source: "iana"
	},
		"video/mp2p": {
		source: "iana"
	},
		"video/mp2t": {
		source: "iana",
		extensions: [
			"ts"
		]
	},
		"video/mp4": {
		source: "iana",
		compressible: false,
		extensions: [
			"mp4",
			"mp4v",
			"mpg4"
		]
	},
		"video/mp4v-es": {
		source: "iana"
	},
		"video/mpeg": {
		source: "iana",
		compressible: false,
		extensions: [
			"mpeg",
			"mpg",
			"mpe",
			"m1v",
			"m2v"
		]
	},
		"video/mpeg4-generic": {
		source: "iana"
	},
		"video/mpv": {
		source: "iana"
	},
		"video/nv": {
		source: "iana"
	},
		"video/ogg": {
		source: "iana",
		compressible: false,
		extensions: [
			"ogv"
		]
	},
		"video/parityfec": {
		source: "iana"
	},
		"video/pointer": {
		source: "iana"
	},
		"video/quicktime": {
		source: "iana",
		compressible: false,
		extensions: [
			"qt",
			"mov"
		]
	},
		"video/raptorfec": {
		source: "iana"
	},
		"video/raw": {
		source: "iana"
	},
		"video/rtp-enc-aescm128": {
		source: "iana"
	},
		"video/rtploopback": {
		source: "iana"
	},
		"video/rtx": {
		source: "iana"
	},
		"video/scip": {
		source: "iana"
	},
		"video/smpte291": {
		source: "iana"
	},
		"video/smpte292m": {
		source: "iana"
	},
		"video/ulpfec": {
		source: "iana"
	},
		"video/vc1": {
		source: "iana"
	},
		"video/vc2": {
		source: "iana"
	},
		"video/vnd.cctv": {
		source: "iana"
	},
		"video/vnd.dece.hd": {
		source: "iana",
		extensions: [
			"uvh",
			"uvvh"
		]
	},
		"video/vnd.dece.mobile": {
		source: "iana",
		extensions: [
			"uvm",
			"uvvm"
		]
	},
		"video/vnd.dece.mp4": {
		source: "iana"
	},
		"video/vnd.dece.pd": {
		source: "iana",
		extensions: [
			"uvp",
			"uvvp"
		]
	},
		"video/vnd.dece.sd": {
		source: "iana",
		extensions: [
			"uvs",
			"uvvs"
		]
	},
		"video/vnd.dece.video": {
		source: "iana",
		extensions: [
			"uvv",
			"uvvv"
		]
	},
		"video/vnd.directv.mpeg": {
		source: "iana"
	},
		"video/vnd.directv.mpeg-tts": {
		source: "iana"
	},
		"video/vnd.dlna.mpeg-tts": {
		source: "iana"
	},
		"video/vnd.dvb.file": {
		source: "iana",
		extensions: [
			"dvb"
		]
	},
		"video/vnd.fvt": {
		source: "iana",
		extensions: [
			"fvt"
		]
	},
		"video/vnd.hns.video": {
		source: "iana"
	},
		"video/vnd.iptvforum.1dparityfec-1010": {
		source: "iana"
	},
		"video/vnd.iptvforum.1dparityfec-2005": {
		source: "iana"
	},
		"video/vnd.iptvforum.2dparityfec-1010": {
		source: "iana"
	},
		"video/vnd.iptvforum.2dparityfec-2005": {
		source: "iana"
	},
		"video/vnd.iptvforum.ttsavc": {
		source: "iana"
	},
		"video/vnd.iptvforum.ttsmpeg2": {
		source: "iana"
	},
		"video/vnd.motorola.video": {
		source: "iana"
	},
		"video/vnd.motorola.videop": {
		source: "iana"
	},
		"video/vnd.mpegurl": {
		source: "iana",
		extensions: [
			"mxu",
			"m4u"
		]
	},
		"video/vnd.ms-playready.media.pyv": {
		source: "iana",
		extensions: [
			"pyv"
		]
	},
		"video/vnd.nokia.interleaved-multimedia": {
		source: "iana"
	},
		"video/vnd.nokia.mp4vr": {
		source: "iana"
	},
		"video/vnd.nokia.videovoip": {
		source: "iana"
	},
		"video/vnd.objectvideo": {
		source: "iana"
	},
		"video/vnd.radgamettools.bink": {
		source: "iana"
	},
		"video/vnd.radgamettools.smacker": {
		source: "iana"
	},
		"video/vnd.sealed.mpeg1": {
		source: "iana"
	},
		"video/vnd.sealed.mpeg4": {
		source: "iana"
	},
		"video/vnd.sealed.swf": {
		source: "iana"
	},
		"video/vnd.sealedmedia.softseal.mov": {
		source: "iana"
	},
		"video/vnd.uvvu.mp4": {
		source: "iana",
		extensions: [
			"uvu",
			"uvvu"
		]
	},
		"video/vnd.vivo": {
		source: "iana",
		extensions: [
			"viv"
		]
	},
		"video/vnd.youtube.yt": {
		source: "iana"
	},
		"video/vp8": {
		source: "iana"
	},
		"video/vp9": {
		source: "iana"
	},
		"video/webm": {
		source: "apache",
		compressible: false,
		extensions: [
			"webm"
		]
	},
		"video/x-f4v": {
		source: "apache",
		extensions: [
			"f4v"
		]
	},
		"video/x-fli": {
		source: "apache",
		extensions: [
			"fli"
		]
	},
		"video/x-flv": {
		source: "apache",
		compressible: false,
		extensions: [
			"flv"
		]
	},
		"video/x-m4v": {
		source: "apache",
		extensions: [
			"m4v"
		]
	},
		"video/x-matroska": {
		source: "apache",
		compressible: false,
		extensions: [
			"mkv",
			"mk3d",
			"mks"
		]
	},
		"video/x-mng": {
		source: "apache",
		extensions: [
			"mng"
		]
	},
		"video/x-ms-asf": {
		source: "apache",
		extensions: [
			"asf",
			"asx"
		]
	},
		"video/x-ms-vob": {
		source: "apache",
		extensions: [
			"vob"
		]
	},
		"video/x-ms-wm": {
		source: "apache",
		extensions: [
			"wm"
		]
	},
		"video/x-ms-wmv": {
		source: "apache",
		compressible: false,
		extensions: [
			"wmv"
		]
	},
		"video/x-ms-wmx": {
		source: "apache",
		extensions: [
			"wmx"
		]
	},
		"video/x-ms-wvx": {
		source: "apache",
		extensions: [
			"wvx"
		]
	},
		"video/x-msvideo": {
		source: "apache",
		extensions: [
			"avi"
		]
	},
		"video/x-sgi-movie": {
		source: "apache",
		extensions: [
			"movie"
		]
	},
		"video/x-smv": {
		source: "apache",
		extensions: [
			"smv"
		]
	},
		"x-conference/x-cooltalk": {
		source: "apache",
		extensions: [
			"ice"
		]
	},
		"x-shader/x-fragment": {
		compressible: true
	},
		"x-shader/x-vertex": {
		compressible: true
	}
	};

	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015-2022 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	var mimeDb;
	var hasRequiredMimeDb;

	function requireMimeDb () {
		if (hasRequiredMimeDb) return mimeDb;
		hasRequiredMimeDb = 1;
		/**
		 * Module exports.
		 */

		mimeDb = require$$0;
		return mimeDb;
	}

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	var hasRequiredMimeTypes;

	function requireMimeTypes () {
		if (hasRequiredMimeTypes) return mimeTypes;
		hasRequiredMimeTypes = 1;
		(function (exports) {

			/**
			 * Module dependencies.
			 * @private
			 */
			var db = requireMimeDb();
			var extname = require$$1__default$1["default"].extname;

			/**
			 * Module variables.
			 * @private
			 */

			var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
			var TEXT_TYPE_REGEXP = /^text\//i;

			/**
			 * Module exports.
			 * @public
			 */

			exports.charset = charset;
			exports.charsets = {
			  lookup: charset
			};
			exports.contentType = contentType;
			exports.extension = extension;
			exports.extensions = Object.create(null);
			exports.lookup = lookup;
			exports.types = Object.create(null);

			// Populate the extensions/types maps
			populateMaps(exports.extensions, exports.types);

			/**
			 * Get the default charset for a MIME type.
			 *
			 * @param {string} type
			 * @return {boolean|string}
			 */

			function charset(type) {
			  if (!type || typeof type !== 'string') {
			    return false;
			  }

			  // TODO: use media-typer
			  var match = EXTRACT_TYPE_REGEXP.exec(type);
			  var mime = match && db[match[1].toLowerCase()];
			  if (mime && mime.charset) {
			    return mime.charset;
			  }

			  // default text/* to utf-8
			  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
			    return 'UTF-8';
			  }
			  return false;
			}

			/**
			 * Create a full Content-Type header given a MIME type or extension.
			 *
			 * @param {string} str
			 * @return {boolean|string}
			 */

			function contentType(str) {
			  // TODO: should this even be in this module?
			  if (!str || typeof str !== 'string') {
			    return false;
			  }
			  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
			  if (!mime) {
			    return false;
			  }

			  // TODO: use content-type or other module
			  if (mime.indexOf('charset') === -1) {
			    var charset = exports.charset(mime);
			    if (charset) mime += '; charset=' + charset.toLowerCase();
			  }
			  return mime;
			}

			/**
			 * Get the default extension for a MIME type.
			 *
			 * @param {string} type
			 * @return {boolean|string}
			 */

			function extension(type) {
			  if (!type || typeof type !== 'string') {
			    return false;
			  }

			  // TODO: use media-typer
			  var match = EXTRACT_TYPE_REGEXP.exec(type);

			  // get extensions
			  var exts = match && exports.extensions[match[1].toLowerCase()];
			  if (!exts || !exts.length) {
			    return false;
			  }
			  return exts[0];
			}

			/**
			 * Lookup the MIME type for a file path/extension.
			 *
			 * @param {string} path
			 * @return {boolean|string}
			 */

			function lookup(path) {
			  if (!path || typeof path !== 'string') {
			    return false;
			  }

			  // get the extension ("ext" or ".ext" or full path)
			  var extension = extname('x.' + path).toLowerCase().substr(1);
			  if (!extension) {
			    return false;
			  }
			  return exports.types[extension] || false;
			}

			/**
			 * Populate the extensions and types maps.
			 * @private
			 */

			function populateMaps(extensions, types) {
			  // source preference (least -> most)
			  var preference = ['nginx', 'apache', undefined, 'iana'];
			  Object.keys(db).forEach(function forEachMimeType(type) {
			    var mime = db[type];
			    var exts = mime.extensions;
			    if (!exts || !exts.length) {
			      return;
			    }

			    // mime -> extensions
			    extensions[type] = exts;

			    // extension -> mime
			    for (var i = 0; i < exts.length; i++) {
			      var extension = exts[i];
			      if (types[extension]) {
			        var from = preference.indexOf(db[types[extension]].source);
			        var to = preference.indexOf(mime.source);
			        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
			          // skip the remapping
			          continue;
			        }
			      }

			      // set the extension -> mime
			      types[extension] = type;
			    }
			  });
			} 
		} (mimeTypes));
		return mimeTypes;
	}

	var defer_1;
	var hasRequiredDefer;

	function requireDefer () {
		if (hasRequiredDefer) return defer_1;
		hasRequiredDefer = 1;
		defer_1 = defer;

		/**
		 * Runs provided function on next iteration of the event loop
		 *
		 * @param {function} fn - function to run
		 */
		function defer(fn) {
		  var nextTick = typeof setImmediate == 'function' ? setImmediate : typeof process == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;
		  if (nextTick) {
		    nextTick(fn);
		  } else {
		    setTimeout(fn, 0);
		  }
		}
		return defer_1;
	}

	var async_1;
	var hasRequiredAsync;

	function requireAsync () {
		if (hasRequiredAsync) return async_1;
		hasRequiredAsync = 1;
		var defer = requireDefer();

		// API
		async_1 = async;

		/**
		 * Runs provided callback asynchronously
		 * even if callback itself is not
		 *
		 * @param   {function} callback - callback to invoke
		 * @returns {function} - augmented callback
		 */
		function async(callback) {
		  var isAsync = false;

		  // check if async happened
		  defer(function () {
		    isAsync = true;
		  });
		  return function async_callback(err, result) {
		    if (isAsync) {
		      callback(err, result);
		    } else {
		      defer(function nextTick_callback() {
		        callback(err, result);
		      });
		    }
		  };
		}
		return async_1;
	}

	var abort_1;
	var hasRequiredAbort;

	function requireAbort () {
		if (hasRequiredAbort) return abort_1;
		hasRequiredAbort = 1;
		// API
		abort_1 = abort;

		/**
		 * Aborts leftover active jobs
		 *
		 * @param {object} state - current state object
		 */
		function abort(state) {
		  Object.keys(state.jobs).forEach(clean.bind(state));

		  // reset leftover jobs
		  state.jobs = {};
		}

		/**
		 * Cleans up leftover job by invoking abort function for the provided job id
		 *
		 * @this  state
		 * @param {string|number} key - job id to abort
		 */
		function clean(key) {
		  if (typeof this.jobs[key] == 'function') {
		    this.jobs[key]();
		  }
		}
		return abort_1;
	}

	var iterate_1;
	var hasRequiredIterate;

	function requireIterate () {
		if (hasRequiredIterate) return iterate_1;
		hasRequiredIterate = 1;
		var async = requireAsync(),
		  abort = requireAbort();

		// API
		iterate_1 = iterate;

		/**
		 * Iterates over each job object
		 *
		 * @param {array|object} list - array or object (named list) to iterate over
		 * @param {function} iterator - iterator to run
		 * @param {object} state - current job status
		 * @param {function} callback - invoked when all elements processed
		 */
		function iterate(list, iterator, state, callback) {
		  // store current index
		  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
		  state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {
		    // don't repeat yourself
		    // skip secondary callbacks
		    if (!(key in state.jobs)) {
		      return;
		    }

		    // clean up jobs
		    delete state.jobs[key];
		    if (error) {
		      // don't process rest of the results
		      // stop still active jobs
		      // and reset the list
		      abort(state);
		    } else {
		      state.results[key] = output;
		    }

		    // return salvaged results
		    callback(error, state.results);
		  });
		}

		/**
		 * Runs iterator over provided job element
		 *
		 * @param   {function} iterator - iterator to invoke
		 * @param   {string|number} key - key/index of the element in the list of jobs
		 * @param   {mixed} item - job description
		 * @param   {function} callback - invoked after iterator is done with the job
		 * @returns {function|mixed} - job abort function or something else
		 */
		function runJob(iterator, key, item, callback) {
		  var aborter;

		  // allow shortcut if iterator expects only two arguments
		  if (iterator.length == 2) {
		    aborter = iterator(item, async(callback));
		  }
		  // otherwise go with full three arguments
		  else {
		    aborter = iterator(item, key, async(callback));
		  }
		  return aborter;
		}
		return iterate_1;
	}

	var state_1;
	var hasRequiredState;

	function requireState () {
		if (hasRequiredState) return state_1;
		hasRequiredState = 1;
		// API
		state_1 = state;

		/**
		 * Creates initial state object
		 * for iteration over list
		 *
		 * @param   {array|object} list - list to iterate over
		 * @param   {function|null} sortMethod - function to use for keys sort,
		 *                                     or `null` to keep them as is
		 * @returns {object} - initial state object
		 */
		function state(list, sortMethod) {
		  var isNamedList = !Array.isArray(list),
		    initState = {
		      index: 0,
		      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
		      jobs: {},
		      results: isNamedList ? {} : [],
		      size: isNamedList ? Object.keys(list).length : list.length
		    };
		  if (sortMethod) {
		    // sort array keys based on it's values
		    // sort object's keys just on own merit
		    initState.keyedList.sort(isNamedList ? sortMethod : function (a, b) {
		      return sortMethod(list[a], list[b]);
		    });
		  }
		  return initState;
		}
		return state_1;
	}

	var terminator_1;
	var hasRequiredTerminator;

	function requireTerminator () {
		if (hasRequiredTerminator) return terminator_1;
		hasRequiredTerminator = 1;
		var abort = requireAbort(),
		  async = requireAsync();

		// API
		terminator_1 = terminator;

		/**
		 * Terminates jobs in the attached state context
		 *
		 * @this  AsyncKitState#
		 * @param {function} callback - final callback to invoke after termination
		 */
		function terminator(callback) {
		  if (!Object.keys(this.jobs).length) {
		    return;
		  }

		  // fast forward iteration index
		  this.index = this.size;

		  // abort jobs
		  abort(this);

		  // send back results we have so far
		  async(callback)(null, this.results);
		}
		return terminator_1;
	}

	var parallel_1;
	var hasRequiredParallel;

	function requireParallel () {
		if (hasRequiredParallel) return parallel_1;
		hasRequiredParallel = 1;
		var iterate = requireIterate(),
		  initState = requireState(),
		  terminator = requireTerminator();

		// Public API
		parallel_1 = parallel;

		/**
		 * Runs iterator over provided array elements in parallel
		 *
		 * @param   {array|object} list - array or object (named list) to iterate over
		 * @param   {function} iterator - iterator to run
		 * @param   {function} callback - invoked when all elements processed
		 * @returns {function} - jobs terminator
		 */
		function parallel(list, iterator, callback) {
		  var state = initState(list);
		  while (state.index < (state['keyedList'] || list).length) {
		    iterate(list, iterator, state, function (error, result) {
		      if (error) {
		        callback(error, result);
		        return;
		      }

		      // looks like it's the last one
		      if (Object.keys(state.jobs).length === 0) {
		        callback(null, state.results);
		        return;
		      }
		    });
		    state.index++;
		  }
		  return terminator.bind(state, callback);
		}
		return parallel_1;
	}

	var serialOrdered = {exports: {}};

	var hasRequiredSerialOrdered;

	function requireSerialOrdered () {
		if (hasRequiredSerialOrdered) return serialOrdered.exports;
		hasRequiredSerialOrdered = 1;
		var iterate = requireIterate(),
		  initState = requireState(),
		  terminator = requireTerminator();

		// Public API
		serialOrdered.exports = serialOrdered$1;
		// sorting helpers
		serialOrdered.exports.ascending = ascending;
		serialOrdered.exports.descending = descending;

		/**
		 * Runs iterator over provided sorted array elements in series
		 *
		 * @param   {array|object} list - array or object (named list) to iterate over
		 * @param   {function} iterator - iterator to run
		 * @param   {function} sortMethod - custom sort function
		 * @param   {function} callback - invoked when all elements processed
		 * @returns {function} - jobs terminator
		 */
		function serialOrdered$1(list, iterator, sortMethod, callback) {
		  var state = initState(list, sortMethod);
		  iterate(list, iterator, state, function iteratorHandler(error, result) {
		    if (error) {
		      callback(error, result);
		      return;
		    }
		    state.index++;

		    // are we there yet?
		    if (state.index < (state['keyedList'] || list).length) {
		      iterate(list, iterator, state, iteratorHandler);
		      return;
		    }

		    // done here
		    callback(null, state.results);
		  });
		  return terminator.bind(state, callback);
		}

		/*
		 * -- Sort methods
		 */

		/**
		 * sort helper to sort array elements in ascending order
		 *
		 * @param   {mixed} a - an item to compare
		 * @param   {mixed} b - an item to compare
		 * @returns {number} - comparison result
		 */
		function ascending(a, b) {
		  return a < b ? -1 : a > b ? 1 : 0;
		}

		/**
		 * sort helper to sort array elements in descending order
		 *
		 * @param   {mixed} a - an item to compare
		 * @param   {mixed} b - an item to compare
		 * @returns {number} - comparison result
		 */
		function descending(a, b) {
		  return -1 * ascending(a, b);
		}
		return serialOrdered.exports;
	}

	var serial_1;
	var hasRequiredSerial;

	function requireSerial () {
		if (hasRequiredSerial) return serial_1;
		hasRequiredSerial = 1;
		var serialOrdered = requireSerialOrdered();

		// Public API
		serial_1 = serial;

		/**
		 * Runs iterator over provided array elements in series
		 *
		 * @param   {array|object} list - array or object (named list) to iterate over
		 * @param   {function} iterator - iterator to run
		 * @param   {function} callback - invoked when all elements processed
		 * @returns {function} - jobs terminator
		 */
		function serial(list, iterator, callback) {
		  return serialOrdered(list, iterator, null, callback);
		}
		return serial_1;
	}

	var asynckit;
	var hasRequiredAsynckit;

	function requireAsynckit () {
		if (hasRequiredAsynckit) return asynckit;
		hasRequiredAsynckit = 1;
		asynckit = {
		  parallel: requireParallel(),
		  serial: requireSerial(),
		  serialOrdered: requireSerialOrdered()
		};
		return asynckit;
	}

	var populate;
	var hasRequiredPopulate;

	function requirePopulate () {
		if (hasRequiredPopulate) return populate;
		hasRequiredPopulate = 1;
		// populates missing values
		populate = function (dst, src) {
		  Object.keys(src).forEach(function (prop) {
		    dst[prop] = dst[prop] || src[prop];
		  });
		  return dst;
		};
		return populate;
	}

	var form_data;
	var hasRequiredForm_data;

	function requireForm_data () {
		if (hasRequiredForm_data) return form_data;
		hasRequiredForm_data = 1;
		var CombinedStream = requireCombined_stream();
		var util = require$$1__default["default"];
		var path = require$$1__default$1["default"];
		var http = require$$2__default["default"];
		var https = require$$4__default["default"];
		var parseUrl = require$$0__default["default"].parse;
		var fs = require$$6__default["default"];
		var Stream = stream__default["default"].Stream;
		var mime = requireMimeTypes();
		var asynckit = requireAsynckit();
		var populate = requirePopulate();

		// Public API
		form_data = FormData;

		// make it a Stream
		util.inherits(FormData, CombinedStream);

		/**
		 * Create readable "multipart/form-data" streams.
		 * Can be used to submit forms
		 * and file uploads to other web applications.
		 *
		 * @constructor
		 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
		 */
		function FormData(options) {
		  if (!(this instanceof FormData)) {
		    return new FormData(options);
		  }
		  this._overheadLength = 0;
		  this._valueLength = 0;
		  this._valuesToMeasure = [];
		  CombinedStream.call(this);
		  options = options || {};
		  for (var option in options) {
		    this[option] = options[option];
		  }
		}
		FormData.LINE_BREAK = '\r\n';
		FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
		FormData.prototype.append = function (field, value, options) {
		  options = options || {};

		  // allow filename as single option
		  if (typeof options == 'string') {
		    options = {
		      filename: options
		    };
		  }
		  var append = CombinedStream.prototype.append.bind(this);

		  // all that streamy business can't handle numbers
		  if (typeof value == 'number') {
		    value = '' + value;
		  }

		  // https://github.com/felixge/node-form-data/issues/38
		  if (util.isArray(value)) {
		    // Please convert your array into string
		    // the way web server expects it
		    this._error(new Error('Arrays are not supported.'));
		    return;
		  }
		  var header = this._multiPartHeader(field, value, options);
		  var footer = this._multiPartFooter();
		  append(header);
		  append(value);
		  append(footer);

		  // pass along options.knownLength
		  this._trackLength(header, value, options);
		};
		FormData.prototype._trackLength = function (header, value, options) {
		  var valueLength = 0;

		  // used w/ getLengthSync(), when length is known.
		  // e.g. for streaming directly from a remote server,
		  // w/ a known file a size, and not wanting to wait for
		  // incoming file to finish to get its size.
		  if (options.knownLength != null) {
		    valueLength += +options.knownLength;
		  } else if (Buffer.isBuffer(value)) {
		    valueLength = value.length;
		  } else if (typeof value === 'string') {
		    valueLength = Buffer.byteLength(value);
		  }
		  this._valueLength += valueLength;

		  // @check why add CRLF? does this account for custom/multiple CRLFs?
		  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;

		  // empty or either doesn't have path or not an http response or not a stream
		  if (!value || !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream)) {
		    return;
		  }

		  // no need to bother with the length
		  if (!options.knownLength) {
		    this._valuesToMeasure.push(value);
		  }
		};
		FormData.prototype._lengthRetriever = function (value, callback) {
		  if (value.hasOwnProperty('fd')) {
		    // take read range into a account
		    // `end` = Infinity –> read file till the end
		    //
		    // TODO: Looks like there is bug in Node fs.createReadStream
		    // it doesn't respect `end` options without `start` options
		    // Fix it when node fixes it.
		    // https://github.com/joyent/node/issues/7819
		    if (value.end != undefined && value.end != Infinity && value.start != undefined) {
		      // when end specified
		      // no need to calculate range
		      // inclusive, starts with 0
		      callback(null, value.end + 1 - (value.start ? value.start : 0));

		      // not that fast snoopy
		    } else {
		      // still need to fetch file size from fs
		      fs.stat(value.path, function (err, stat) {
		        var fileSize;
		        if (err) {
		          callback(err);
		          return;
		        }

		        // update final size based on the range options
		        fileSize = stat.size - (value.start ? value.start : 0);
		        callback(null, fileSize);
		      });
		    }

		    // or http response
		  } else if (value.hasOwnProperty('httpVersion')) {
		    callback(null, +value.headers['content-length']);

		    // or request stream http://github.com/mikeal/request
		  } else if (value.hasOwnProperty('httpModule')) {
		    // wait till response come back
		    value.on('response', function (response) {
		      value.pause();
		      callback(null, +response.headers['content-length']);
		    });
		    value.resume();

		    // something else
		  } else {
		    callback('Unknown stream');
		  }
		};
		FormData.prototype._multiPartHeader = function (field, value, options) {
		  // custom header specified (as string)?
		  // it becomes responsible for boundary
		  // (e.g. to handle extra CRLFs on .NET servers)
		  if (typeof options.header == 'string') {
		    return options.header;
		  }
		  var contentDisposition = this._getContentDisposition(value, options);
		  var contentType = this._getContentType(value, options);
		  var contents = '';
		  var headers = {
		    // add custom disposition as third element or keep it two elements if not
		    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
		    // if no content type. allow it to be empty array
		    'Content-Type': [].concat(contentType || [])
		  };

		  // allow custom headers.
		  if (typeof options.header == 'object') {
		    populate(headers, options.header);
		  }
		  var header;
		  for (var prop in headers) {
		    if (!headers.hasOwnProperty(prop)) continue;
		    header = headers[prop];

		    // skip nullish headers.
		    if (header == null) {
		      continue;
		    }

		    // convert all headers to arrays.
		    if (!Array.isArray(header)) {
		      header = [header];
		    }

		    // add non-empty headers.
		    if (header.length) {
		      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
		    }
		  }
		  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
		};
		FormData.prototype._getContentDisposition = function (value, options) {
		  var filename, contentDisposition;
		  if (typeof options.filepath === 'string') {
		    // custom filepath for relative paths
		    filename = path.normalize(options.filepath).replace(/\\/g, '/');
		  } else if (options.filename || value.name || value.path) {
		    // custom filename take precedence
		    // formidable and the browser add a name property
		    // fs- and request- streams have path property
		    filename = path.basename(options.filename || value.name || value.path);
		  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
		    // or try http response
		    filename = path.basename(value.client._httpMessage.path || '');
		  }
		  if (filename) {
		    contentDisposition = 'filename="' + filename + '"';
		  }
		  return contentDisposition;
		};
		FormData.prototype._getContentType = function (value, options) {
		  // use custom content-type above all
		  var contentType = options.contentType;

		  // or try `name` from formidable, browser
		  if (!contentType && value.name) {
		    contentType = mime.lookup(value.name);
		  }

		  // or try `path` from fs-, request- streams
		  if (!contentType && value.path) {
		    contentType = mime.lookup(value.path);
		  }

		  // or if it's http-reponse
		  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
		    contentType = value.headers['content-type'];
		  }

		  // or guess it from the filepath or filename
		  if (!contentType && (options.filepath || options.filename)) {
		    contentType = mime.lookup(options.filepath || options.filename);
		  }

		  // fallback to the default content type if `value` is not simple value
		  if (!contentType && typeof value == 'object') {
		    contentType = FormData.DEFAULT_CONTENT_TYPE;
		  }
		  return contentType;
		};
		FormData.prototype._multiPartFooter = function () {
		  return function (next) {
		    var footer = FormData.LINE_BREAK;
		    var lastPart = this._streams.length === 0;
		    if (lastPart) {
		      footer += this._lastBoundary();
		    }
		    next(footer);
		  }.bind(this);
		};
		FormData.prototype._lastBoundary = function () {
		  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
		};
		FormData.prototype.getHeaders = function (userHeaders) {
		  var header;
		  var formHeaders = {
		    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
		  };
		  for (header in userHeaders) {
		    if (userHeaders.hasOwnProperty(header)) {
		      formHeaders[header.toLowerCase()] = userHeaders[header];
		    }
		  }
		  return formHeaders;
		};
		FormData.prototype.setBoundary = function (boundary) {
		  this._boundary = boundary;
		};
		FormData.prototype.getBoundary = function () {
		  if (!this._boundary) {
		    this._generateBoundary();
		  }
		  return this._boundary;
		};
		FormData.prototype.getBuffer = function () {
		  var dataBuffer = new Buffer.alloc(0);
		  var boundary = this.getBoundary();

		  // Create the form content. Add Line breaks to the end of data.
		  for (var i = 0, len = this._streams.length; i < len; i++) {
		    if (typeof this._streams[i] !== 'function') {
		      // Add content to the buffer.
		      if (Buffer.isBuffer(this._streams[i])) {
		        dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
		      } else {
		        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
		      }

		      // Add break after content.
		      if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
		        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
		      }
		    }
		  }

		  // Add the footer and return the Buffer object.
		  return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
		};
		FormData.prototype._generateBoundary = function () {
		  // This generates a 50 character boundary similar to those used by Firefox.
		  // They are optimized for boyer-moore parsing.
		  var boundary = '--------------------------';
		  for (var i = 0; i < 24; i++) {
		    boundary += Math.floor(Math.random() * 10).toString(16);
		  }
		  this._boundary = boundary;
		};

		// Note: getLengthSync DOESN'T calculate streams length
		// As workaround one can calculate file size manually
		// and add it as knownLength option
		FormData.prototype.getLengthSync = function () {
		  var knownLength = this._overheadLength + this._valueLength;

		  // Don't get confused, there are 3 "internal" streams for each keyval pair
		  // so it basically checks if there is any value added to the form
		  if (this._streams.length) {
		    knownLength += this._lastBoundary().length;
		  }

		  // https://github.com/form-data/form-data/issues/40
		  if (!this.hasKnownLength()) {
		    // Some async length retrievers are present
		    // therefore synchronous length calculation is false.
		    // Please use getLength(callback) to get proper length
		    this._error(new Error('Cannot calculate proper length in synchronous way.'));
		  }
		  return knownLength;
		};

		// Public API to check if length of added values is known
		// https://github.com/form-data/form-data/issues/196
		// https://github.com/form-data/form-data/issues/262
		FormData.prototype.hasKnownLength = function () {
		  var hasKnownLength = true;
		  if (this._valuesToMeasure.length) {
		    hasKnownLength = false;
		  }
		  return hasKnownLength;
		};
		FormData.prototype.getLength = function (cb) {
		  var knownLength = this._overheadLength + this._valueLength;
		  if (this._streams.length) {
		    knownLength += this._lastBoundary().length;
		  }
		  if (!this._valuesToMeasure.length) {
		    process.nextTick(cb.bind(this, null, knownLength));
		    return;
		  }
		  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
		    if (err) {
		      cb(err);
		      return;
		    }
		    values.forEach(function (length) {
		      knownLength += length;
		    });
		    cb(null, knownLength);
		  });
		};
		FormData.prototype.submit = function (params, cb) {
		  var request,
		    options,
		    defaults = {
		      method: 'post'
		    };

		  // parse provided url if it's string
		  // or treat it as options object
		  if (typeof params == 'string') {
		    params = parseUrl(params);
		    options = populate({
		      port: params.port,
		      path: params.pathname,
		      host: params.hostname,
		      protocol: params.protocol
		    }, defaults);

		    // use custom params
		  } else {
		    options = populate(params, defaults);
		    // if no port provided use default one
		    if (!options.port) {
		      options.port = options.protocol == 'https:' ? 443 : 80;
		    }
		  }

		  // put that good code in getHeaders to some use
		  options.headers = this.getHeaders(params.headers);

		  // https if specified, fallback to http in any other case
		  if (options.protocol == 'https:') {
		    request = https.request(options);
		  } else {
		    request = http.request(options);
		  }

		  // get content length and fire away
		  this.getLength(function (err, length) {
		    if (err && err !== 'Unknown stream') {
		      this._error(err);
		      return;
		    }

		    // add content length
		    if (length) {
		      request.setHeader('Content-Length', length);
		    }
		    this.pipe(request);
		    if (cb) {
		      var onResponse;
		      var callback = function (error, responce) {
		        request.removeListener('error', callback);
		        request.removeListener('response', onResponse);
		        return cb.call(this, error, responce);
		      };
		      onResponse = callback.bind(this, null);
		      request.on('error', callback);
		      request.on('response', onResponse);
		    }
		  }.bind(this));
		  return request;
		};
		FormData.prototype._error = function (err) {
		  if (!this.error) {
		    this.error = err;
		    this.pause();
		    this.emit('error', err);
		  }
		};
		FormData.prototype.toString = function () {
		  return '[object FormData]';
		};
		return form_data;
	}

	var form_dataExports = requireForm_data();
	var FormData$1 = /*@__PURE__*/getDefaultExportFromCjs(form_dataExports);

	/**
	 * Determines if the given thing is a array or js object.
	 *
	 * @param {string} thing - The object or array to be visited.
	 *
	 * @returns {boolean}
	 */
	function isVisitable(thing) {
	  return utils$3.isPlainObject(thing) || utils$3.isArray(thing);
	}

	/**
	 * It removes the brackets from the end of a string
	 *
	 * @param {string} key - The key of the parameter.
	 *
	 * @returns {string} the key without the brackets.
	 */
	function removeBrackets(key) {
	  return utils$3.endsWith(key, '[]') ? key.slice(0, -2) : key;
	}

	/**
	 * It takes a path, a key, and a boolean, and returns a string
	 *
	 * @param {string} path - The path to the current key.
	 * @param {string} key - The key of the current object being iterated over.
	 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
	 *
	 * @returns {string} The path to the current key.
	 */
	function renderKey(path, key, dots) {
	  if (!path) return key;
	  return path.concat(key).map(function each(token, i) {
	    // eslint-disable-next-line no-param-reassign
	    token = removeBrackets(token);
	    return !dots && i ? '[' + token + ']' : token;
	  }).join(dots ? '.' : '');
	}

	/**
	 * If the array is an array and none of its elements are visitable, then it's a flat array.
	 *
	 * @param {Array<any>} arr - The array to check
	 *
	 * @returns {boolean}
	 */
	function isFlatArray(arr) {
	  return utils$3.isArray(arr) && !arr.some(isVisitable);
	}
	const predicates = utils$3.toFlatObject(utils$3, {}, null, function filter(prop) {
	  return /^is[A-Z]/.test(prop);
	});

	/**
	 * Convert a data object to FormData
	 *
	 * @param {Object} obj
	 * @param {?Object} [formData]
	 * @param {?Object} [options]
	 * @param {Function} [options.visitor]
	 * @param {Boolean} [options.metaTokens = true]
	 * @param {Boolean} [options.dots = false]
	 * @param {?Boolean} [options.indexes = false]
	 *
	 * @returns {Object}
	 **/

	/**
	 * It converts an object into a FormData object
	 *
	 * @param {Object<any, any>} obj - The object to convert to form data.
	 * @param {string} formData - The FormData object to append to.
	 * @param {Object<string, any>} options
	 *
	 * @returns
	 */
	function toFormData$1(obj, formData, options) {
	  if (!utils$3.isObject(obj)) {
	    throw new TypeError('target must be an object');
	  }

	  // eslint-disable-next-line no-param-reassign
	  formData = formData || new (FormData$1 || FormData)();

	  // eslint-disable-next-line no-param-reassign
	  options = utils$3.toFlatObject(options, {
	    metaTokens: true,
	    dots: false,
	    indexes: false
	  }, false, function defined(option, source) {
	    // eslint-disable-next-line no-eq-null,eqeqeq
	    return !utils$3.isUndefined(source[option]);
	  });
	  const metaTokens = options.metaTokens;
	  // eslint-disable-next-line no-use-before-define
	  const visitor = options.visitor || defaultVisitor;
	  const dots = options.dots;
	  const indexes = options.indexes;
	  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
	  const useBlob = _Blob && utils$3.isSpecCompliantForm(formData);
	  if (!utils$3.isFunction(visitor)) {
	    throw new TypeError('visitor must be a function');
	  }
	  function convertValue(value) {
	    if (value === null) return '';
	    if (utils$3.isDate(value)) {
	      return value.toISOString();
	    }
	    if (!useBlob && utils$3.isBlob(value)) {
	      throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
	    }
	    if (utils$3.isArrayBuffer(value) || utils$3.isTypedArray(value)) {
	      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
	    }
	    return value;
	  }

	  /**
	   * Default visitor.
	   *
	   * @param {*} value
	   * @param {String|Number} key
	   * @param {Array<String|Number>} path
	   * @this {FormData}
	   *
	   * @returns {boolean} return true to visit the each prop of the value recursively
	   */
	  function defaultVisitor(value, key, path) {
	    let arr = value;
	    if (value && !path && typeof value === 'object') {
	      if (utils$3.endsWith(key, '{}')) {
	        // eslint-disable-next-line no-param-reassign
	        key = metaTokens ? key : key.slice(0, -2);
	        // eslint-disable-next-line no-param-reassign
	        value = JSON.stringify(value);
	      } else if (utils$3.isArray(value) && isFlatArray(value) || (utils$3.isFileList(value) || utils$3.endsWith(key, '[]')) && (arr = utils$3.toArray(value))) {
	        // eslint-disable-next-line no-param-reassign
	        key = removeBrackets(key);
	        arr.forEach(function each(el, index) {
	          !(utils$3.isUndefined(el) || el === null) && formData.append(
	          // eslint-disable-next-line no-nested-ternary
	          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
	        });
	        return false;
	      }
	    }
	    if (isVisitable(value)) {
	      return true;
	    }
	    formData.append(renderKey(path, key, dots), convertValue(value));
	    return false;
	  }
	  const stack = [];
	  const exposedHelpers = Object.assign(predicates, {
	    defaultVisitor,
	    convertValue,
	    isVisitable
	  });
	  function build(value, path) {
	    if (utils$3.isUndefined(value)) return;
	    if (stack.indexOf(value) !== -1) {
	      throw Error('Circular reference detected in ' + path.join('.'));
	    }
	    stack.push(value);
	    utils$3.forEach(value, function each(el, key) {
	      const result = !(utils$3.isUndefined(el) || el === null) && visitor.call(formData, el, utils$3.isString(key) ? key.trim() : key, path, exposedHelpers);
	      if (result === true) {
	        build(el, path ? path.concat(key) : [key]);
	      }
	    });
	    stack.pop();
	  }
	  if (!utils$3.isObject(obj)) {
	    throw new TypeError('data must be an object');
	  }
	  build(obj);
	  return formData;
	}

	/**
	 * It encodes a string by replacing all characters that are not in the unreserved set with
	 * their percent-encoded equivalents
	 *
	 * @param {string} str - The string to encode.
	 *
	 * @returns {string} The encoded string.
	 */
	function encode$2(str) {
	  const charMap = {
	    '!': '%21',
	    "'": '%27',
	    '(': '%28',
	    ')': '%29',
	    '~': '%7E',
	    '%20': '+',
	    '%00': '\x00'
	  };
	  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
	    return charMap[match];
	  });
	}

	/**
	 * It takes a params object and converts it to a FormData object
	 *
	 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
	 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
	 *
	 * @returns {void}
	 */
	function AxiosURLSearchParams(params, options) {
	  this._pairs = [];
	  params && toFormData$1(params, this, options);
	}
	const prototype = AxiosURLSearchParams.prototype;
	prototype.append = function append(name, value) {
	  this._pairs.push([name, value]);
	};
	prototype.toString = function toString(encoder) {
	  const _encode = encoder ? function (value) {
	    return encoder.call(this, value, encode$2);
	  } : encode$2;
	  return this._pairs.map(function each(pair) {
	    return _encode(pair[0]) + '=' + _encode(pair[1]);
	  }, '').join('&');
	};

	/**
	 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
	 * URI encoded counterparts
	 *
	 * @param {string} val The value to be encoded.
	 *
	 * @returns {string} The encoded value.
	 */
	function encode$1(val) {
	  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @param {?object} options
	 *
	 * @returns {string} The formatted url
	 */
	function buildURL(url, params, options) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	  const _encode = options && options.encode || encode$1;
	  const serializeFn = options && options.serialize;
	  let serializedParams;
	  if (serializeFn) {
	    serializedParams = serializeFn(params, options);
	  } else {
	    serializedParams = utils$3.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
	  }
	  if (serializedParams) {
	    const hashmarkIndex = url.indexOf("#");
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	  return url;
	}

	class InterceptorManager {
	  constructor() {
	    this.handlers = [];
	  }

	  /**
	   * Add a new interceptor to the stack
	   *
	   * @param {Function} fulfilled The function to handle `then` for a `Promise`
	   * @param {Function} rejected The function to handle `reject` for a `Promise`
	   *
	   * @return {Number} An ID used to remove interceptor later
	   */
	  use(fulfilled, rejected, options) {
	    this.handlers.push({
	      fulfilled,
	      rejected,
	      synchronous: options ? options.synchronous : false,
	      runWhen: options ? options.runWhen : null
	    });
	    return this.handlers.length - 1;
	  }

	  /**
	   * Remove an interceptor from the stack
	   *
	   * @param {Number} id The ID that was returned by `use`
	   *
	   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
	   */
	  eject(id) {
	    if (this.handlers[id]) {
	      this.handlers[id] = null;
	    }
	  }

	  /**
	   * Clear all interceptors from the stack
	   *
	   * @returns {void}
	   */
	  clear() {
	    if (this.handlers) {
	      this.handlers = [];
	    }
	  }

	  /**
	   * Iterate over all the registered interceptors
	   *
	   * This method is particularly useful for skipping over any
	   * interceptors that may have become `null` calling `eject`.
	   *
	   * @param {Function} fn The function to call for each interceptor
	   *
	   * @returns {void}
	   */
	  forEach(fn) {
	    utils$3.forEach(this.handlers, function forEachHandler(h) {
	      if (h !== null) {
	        fn(h);
	      }
	    });
	  }
	}
	var InterceptorManager$1 = InterceptorManager;

	var transitionalDefaults = {
	  silentJSONParsing: true,
	  forcedJSONParsing: true,
	  clarifyTimeoutError: false
	};

	var URLSearchParams$1 = require$$0__default["default"].URLSearchParams;

	var platform$1 = {
	  isNode: true,
	  classes: {
	    URLSearchParams: URLSearchParams$1,
	    FormData: FormData$1,
	    Blob: typeof Blob !== 'undefined' && Blob || null
	  },
	  protocols: ['http', 'https', 'file', 'data']
	};

	const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 *
	 * @returns {boolean}
	 */
	const hasStandardBrowserEnv = (product => {
	  return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0;
	})(typeof navigator !== 'undefined' && navigator.product);

	/**
	 * Determine if we're running in a standard browser webWorker environment
	 *
	 * Although the `isStandardBrowserEnv` method indicates that
	 * `allows axios to run in a web worker`, the WebWorker will still be
	 * filtered out due to its judgment standard
	 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
	 * This leads to a problem when axios post `FormData` in webWorker
	 */
	const hasStandardBrowserWebWorkerEnv = (() => {
	  return typeof WorkerGlobalScope !== 'undefined' &&
	  // eslint-disable-next-line no-undef
	  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';
	})();

	var utils$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hasBrowserEnv: hasBrowserEnv,
		hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
		hasStandardBrowserEnv: hasStandardBrowserEnv
	});

	var platform = {
	  ...utils$2,
	  ...platform$1
	};

	function toURLEncodedForm(data, options) {
	  return toFormData$1(data, new platform.classes.URLSearchParams(), Object.assign({
	    visitor: function (value, key, path, helpers) {
	      if (platform.isNode && utils$3.isBuffer(value)) {
	        this.append(key, value.toString('base64'));
	        return false;
	      }
	      return helpers.defaultVisitor.apply(this, arguments);
	    }
	  }, options));
	}

	/**
	 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
	 *
	 * @param {string} name - The name of the property to get.
	 *
	 * @returns An array of strings.
	 */
	function parsePropPath(name) {
	  // foo[x][y][z]
	  // foo.x.y.z
	  // foo-x-y-z
	  // foo x y z
	  return utils$3.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
	    return match[0] === '[]' ? '' : match[1] || match[0];
	  });
	}

	/**
	 * Convert an array to an object.
	 *
	 * @param {Array<any>} arr - The array to convert to an object.
	 *
	 * @returns An object with the same keys and values as the array.
	 */
	function arrayToObject(arr) {
	  const obj = {};
	  const keys = Object.keys(arr);
	  let i;
	  const len = keys.length;
	  let key;
	  for (i = 0; i < len; i++) {
	    key = keys[i];
	    obj[key] = arr[key];
	  }
	  return obj;
	}

	/**
	 * It takes a FormData object and returns a JavaScript object
	 *
	 * @param {string} formData The FormData object to convert to JSON.
	 *
	 * @returns {Object<string, any> | null} The converted object.
	 */
	function formDataToJSON(formData) {
	  function buildPath(path, value, target, index) {
	    let name = path[index++];
	    if (name === '__proto__') return true;
	    const isNumericKey = Number.isFinite(+name);
	    const isLast = index >= path.length;
	    name = !name && utils$3.isArray(target) ? target.length : name;
	    if (isLast) {
	      if (utils$3.hasOwnProp(target, name)) {
	        target[name] = [target[name], value];
	      } else {
	        target[name] = value;
	      }
	      return !isNumericKey;
	    }
	    if (!target[name] || !utils$3.isObject(target[name])) {
	      target[name] = [];
	    }
	    const result = buildPath(path, value, target[name], index);
	    if (result && utils$3.isArray(target[name])) {
	      target[name] = arrayToObject(target[name]);
	    }
	    return !isNumericKey;
	  }
	  if (utils$3.isFormData(formData) && utils$3.isFunction(formData.entries)) {
	    const obj = {};
	    utils$3.forEachEntry(formData, (name, value) => {
	      buildPath(parsePropPath(name), value, obj, 0);
	    });
	    return obj;
	  }
	  return null;
	}

	/**
	 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
	 * of the input
	 *
	 * @param {any} rawValue - The value to be stringified.
	 * @param {Function} parser - A function that parses a string into a JavaScript object.
	 * @param {Function} encoder - A function that takes a value and returns a string.
	 *
	 * @returns {string} A stringified version of the rawValue.
	 */
	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$3.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$3.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }
	  return (encoder || JSON.stringify)(rawValue);
	}
	const defaults = {
	  transitional: transitionalDefaults,
	  adapter: ['xhr', 'http'],
	  transformRequest: [function transformRequest(data, headers) {
	    const contentType = headers.getContentType() || '';
	    const hasJSONContentType = contentType.indexOf('application/json') > -1;
	    const isObjectPayload = utils$3.isObject(data);
	    if (isObjectPayload && utils$3.isHTMLForm(data)) {
	      data = new FormData(data);
	    }
	    const isFormData = utils$3.isFormData(data);
	    if (isFormData) {
	      if (!hasJSONContentType) {
	        return data;
	      }
	      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
	    }
	    if (utils$3.isArrayBuffer(data) || utils$3.isBuffer(data) || utils$3.isStream(data) || utils$3.isFile(data) || utils$3.isBlob(data)) {
	      return data;
	    }
	    if (utils$3.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$3.isURLSearchParams(data)) {
	      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
	      return data.toString();
	    }
	    let isFileList;
	    if (isObjectPayload) {
	      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
	        return toURLEncodedForm(data, this.formSerializer).toString();
	      }
	      if ((isFileList = utils$3.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
	        const _FormData = this.env && this.env.FormData;
	        return toFormData$1(isFileList ? {
	          'files[]': data
	        } : data, _FormData && new _FormData(), this.formSerializer);
	      }
	    }
	    if (isObjectPayload || hasJSONContentType) {
	      headers.setContentType('application/json', false);
	      return stringifySafely(data);
	    }
	    return data;
	  }],
	  transformResponse: [function transformResponse(data) {
	    const transitional = this.transitional || defaults.transitional;
	    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    const JSONRequested = this.responseType === 'json';
	    if (data && utils$3.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
	      const silentJSONParsing = transitional && transitional.silentJSONParsing;
	      const strictJSONParsing = !silentJSONParsing && JSONRequested;
	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
	          }
	          throw e;
	        }
	      }
	    }
	    return data;
	  }],
	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	  maxContentLength: -1,
	  maxBodyLength: -1,
	  env: {
	    FormData: platform.classes.FormData,
	    Blob: platform.classes.Blob
	  },
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  },
	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*',
	      'Content-Type': undefined
	    }
	  }
	};
	utils$3.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], method => {
	  defaults.headers[method] = {};
	});
	var defaults$1 = defaults;

	// RawAxiosHeaders whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	const ignoreDuplicateOf = utils$3.toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} rawHeaders Headers needing to be parsed
	 *
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders = rawHeaders => {
	  const parsed = {};
	  let key;
	  let val;
	  let i;
	  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
	    i = line.indexOf(':');
	    key = line.substring(0, i).trim().toLowerCase();
	    val = line.substring(i + 1).trim();
	    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
	      return;
	    }
	    if (key === 'set-cookie') {
	      if (parsed[key]) {
	        parsed[key].push(val);
	      } else {
	        parsed[key] = [val];
	      }
	    } else {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });
	  return parsed;
	};

	const $internals = Symbol('internals');
	function normalizeHeader(header) {
	  return header && String(header).trim().toLowerCase();
	}
	function normalizeValue(value) {
	  if (value === false || value == null) {
	    return value;
	  }
	  return utils$3.isArray(value) ? value.map(normalizeValue) : String(value);
	}
	function parseTokens(str) {
	  const tokens = Object.create(null);
	  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
	  let match;
	  while (match = tokensRE.exec(str)) {
	    tokens[match[1]] = match[2];
	  }
	  return tokens;
	}
	const isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
	function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
	  if (utils$3.isFunction(filter)) {
	    return filter.call(this, value, header);
	  }
	  if (isHeaderNameFilter) {
	    value = header;
	  }
	  if (!utils$3.isString(value)) return;
	  if (utils$3.isString(filter)) {
	    return value.indexOf(filter) !== -1;
	  }
	  if (utils$3.isRegExp(filter)) {
	    return filter.test(value);
	  }
	}
	function formatHeader(header) {
	  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
	    return char.toUpperCase() + str;
	  });
	}
	function buildAccessors(obj, header) {
	  const accessorName = utils$3.toCamelCase(' ' + header);
	  ['get', 'set', 'has'].forEach(methodName => {
	    Object.defineProperty(obj, methodName + accessorName, {
	      value: function (arg1, arg2, arg3) {
	        return this[methodName].call(this, header, arg1, arg2, arg3);
	      },
	      configurable: true
	    });
	  });
	}
	class AxiosHeaders$1 {
	  constructor(headers) {
	    headers && this.set(headers);
	  }
	  set(header, valueOrRewrite, rewrite) {
	    const self = this;
	    function setHeader(_value, _header, _rewrite) {
	      const lHeader = normalizeHeader(_header);
	      if (!lHeader) {
	        throw new Error('header name must be a non-empty string');
	      }
	      const key = utils$3.findKey(self, lHeader);
	      if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {
	        self[key || _header] = normalizeValue(_value);
	      }
	    }
	    const setHeaders = (headers, _rewrite) => utils$3.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
	    if (utils$3.isPlainObject(header) || header instanceof this.constructor) {
	      setHeaders(header, valueOrRewrite);
	    } else if (utils$3.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
	      setHeaders(parseHeaders(header), valueOrRewrite);
	    } else {
	      header != null && setHeader(valueOrRewrite, header, rewrite);
	    }
	    return this;
	  }
	  get(header, parser) {
	    header = normalizeHeader(header);
	    if (header) {
	      const key = utils$3.findKey(this, header);
	      if (key) {
	        const value = this[key];
	        if (!parser) {
	          return value;
	        }
	        if (parser === true) {
	          return parseTokens(value);
	        }
	        if (utils$3.isFunction(parser)) {
	          return parser.call(this, value, key);
	        }
	        if (utils$3.isRegExp(parser)) {
	          return parser.exec(value);
	        }
	        throw new TypeError('parser must be boolean|regexp|function');
	      }
	    }
	  }
	  has(header, matcher) {
	    header = normalizeHeader(header);
	    if (header) {
	      const key = utils$3.findKey(this, header);
	      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
	    }
	    return false;
	  }
	  delete(header, matcher) {
	    const self = this;
	    let deleted = false;
	    function deleteHeader(_header) {
	      _header = normalizeHeader(_header);
	      if (_header) {
	        const key = utils$3.findKey(self, _header);
	        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
	          delete self[key];
	          deleted = true;
	        }
	      }
	    }
	    if (utils$3.isArray(header)) {
	      header.forEach(deleteHeader);
	    } else {
	      deleteHeader(header);
	    }
	    return deleted;
	  }
	  clear(matcher) {
	    const keys = Object.keys(this);
	    let i = keys.length;
	    let deleted = false;
	    while (i--) {
	      const key = keys[i];
	      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
	        delete this[key];
	        deleted = true;
	      }
	    }
	    return deleted;
	  }
	  normalize(format) {
	    const self = this;
	    const headers = {};
	    utils$3.forEach(this, (value, header) => {
	      const key = utils$3.findKey(headers, header);
	      if (key) {
	        self[key] = normalizeValue(value);
	        delete self[header];
	        return;
	      }
	      const normalized = format ? formatHeader(header) : String(header).trim();
	      if (normalized !== header) {
	        delete self[header];
	      }
	      self[normalized] = normalizeValue(value);
	      headers[normalized] = true;
	    });
	    return this;
	  }
	  concat(...targets) {
	    return this.constructor.concat(this, ...targets);
	  }
	  toJSON(asStrings) {
	    const obj = Object.create(null);
	    utils$3.forEach(this, (value, header) => {
	      value != null && value !== false && (obj[header] = asStrings && utils$3.isArray(value) ? value.join(', ') : value);
	    });
	    return obj;
	  }
	  [Symbol.iterator]() {
	    return Object.entries(this.toJSON())[Symbol.iterator]();
	  }
	  toString() {
	    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
	  }
	  get [Symbol.toStringTag]() {
	    return 'AxiosHeaders';
	  }
	  static from(thing) {
	    return thing instanceof this ? thing : new this(thing);
	  }
	  static concat(first, ...targets) {
	    const computed = new this(first);
	    targets.forEach(target => computed.set(target));
	    return computed;
	  }
	  static accessor(header) {
	    const internals = this[$internals] = this[$internals] = {
	      accessors: {}
	    };
	    const accessors = internals.accessors;
	    const prototype = this.prototype;
	    function defineAccessor(_header) {
	      const lHeader = normalizeHeader(_header);
	      if (!accessors[lHeader]) {
	        buildAccessors(prototype, _header);
	        accessors[lHeader] = true;
	      }
	    }
	    utils$3.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
	    return this;
	  }
	}
	AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

	// reserved names hotfix
	utils$3.reduceDescriptors(AxiosHeaders$1.prototype, ({
	  value
	}, key) => {
	  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
	  return {
	    get: () => value,
	    set(headerValue) {
	      this[mapped] = headerValue;
	    }
	  };
	});
	utils$3.freezeMethods(AxiosHeaders$1);
	var AxiosHeaders$2 = AxiosHeaders$1;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Array|Function} fns A single function or Array of functions
	 * @param {?Object} response The response object
	 *
	 * @returns {*} The resulting transformed data
	 */
	function transformData(fns, response) {
	  const config = this || defaults$1;
	  const context = response || config;
	  const headers = AxiosHeaders$2.from(context.headers);
	  let data = context.data;
	  utils$3.forEach(fns, function transform(fn) {
	    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
	  });
	  headers.normalize();
	  return data;
	}

	function isCancel$1(value) {
	  return !!(value && value.__CANCEL__);
	}

	/**
	 * A `CanceledError` is an object that is thrown when an operation is canceled.
	 *
	 * @param {string=} message The message.
	 * @param {Object=} config The config.
	 * @param {Object=} request The request.
	 *
	 * @returns {CanceledError} The created error.
	 */
	function CanceledError$1(message, config, request) {
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
	  this.name = 'CanceledError';
	}
	utils$3.inherits(CanceledError$1, AxiosError$1, {
	  __CANCEL__: true
	});

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 *
	 * @returns {object} The response.
	 */
	function settle(resolve, reject, response) {
	  const validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(new AxiosError$1('Request failed with status code ' + response.status, [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
	  }
	}

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 *
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
	}

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 *
	 * @returns {string} The combined URL
	 */
	function combineURLs(baseURL, relativeURL) {
	  return relativeURL ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
	}

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 *
	 * @returns {string} The combined full path
	 */
	function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	}

	var proxyFromEnv = {};

	var hasRequiredProxyFromEnv;

	function requireProxyFromEnv () {
		if (hasRequiredProxyFromEnv) return proxyFromEnv;
		hasRequiredProxyFromEnv = 1;

		var parseUrl = require$$0__default["default"].parse;
		var DEFAULT_PORTS = {
		  ftp: 21,
		  gopher: 70,
		  http: 80,
		  https: 443,
		  ws: 80,
		  wss: 443
		};
		var stringEndsWith = String.prototype.endsWith || function (s) {
		  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
		};

		/**
		 * @param {string|object} url - The URL, or the result from url.parse.
		 * @return {string} The URL of the proxy that should handle the request to the
		 *  given URL. If no proxy is set, this will be an empty string.
		 */
		function getProxyForUrl(url) {
		  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};
		  var proto = parsedUrl.protocol;
		  var hostname = parsedUrl.host;
		  var port = parsedUrl.port;
		  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
		    return ''; // Don't proxy URLs without a valid scheme or host.
		  }
		  proto = proto.split(':', 1)[0];
		  // Stripping ports in this way instead of using parsedUrl.hostname to make
		  // sure that the brackets around IPv6 addresses are kept.
		  hostname = hostname.replace(/:\d*$/, '');
		  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
		  if (!shouldProxy(hostname, port)) {
		    return ''; // Don't proxy URLs that match NO_PROXY.
		  }
		  var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');
		  if (proxy && proxy.indexOf('://') === -1) {
		    // Missing scheme in proxy, default to the requested URL's scheme.
		    proxy = proto + '://' + proxy;
		  }
		  return proxy;
		}

		/**
		 * Determines whether a given URL should be proxied.
		 *
		 * @param {string} hostname - The host name of the URL.
		 * @param {number} port - The effective port of the URL.
		 * @returns {boolean} Whether the given URL should be proxied.
		 * @private
		 */
		function shouldProxy(hostname, port) {
		  var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
		  if (!NO_PROXY) {
		    return true; // Always proxy if NO_PROXY is not set.
		  }
		  if (NO_PROXY === '*') {
		    return false; // Never proxy if wildcard is set.
		  }
		  return NO_PROXY.split(/[,\s]/).every(function (proxy) {
		    if (!proxy) {
		      return true; // Skip zero-length hosts.
		    }
		    var parsedProxy = proxy.match(/^(.+):(\d+)$/);
		    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
		    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
		    if (parsedProxyPort && parsedProxyPort !== port) {
		      return true; // Skip if ports don't match.
		    }
		    if (!/^[.*]/.test(parsedProxyHostname)) {
		      // No wildcards, so stop proxying if there is an exact match.
		      return hostname !== parsedProxyHostname;
		    }
		    if (parsedProxyHostname.charAt(0) === '*') {
		      // Remove leading wildcard.
		      parsedProxyHostname = parsedProxyHostname.slice(1);
		    }
		    // Stop proxying if the hostname ends with the no_proxy host.
		    return !stringEndsWith.call(hostname, parsedProxyHostname);
		  });
		}

		/**
		 * Get the value for an environment variable.
		 *
		 * @param {string} key - The name of the environment variable.
		 * @return {string} The value of the environment variable.
		 * @private
		 */
		function getEnv(key) {
		  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
		}
		proxyFromEnv.getProxyForUrl = getProxyForUrl;
		return proxyFromEnv;
	}

	var proxyFromEnvExports = requireProxyFromEnv();

	var followRedirects$1 = {exports: {}};

	var src = {exports: {}};

	var browser = {exports: {}};

	/**
	 * Helpers.
	 */

	var ms$1;
	var hasRequiredMs;

	function requireMs () {
		if (hasRequiredMs) return ms$1;
		hasRequiredMs = 1;
		var s = 1000;
		var m = s * 60;
		var h = m * 60;
		var d = h * 24;
		var w = d * 7;
		var y = d * 365.25;

		/**
		 * Parse or format the given `val`.
		 *
		 * Options:
		 *
		 *  - `long` verbose formatting [false]
		 *
		 * @param {String|Number} val
		 * @param {Object} [options]
		 * @throws {Error} throw an error if val is not a non-empty string or a number
		 * @return {String|Number}
		 * @api public
		 */

		ms$1 = function (val, options) {
		  options = options || {};
		  var type = typeof val;
		  if (type === 'string' && val.length > 0) {
		    return parse(val);
		  } else if (type === 'number' && isFinite(val)) {
		    return options.long ? fmtLong(val) : fmtShort(val);
		  }
		  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
		};

		/**
		 * Parse the given `str` and return milliseconds.
		 *
		 * @param {String} str
		 * @return {Number}
		 * @api private
		 */

		function parse(str) {
		  str = String(str);
		  if (str.length > 100) {
		    return;
		  }
		  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
		  if (!match) {
		    return;
		  }
		  var n = parseFloat(match[1]);
		  var type = (match[2] || 'ms').toLowerCase();
		  switch (type) {
		    case 'years':
		    case 'year':
		    case 'yrs':
		    case 'yr':
		    case 'y':
		      return n * y;
		    case 'weeks':
		    case 'week':
		    case 'w':
		      return n * w;
		    case 'days':
		    case 'day':
		    case 'd':
		      return n * d;
		    case 'hours':
		    case 'hour':
		    case 'hrs':
		    case 'hr':
		    case 'h':
		      return n * h;
		    case 'minutes':
		    case 'minute':
		    case 'mins':
		    case 'min':
		    case 'm':
		      return n * m;
		    case 'seconds':
		    case 'second':
		    case 'secs':
		    case 'sec':
		    case 's':
		      return n * s;
		    case 'milliseconds':
		    case 'millisecond':
		    case 'msecs':
		    case 'msec':
		    case 'ms':
		      return n;
		    default:
		      return undefined;
		  }
		}

		/**
		 * Short format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtShort(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return Math.round(ms / d) + 'd';
		  }
		  if (msAbs >= h) {
		    return Math.round(ms / h) + 'h';
		  }
		  if (msAbs >= m) {
		    return Math.round(ms / m) + 'm';
		  }
		  if (msAbs >= s) {
		    return Math.round(ms / s) + 's';
		  }
		  return ms + 'ms';
		}

		/**
		 * Long format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtLong(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return plural(ms, msAbs, d, 'day');
		  }
		  if (msAbs >= h) {
		    return plural(ms, msAbs, h, 'hour');
		  }
		  if (msAbs >= m) {
		    return plural(ms, msAbs, m, 'minute');
		  }
		  if (msAbs >= s) {
		    return plural(ms, msAbs, s, 'second');
		  }
		  return ms + ' ms';
		}

		/**
		 * Pluralization helper.
		 */

		function plural(ms, msAbs, n, name) {
		  var isPlural = msAbs >= n * 1.5;
		  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
		}
		return ms$1;
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	var common$1;
	var hasRequiredCommon$1;

	function requireCommon$1 () {
		if (hasRequiredCommon$1) return common$1;
		hasRequiredCommon$1 = 1;
		function setup(env) {
		  createDebug.debug = createDebug;
		  createDebug.default = createDebug;
		  createDebug.coerce = coerce;
		  createDebug.disable = disable;
		  createDebug.enable = enable;
		  createDebug.enabled = enabled;
		  createDebug.humanize = requireMs();
		  createDebug.destroy = destroy;
		  Object.keys(env).forEach(key => {
		    createDebug[key] = env[key];
		  });

		  /**
		  * The currently active debug mode names, and names to skip.
		  */

		  createDebug.names = [];
		  createDebug.skips = [];

		  /**
		  * Map of special "%n" handling functions, for the debug "format" argument.
		  *
		  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		  */
		  createDebug.formatters = {};

		  /**
		  * Selects a color for a debug namespace
		  * @param {String} namespace The namespace string for the debug instance to be colored
		  * @return {Number|String} An ANSI color code for the given namespace
		  * @api private
		  */
		  function selectColor(namespace) {
		    let hash = 0;
		    for (let i = 0; i < namespace.length; i++) {
		      hash = (hash << 5) - hash + namespace.charCodeAt(i);
		      hash |= 0; // Convert to 32bit integer
		    }
		    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		  }
		  createDebug.selectColor = selectColor;

		  /**
		  * Create a debugger with the given `namespace`.
		  *
		  * @param {String} namespace
		  * @return {Function}
		  * @api public
		  */
		  function createDebug(namespace) {
		    let prevTime;
		    let enableOverride = null;
		    let namespacesCache;
		    let enabledCache;
		    function debug(...args) {
		      // Disabled?
		      if (!debug.enabled) {
		        return;
		      }
		      const self = debug;

		      // Set `diff` timestamp
		      const curr = Number(new Date());
		      const ms = curr - (prevTime || curr);
		      self.diff = ms;
		      self.prev = prevTime;
		      self.curr = curr;
		      prevTime = curr;
		      args[0] = createDebug.coerce(args[0]);
		      if (typeof args[0] !== 'string') {
		        // Anything else let's inspect with %O
		        args.unshift('%O');
		      }

		      // Apply any `formatters` transformations
		      let index = 0;
		      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
		        // If we encounter an escaped % then don't increase the array index
		        if (match === '%%') {
		          return '%';
		        }
		        index++;
		        const formatter = createDebug.formatters[format];
		        if (typeof formatter === 'function') {
		          const val = args[index];
		          match = formatter.call(self, val);

		          // Now we need to remove `args[index]` since it's inlined in the `format`
		          args.splice(index, 1);
		          index--;
		        }
		        return match;
		      });

		      // Apply env-specific formatting (colors, etc.)
		      createDebug.formatArgs.call(self, args);
		      const logFn = self.log || createDebug.log;
		      logFn.apply(self, args);
		    }
		    debug.namespace = namespace;
		    debug.useColors = createDebug.useColors();
		    debug.color = createDebug.selectColor(namespace);
		    debug.extend = extend;
		    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		    Object.defineProperty(debug, 'enabled', {
		      enumerable: true,
		      configurable: false,
		      get: () => {
		        if (enableOverride !== null) {
		          return enableOverride;
		        }
		        if (namespacesCache !== createDebug.namespaces) {
		          namespacesCache = createDebug.namespaces;
		          enabledCache = createDebug.enabled(namespace);
		        }
		        return enabledCache;
		      },
		      set: v => {
		        enableOverride = v;
		      }
		    });

		    // Env-specific initialization logic for debug instances
		    if (typeof createDebug.init === 'function') {
		      createDebug.init(debug);
		    }
		    return debug;
		  }
		  function extend(namespace, delimiter) {
		    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		    newDebug.log = this.log;
		    return newDebug;
		  }

		  /**
		  * Enables a debug mode by namespaces. This can include modes
		  * separated by a colon and wildcards.
		  *
		  * @param {String} namespaces
		  * @api public
		  */
		  function enable(namespaces) {
		    createDebug.save(namespaces);
		    createDebug.namespaces = namespaces;
		    createDebug.names = [];
		    createDebug.skips = [];
		    let i;
		    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		    const len = split.length;
		    for (i = 0; i < len; i++) {
		      if (!split[i]) {
		        // ignore empty strings
		        continue;
		      }
		      namespaces = split[i].replace(/\*/g, '.*?');
		      if (namespaces[0] === '-') {
		        createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
		      } else {
		        createDebug.names.push(new RegExp('^' + namespaces + '$'));
		      }
		    }
		  }

		  /**
		  * Disable debug output.
		  *
		  * @return {String} namespaces
		  * @api public
		  */
		  function disable() {
		    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
		    createDebug.enable('');
		    return namespaces;
		  }

		  /**
		  * Returns true if the given mode name is enabled, false otherwise.
		  *
		  * @param {String} name
		  * @return {Boolean}
		  * @api public
		  */
		  function enabled(name) {
		    if (name[name.length - 1] === '*') {
		      return true;
		    }
		    let i;
		    let len;
		    for (i = 0, len = createDebug.skips.length; i < len; i++) {
		      if (createDebug.skips[i].test(name)) {
		        return false;
		      }
		    }
		    for (i = 0, len = createDebug.names.length; i < len; i++) {
		      if (createDebug.names[i].test(name)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		  * Convert regexp to namespace
		  *
		  * @param {RegExp} regxep
		  * @return {String} namespace
		  * @api private
		  */
		  function toNamespace(regexp) {
		    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
		  }

		  /**
		  * Coerce `val`.
		  *
		  * @param {Mixed} val
		  * @return {Mixed}
		  * @api private
		  */
		  function coerce(val) {
		    if (val instanceof Error) {
		      return val.stack || val.message;
		    }
		    return val;
		  }

		  /**
		  * XXX DO NOT USE. This is a temporary stub function.
		  * XXX It WILL be removed in the next major release.
		  */
		  function destroy() {
		    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		  }
		  createDebug.enable(createDebug.load());
		  return createDebug;
		}
		common$1 = setup;
		return common$1;
	}

	/* eslint-env browser */
	browser.exports;

	var hasRequiredBrowser;

	function requireBrowser () {
		if (hasRequiredBrowser) return browser.exports;
		hasRequiredBrowser = 1;
		(function (module, exports) {
			/**
			 * This is the web browser implementation of `debug()`.
			 */

			exports.formatArgs = formatArgs;
			exports.save = save;
			exports.load = load;
			exports.useColors = useColors;
			exports.storage = localstorage();
			exports.destroy = (() => {
			  let warned = false;
			  return () => {
			    if (!warned) {
			      warned = true;
			      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
			    }
			  };
			})();

			/**
			 * Colors.
			 */

			exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

			/**
			 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
			 * and the Firebug extension (any Firefox version) are known
			 * to support "%c" CSS customizations.
			 *
			 * TODO: add a `localStorage` variable to explicitly enable/disable colors
			 */

			// eslint-disable-next-line complexity
			function useColors() {
			  // NB: In an Electron preload script, document will be defined but not fully
			  // initialized. Since we know we're in Chrome, we'll just detect this case
			  // explicitly
			  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			    return true;
			  }

			  // Internet Explorer and Edge do not support colors.
			  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			    return false;
			  }

			  // Is webkit? http://stackoverflow.com/a/16459606/376773
			  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
			  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
			  // Is firebug? http://stackoverflow.com/a/398120/376773
			  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
			  // Is firefox >= v31?
			  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
			  // Double check webkit in userAgent just in case we are in a worker
			  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
			}

			/**
			 * Colorize log arguments if enabled.
			 *
			 * @api public
			 */

			function formatArgs(args) {
			  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
			  if (!this.useColors) {
			    return;
			  }
			  const c = 'color: ' + this.color;
			  args.splice(1, 0, c, 'color: inherit');

			  // The final "%c" is somewhat tricky, because there could be other
			  // arguments passed either before or after the %c, so we need to
			  // figure out the correct index to insert the CSS into
			  let index = 0;
			  let lastC = 0;
			  args[0].replace(/%[a-zA-Z%]/g, match => {
			    if (match === '%%') {
			      return;
			    }
			    index++;
			    if (match === '%c') {
			      // We only are interested in the *last* %c
			      // (the user may have provided their own)
			      lastC = index;
			    }
			  });
			  args.splice(lastC, 0, c);
			}

			/**
			 * Invokes `console.debug()` when available.
			 * No-op when `console.debug` is not a "function".
			 * If `console.debug` is not available, falls back
			 * to `console.log`.
			 *
			 * @api public
			 */
			exports.log = console.debug || console.log || (() => {});

			/**
			 * Save `namespaces`.
			 *
			 * @param {String} namespaces
			 * @api private
			 */
			function save(namespaces) {
			  try {
			    if (namespaces) {
			      exports.storage.setItem('debug', namespaces);
			    } else {
			      exports.storage.removeItem('debug');
			    }
			  } catch (error) {
			    // Swallow
			    // XXX (@Qix-) should we be logging these?
			  }
			}

			/**
			 * Load `namespaces`.
			 *
			 * @return {String} returns the previously persisted debug modes
			 * @api private
			 */
			function load() {
			  let r;
			  try {
			    r = exports.storage.getItem('debug');
			  } catch (error) {
			    // Swallow
			    // XXX (@Qix-) should we be logging these?
			  }

			  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
			  if (!r && typeof process !== 'undefined' && 'env' in process) {
			    r = process.env.DEBUG;
			  }
			  return r;
			}

			/**
			 * Localstorage attempts to return the localstorage.
			 *
			 * This is necessary because safari throws
			 * when a user disables cookies/localstorage
			 * and you attempt to access it.
			 *
			 * @return {LocalStorage}
			 * @api private
			 */

			function localstorage() {
			  try {
			    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			    // The Browser also has localStorage in the global context.
			    return localStorage;
			  } catch (error) {
			    // Swallow
			    // XXX (@Qix-) should we be logging these?
			  }
			}
			module.exports = requireCommon$1()(exports);
			const {
			  formatters
			} = module.exports;

			/**
			 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
			 */

			formatters.j = function (v) {
			  try {
			    return JSON.stringify(v);
			  } catch (error) {
			    return '[UnexpectedJSONParseError]: ' + error.message;
			  }
			}; 
		} (browser, browser.exports));
		return browser.exports;
	}

	var node$2 = {exports: {}};

	var hasFlag;
	var hasRequiredHasFlag;

	function requireHasFlag () {
		if (hasRequiredHasFlag) return hasFlag;
		hasRequiredHasFlag = 1;

		hasFlag = (flag, argv) => {
		  argv = argv || process.argv;
		  const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
		  const pos = argv.indexOf(prefix + flag);
		  const terminatorPos = argv.indexOf('--');
		  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
		};
		return hasFlag;
	}

	var supportsColor_1;
	var hasRequiredSupportsColor;

	function requireSupportsColor () {
		if (hasRequiredSupportsColor) return supportsColor_1;
		hasRequiredSupportsColor = 1;

		const os = require$$0__default$1["default"];
		const hasFlag = requireHasFlag();
		const env = process.env;
		let forceColor;
		if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
		  forceColor = false;
		} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
		  forceColor = true;
		}
		if ('FORCE_COLOR' in env) {
		  forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
		}
		function translateLevel(level) {
		  if (level === 0) {
		    return false;
		  }
		  return {
		    level,
		    hasBasic: true,
		    has256: level >= 2,
		    has16m: level >= 3
		  };
		}
		function supportsColor(stream) {
		  if (forceColor === false) {
		    return 0;
		  }
		  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
		    return 3;
		  }
		  if (hasFlag('color=256')) {
		    return 2;
		  }
		  if (stream && !stream.isTTY && forceColor !== true) {
		    return 0;
		  }
		  const min = forceColor ? 1 : 0;
		  if (process.platform === 'win32') {
		    // Node.js 7.5.0 is the first version of Node.js to include a patch to
		    // libuv that enables 256 color output on Windows. Anything earlier and it
		    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
		    // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		    // release that supports 256 colors. Windows 10 build 14931 is the first release
		    // that supports 16m/TrueColor.
		    const osRelease = os.release().split('.');
		    if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
		      return Number(osRelease[2]) >= 14931 ? 3 : 2;
		    }
		    return 1;
		  }
		  if ('CI' in env) {
		    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
		      return 1;
		    }
		    return min;
		  }
		  if ('TEAMCITY_VERSION' in env) {
		    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		  }
		  if (env.COLORTERM === 'truecolor') {
		    return 3;
		  }
		  if ('TERM_PROGRAM' in env) {
		    const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
		    switch (env.TERM_PROGRAM) {
		      case 'iTerm.app':
		        return version >= 3 ? 3 : 2;
		      case 'Apple_Terminal':
		        return 2;
		      // No default
		    }
		  }
		  if (/-256(color)?$/i.test(env.TERM)) {
		    return 2;
		  }
		  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		    return 1;
		  }
		  if ('COLORTERM' in env) {
		    return 1;
		  }
		  if (env.TERM === 'dumb') {
		    return min;
		  }
		  return min;
		}
		function getSupportLevel(stream) {
		  const level = supportsColor(stream);
		  return translateLevel(level);
		}
		supportsColor_1 = {
		  supportsColor: getSupportLevel,
		  stdout: getSupportLevel(process.stdout),
		  stderr: getSupportLevel(process.stderr)
		};
		return supportsColor_1;
	}

	/**
	 * Module dependencies.
	 */
	node$2.exports;

	var hasRequiredNode$2;

	function requireNode$2 () {
		if (hasRequiredNode$2) return node$2.exports;
		hasRequiredNode$2 = 1;
		(function (module, exports) {
			const tty = require$$0__default$2["default"];
			const util = require$$1__default["default"];

			/**
			 * This is the Node.js implementation of `debug()`.
			 */

			exports.init = init;
			exports.log = log;
			exports.formatArgs = formatArgs;
			exports.save = save;
			exports.load = load;
			exports.useColors = useColors;
			exports.destroy = util.deprecate(() => {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');

			/**
			 * Colors.
			 */

			exports.colors = [6, 2, 3, 4, 5, 1];
			try {
			  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
			  // eslint-disable-next-line import/no-extraneous-dependencies
			  const supportsColor = requireSupportsColor();
			  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
			    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
			  }
			} catch (error) {
			  // Swallow - we only care if `supports-color` is available; it doesn't have to be.
			}

			/**
			 * Build up the default `inspectOpts` object from the environment variables.
			 *
			 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
			 */

			exports.inspectOpts = Object.keys(process.env).filter(key => {
			  return /^debug_/i.test(key);
			}).reduce((obj, key) => {
			  // Camel-case
			  const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
			    return k.toUpperCase();
			  });

			  // Coerce string value into JS value
			  let val = process.env[key];
			  if (/^(yes|on|true|enabled)$/i.test(val)) {
			    val = true;
			  } else if (/^(no|off|false|disabled)$/i.test(val)) {
			    val = false;
			  } else if (val === 'null') {
			    val = null;
			  } else {
			    val = Number(val);
			  }
			  obj[prop] = val;
			  return obj;
			}, {});

			/**
			 * Is stdout a TTY? Colored output is enabled when `true`.
			 */

			function useColors() {
			  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
			}

			/**
			 * Adds ANSI color escape codes if enabled.
			 *
			 * @api public
			 */

			function formatArgs(args) {
			  const {
			    namespace: name,
			    useColors
			  } = this;
			  if (useColors) {
			    const c = this.color;
			    const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
			    const prefix = `  ${colorCode};1m${name} \u001B[0m`;
			    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
			    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
			  } else {
			    args[0] = getDate() + name + ' ' + args[0];
			  }
			}
			function getDate() {
			  if (exports.inspectOpts.hideDate) {
			    return '';
			  }
			  return new Date().toISOString() + ' ';
			}

			/**
			 * Invokes `util.format()` with the specified arguments and writes to stderr.
			 */

			function log(...args) {
			  return process.stderr.write(util.format(...args) + '\n');
			}

			/**
			 * Save `namespaces`.
			 *
			 * @param {String} namespaces
			 * @api private
			 */
			function save(namespaces) {
			  if (namespaces) {
			    process.env.DEBUG = namespaces;
			  } else {
			    // If you set a process.env field to null or undefined, it gets cast to the
			    // string 'null' or 'undefined'. Just delete instead.
			    delete process.env.DEBUG;
			  }
			}

			/**
			 * Load `namespaces`.
			 *
			 * @return {String} returns the previously persisted debug modes
			 * @api private
			 */

			function load() {
			  return process.env.DEBUG;
			}

			/**
			 * Init logic for `debug` instances.
			 *
			 * Create a new `inspectOpts` object in case `useColors` is set
			 * differently for a particular `debug` instance.
			 */

			function init(debug) {
			  debug.inspectOpts = {};
			  const keys = Object.keys(exports.inspectOpts);
			  for (let i = 0; i < keys.length; i++) {
			    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
			  }
			}
			module.exports = requireCommon$1()(exports);
			const {
			  formatters
			} = module.exports;

			/**
			 * Map %o to `util.inspect()`, all on a single line.
			 */

			formatters.o = function (v) {
			  this.inspectOpts.colors = this.useColors;
			  return util.inspect(v, this.inspectOpts).split('\n').map(str => str.trim()).join(' ');
			};

			/**
			 * Map %O to `util.inspect()`, allowing multiple lines if needed.
			 */

			formatters.O = function (v) {
			  this.inspectOpts.colors = this.useColors;
			  return util.inspect(v, this.inspectOpts);
			}; 
		} (node$2, node$2.exports));
		return node$2.exports;
	}

	/**
	 * Detect Electron renderer / nwjs process, which is node, but we should
	 * treat as a browser.
	 */

	var hasRequiredSrc;

	function requireSrc () {
		if (hasRequiredSrc) return src.exports;
		hasRequiredSrc = 1;
		if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
		  src.exports = requireBrowser();
		} else {
		  src.exports = requireNode$2();
		}
		return src.exports;
	}

	var debug_1;
	var hasRequiredDebug;

	function requireDebug () {
		if (hasRequiredDebug) return debug_1;
		hasRequiredDebug = 1;
		var debug;
		debug_1 = function () {
		  if (!debug) {
		    try {
		      /* eslint global-require: off */
		      debug = requireSrc()("follow-redirects");
		    } catch (error) {/* */}
		    if (typeof debug !== "function") {
		      debug = function () {/* */};
		    }
		  }
		  debug.apply(null, arguments);
		};
		return debug_1;
	}

	var hasRequiredFollowRedirects;

	function requireFollowRedirects () {
		if (hasRequiredFollowRedirects) return followRedirects$1.exports;
		hasRequiredFollowRedirects = 1;
		var url = require$$0__default["default"];
		var URL = url.URL;
		var http = require$$2__default["default"];
		var https = require$$4__default["default"];
		var Writable = stream__default["default"].Writable;
		var assert = require$$0__default$3["default"];
		var debug = requireDebug();

		// Whether to use the native URL object or the legacy url module
		var useNativeURL = false;
		try {
		  assert(new URL());
		} catch (error) {
		  useNativeURL = error.code === "ERR_INVALID_URL";
		}

		// URL fields to preserve in copy operations
		var preservedUrlFields = ["auth", "host", "hostname", "href", "path", "pathname", "port", "protocol", "query", "search"];

		// Create handlers that pass events from native requests
		var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
		var eventHandlers = Object.create(null);
		events.forEach(function (event) {
		  eventHandlers[event] = function (arg1, arg2, arg3) {
		    this._redirectable.emit(event, arg1, arg2, arg3);
		  };
		});

		// Error types with codes
		var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
		var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
		var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded", RedirectionError);
		var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
		var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");

		// istanbul ignore next
		var destroy = Writable.prototype.destroy || noop;

		// An HTTP(S) request that can be redirected
		function RedirectableRequest(options, responseCallback) {
		  // Initialize the request
		  Writable.call(this);
		  this._sanitizeOptions(options);
		  this._options = options;
		  this._ended = false;
		  this._ending = false;
		  this._redirectCount = 0;
		  this._redirects = [];
		  this._requestBodyLength = 0;
		  this._requestBodyBuffers = [];

		  // Attach a callback if passed
		  if (responseCallback) {
		    this.on("response", responseCallback);
		  }

		  // React to responses of native requests
		  var self = this;
		  this._onNativeResponse = function (response) {
		    try {
		      self._processResponse(response);
		    } catch (cause) {
		      self.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({
		        cause: cause
		      }));
		    }
		  };

		  // Perform the first request
		  this._performRequest();
		}
		RedirectableRequest.prototype = Object.create(Writable.prototype);
		RedirectableRequest.prototype.abort = function () {
		  destroyRequest(this._currentRequest);
		  this._currentRequest.abort();
		  this.emit("abort");
		};
		RedirectableRequest.prototype.destroy = function (error) {
		  destroyRequest(this._currentRequest, error);
		  destroy.call(this, error);
		  return this;
		};

		// Writes buffered data to the current native request
		RedirectableRequest.prototype.write = function (data, encoding, callback) {
		  // Writing is not allowed if end has been called
		  if (this._ending) {
		    throw new WriteAfterEndError();
		  }

		  // Validate input and shift parameters if necessary
		  if (!isString(data) && !isBuffer(data)) {
		    throw new TypeError("data should be a string, Buffer or Uint8Array");
		  }
		  if (isFunction(encoding)) {
		    callback = encoding;
		    encoding = null;
		  }

		  // Ignore empty buffers, since writing them doesn't invoke the callback
		  // https://github.com/nodejs/node/issues/22066
		  if (data.length === 0) {
		    if (callback) {
		      callback();
		    }
		    return;
		  }
		  // Only write when we don't exceed the maximum body length
		  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
		    this._requestBodyLength += data.length;
		    this._requestBodyBuffers.push({
		      data: data,
		      encoding: encoding
		    });
		    this._currentRequest.write(data, encoding, callback);
		  }
		  // Error when we exceed the maximum body length
		  else {
		    this.emit("error", new MaxBodyLengthExceededError());
		    this.abort();
		  }
		};

		// Ends the current native request
		RedirectableRequest.prototype.end = function (data, encoding, callback) {
		  // Shift parameters if necessary
		  if (isFunction(data)) {
		    callback = data;
		    data = encoding = null;
		  } else if (isFunction(encoding)) {
		    callback = encoding;
		    encoding = null;
		  }

		  // Write data if needed and end
		  if (!data) {
		    this._ended = this._ending = true;
		    this._currentRequest.end(null, null, callback);
		  } else {
		    var self = this;
		    var currentRequest = this._currentRequest;
		    this.write(data, encoding, function () {
		      self._ended = true;
		      currentRequest.end(null, null, callback);
		    });
		    this._ending = true;
		  }
		};

		// Sets a header value on the current native request
		RedirectableRequest.prototype.setHeader = function (name, value) {
		  this._options.headers[name] = value;
		  this._currentRequest.setHeader(name, value);
		};

		// Clears a header value on the current native request
		RedirectableRequest.prototype.removeHeader = function (name) {
		  delete this._options.headers[name];
		  this._currentRequest.removeHeader(name);
		};

		// Global timeout for all underlying requests
		RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
		  var self = this;

		  // Destroys the socket on timeout
		  function destroyOnTimeout(socket) {
		    socket.setTimeout(msecs);
		    socket.removeListener("timeout", socket.destroy);
		    socket.addListener("timeout", socket.destroy);
		  }

		  // Sets up a timer to trigger a timeout event
		  function startTimer(socket) {
		    if (self._timeout) {
		      clearTimeout(self._timeout);
		    }
		    self._timeout = setTimeout(function () {
		      self.emit("timeout");
		      clearTimer();
		    }, msecs);
		    destroyOnTimeout(socket);
		  }

		  // Stops a timeout from triggering
		  function clearTimer() {
		    // Clear the timeout
		    if (self._timeout) {
		      clearTimeout(self._timeout);
		      self._timeout = null;
		    }

		    // Clean up all attached listeners
		    self.removeListener("abort", clearTimer);
		    self.removeListener("error", clearTimer);
		    self.removeListener("response", clearTimer);
		    self.removeListener("close", clearTimer);
		    if (callback) {
		      self.removeListener("timeout", callback);
		    }
		    if (!self.socket) {
		      self._currentRequest.removeListener("socket", startTimer);
		    }
		  }

		  // Attach callback if passed
		  if (callback) {
		    this.on("timeout", callback);
		  }

		  // Start the timer if or when the socket is opened
		  if (this.socket) {
		    startTimer(this.socket);
		  } else {
		    this._currentRequest.once("socket", startTimer);
		  }

		  // Clean up on events
		  this.on("socket", destroyOnTimeout);
		  this.on("abort", clearTimer);
		  this.on("error", clearTimer);
		  this.on("response", clearTimer);
		  this.on("close", clearTimer);
		  return this;
		};

		// Proxy all other public ClientRequest methods
		["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
		  RedirectableRequest.prototype[method] = function (a, b) {
		    return this._currentRequest[method](a, b);
		  };
		});

		// Proxy all public ClientRequest properties
		["aborted", "connection", "socket"].forEach(function (property) {
		  Object.defineProperty(RedirectableRequest.prototype, property, {
		    get: function () {
		      return this._currentRequest[property];
		    }
		  });
		});
		RedirectableRequest.prototype._sanitizeOptions = function (options) {
		  // Ensure headers are always present
		  if (!options.headers) {
		    options.headers = {};
		  }

		  // Since http.request treats host as an alias of hostname,
		  // but the url module interprets host as hostname plus port,
		  // eliminate the host property to avoid confusion.
		  if (options.host) {
		    // Use hostname if set, because it has precedence
		    if (!options.hostname) {
		      options.hostname = options.host;
		    }
		    delete options.host;
		  }

		  // Complete the URL object when necessary
		  if (!options.pathname && options.path) {
		    var searchPos = options.path.indexOf("?");
		    if (searchPos < 0) {
		      options.pathname = options.path;
		    } else {
		      options.pathname = options.path.substring(0, searchPos);
		      options.search = options.path.substring(searchPos);
		    }
		  }
		};

		// Executes the next native request (initial or redirect)
		RedirectableRequest.prototype._performRequest = function () {
		  // Load the native protocol
		  var protocol = this._options.protocol;
		  var nativeProtocol = this._options.nativeProtocols[protocol];
		  if (!nativeProtocol) {
		    throw new TypeError("Unsupported protocol " + protocol);
		  }

		  // If specified, use the agent corresponding to the protocol
		  // (HTTP and HTTPS use different types of agents)
		  if (this._options.agents) {
		    var scheme = protocol.slice(0, -1);
		    this._options.agent = this._options.agents[scheme];
		  }

		  // Create the native request and set up its event handlers
		  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
		  request._redirectable = this;
		  for (var event of events) {
		    request.on(event, eventHandlers[event]);
		  }

		  // RFC7230§5.3.1: When making a request directly to an origin server, […]
		  // a client MUST send only the absolute path […] as the request-target.
		  this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) :
		  // When making a request to a proxy, […]
		  // a client MUST send the target URI in absolute-form […].
		  this._options.path;

		  // End a redirected request
		  // (The first request must be ended explicitly with RedirectableRequest#end)
		  if (this._isRedirect) {
		    // Write the request entity and end
		    var i = 0;
		    var self = this;
		    var buffers = this._requestBodyBuffers;
		    (function writeNext(error) {
		      // Only write if this request has not been redirected yet
		      /* istanbul ignore else */
		      if (request === self._currentRequest) {
		        // Report any write errors
		        /* istanbul ignore if */
		        if (error) {
		          self.emit("error", error);
		        }
		        // Write the next buffer if there are still left
		        else if (i < buffers.length) {
		          var buffer = buffers[i++];
		          /* istanbul ignore else */
		          if (!request.finished) {
		            request.write(buffer.data, buffer.encoding, writeNext);
		          }
		        }
		        // End the request if `end` has been called on us
		        else if (self._ended) {
		          request.end();
		        }
		      }
		    })();
		  }
		};

		// Processes a response from the current native request
		RedirectableRequest.prototype._processResponse = function (response) {
		  // Store the redirected response
		  var statusCode = response.statusCode;
		  if (this._options.trackRedirects) {
		    this._redirects.push({
		      url: this._currentUrl,
		      headers: response.headers,
		      statusCode: statusCode
		    });
		  }

		  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
		  // that further action needs to be taken by the user agent in order to
		  // fulfill the request. If a Location header field is provided,
		  // the user agent MAY automatically redirect its request to the URI
		  // referenced by the Location field value,
		  // even if the specific status code is not understood.

		  // If the response is not a redirect; return it as-is
		  var location = response.headers.location;
		  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
		    response.responseUrl = this._currentUrl;
		    response.redirects = this._redirects;
		    this.emit("response", response);

		    // Clean up
		    this._requestBodyBuffers = [];
		    return;
		  }

		  // The response is a redirect, so abort the current request
		  destroyRequest(this._currentRequest);
		  // Discard the remainder of the response to avoid waiting for data
		  response.destroy();

		  // RFC7231§6.4: A client SHOULD detect and intervene
		  // in cyclical redirections (i.e., "infinite" redirection loops).
		  if (++this._redirectCount > this._options.maxRedirects) {
		    throw new TooManyRedirectsError();
		  }

		  // Store the request headers if applicable
		  var requestHeaders;
		  var beforeRedirect = this._options.beforeRedirect;
		  if (beforeRedirect) {
		    requestHeaders = Object.assign({
		      // The Host header was set by nativeProtocol.request
		      Host: response.req.getHeader("host")
		    }, this._options.headers);
		  }

		  // RFC7231§6.4: Automatic redirection needs to done with
		  // care for methods not known to be safe, […]
		  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
		  // the request method from POST to GET for the subsequent request.
		  var method = this._options.method;
		  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
		  // RFC7231§6.4.4: The 303 (See Other) status code indicates that
		  // the server is redirecting the user agent to a different resource […]
		  // A user agent can perform a retrieval request targeting that URI
		  // (a GET or HEAD request if using HTTP) […]
		  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
		    this._options.method = "GET";
		    // Drop a possible entity and headers related to it
		    this._requestBodyBuffers = [];
		    removeMatchingHeaders(/^content-/i, this._options.headers);
		  }

		  // Drop the Host header, as the redirect might lead to a different host
		  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

		  // If the redirect is relative, carry over the host of the last request
		  var currentUrlParts = parseUrl(this._currentUrl);
		  var currentHost = currentHostHeader || currentUrlParts.host;
		  var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
		    host: currentHost
		  }));

		  // Create the redirected request
		  var redirectUrl = resolveUrl(location, currentUrl);
		  debug("redirecting to", redirectUrl.href);
		  this._isRedirect = true;
		  spreadUrlObject(redirectUrl, this._options);

		  // Drop confidential headers when redirecting to a less secure protocol
		  // or to a different domain that is not a superdomain
		  if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
		    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
		  }

		  // Evaluate the beforeRedirect callback
		  if (isFunction(beforeRedirect)) {
		    var responseDetails = {
		      headers: response.headers,
		      statusCode: statusCode
		    };
		    var requestDetails = {
		      url: currentUrl,
		      method: method,
		      headers: requestHeaders
		    };
		    beforeRedirect(this._options, responseDetails, requestDetails);
		    this._sanitizeOptions(this._options);
		  }

		  // Perform the redirected request
		  this._performRequest();
		};

		// Wraps the key/value object of protocols with redirect functionality
		function wrap(protocols) {
		  // Default settings
		  var exports = {
		    maxRedirects: 21,
		    maxBodyLength: 10 * 1024 * 1024
		  };

		  // Wrap each protocol
		  var nativeProtocols = {};
		  Object.keys(protocols).forEach(function (scheme) {
		    var protocol = scheme + ":";
		    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
		    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

		    // Executes a request, following redirects
		    function request(input, options, callback) {
		      // Parse parameters, ensuring that input is an object
		      if (isURL(input)) {
		        input = spreadUrlObject(input);
		      } else if (isString(input)) {
		        input = spreadUrlObject(parseUrl(input));
		      } else {
		        callback = options;
		        options = validateUrl(input);
		        input = {
		          protocol: protocol
		        };
		      }
		      if (isFunction(options)) {
		        callback = options;
		        options = null;
		      }

		      // Set defaults
		      options = Object.assign({
		        maxRedirects: exports.maxRedirects,
		        maxBodyLength: exports.maxBodyLength
		      }, input, options);
		      options.nativeProtocols = nativeProtocols;
		      if (!isString(options.host) && !isString(options.hostname)) {
		        options.hostname = "::1";
		      }
		      assert.equal(options.protocol, protocol, "protocol mismatch");
		      debug("options", options);
		      return new RedirectableRequest(options, callback);
		    }

		    // Executes a GET request, following redirects
		    function get(input, options, callback) {
		      var wrappedRequest = wrappedProtocol.request(input, options, callback);
		      wrappedRequest.end();
		      return wrappedRequest;
		    }

		    // Expose the properties on the wrapped protocol
		    Object.defineProperties(wrappedProtocol, {
		      request: {
		        value: request,
		        configurable: true,
		        enumerable: true,
		        writable: true
		      },
		      get: {
		        value: get,
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }
		    });
		  });
		  return exports;
		}
		function noop() {/* empty */}
		function parseUrl(input) {
		  var parsed;
		  /* istanbul ignore else */
		  if (useNativeURL) {
		    parsed = new URL(input);
		  } else {
		    // Ensure the URL is valid and absolute
		    parsed = validateUrl(url.parse(input));
		    if (!isString(parsed.protocol)) {
		      throw new InvalidUrlError({
		        input
		      });
		    }
		  }
		  return parsed;
		}
		function resolveUrl(relative, base) {
		  /* istanbul ignore next */
		  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
		}
		function validateUrl(input) {
		  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
		    throw new InvalidUrlError({
		      input: input.href || input
		    });
		  }
		  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
		    throw new InvalidUrlError({
		      input: input.href || input
		    });
		  }
		  return input;
		}
		function spreadUrlObject(urlObject, target) {
		  var spread = target || {};
		  for (var key of preservedUrlFields) {
		    spread[key] = urlObject[key];
		  }

		  // Fix IPv6 hostname
		  if (spread.hostname.startsWith("[")) {
		    spread.hostname = spread.hostname.slice(1, -1);
		  }
		  // Ensure port is a number
		  if (spread.port !== "") {
		    spread.port = Number(spread.port);
		  }
		  // Concatenate path
		  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
		  return spread;
		}
		function removeMatchingHeaders(regex, headers) {
		  var lastValue;
		  for (var header in headers) {
		    if (regex.test(header)) {
		      lastValue = headers[header];
		      delete headers[header];
		    }
		  }
		  return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
		}
		function createErrorType(code, message, baseClass) {
		  // Create constructor
		  function CustomError(properties) {
		    Error.captureStackTrace(this, this.constructor);
		    Object.assign(this, properties || {});
		    this.code = code;
		    this.message = this.cause ? message + ": " + this.cause.message : message;
		  }

		  // Attach constructor and set default properties
		  CustomError.prototype = new (baseClass || Error)();
		  Object.defineProperties(CustomError.prototype, {
		    constructor: {
		      value: CustomError,
		      enumerable: false
		    },
		    name: {
		      value: "Error [" + code + "]",
		      enumerable: false
		    }
		  });
		  return CustomError;
		}
		function destroyRequest(request, error) {
		  for (var event of events) {
		    request.removeListener(event, eventHandlers[event]);
		  }
		  request.on("error", noop);
		  request.destroy(error);
		}
		function isSubdomain(subdomain, domain) {
		  assert(isString(subdomain) && isString(domain));
		  var dot = subdomain.length - domain.length - 1;
		  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
		}
		function isString(value) {
		  return typeof value === "string" || value instanceof String;
		}
		function isFunction(value) {
		  return typeof value === "function";
		}
		function isBuffer(value) {
		  return typeof value === "object" && "length" in value;
		}
		function isURL(value) {
		  return URL && value instanceof URL;
		}

		// Exports
		followRedirects$1.exports = wrap({
		  http: http,
		  https: https
		});
		followRedirects$1.exports.wrap = wrap;
		return followRedirects$1.exports;
	}

	var followRedirectsExports = requireFollowRedirects();
	var followRedirects = /*@__PURE__*/getDefaultExportFromCjs(followRedirectsExports);

	const VERSION$1 = "1.6.5";

	function parseProtocol(url) {
	  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
	  return match && match[1] || '';
	}

	const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

	/**
	 * Parse data uri to a Buffer or Blob
	 *
	 * @param {String} uri
	 * @param {?Boolean} asBlob
	 * @param {?Object} options
	 * @param {?Function} options.Blob
	 *
	 * @returns {Buffer|Blob}
	 */
	function fromDataURI(uri, asBlob, options) {
	  const _Blob = options && options.Blob || platform.classes.Blob;
	  const protocol = parseProtocol(uri);
	  if (asBlob === undefined && _Blob) {
	    asBlob = true;
	  }
	  if (protocol === 'data') {
	    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
	    const match = DATA_URL_PATTERN.exec(uri);
	    if (!match) {
	      throw new AxiosError$1('Invalid URL', AxiosError$1.ERR_INVALID_URL);
	    }
	    const mime = match[1];
	    const isBase64 = match[2];
	    const body = match[3];
	    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');
	    if (asBlob) {
	      if (!_Blob) {
	        throw new AxiosError$1('Blob is not supported', AxiosError$1.ERR_NOT_SUPPORT);
	      }
	      return new _Blob([buffer], {
	        type: mime
	      });
	    }
	    return buffer;
	  }
	  throw new AxiosError$1('Unsupported protocol ' + protocol, AxiosError$1.ERR_NOT_SUPPORT);
	}

	/**
	 * Throttle decorator
	 * @param {Function} fn
	 * @param {Number} freq
	 * @return {Function}
	 */
	function throttle(fn, freq) {
	  let timestamp = 0;
	  const threshold = 1000 / freq;
	  let timer = null;
	  return function throttled(force, args) {
	    const now = Date.now();
	    if (force || now - timestamp > threshold) {
	      if (timer) {
	        clearTimeout(timer);
	        timer = null;
	      }
	      timestamp = now;
	      return fn.apply(null, args);
	    }
	    if (!timer) {
	      timer = setTimeout(() => {
	        timer = null;
	        timestamp = Date.now();
	        return fn.apply(null, args);
	      }, threshold - (now - timestamp));
	    }
	  };
	}

	/**
	 * Calculate data maxRate
	 * @param {Number} [samplesCount= 10]
	 * @param {Number} [min= 1000]
	 * @returns {Function}
	 */
	function speedometer(samplesCount, min) {
	  samplesCount = samplesCount || 10;
	  const bytes = new Array(samplesCount);
	  const timestamps = new Array(samplesCount);
	  let head = 0;
	  let tail = 0;
	  let firstSampleTS;
	  min = min !== undefined ? min : 1000;
	  return function push(chunkLength) {
	    const now = Date.now();
	    const startedAt = timestamps[tail];
	    if (!firstSampleTS) {
	      firstSampleTS = now;
	    }
	    bytes[head] = chunkLength;
	    timestamps[head] = now;
	    let i = tail;
	    let bytesCount = 0;
	    while (i !== head) {
	      bytesCount += bytes[i++];
	      i = i % samplesCount;
	    }
	    head = (head + 1) % samplesCount;
	    if (head === tail) {
	      tail = (tail + 1) % samplesCount;
	    }
	    if (now - firstSampleTS < min) {
	      return;
	    }
	    const passed = startedAt && now - startedAt;
	    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
	  };
	}

	const kInternals = Symbol('internals');
	class AxiosTransformStream extends stream__default["default"].Transform {
	  constructor(options) {
	    options = utils$3.toFlatObject(options, {
	      maxRate: 0,
	      chunkSize: 64 * 1024,
	      minChunkSize: 100,
	      timeWindow: 500,
	      ticksRate: 2,
	      samplesCount: 15
	    }, null, (prop, source) => {
	      return !utils$3.isUndefined(source[prop]);
	    });
	    super({
	      readableHighWaterMark: options.chunkSize
	    });
	    const self = this;
	    const internals = this[kInternals] = {
	      length: options.length,
	      timeWindow: options.timeWindow,
	      ticksRate: options.ticksRate,
	      chunkSize: options.chunkSize,
	      maxRate: options.maxRate,
	      minChunkSize: options.minChunkSize,
	      bytesSeen: 0,
	      isCaptured: false,
	      notifiedBytesLoaded: 0,
	      ts: Date.now(),
	      bytes: 0,
	      onReadCallback: null
	    };
	    const _speedometer = speedometer(internals.ticksRate * options.samplesCount, internals.timeWindow);
	    this.on('newListener', event => {
	      if (event === 'progress') {
	        if (!internals.isCaptured) {
	          internals.isCaptured = true;
	        }
	      }
	    });
	    let bytesNotified = 0;
	    internals.updateProgress = throttle(function throttledHandler() {
	      const totalBytes = internals.length;
	      const bytesTransferred = internals.bytesSeen;
	      const progressBytes = bytesTransferred - bytesNotified;
	      if (!progressBytes || self.destroyed) return;
	      const rate = _speedometer(progressBytes);
	      bytesNotified = bytesTransferred;
	      process.nextTick(() => {
	        self.emit('progress', {
	          'loaded': bytesTransferred,
	          'total': totalBytes,
	          'progress': totalBytes ? bytesTransferred / totalBytes : undefined,
	          'bytes': progressBytes,
	          'rate': rate ? rate : undefined,
	          'estimated': rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : undefined
	        });
	      });
	    }, internals.ticksRate);
	    const onFinish = () => {
	      internals.updateProgress(true);
	    };
	    this.once('end', onFinish);
	    this.once('error', onFinish);
	  }
	  _read(size) {
	    const internals = this[kInternals];
	    if (internals.onReadCallback) {
	      internals.onReadCallback();
	    }
	    return super._read(size);
	  }
	  _transform(chunk, encoding, callback) {
	    const self = this;
	    const internals = this[kInternals];
	    const maxRate = internals.maxRate;
	    const readableHighWaterMark = this.readableHighWaterMark;
	    const timeWindow = internals.timeWindow;
	    const divider = 1000 / timeWindow;
	    const bytesThreshold = maxRate / divider;
	    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
	    function pushChunk(_chunk, _callback) {
	      const bytes = Buffer.byteLength(_chunk);
	      internals.bytesSeen += bytes;
	      internals.bytes += bytes;
	      if (internals.isCaptured) {
	        internals.updateProgress();
	      }
	      if (self.push(_chunk)) {
	        process.nextTick(_callback);
	      } else {
	        internals.onReadCallback = () => {
	          internals.onReadCallback = null;
	          process.nextTick(_callback);
	        };
	      }
	    }
	    const transformChunk = (_chunk, _callback) => {
	      const chunkSize = Buffer.byteLength(_chunk);
	      let chunkRemainder = null;
	      let maxChunkSize = readableHighWaterMark;
	      let bytesLeft;
	      let passed = 0;
	      if (maxRate) {
	        const now = Date.now();
	        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
	          internals.ts = now;
	          bytesLeft = bytesThreshold - internals.bytes;
	          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
	          passed = 0;
	        }
	        bytesLeft = bytesThreshold - internals.bytes;
	      }
	      if (maxRate) {
	        if (bytesLeft <= 0) {
	          // next time window
	          return setTimeout(() => {
	            _callback(null, _chunk);
	          }, timeWindow - passed);
	        }
	        if (bytesLeft < maxChunkSize) {
	          maxChunkSize = bytesLeft;
	        }
	      }
	      if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
	        chunkRemainder = _chunk.subarray(maxChunkSize);
	        _chunk = _chunk.subarray(0, maxChunkSize);
	      }
	      pushChunk(_chunk, chunkRemainder ? () => {
	        process.nextTick(_callback, null, chunkRemainder);
	      } : _callback);
	    };
	    transformChunk(chunk, function transformNextChunk(err, _chunk) {
	      if (err) {
	        return callback(err);
	      }
	      if (_chunk) {
	        transformChunk(_chunk, transformNextChunk);
	      } else {
	        callback(null);
	      }
	    });
	  }
	  setLength(length) {
	    this[kInternals].length = +length;
	    return this;
	  }
	}
	var AxiosTransformStream$1 = AxiosTransformStream;

	const {
	  asyncIterator
	} = Symbol;
	const readBlob = async function* (blob) {
	  if (blob.stream) {
	    yield* blob.stream();
	  } else if (blob.arrayBuffer) {
	    yield await blob.arrayBuffer();
	  } else if (blob[asyncIterator]) {
	    yield* blob[asyncIterator]();
	  } else {
	    yield blob;
	  }
	};
	var readBlob$1 = readBlob;

	const BOUNDARY_ALPHABET = utils$3.ALPHABET.ALPHA_DIGIT + '-_';
	const textEncoder = new require$$1.TextEncoder();
	const CRLF = '\r\n';
	const CRLF_BYTES = textEncoder.encode(CRLF);
	const CRLF_BYTES_COUNT = 2;
	class FormDataPart {
	  constructor(name, value) {
	    const {
	      escapeName
	    } = this.constructor;
	    const isStringValue = utils$3.isString(value);
	    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ''}${CRLF}`;
	    if (isStringValue) {
	      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
	    } else {
	      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
	    }
	    this.headers = textEncoder.encode(headers + CRLF);
	    this.contentLength = isStringValue ? value.byteLength : value.size;
	    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
	    this.name = name;
	    this.value = value;
	  }
	  async *encode() {
	    yield this.headers;
	    const {
	      value
	    } = this;
	    if (utils$3.isTypedArray(value)) {
	      yield value;
	    } else {
	      yield* readBlob$1(value);
	    }
	    yield CRLF_BYTES;
	  }
	  static escapeName(name) {
	    return String(name).replace(/[\r\n"]/g, match => ({
	      '\r': '%0D',
	      '\n': '%0A',
	      '"': '%22'
	    })[match]);
	  }
	}
	const formDataToStream = (form, headersHandler, options) => {
	  const {
	    tag = 'form-data-boundary',
	    size = 25,
	    boundary = tag + '-' + utils$3.generateString(size, BOUNDARY_ALPHABET)
	  } = options || {};
	  if (!utils$3.isFormData(form)) {
	    throw TypeError('FormData instance required');
	  }
	  if (boundary.length < 1 || boundary.length > 70) {
	    throw Error('boundary must be 10-70 characters long');
	  }
	  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);
	  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);
	  let contentLength = footerBytes.byteLength;
	  const parts = Array.from(form.entries()).map(([name, value]) => {
	    const part = new FormDataPart(name, value);
	    contentLength += part.size;
	    return part;
	  });
	  contentLength += boundaryBytes.byteLength * parts.length;
	  contentLength = utils$3.toFiniteNumber(contentLength);
	  const computedHeaders = {
	    'Content-Type': `multipart/form-data; boundary=${boundary}`
	  };
	  if (Number.isFinite(contentLength)) {
	    computedHeaders['Content-Length'] = contentLength;
	  }
	  headersHandler && headersHandler(computedHeaders);
	  return stream.Readable.from(async function* () {
	    for (const part of parts) {
	      yield boundaryBytes;
	      yield* part.encode();
	    }
	    yield footerBytes;
	  }());
	};
	var formDataToStream$1 = formDataToStream;

	class ZlibHeaderTransformStream extends stream__default["default"].Transform {
	  __transform(chunk, encoding, callback) {
	    this.push(chunk);
	    callback();
	  }
	  _transform(chunk, encoding, callback) {
	    if (chunk.length !== 0) {
	      this._transform = this.__transform;

	      // Add Default Compression headers if no zlib headers are present
	      if (chunk[0] !== 120) {
	        // Hex: 78
	        const header = Buffer.alloc(2);
	        header[0] = 120; // Hex: 78
	        header[1] = 156; // Hex: 9C 
	        this.push(header, encoding);
	      }
	    }
	    this.__transform(chunk, encoding, callback);
	  }
	}
	var ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;

	const callbackify = (fn, reducer) => {
	  return utils$3.isAsyncFn(fn) ? function (...args) {
	    const cb = args.pop();
	    fn.apply(this, args).then(value => {
	      try {
	        reducer ? cb(null, ...reducer(value)) : cb(null, value);
	      } catch (err) {
	        cb(err);
	      }
	    }, cb);
	  } : fn;
	};
	var callbackify$1 = callbackify;

	const zlibOptions = {
	  flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
	  finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
	};
	const brotliOptions = {
	  flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
	  finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
	};
	const isBrotliSupported = utils$3.isFunction(zlib__default["default"].createBrotliDecompress);
	const {
	  http: httpFollow,
	  https: httpsFollow
	} = followRedirects;
	const isHttps = /https:?/;
	const supportedProtocols = platform.protocols.map(protocol => {
	  return protocol + ':';
	});

	/**
	 * If the proxy or config beforeRedirects functions are defined, call them with the options
	 * object.
	 *
	 * @param {Object<string, any>} options - The options object that was passed to the request.
	 *
	 * @returns {Object<string, any>}
	 */
	function dispatchBeforeRedirect(options) {
	  if (options.beforeRedirects.proxy) {
	    options.beforeRedirects.proxy(options);
	  }
	  if (options.beforeRedirects.config) {
	    options.beforeRedirects.config(options);
	  }
	}

	/**
	 * If the proxy or config afterRedirects functions are defined, call them with the options
	 *
	 * @param {http.ClientRequestArgs} options
	 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
	 * @param {string} location
	 *
	 * @returns {http.ClientRequestArgs}
	 */
	function setProxy(options, configProxy, location) {
	  let proxy = configProxy;
	  if (!proxy && proxy !== false) {
	    const proxyUrl = proxyFromEnvExports.getProxyForUrl(location);
	    if (proxyUrl) {
	      proxy = new URL(proxyUrl);
	    }
	  }
	  if (proxy) {
	    // Basic proxy authorization
	    if (proxy.username) {
	      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
	    }
	    if (proxy.auth) {
	      // Support proxy auth object form
	      if (proxy.auth.username || proxy.auth.password) {
	        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
	      }
	      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');
	      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
	    }
	    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');
	    const proxyHost = proxy.hostname || proxy.host;
	    options.hostname = proxyHost;
	    // Replace 'host' since options is not a URL object
	    options.host = proxyHost;
	    options.port = proxy.port;
	    options.path = location;
	    if (proxy.protocol) {
	      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;
	    }
	  }
	  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
	    // Configure proxy for redirected request, passing the original config proxy to apply
	    // the exact same logic as if the redirected request was performed by axios directly.
	    setProxy(redirectOptions, configProxy, redirectOptions.href);
	  };
	}
	const isHttpAdapterSupported = typeof process !== 'undefined' && utils$3.kindOf(process) === 'process';

	// temporary hotfix

	const wrapAsync = asyncExecutor => {
	  return new Promise((resolve, reject) => {
	    let onDone;
	    let isDone;
	    const done = (value, isRejected) => {
	      if (isDone) return;
	      isDone = true;
	      onDone && onDone(value, isRejected);
	    };
	    const _resolve = value => {
	      done(value);
	      resolve(value);
	    };
	    const _reject = reason => {
	      done(reason, true);
	      reject(reason);
	    };
	    asyncExecutor(_resolve, _reject, onDoneHandler => onDone = onDoneHandler).catch(_reject);
	  });
	};
	const resolveFamily = ({
	  address,
	  family
	}) => {
	  if (!utils$3.isString(address)) {
	    throw TypeError('address must be a string');
	  }
	  return {
	    address,
	    family: family || (address.indexOf('.') < 0 ? 6 : 4)
	  };
	};
	const buildAddressEntry = (address, family) => resolveFamily(utils$3.isObject(address) ? address : {
	  address,
	  family
	});

	/*eslint consistent-return:0*/
	var httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {
	  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
	    let {
	      data,
	      lookup,
	      family
	    } = config;
	    const {
	      responseType,
	      responseEncoding
	    } = config;
	    const method = config.method.toUpperCase();
	    let isDone;
	    let rejected = false;
	    let req;
	    if (lookup) {
	      const _lookup = callbackify$1(lookup, value => utils$3.isArray(value) ? value : [value]);
	      // hotfix to support opt.all option which is required for node 20.x
	      lookup = (hostname, opt, cb) => {
	        _lookup(hostname, opt, (err, arg0, arg1) => {
	          if (err) {
	            return cb(err);
	          }
	          const addresses = utils$3.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
	          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
	        });
	      };
	    }

	    // temporary internal emitter until the AxiosRequest class will be implemented
	    const emitter = new EventEmitter__default["default"]();
	    const onFinished = () => {
	      if (config.cancelToken) {
	        config.cancelToken.unsubscribe(abort);
	      }
	      if (config.signal) {
	        config.signal.removeEventListener('abort', abort);
	      }
	      emitter.removeAllListeners();
	    };
	    onDone((value, isRejected) => {
	      isDone = true;
	      if (isRejected) {
	        rejected = true;
	        onFinished();
	      }
	    });
	    function abort(reason) {
	      emitter.emit('abort', !reason || reason.type ? new CanceledError$1(null, config, req) : reason);
	    }
	    emitter.once('abort', reject);
	    if (config.cancelToken || config.signal) {
	      config.cancelToken && config.cancelToken.subscribe(abort);
	      if (config.signal) {
	        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);
	      }
	    }

	    // Parse url
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    const parsed = new URL(fullPath, 'http://localhost');
	    const protocol = parsed.protocol || supportedProtocols[0];
	    if (protocol === 'data:') {
	      let convertedData;
	      if (method !== 'GET') {
	        return settle(resolve, reject, {
	          status: 405,
	          statusText: 'method not allowed',
	          headers: {},
	          config
	        });
	      }
	      try {
	        convertedData = fromDataURI(config.url, responseType === 'blob', {
	          Blob: config.env && config.env.Blob
	        });
	      } catch (err) {
	        throw AxiosError$1.from(err, AxiosError$1.ERR_BAD_REQUEST, config);
	      }
	      if (responseType === 'text') {
	        convertedData = convertedData.toString(responseEncoding);
	        if (!responseEncoding || responseEncoding === 'utf8') {
	          convertedData = utils$3.stripBOM(convertedData);
	        }
	      } else if (responseType === 'stream') {
	        convertedData = stream__default["default"].Readable.from(convertedData);
	      }
	      return settle(resolve, reject, {
	        data: convertedData,
	        status: 200,
	        statusText: 'OK',
	        headers: new AxiosHeaders$2(),
	        config
	      });
	    }
	    if (supportedProtocols.indexOf(protocol) === -1) {
	      return reject(new AxiosError$1('Unsupported protocol ' + protocol, AxiosError$1.ERR_BAD_REQUEST, config));
	    }
	    const headers = AxiosHeaders$2.from(config.headers).normalize();

	    // Set User-Agent (required by some servers)
	    // See https://github.com/axios/axios/issues/69
	    // User-Agent is specified; handle case where no UA header is desired
	    // Only set header if it hasn't been set in config
	    headers.set('User-Agent', 'axios/' + VERSION$1, false);
	    const onDownloadProgress = config.onDownloadProgress;
	    const onUploadProgress = config.onUploadProgress;
	    const maxRate = config.maxRate;
	    let maxUploadRate = undefined;
	    let maxDownloadRate = undefined;

	    // support for spec compliant FormData objects
	    if (utils$3.isSpecCompliantForm(data)) {
	      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
	      data = formDataToStream$1(data, formHeaders => {
	        headers.set(formHeaders);
	      }, {
	        tag: `axios-${VERSION$1}-boundary`,
	        boundary: userBoundary && userBoundary[1] || undefined
	      });
	      // support for https://www.npmjs.com/package/form-data api
	    } else if (utils$3.isFormData(data) && utils$3.isFunction(data.getHeaders)) {
	      headers.set(data.getHeaders());
	      if (!headers.hasContentLength()) {
	        try {
	          const knownLength = await require$$1__default["default"].promisify(data.getLength).call(data);
	          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
	          /*eslint no-empty:0*/
	        } catch (e) {}
	      }
	    } else if (utils$3.isBlob(data)) {
	      data.size && headers.setContentType(data.type || 'application/octet-stream');
	      headers.setContentLength(data.size || 0);
	      data = stream__default["default"].Readable.from(readBlob$1(data));
	    } else if (data && !utils$3.isStream(data)) {
	      if (Buffer.isBuffer(data)) ; else if (utils$3.isArrayBuffer(data)) {
	        data = Buffer.from(new Uint8Array(data));
	      } else if (utils$3.isString(data)) {
	        data = Buffer.from(data, 'utf-8');
	      } else {
	        return reject(new AxiosError$1('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError$1.ERR_BAD_REQUEST, config));
	      }

	      // Add Content-Length header if data exists
	      headers.setContentLength(data.length, false);
	      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
	        return reject(new AxiosError$1('Request body larger than maxBodyLength limit', AxiosError$1.ERR_BAD_REQUEST, config));
	      }
	    }
	    const contentLength = utils$3.toFiniteNumber(headers.getContentLength());
	    if (utils$3.isArray(maxRate)) {
	      maxUploadRate = maxRate[0];
	      maxDownloadRate = maxRate[1];
	    } else {
	      maxUploadRate = maxDownloadRate = maxRate;
	    }
	    if (data && (onUploadProgress || maxUploadRate)) {
	      if (!utils$3.isStream(data)) {
	        data = stream__default["default"].Readable.from(data, {
	          objectMode: false
	        });
	      }
	      data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
	        length: contentLength,
	        maxRate: utils$3.toFiniteNumber(maxUploadRate)
	      })], utils$3.noop);
	      onUploadProgress && data.on('progress', progress => {
	        onUploadProgress(Object.assign(progress, {
	          upload: true
	        }));
	      });
	    }

	    // HTTP basic authentication
	    let auth = undefined;
	    if (config.auth) {
	      const username = config.auth.username || '';
	      const password = config.auth.password || '';
	      auth = username + ':' + password;
	    }
	    if (!auth && parsed.username) {
	      const urlUsername = parsed.username;
	      const urlPassword = parsed.password;
	      auth = urlUsername + ':' + urlPassword;
	    }
	    auth && headers.delete('authorization');
	    let path;
	    try {
	      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\?/, '');
	    } catch (err) {
	      const customErr = new Error(err.message);
	      customErr.config = config;
	      customErr.url = config.url;
	      customErr.exists = true;
	      return reject(customErr);
	    }
	    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);
	    const options = {
	      path,
	      method: method,
	      headers: headers.toJSON(),
	      agents: {
	        http: config.httpAgent,
	        https: config.httpsAgent
	      },
	      auth,
	      protocol,
	      family,
	      beforeRedirect: dispatchBeforeRedirect,
	      beforeRedirects: {}
	    };

	    // cacheable-lookup integration hotfix
	    !utils$3.isUndefined(lookup) && (options.lookup = lookup);
	    if (config.socketPath) {
	      options.socketPath = config.socketPath;
	    } else {
	      options.hostname = parsed.hostname;
	      options.port = parsed.port;
	      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
	    }
	    let transport;
	    const isHttpsRequest = isHttps.test(options.protocol);
	    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
	    if (config.transport) {
	      transport = config.transport;
	    } else if (config.maxRedirects === 0) {
	      transport = isHttpsRequest ? require$$4__default["default"] : require$$2__default["default"];
	    } else {
	      if (config.maxRedirects) {
	        options.maxRedirects = config.maxRedirects;
	      }
	      if (config.beforeRedirect) {
	        options.beforeRedirects.config = config.beforeRedirect;
	      }
	      transport = isHttpsRequest ? httpsFollow : httpFollow;
	    }
	    if (config.maxBodyLength > -1) {
	      options.maxBodyLength = config.maxBodyLength;
	    } else {
	      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
	      options.maxBodyLength = Infinity;
	    }
	    if (config.insecureHTTPParser) {
	      options.insecureHTTPParser = config.insecureHTTPParser;
	    }

	    // Create the request
	    req = transport.request(options, function handleResponse(res) {
	      if (req.destroyed) return;
	      const streams = [res];
	      const responseLength = +res.headers['content-length'];
	      if (onDownloadProgress) {
	        const transformStream = new AxiosTransformStream$1({
	          length: utils$3.toFiniteNumber(responseLength),
	          maxRate: utils$3.toFiniteNumber(maxDownloadRate)
	        });
	        onDownloadProgress && transformStream.on('progress', progress => {
	          onDownloadProgress(Object.assign(progress, {
	            download: true
	          }));
	        });
	        streams.push(transformStream);
	      }

	      // decompress the response body transparently if required
	      let responseStream = res;

	      // return the last request in case of redirects
	      const lastRequest = res.req || req;

	      // if decompress disabled we should not decompress
	      if (config.decompress !== false && res.headers['content-encoding']) {
	        // if no content, but headers still say that it is encoded,
	        // remove the header not confuse downstream operations
	        if (method === 'HEAD' || res.statusCode === 204) {
	          delete res.headers['content-encoding'];
	        }
	        switch ((res.headers['content-encoding'] || '').toLowerCase()) {
	          /*eslint default-case:0*/
	          case 'gzip':
	          case 'x-gzip':
	          case 'compress':
	          case 'x-compress':
	            // add the unzipper to the body stream processing pipeline
	            streams.push(zlib__default["default"].createUnzip(zlibOptions));

	            // remove the content-encoding in order to not confuse downstream operations
	            delete res.headers['content-encoding'];
	            break;
	          case 'deflate':
	            streams.push(new ZlibHeaderTransformStream$1());

	            // add the unzipper to the body stream processing pipeline
	            streams.push(zlib__default["default"].createUnzip(zlibOptions));

	            // remove the content-encoding in order to not confuse downstream operations
	            delete res.headers['content-encoding'];
	            break;
	          case 'br':
	            if (isBrotliSupported) {
	              streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
	              delete res.headers['content-encoding'];
	            }
	        }
	      }
	      responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$3.noop) : streams[0];
	      const offListeners = stream__default["default"].finished(responseStream, () => {
	        offListeners();
	        onFinished();
	      });
	      const response = {
	        status: res.statusCode,
	        statusText: res.statusMessage,
	        headers: new AxiosHeaders$2(res.headers),
	        config,
	        request: lastRequest
	      };
	      if (responseType === 'stream') {
	        response.data = responseStream;
	        settle(resolve, reject, response);
	      } else {
	        const responseBuffer = [];
	        let totalResponseBytes = 0;
	        responseStream.on('data', function handleStreamData(chunk) {
	          responseBuffer.push(chunk);
	          totalResponseBytes += chunk.length;

	          // make sure the content length is not over the maxContentLength if specified
	          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
	            // stream.destroy() emit aborted event before calling reject() on Node.js v16
	            rejected = true;
	            responseStream.destroy();
	            reject(new AxiosError$1('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError$1.ERR_BAD_RESPONSE, config, lastRequest));
	          }
	        });
	        responseStream.on('aborted', function handlerStreamAborted() {
	          if (rejected) {
	            return;
	          }
	          const err = new AxiosError$1('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError$1.ERR_BAD_RESPONSE, config, lastRequest);
	          responseStream.destroy(err);
	          reject(err);
	        });
	        responseStream.on('error', function handleStreamError(err) {
	          if (req.destroyed) return;
	          reject(AxiosError$1.from(err, null, config, lastRequest));
	        });
	        responseStream.on('end', function handleStreamEnd() {
	          try {
	            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
	            if (responseType !== 'arraybuffer') {
	              responseData = responseData.toString(responseEncoding);
	              if (!responseEncoding || responseEncoding === 'utf8') {
	                responseData = utils$3.stripBOM(responseData);
	              }
	            }
	            response.data = responseData;
	          } catch (err) {
	            return reject(AxiosError$1.from(err, null, config, response.request, response));
	          }
	          settle(resolve, reject, response);
	        });
	      }
	      emitter.once('abort', err => {
	        if (!responseStream.destroyed) {
	          responseStream.emit('error', err);
	          responseStream.destroy();
	        }
	      });
	    });
	    emitter.once('abort', err => {
	      reject(err);
	      req.destroy(err);
	    });

	    // Handle errors
	    req.on('error', function handleRequestError(err) {
	      // @todo remove
	      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
	      reject(AxiosError$1.from(err, null, config, req));
	    });

	    // set tcp keep alive to prevent drop connection by peer
	    req.on('socket', function handleRequestSocket(socket) {
	      // default interval of sending ack packet is 1 minute
	      socket.setKeepAlive(true, 1000 * 60);
	    });

	    // Handle request timeout
	    if (config.timeout) {
	      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
	      const timeout = parseInt(config.timeout, 10);
	      if (Number.isNaN(timeout)) {
	        reject(new AxiosError$1('error trying to parse `config.timeout` to int', AxiosError$1.ERR_BAD_OPTION_VALUE, config, req));
	        return;
	      }

	      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
	      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
	      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
	      // And then these socket which be hang up will devouring CPU little by little.
	      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
	      req.setTimeout(timeout, function handleRequestTimeout() {
	        if (isDone) return;
	        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
	        const transitional = config.transitional || transitionalDefaults;
	        if (config.timeoutErrorMessage) {
	          timeoutErrorMessage = config.timeoutErrorMessage;
	        }
	        reject(new AxiosError$1(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED, config, req));
	        abort();
	      });
	    }

	    // Send the request
	    if (utils$3.isStream(data)) {
	      let ended = false;
	      let errored = false;
	      data.on('end', () => {
	        ended = true;
	      });
	      data.once('error', err => {
	        errored = true;
	        req.destroy(err);
	      });
	      data.on('close', () => {
	        if (!ended && !errored) {
	          abort(new CanceledError$1('Request stream has been aborted', config, req));
	        }
	      });
	      data.pipe(req);
	    } else {
	      req.end(data);
	    }
	  });
	};

	var cookies$1 = platform.hasStandardBrowserEnv ?
	// Standard browser envs support document.cookie
	{
	  write(name, value, expires, path, domain, secure) {
	    const cookie = [name + '=' + encodeURIComponent(value)];
	    utils$3.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());
	    utils$3.isString(path) && cookie.push('path=' + path);
	    utils$3.isString(domain) && cookie.push('domain=' + domain);
	    secure === true && cookie.push('secure');
	    document.cookie = cookie.join('; ');
	  },
	  read(name) {
	    const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	    return match ? decodeURIComponent(match[3]) : null;
	  },
	  remove(name) {
	    this.write(name, '', Date.now() - 86400000);
	  }
	} :
	// Non-standard browser env (web workers, react-native) lack needed support.
	{
	  write() {},
	  read() {
	    return null;
	  },
	  remove() {}
	};

	var isURLSameOrigin = platform.hasStandardBrowserEnv ?
	// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	function standardBrowserEnv() {
	  const msie = /(msie|trident)/i.test(navigator.userAgent);
	  const urlParsingNode = document.createElement('a');
	  let originURL;

	  /**
	  * Parse a URL to discover its components
	  *
	  * @param {String} url The URL to be parsed
	  * @returns {Object}
	  */
	  function resolveURL(url) {
	    let href = url;
	    if (msie) {
	      // IE needs attribute set twice to normalize properties
	      urlParsingNode.setAttribute('href', href);
	      href = urlParsingNode.href;
	    }
	    urlParsingNode.setAttribute('href', href);

	    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	    return {
	      href: urlParsingNode.href,
	      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	      host: urlParsingNode.host,
	      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	      hostname: urlParsingNode.hostname,
	      port: urlParsingNode.port,
	      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
	    };
	  }
	  originURL = resolveURL(window.location.href);

	  /**
	  * Determine if a URL shares the same origin as the current location
	  *
	  * @param {String} requestURL The URL to test
	  * @returns {boolean} True if URL shares the same origin, otherwise false
	  */
	  return function isURLSameOrigin(requestURL) {
	    const parsed = utils$3.isString(requestURL) ? resolveURL(requestURL) : requestURL;
	    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
	  };
	}() :
	// Non standard browser envs (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return function isURLSameOrigin() {
	    return true;
	  };
	}();

	function progressEventReducer(listener, isDownloadStream) {
	  let bytesNotified = 0;
	  const _speedometer = speedometer(50, 250);
	  return e => {
	    const loaded = e.loaded;
	    const total = e.lengthComputable ? e.total : undefined;
	    const progressBytes = loaded - bytesNotified;
	    const rate = _speedometer(progressBytes);
	    const inRange = loaded <= total;
	    bytesNotified = loaded;
	    const data = {
	      loaded,
	      total,
	      progress: total ? loaded / total : undefined,
	      bytes: progressBytes,
	      rate: rate ? rate : undefined,
	      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
	      event: e
	    };
	    data[isDownloadStream ? 'download' : 'upload'] = true;
	    listener(data);
	  };
	}
	const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
	var xhrAdapter = isXHRAdapterSupported && function (config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    let requestData = config.data;
	    const requestHeaders = AxiosHeaders$2.from(config.headers).normalize();
	    let {
	      responseType,
	      withXSRFToken
	    } = config;
	    let onCanceled;
	    function done() {
	      if (config.cancelToken) {
	        config.cancelToken.unsubscribe(onCanceled);
	      }
	      if (config.signal) {
	        config.signal.removeEventListener('abort', onCanceled);
	      }
	    }
	    let contentType;
	    if (utils$3.isFormData(requestData)) {
	      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
	        requestHeaders.setContentType(false); // Let the browser set it
	      } else if ((contentType = requestHeaders.getContentType()) !== false) {
	        // fix semicolon duplication issue for ReactNative FormData implementation
	        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
	        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
	      }
	    }
	    let request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      const username = config.auth.username || '';
	      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
	    }
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      const responseHeaders = AxiosHeaders$2.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());
	      const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
	      const response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config,
	        request
	      };
	      settle(function _resolve(value) {
	        resolve(value);
	        done();
	      }, function _reject(err) {
	        reject(err);
	        done();
	      }, response);

	      // Clean up request
	      request = null;
	    }
	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }
	      reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
	      const transitional = config.transitional || transitionalDefaults;
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(new AxiosError$1(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (platform.hasStandardBrowserEnv) {
	      withXSRFToken && utils$3.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
	      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
	        // Add xsrf header
	        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies$1.read(config.xsrfCookieName);
	        if (xsrfValue) {
	          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
	        }
	      }
	    }

	    // Remove Content-Type if data is undefined
	    requestData === undefined && requestHeaders.setContentType(null);

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$3.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
	        request.setRequestHeader(key, val);
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$3.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
	    }
	    if (config.cancelToken || config.signal) {
	      // Handle cancellation
	      // eslint-disable-next-line func-names
	      onCanceled = cancel => {
	        if (!request) {
	          return;
	        }
	        reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
	        request.abort();
	        request = null;
	      };
	      config.cancelToken && config.cancelToken.subscribe(onCanceled);
	      if (config.signal) {
	        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
	      }
	    }
	    const protocol = parseProtocol(fullPath);
	    if (protocol && platform.protocols.indexOf(protocol) === -1) {
	      reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
	      return;
	    }

	    // Send the request
	    request.send(requestData || null);
	  });
	};

	const knownAdapters = {
	  http: httpAdapter,
	  xhr: xhrAdapter
	};
	utils$3.forEach(knownAdapters, (fn, value) => {
	  if (fn) {
	    try {
	      Object.defineProperty(fn, 'name', {
	        value
	      });
	    } catch (e) {
	      // eslint-disable-next-line no-empty
	    }
	    Object.defineProperty(fn, 'adapterName', {
	      value
	    });
	  }
	});
	const renderReason = reason => `- ${reason}`;
	const isResolvedHandle = adapter => utils$3.isFunction(adapter) || adapter === null || adapter === false;
	var adapters = {
	  getAdapter: adapters => {
	    adapters = utils$3.isArray(adapters) ? adapters : [adapters];
	    const {
	      length
	    } = adapters;
	    let nameOrAdapter;
	    let adapter;
	    const rejectedReasons = {};
	    for (let i = 0; i < length; i++) {
	      nameOrAdapter = adapters[i];
	      let id;
	      adapter = nameOrAdapter;
	      if (!isResolvedHandle(nameOrAdapter)) {
	        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
	        if (adapter === undefined) {
	          throw new AxiosError$1(`Unknown adapter '${id}'`);
	        }
	      }
	      if (adapter) {
	        break;
	      }
	      rejectedReasons[id || '#' + i] = adapter;
	    }
	    if (!adapter) {
	      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? 'is not supported by the environment' : 'is not available in the build'));
	      let s = length ? reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0]) : 'as no adapter specified';
	      throw new AxiosError$1(`There is no suitable adapter to dispatch the request ` + s, 'ERR_NOT_SUPPORT');
	    }
	    return adapter;
	  },
	  adapters: knownAdapters
	};

	/**
	 * Throws a `CanceledError` if cancellation has been requested.
	 *
	 * @param {Object} config The config that is to be used for the request
	 *
	 * @returns {void}
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	  if (config.signal && config.signal.aborted) {
	    throw new CanceledError$1(null, config);
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 *
	 * @returns {Promise} The Promise to be fulfilled
	 */
	function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	  config.headers = AxiosHeaders$2.from(config.headers);

	  // Transform request data
	  config.data = transformData.call(config, config.transformRequest);
	  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
	    config.headers.setContentType('application/x-www-form-urlencoded', false);
	  }
	  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(config, config.transformResponse, response);
	    response.headers = AxiosHeaders$2.from(response.headers);
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel$1(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(config, config.transformResponse, reason.response);
	        reason.response.headers = AxiosHeaders$2.from(reason.response.headers);
	      }
	    }
	    return Promise.reject(reason);
	  });
	}

	const headersToObject = thing => thing instanceof AxiosHeaders$2 ? thing.toJSON() : thing;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 *
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	function mergeConfig$1(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  const config = {};
	  function getMergedValue(target, source, caseless) {
	    if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
	      return utils$3.merge.call({
	        caseless
	      }, target, source);
	    } else if (utils$3.isPlainObject(source)) {
	      return utils$3.merge({}, source);
	    } else if (utils$3.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(a, b, caseless) {
	    if (!utils$3.isUndefined(b)) {
	      return getMergedValue(a, b, caseless);
	    } else if (!utils$3.isUndefined(a)) {
	      return getMergedValue(undefined, a, caseless);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(a, b) {
	    if (!utils$3.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(a, b) {
	    if (!utils$3.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    } else if (!utils$3.isUndefined(a)) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(a, b, prop) {
	    if (prop in config2) {
	      return getMergedValue(a, b);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, a);
	    }
	  }
	  const mergeMap = {
	    url: valueFromConfig2,
	    method: valueFromConfig2,
	    data: valueFromConfig2,
	    baseURL: defaultToConfig2,
	    transformRequest: defaultToConfig2,
	    transformResponse: defaultToConfig2,
	    paramsSerializer: defaultToConfig2,
	    timeout: defaultToConfig2,
	    timeoutMessage: defaultToConfig2,
	    withCredentials: defaultToConfig2,
	    withXSRFToken: defaultToConfig2,
	    adapter: defaultToConfig2,
	    responseType: defaultToConfig2,
	    xsrfCookieName: defaultToConfig2,
	    xsrfHeaderName: defaultToConfig2,
	    onUploadProgress: defaultToConfig2,
	    onDownloadProgress: defaultToConfig2,
	    decompress: defaultToConfig2,
	    maxContentLength: defaultToConfig2,
	    maxBodyLength: defaultToConfig2,
	    beforeRedirect: defaultToConfig2,
	    transport: defaultToConfig2,
	    httpAgent: defaultToConfig2,
	    httpsAgent: defaultToConfig2,
	    cancelToken: defaultToConfig2,
	    socketPath: defaultToConfig2,
	    responseEncoding: defaultToConfig2,
	    validateStatus: mergeDirectKeys,
	    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
	  };
	  utils$3.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
	    const merge = mergeMap[prop] || mergeDeepProperties;
	    const configValue = merge(config1[prop], config2[prop], prop);
	    utils$3.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
	  });
	  return config;
	}

	const validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});
	const deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 *
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 *
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return (value, opt, opts) => {
	    if (validator === false) {
	      throw new AxiosError$1(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError$1.ERR_DEPRECATED);
	    }
	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
	    }
	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 *
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 *
	 * @returns {object}
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
	  }
	  const keys = Object.keys(options);
	  let i = keys.length;
	  while (i-- > 0) {
	    const opt = keys[i];
	    const validator = schema[opt];
	    if (validator) {
	      const value = options[opt];
	      const result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
	    }
	  }
	}
	var validator = {
	  assertOptions,
	  validators: validators$1
	};

	const validators = validator.validators;

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 *
	 * @return {Axios} A new instance of Axios
	 */
	class Axios$1 {
	  constructor(instanceConfig) {
	    this.defaults = instanceConfig;
	    this.interceptors = {
	      request: new InterceptorManager$1(),
	      response: new InterceptorManager$1()
	    };
	  }

	  /**
	   * Dispatch a request
	   *
	   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
	   * @param {?Object} config
	   *
	   * @returns {Promise} The Promise to be fulfilled
	   */
	  request(configOrUrl, config) {
	    /*eslint no-param-reassign:0*/
	    // Allow for axios('example/url'[, config]) a la fetch API
	    if (typeof configOrUrl === 'string') {
	      config = config || {};
	      config.url = configOrUrl;
	    } else {
	      config = configOrUrl || {};
	    }
	    config = mergeConfig$1(this.defaults, config);
	    const {
	      transitional,
	      paramsSerializer,
	      headers
	    } = config;
	    if (transitional !== undefined) {
	      validator.assertOptions(transitional, {
	        silentJSONParsing: validators.transitional(validators.boolean),
	        forcedJSONParsing: validators.transitional(validators.boolean),
	        clarifyTimeoutError: validators.transitional(validators.boolean)
	      }, false);
	    }
	    if (paramsSerializer != null) {
	      if (utils$3.isFunction(paramsSerializer)) {
	        config.paramsSerializer = {
	          serialize: paramsSerializer
	        };
	      } else {
	        validator.assertOptions(paramsSerializer, {
	          encode: validators.function,
	          serialize: validators.function
	        }, true);
	      }
	    }

	    // Set config.method
	    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

	    // Flatten headers
	    let contextHeaders = headers && utils$3.merge(headers.common, headers[config.method]);
	    headers && utils$3.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {
	      delete headers[method];
	    });
	    config.headers = AxiosHeaders$2.concat(contextHeaders, headers);

	    // filter out skipped interceptors
	    const requestInterceptorChain = [];
	    let synchronousRequestInterceptors = true;
	    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	        return;
	      }
	      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
	      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	    });
	    const responseInterceptorChain = [];
	    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	    });
	    let promise;
	    let i = 0;
	    let len;
	    if (!synchronousRequestInterceptors) {
	      const chain = [dispatchRequest.bind(this), undefined];
	      chain.unshift.apply(chain, requestInterceptorChain);
	      chain.push.apply(chain, responseInterceptorChain);
	      len = chain.length;
	      promise = Promise.resolve(config);
	      while (i < len) {
	        promise = promise.then(chain[i++], chain[i++]);
	      }
	      return promise;
	    }
	    len = requestInterceptorChain.length;
	    let newConfig = config;
	    i = 0;
	    while (i < len) {
	      const onFulfilled = requestInterceptorChain[i++];
	      const onRejected = requestInterceptorChain[i++];
	      try {
	        newConfig = onFulfilled(newConfig);
	      } catch (error) {
	        onRejected.call(this, error);
	        break;
	      }
	    }
	    try {
	      promise = dispatchRequest.call(this, newConfig);
	    } catch (error) {
	      return Promise.reject(error);
	    }
	    i = 0;
	    len = responseInterceptorChain.length;
	    while (i < len) {
	      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
	    }
	    return promise;
	  }
	  getUri(config) {
	    config = mergeConfig$1(this.defaults, config);
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    return buildURL(fullPath, config.params, config.paramsSerializer);
	  }
	}

	// Provide aliases for supported request methods
	utils$3.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function (url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method,
	      url,
	      data: (config || {}).data
	    }));
	  };
	});
	utils$3.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/

	  function generateHTTPMethod(isForm) {
	    return function httpMethod(url, data, config) {
	      return this.request(mergeConfig$1(config || {}, {
	        method,
	        headers: isForm ? {
	          'Content-Type': 'multipart/form-data'
	        } : {},
	        url,
	        data
	      }));
	    };
	  }
	  Axios$1.prototype[method] = generateHTTPMethod();
	  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
	});
	var Axios$2 = Axios$1;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @param {Function} executor The executor function.
	 *
	 * @returns {CancelToken}
	 */
	class CancelToken$1 {
	  constructor(executor) {
	    if (typeof executor !== 'function') {
	      throw new TypeError('executor must be a function.');
	    }
	    let resolvePromise;
	    this.promise = new Promise(function promiseExecutor(resolve) {
	      resolvePromise = resolve;
	    });
	    const token = this;

	    // eslint-disable-next-line func-names
	    this.promise.then(cancel => {
	      if (!token._listeners) return;
	      let i = token._listeners.length;
	      while (i-- > 0) {
	        token._listeners[i](cancel);
	      }
	      token._listeners = null;
	    });

	    // eslint-disable-next-line func-names
	    this.promise.then = onfulfilled => {
	      let _resolve;
	      // eslint-disable-next-line func-names
	      const promise = new Promise(resolve => {
	        token.subscribe(resolve);
	        _resolve = resolve;
	      }).then(onfulfilled);
	      promise.cancel = function reject() {
	        token.unsubscribe(_resolve);
	      };
	      return promise;
	    };
	    executor(function cancel(message, config, request) {
	      if (token.reason) {
	        // Cancellation has already been requested
	        return;
	      }
	      token.reason = new CanceledError$1(message, config, request);
	      resolvePromise(token.reason);
	    });
	  }

	  /**
	   * Throws a `CanceledError` if cancellation has been requested.
	   */
	  throwIfRequested() {
	    if (this.reason) {
	      throw this.reason;
	    }
	  }

	  /**
	   * Subscribe to the cancel signal
	   */

	  subscribe(listener) {
	    if (this.reason) {
	      listener(this.reason);
	      return;
	    }
	    if (this._listeners) {
	      this._listeners.push(listener);
	    } else {
	      this._listeners = [listener];
	    }
	  }

	  /**
	   * Unsubscribe from the cancel signal
	   */

	  unsubscribe(listener) {
	    if (!this._listeners) {
	      return;
	    }
	    const index = this._listeners.indexOf(listener);
	    if (index !== -1) {
	      this._listeners.splice(index, 1);
	    }
	  }

	  /**
	   * Returns an object that contains a new `CancelToken` and a function that, when called,
	   * cancels the `CancelToken`.
	   */
	  static source() {
	    let cancel;
	    const token = new CancelToken$1(function executor(c) {
	      cancel = c;
	    });
	    return {
	      token,
	      cancel
	    };
	  }
	}
	var CancelToken$2 = CancelToken$1;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 *
	 * @returns {Function}
	 */
	function spread$1(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	}

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 *
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	function isAxiosError$1(payload) {
	  return utils$3.isObject(payload) && payload.isAxiosError === true;
	}

	const HttpStatusCode$1 = {
	  Continue: 100,
	  SwitchingProtocols: 101,
	  Processing: 102,
	  EarlyHints: 103,
	  Ok: 200,
	  Created: 201,
	  Accepted: 202,
	  NonAuthoritativeInformation: 203,
	  NoContent: 204,
	  ResetContent: 205,
	  PartialContent: 206,
	  MultiStatus: 207,
	  AlreadyReported: 208,
	  ImUsed: 226,
	  MultipleChoices: 300,
	  MovedPermanently: 301,
	  Found: 302,
	  SeeOther: 303,
	  NotModified: 304,
	  UseProxy: 305,
	  Unused: 306,
	  TemporaryRedirect: 307,
	  PermanentRedirect: 308,
	  BadRequest: 400,
	  Unauthorized: 401,
	  PaymentRequired: 402,
	  Forbidden: 403,
	  NotFound: 404,
	  MethodNotAllowed: 405,
	  NotAcceptable: 406,
	  ProxyAuthenticationRequired: 407,
	  RequestTimeout: 408,
	  Conflict: 409,
	  Gone: 410,
	  LengthRequired: 411,
	  PreconditionFailed: 412,
	  PayloadTooLarge: 413,
	  UriTooLong: 414,
	  UnsupportedMediaType: 415,
	  RangeNotSatisfiable: 416,
	  ExpectationFailed: 417,
	  ImATeapot: 418,
	  MisdirectedRequest: 421,
	  UnprocessableEntity: 422,
	  Locked: 423,
	  FailedDependency: 424,
	  TooEarly: 425,
	  UpgradeRequired: 426,
	  PreconditionRequired: 428,
	  TooManyRequests: 429,
	  RequestHeaderFieldsTooLarge: 431,
	  UnavailableForLegalReasons: 451,
	  InternalServerError: 500,
	  NotImplemented: 501,
	  BadGateway: 502,
	  ServiceUnavailable: 503,
	  GatewayTimeout: 504,
	  HttpVersionNotSupported: 505,
	  VariantAlsoNegotiates: 506,
	  InsufficientStorage: 507,
	  LoopDetected: 508,
	  NotExtended: 510,
	  NetworkAuthenticationRequired: 511
	};
	Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
	  HttpStatusCode$1[value] = key;
	});
	var HttpStatusCode$2 = HttpStatusCode$1;

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 *
	 * @returns {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  const context = new Axios$2(defaultConfig);
	  const instance = bind(Axios$2.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$3.extend(instance, Axios$2.prototype, context, {
	    allOwnKeys: true
	  });

	  // Copy context to instance
	  utils$3.extend(instance, context, null, {
	    allOwnKeys: true
	  });

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
	  };
	  return instance;
	}

	// Create the default instance to be exported
	const axios = createInstance(defaults$1);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios$2;

	// Expose Cancel & CancelToken
	axios.CanceledError = CanceledError$1;
	axios.CancelToken = CancelToken$2;
	axios.isCancel = isCancel$1;
	axios.VERSION = VERSION$1;
	axios.toFormData = toFormData$1;

	// Expose AxiosError class
	axios.AxiosError = AxiosError$1;

	// alias for CanceledError for backward compatibility
	axios.Cancel = axios.CanceledError;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = spread$1;

	// Expose isAxiosError
	axios.isAxiosError = isAxiosError$1;

	// Expose mergeConfig
	axios.mergeConfig = mergeConfig$1;
	axios.AxiosHeaders = AxiosHeaders$2;
	axios.formToJSON = thing => formDataToJSON(utils$3.isHTMLForm(thing) ? new FormData(thing) : thing);
	axios.getAdapter = adapters.getAdapter;
	axios.HttpStatusCode = HttpStatusCode$2;
	axios.default = axios;

	// this module should only have a default export
	var axios3 = axios;

	// This module is intended to unwrap Axios default export as named.
	// Keep top-level export same with static properties
	// so that it can keep same with es module or cjs
	const {
	  Axios,
	  AxiosError,
	  CanceledError,
	  isCancel,
	  CancelToken,
	  VERSION,
	  all,
	  Cancel,
	  isAxiosError,
	  spread,
	  toFormData,
	  AxiosHeaders,
	  HttpStatusCode,
	  formToJSON,
	  getAdapter,
	  mergeConfig
	} = axios3;

	var base64Js = {};

	var hasRequiredBase64Js;

	function requireBase64Js () {
		if (hasRequiredBase64Js) return base64Js;
		hasRequiredBase64Js = 1;

		base64Js.byteLength = byteLength;
		base64Js.toByteArray = toByteArray;
		base64Js.fromByteArray = fromByteArray;
		var lookup = [];
		var revLookup = [];
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		for (var i = 0, len = code.length; i < len; ++i) {
		  lookup[i] = code[i];
		  revLookup[code.charCodeAt(i)] = i;
		}

		// Support decoding URL-safe base64 strings, as Node.js does.
		// See: https://en.wikipedia.org/wiki/Base64#URL_applications
		revLookup['-'.charCodeAt(0)] = 62;
		revLookup['_'.charCodeAt(0)] = 63;
		function getLens(b64) {
		  var len = b64.length;
		  if (len % 4 > 0) {
		    throw new Error('Invalid string. Length must be a multiple of 4');
		  }

		  // Trim off extra bytes after placeholder bytes are found
		  // See: https://github.com/beatgammit/base64-js/issues/42
		  var validLen = b64.indexOf('=');
		  if (validLen === -1) validLen = len;
		  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
		  return [validLen, placeHoldersLen];
		}

		// base64 is 4/3 + up to two characters of the original data
		function byteLength(b64) {
		  var lens = getLens(b64);
		  var validLen = lens[0];
		  var placeHoldersLen = lens[1];
		  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
		}
		function _byteLength(b64, validLen, placeHoldersLen) {
		  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
		}
		function toByteArray(b64) {
		  var tmp;
		  var lens = getLens(b64);
		  var validLen = lens[0];
		  var placeHoldersLen = lens[1];
		  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
		  var curByte = 0;

		  // if there are placeholders, only get up to the last complete 4 chars
		  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
		  var i;
		  for (i = 0; i < len; i += 4) {
		    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
		    arr[curByte++] = tmp >> 16 & 0xFF;
		    arr[curByte++] = tmp >> 8 & 0xFF;
		    arr[curByte++] = tmp & 0xFF;
		  }
		  if (placeHoldersLen === 2) {
		    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
		    arr[curByte++] = tmp & 0xFF;
		  }
		  if (placeHoldersLen === 1) {
		    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
		    arr[curByte++] = tmp >> 8 & 0xFF;
		    arr[curByte++] = tmp & 0xFF;
		  }
		  return arr;
		}
		function tripletToBase64(num) {
		  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		}
		function encodeChunk(uint8, start, end) {
		  var tmp;
		  var output = [];
		  for (var i = start; i < end; i += 3) {
		    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
		    output.push(tripletToBase64(tmp));
		  }
		  return output.join('');
		}
		function fromByteArray(uint8) {
		  var tmp;
		  var len = uint8.length;
		  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		  var parts = [];
		  var maxChunkLength = 16383; // must be multiple of 3

		  // go through the array every three bytes, we'll deal with trailing stuff later
		  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
		  }

		  // pad the end with zeros, but make sure to not forget the extra bytes
		  if (extraBytes === 1) {
		    tmp = uint8[len - 1];
		    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
		  } else if (extraBytes === 2) {
		    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
		    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
		  }
		  return parts.join('');
		}
		return base64Js;
	}

	var base64JsExports = requireBase64Js();

	var base64url$3 = {exports: {}};

	var base64url$2 = {};

	var padString$1 = {};

	var hasRequiredPadString;

	function requirePadString () {
		if (hasRequiredPadString) return padString$1;
		hasRequiredPadString = 1;

		Object.defineProperty(padString$1, "__esModule", {
		  value: true
		});
		function padString(input) {
		  var segmentLength = 4;
		  var stringLength = input.length;
		  var diff = stringLength % segmentLength;
		  if (!diff) {
		    return input;
		  }
		  var position = stringLength;
		  var padLength = segmentLength - diff;
		  var paddedStringLength = stringLength + padLength;
		  var buffer = Buffer.alloc(paddedStringLength);
		  buffer.write(input);
		  while (padLength--) {
		    buffer.write("=", position++);
		  }
		  return buffer.toString();
		}
		padString$1.default = padString;
		return padString$1;
	}

	var hasRequiredBase64url$1;

	function requireBase64url$1 () {
		if (hasRequiredBase64url$1) return base64url$2;
		hasRequiredBase64url$1 = 1;

		Object.defineProperty(base64url$2, "__esModule", {
		  value: true
		});
		var pad_string_1 = requirePadString();
		function encode(input, encoding) {
		  if (encoding === void 0) {
		    encoding = "utf8";
		  }
		  if (Buffer.isBuffer(input)) {
		    return fromBase64(input.toString("base64"));
		  }
		  return fromBase64(Buffer.from(input, encoding).toString("base64"));
		}
		function decode(base64url, encoding) {
		  if (encoding === void 0) {
		    encoding = "utf8";
		  }
		  return Buffer.from(toBase64(base64url), "base64").toString(encoding);
		}
		function toBase64(base64url) {
		  base64url = base64url.toString();
		  return pad_string_1.default(base64url).replace(/\-/g, "+").replace(/_/g, "/");
		}
		function fromBase64(base64) {
		  return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
		}
		function toBuffer(base64url) {
		  return Buffer.from(toBase64(base64url), "base64");
		}
		var base64url = encode;
		base64url.encode = encode;
		base64url.decode = decode;
		base64url.toBase64 = toBase64;
		base64url.fromBase64 = fromBase64;
		base64url.toBuffer = toBuffer;
		base64url$2.default = base64url;
		return base64url$2;
	}

	base64url$3.exports;

	var hasRequiredBase64url;

	function requireBase64url () {
		if (hasRequiredBase64url) return base64url$3.exports;
		hasRequiredBase64url = 1;
		(function (module) {
			module.exports = requireBase64url$1().default;
			module.exports.default = module.exports; 
		} (base64url$3));
		return base64url$3.exports;
	}

	var base64urlExports = requireBase64url();
	var base64url$1 = /*@__PURE__*/getDefaultExportFromCjs(base64urlExports);

	var utils$1 = {};

	var hasRequiredUtils$1;

	function requireUtils$1 () {
		if (hasRequiredUtils$1) return utils$1;
		hasRequiredUtils$1 = 1;

		var __createBinding = utils$1 && utils$1.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = utils$1 && utils$1.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = utils$1 && utils$1.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(utils$1, "__esModule", {
		  value: true
		});
		utils$1.b64UrlDecode = utils$1.b64UrlEncode = utils$1.bufferTob64Url = utils$1.bufferTob64 = utils$1.b64UrlToBuffer = utils$1.stringToB64Url = utils$1.stringToBuffer = utils$1.bufferToString = utils$1.b64UrlToString = utils$1.concatBuffers = void 0;
		const B64js = __importStar(requireBase64Js());
		function concatBuffers(buffers) {
		  let total_length = 0;
		  for (let i = 0; i < buffers.length; i++) {
		    total_length += buffers[i].byteLength;
		  }
		  let temp = new Uint8Array(total_length);
		  let offset = 0;
		  temp.set(new Uint8Array(buffers[0]), offset);
		  offset += buffers[0].byteLength;
		  for (let i = 1; i < buffers.length; i++) {
		    temp.set(new Uint8Array(buffers[i]), offset);
		    offset += buffers[i].byteLength;
		  }
		  return temp;
		}
		utils$1.concatBuffers = concatBuffers;
		function b64UrlToString(b64UrlString) {
		  let buffer = b64UrlToBuffer(b64UrlString);
		  return bufferToString(buffer);
		}
		utils$1.b64UrlToString = b64UrlToString;
		function bufferToString(buffer) {
		  return new TextDecoder("utf-8", {
		    fatal: true
		  }).decode(buffer);
		}
		utils$1.bufferToString = bufferToString;
		function stringToBuffer(string) {
		  return new TextEncoder().encode(string);
		}
		utils$1.stringToBuffer = stringToBuffer;
		function stringToB64Url(string) {
		  return bufferTob64Url(stringToBuffer(string));
		}
		utils$1.stringToB64Url = stringToB64Url;
		function b64UrlToBuffer(b64UrlString) {
		  return new Uint8Array(B64js.toByteArray(b64UrlDecode(b64UrlString)));
		}
		utils$1.b64UrlToBuffer = b64UrlToBuffer;
		function bufferTob64(buffer) {
		  return B64js.fromByteArray(new Uint8Array(buffer));
		}
		utils$1.bufferTob64 = bufferTob64;
		function bufferTob64Url(buffer) {
		  return b64UrlEncode(bufferTob64(buffer));
		}
		utils$1.bufferTob64Url = bufferTob64Url;
		function b64UrlEncode(b64UrlString) {
		  try {
		    return b64UrlString.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
		  } catch (error) {
		    throw new Error("Failed to encode string", {
		      cause: error
		    });
		  }
		}
		utils$1.b64UrlEncode = b64UrlEncode;
		function b64UrlDecode(b64UrlString) {
		  try {
		    b64UrlString = b64UrlString.replace(/\-/g, "+").replace(/\_/g, "/");
		    let padding;
		    b64UrlString.length % 4 == 0 ? padding = 0 : padding = 4 - b64UrlString.length % 4;
		    return b64UrlString.concat("=".repeat(padding));
		  } catch (error) {
		    throw new Error("Failed to decode string", {
		      cause: error
		    });
		  }
		}
		utils$1.b64UrlDecode = b64UrlDecode;
		return utils$1;
	}

	var utilsExports = requireUtils$1();

	// import { createHash } from 'crypto';
	async function deepHash$1(data) {
	  // if (typeof data[Symbol.asyncIterator as keyof AsyncIterable<Buffer>] === 'function') {
	  //   const _data = data as AsyncIterable<Buffer>;
	  //   const context = createHash('sha384');
	  //   let length = 0;
	  //   for await (const chunk of _data) {
	  //     length += chunk.byteLength;
	  //     context.update(chunk);
	  //   }
	  //   const tag = concatBuffers([stringToBuffer('blob'), stringToBuffer(length.toString())]);
	  //   const taggedHash = concatBuffers([await getCryptoDriver().hash(tag, 'SHA-384'), context.digest()]);
	  //   return await getCryptoDriver().hash(taggedHash, 'SHA-384');
	  // } else if (Array.isArray(data)) {
	  if (Array.isArray(data)) {
	    const tag = utilsExports.concatBuffers([utilsExports.stringToBuffer('list'), utilsExports.stringToBuffer(data.length.toString())]);
	    return await deepHashChunks(data, await getCryptoDriver().hash(tag, 'SHA-384'));
	  }
	  // }
	  const _data = data;
	  const tag = utilsExports.concatBuffers([utilsExports.stringToBuffer('blob'), utilsExports.stringToBuffer(_data.byteLength.toString())]);
	  const taggedHash = utilsExports.concatBuffers([await getCryptoDriver().hash(tag, 'SHA-384'), await getCryptoDriver().hash(_data, 'SHA-384')]);
	  return await getCryptoDriver().hash(taggedHash, 'SHA-384');
	}
	async function deepHashChunks(chunks, acc) {
	  if (chunks.length < 1) {
	    return acc;
	  }
	  const hashPair = utilsExports.concatBuffers([acc, await deepHash$1(chunks[0])]);
	  const newAcc = await getCryptoDriver().hash(hashPair, 'SHA-384');
	  return await deepHashChunks(chunks.slice(1), newAcc);
	}

	var nodeDriver$1 = {};

	var pem$2 = {};

	var asn1 = {};

	var bn$2 = {exports: {}};

	var bn$1 = bn$2.exports;

	var hasRequiredBn;

	function requireBn () {
		if (hasRequiredBn) return bn$2.exports;
		hasRequiredBn = 1;
		(function (module) {
			(function (module, exports) {

			  // Utils
			  function assert(val, msg) {
			    if (!val) throw new Error(msg || 'Assertion failed');
			  }

			  // Could use `inherits` module, but don't want to move from single file
			  // architecture yet.
			  function inherits(ctor, superCtor) {
			    ctor.super_ = superCtor;
			    var TempCtor = function () {};
			    TempCtor.prototype = superCtor.prototype;
			    ctor.prototype = new TempCtor();
			    ctor.prototype.constructor = ctor;
			  }

			  // BN

			  function BN(number, base, endian) {
			    if (BN.isBN(number)) {
			      return number;
			    }
			    this.negative = 0;
			    this.words = null;
			    this.length = 0;

			    // Reduction context
			    this.red = null;
			    if (number !== null) {
			      if (base === 'le' || base === 'be') {
			        endian = base;
			        base = 10;
			      }
			      this._init(number || 0, base || 10, endian || 'be');
			    }
			  }
			  if (typeof module === 'object') {
			    module.exports = BN;
			  } else {
			    exports.BN = BN;
			  }
			  BN.BN = BN;
			  BN.wordSize = 26;
			  var Buffer;
			  try {
			    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
			      Buffer = window.Buffer;
			    } else {
			      Buffer = require('buffer').Buffer;
			    }
			  } catch (e) {}
			  BN.isBN = function isBN(num) {
			    if (num instanceof BN) {
			      return true;
			    }
			    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
			  };
			  BN.max = function max(left, right) {
			    if (left.cmp(right) > 0) return left;
			    return right;
			  };
			  BN.min = function min(left, right) {
			    if (left.cmp(right) < 0) return left;
			    return right;
			  };
			  BN.prototype._init = function init(number, base, endian) {
			    if (typeof number === 'number') {
			      return this._initNumber(number, base, endian);
			    }
			    if (typeof number === 'object') {
			      return this._initArray(number, base, endian);
			    }
			    if (base === 'hex') {
			      base = 16;
			    }
			    assert(base === (base | 0) && base >= 2 && base <= 36);
			    number = number.toString().replace(/\s+/g, '');
			    var start = 0;
			    if (number[0] === '-') {
			      start++;
			      this.negative = 1;
			    }
			    if (start < number.length) {
			      if (base === 16) {
			        this._parseHex(number, start, endian);
			      } else {
			        this._parseBase(number, base, start);
			        if (endian === 'le') {
			          this._initArray(this.toArray(), base, endian);
			        }
			      }
			    }
			  };
			  BN.prototype._initNumber = function _initNumber(number, base, endian) {
			    if (number < 0) {
			      this.negative = 1;
			      number = -number;
			    }
			    if (number < 0x4000000) {
			      this.words = [number & 0x3ffffff];
			      this.length = 1;
			    } else if (number < 0x10000000000000) {
			      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
			      this.length = 2;
			    } else {
			      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
			      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
			      this.length = 3;
			    }
			    if (endian !== 'le') return;

			    // Reverse the bytes
			    this._initArray(this.toArray(), base, endian);
			  };
			  BN.prototype._initArray = function _initArray(number, base, endian) {
			    // Perhaps a Uint8Array
			    assert(typeof number.length === 'number');
			    if (number.length <= 0) {
			      this.words = [0];
			      this.length = 1;
			      return this;
			    }
			    this.length = Math.ceil(number.length / 3);
			    this.words = new Array(this.length);
			    for (var i = 0; i < this.length; i++) {
			      this.words[i] = 0;
			    }
			    var j, w;
			    var off = 0;
			    if (endian === 'be') {
			      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
			        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
			        this.words[j] |= w << off & 0x3ffffff;
			        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
			        off += 24;
			        if (off >= 26) {
			          off -= 26;
			          j++;
			        }
			      }
			    } else if (endian === 'le') {
			      for (i = 0, j = 0; i < number.length; i += 3) {
			        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
			        this.words[j] |= w << off & 0x3ffffff;
			        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
			        off += 24;
			        if (off >= 26) {
			          off -= 26;
			          j++;
			        }
			      }
			    }
			    return this.strip();
			  };
			  function parseHex4Bits(string, index) {
			    var c = string.charCodeAt(index);
			    // 'A' - 'F'
			    if (c >= 65 && c <= 70) {
			      return c - 55;
			      // 'a' - 'f'
			    } else if (c >= 97 && c <= 102) {
			      return c - 87;
			      // '0' - '9'
			    } else {
			      return c - 48 & 0xf;
			    }
			  }
			  function parseHexByte(string, lowerBound, index) {
			    var r = parseHex4Bits(string, index);
			    if (index - 1 >= lowerBound) {
			      r |= parseHex4Bits(string, index - 1) << 4;
			    }
			    return r;
			  }
			  BN.prototype._parseHex = function _parseHex(number, start, endian) {
			    // Create possibly bigger array to ensure that it fits the number
			    this.length = Math.ceil((number.length - start) / 6);
			    this.words = new Array(this.length);
			    for (var i = 0; i < this.length; i++) {
			      this.words[i] = 0;
			    }

			    // 24-bits chunks
			    var off = 0;
			    var j = 0;
			    var w;
			    if (endian === 'be') {
			      for (i = number.length - 1; i >= start; i -= 2) {
			        w = parseHexByte(number, start, i) << off;
			        this.words[j] |= w & 0x3ffffff;
			        if (off >= 18) {
			          off -= 18;
			          j += 1;
			          this.words[j] |= w >>> 26;
			        } else {
			          off += 8;
			        }
			      }
			    } else {
			      var parseLength = number.length - start;
			      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
			        w = parseHexByte(number, start, i) << off;
			        this.words[j] |= w & 0x3ffffff;
			        if (off >= 18) {
			          off -= 18;
			          j += 1;
			          this.words[j] |= w >>> 26;
			        } else {
			          off += 8;
			        }
			      }
			    }
			    this.strip();
			  };
			  function parseBase(str, start, end, mul) {
			    var r = 0;
			    var len = Math.min(str.length, end);
			    for (var i = start; i < len; i++) {
			      var c = str.charCodeAt(i) - 48;
			      r *= mul;

			      // 'a'
			      if (c >= 49) {
			        r += c - 49 + 0xa;

			        // 'A'
			      } else if (c >= 17) {
			        r += c - 17 + 0xa;

			        // '0' - '9'
			      } else {
			        r += c;
			      }
			    }
			    return r;
			  }
			  BN.prototype._parseBase = function _parseBase(number, base, start) {
			    // Initialize as zero
			    this.words = [0];
			    this.length = 1;

			    // Find length of limb in base
			    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
			      limbLen++;
			    }
			    limbLen--;
			    limbPow = limbPow / base | 0;
			    var total = number.length - start;
			    var mod = total % limbLen;
			    var end = Math.min(total, total - mod) + start;
			    var word = 0;
			    for (var i = start; i < end; i += limbLen) {
			      word = parseBase(number, i, i + limbLen, base);
			      this.imuln(limbPow);
			      if (this.words[0] + word < 0x4000000) {
			        this.words[0] += word;
			      } else {
			        this._iaddn(word);
			      }
			    }
			    if (mod !== 0) {
			      var pow = 1;
			      word = parseBase(number, i, number.length, base);
			      for (i = 0; i < mod; i++) {
			        pow *= base;
			      }
			      this.imuln(pow);
			      if (this.words[0] + word < 0x4000000) {
			        this.words[0] += word;
			      } else {
			        this._iaddn(word);
			      }
			    }
			    this.strip();
			  };
			  BN.prototype.copy = function copy(dest) {
			    dest.words = new Array(this.length);
			    for (var i = 0; i < this.length; i++) {
			      dest.words[i] = this.words[i];
			    }
			    dest.length = this.length;
			    dest.negative = this.negative;
			    dest.red = this.red;
			  };
			  BN.prototype.clone = function clone() {
			    var r = new BN(null);
			    this.copy(r);
			    return r;
			  };
			  BN.prototype._expand = function _expand(size) {
			    while (this.length < size) {
			      this.words[this.length++] = 0;
			    }
			    return this;
			  };

			  // Remove leading `0` from `this`
			  BN.prototype.strip = function strip() {
			    while (this.length > 1 && this.words[this.length - 1] === 0) {
			      this.length--;
			    }
			    return this._normSign();
			  };
			  BN.prototype._normSign = function _normSign() {
			    // -0 = 0
			    if (this.length === 1 && this.words[0] === 0) {
			      this.negative = 0;
			    }
			    return this;
			  };
			  BN.prototype.inspect = function inspect() {
			    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
			  };

			  /*
			   var zeros = [];
			  var groupSizes = [];
			  var groupBases = [];
			   var s = '';
			  var i = -1;
			  while (++i < BN.wordSize) {
			    zeros[i] = s;
			    s += '0';
			  }
			  groupSizes[0] = 0;
			  groupSizes[1] = 0;
			  groupBases[0] = 0;
			  groupBases[1] = 0;
			  var base = 2 - 1;
			  while (++base < 36 + 1) {
			    var groupSize = 0;
			    var groupBase = 1;
			    while (groupBase < (1 << BN.wordSize) / base) {
			      groupBase *= base;
			      groupSize += 1;
			    }
			    groupSizes[base] = groupSize;
			    groupBases[base] = groupBase;
			  }
			   */

			  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
			  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
			  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
			  BN.prototype.toString = function toString(base, padding) {
			    base = base || 10;
			    padding = padding | 0 || 1;
			    var out;
			    if (base === 16 || base === 'hex') {
			      out = '';
			      var off = 0;
			      var carry = 0;
			      for (var i = 0; i < this.length; i++) {
			        var w = this.words[i];
			        var word = ((w << off | carry) & 0xffffff).toString(16);
			        carry = w >>> 24 - off & 0xffffff;
			        if (carry !== 0 || i !== this.length - 1) {
			          out = zeros[6 - word.length] + word + out;
			        } else {
			          out = word + out;
			        }
			        off += 2;
			        if (off >= 26) {
			          off -= 26;
			          i--;
			        }
			      }
			      if (carry !== 0) {
			        out = carry.toString(16) + out;
			      }
			      while (out.length % padding !== 0) {
			        out = '0' + out;
			      }
			      if (this.negative !== 0) {
			        out = '-' + out;
			      }
			      return out;
			    }
			    if (base === (base | 0) && base >= 2 && base <= 36) {
			      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
			      var groupSize = groupSizes[base];
			      // var groupBase = Math.pow(base, groupSize);
			      var groupBase = groupBases[base];
			      out = '';
			      var c = this.clone();
			      c.negative = 0;
			      while (!c.isZero()) {
			        var r = c.modn(groupBase).toString(base);
			        c = c.idivn(groupBase);
			        if (!c.isZero()) {
			          out = zeros[groupSize - r.length] + r + out;
			        } else {
			          out = r + out;
			        }
			      }
			      if (this.isZero()) {
			        out = '0' + out;
			      }
			      while (out.length % padding !== 0) {
			        out = '0' + out;
			      }
			      if (this.negative !== 0) {
			        out = '-' + out;
			      }
			      return out;
			    }
			    assert(false, 'Base should be between 2 and 36');
			  };
			  BN.prototype.toNumber = function toNumber() {
			    var ret = this.words[0];
			    if (this.length === 2) {
			      ret += this.words[1] * 0x4000000;
			    } else if (this.length === 3 && this.words[2] === 0x01) {
			      // NOTE: at this stage it is known that the top bit is set
			      ret += 0x10000000000000 + this.words[1] * 0x4000000;
			    } else if (this.length > 2) {
			      assert(false, 'Number can only safely store up to 53 bits');
			    }
			    return this.negative !== 0 ? -ret : ret;
			  };
			  BN.prototype.toJSON = function toJSON() {
			    return this.toString(16);
			  };
			  BN.prototype.toBuffer = function toBuffer(endian, length) {
			    assert(typeof Buffer !== 'undefined');
			    return this.toArrayLike(Buffer, endian, length);
			  };
			  BN.prototype.toArray = function toArray(endian, length) {
			    return this.toArrayLike(Array, endian, length);
			  };
			  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
			    var byteLength = this.byteLength();
			    var reqLength = length || Math.max(1, byteLength);
			    assert(byteLength <= reqLength, 'byte array longer than desired length');
			    assert(reqLength > 0, 'Requested array length <= 0');
			    this.strip();
			    var littleEndian = endian === 'le';
			    var res = new ArrayType(reqLength);
			    var b, i;
			    var q = this.clone();
			    if (!littleEndian) {
			      // Assume big-endian
			      for (i = 0; i < reqLength - byteLength; i++) {
			        res[i] = 0;
			      }
			      for (i = 0; !q.isZero(); i++) {
			        b = q.andln(0xff);
			        q.iushrn(8);
			        res[reqLength - i - 1] = b;
			      }
			    } else {
			      for (i = 0; !q.isZero(); i++) {
			        b = q.andln(0xff);
			        q.iushrn(8);
			        res[i] = b;
			      }
			      for (; i < reqLength; i++) {
			        res[i] = 0;
			      }
			    }
			    return res;
			  };
			  if (Math.clz32) {
			    BN.prototype._countBits = function _countBits(w) {
			      return 32 - Math.clz32(w);
			    };
			  } else {
			    BN.prototype._countBits = function _countBits(w) {
			      var t = w;
			      var r = 0;
			      if (t >= 0x1000) {
			        r += 13;
			        t >>>= 13;
			      }
			      if (t >= 0x40) {
			        r += 7;
			        t >>>= 7;
			      }
			      if (t >= 0x8) {
			        r += 4;
			        t >>>= 4;
			      }
			      if (t >= 0x02) {
			        r += 2;
			        t >>>= 2;
			      }
			      return r + t;
			    };
			  }
			  BN.prototype._zeroBits = function _zeroBits(w) {
			    // Short-cut
			    if (w === 0) return 26;
			    var t = w;
			    var r = 0;
			    if ((t & 0x1fff) === 0) {
			      r += 13;
			      t >>>= 13;
			    }
			    if ((t & 0x7f) === 0) {
			      r += 7;
			      t >>>= 7;
			    }
			    if ((t & 0xf) === 0) {
			      r += 4;
			      t >>>= 4;
			    }
			    if ((t & 0x3) === 0) {
			      r += 2;
			      t >>>= 2;
			    }
			    if ((t & 0x1) === 0) {
			      r++;
			    }
			    return r;
			  };

			  // Return number of used bits in a BN
			  BN.prototype.bitLength = function bitLength() {
			    var w = this.words[this.length - 1];
			    var hi = this._countBits(w);
			    return (this.length - 1) * 26 + hi;
			  };
			  function toBitArray(num) {
			    var w = new Array(num.bitLength());
			    for (var bit = 0; bit < w.length; bit++) {
			      var off = bit / 26 | 0;
			      var wbit = bit % 26;
			      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
			    }
			    return w;
			  }

			  // Number of trailing zero bits
			  BN.prototype.zeroBits = function zeroBits() {
			    if (this.isZero()) return 0;
			    var r = 0;
			    for (var i = 0; i < this.length; i++) {
			      var b = this._zeroBits(this.words[i]);
			      r += b;
			      if (b !== 26) break;
			    }
			    return r;
			  };
			  BN.prototype.byteLength = function byteLength() {
			    return Math.ceil(this.bitLength() / 8);
			  };
			  BN.prototype.toTwos = function toTwos(width) {
			    if (this.negative !== 0) {
			      return this.abs().inotn(width).iaddn(1);
			    }
			    return this.clone();
			  };
			  BN.prototype.fromTwos = function fromTwos(width) {
			    if (this.testn(width - 1)) {
			      return this.notn(width).iaddn(1).ineg();
			    }
			    return this.clone();
			  };
			  BN.prototype.isNeg = function isNeg() {
			    return this.negative !== 0;
			  };

			  // Return negative clone of `this`
			  BN.prototype.neg = function neg() {
			    return this.clone().ineg();
			  };
			  BN.prototype.ineg = function ineg() {
			    if (!this.isZero()) {
			      this.negative ^= 1;
			    }
			    return this;
			  };

			  // Or `num` with `this` in-place
			  BN.prototype.iuor = function iuor(num) {
			    while (this.length < num.length) {
			      this.words[this.length++] = 0;
			    }
			    for (var i = 0; i < num.length; i++) {
			      this.words[i] = this.words[i] | num.words[i];
			    }
			    return this.strip();
			  };
			  BN.prototype.ior = function ior(num) {
			    assert((this.negative | num.negative) === 0);
			    return this.iuor(num);
			  };

			  // Or `num` with `this`
			  BN.prototype.or = function or(num) {
			    if (this.length > num.length) return this.clone().ior(num);
			    return num.clone().ior(this);
			  };
			  BN.prototype.uor = function uor(num) {
			    if (this.length > num.length) return this.clone().iuor(num);
			    return num.clone().iuor(this);
			  };

			  // And `num` with `this` in-place
			  BN.prototype.iuand = function iuand(num) {
			    // b = min-length(num, this)
			    var b;
			    if (this.length > num.length) {
			      b = num;
			    } else {
			      b = this;
			    }
			    for (var i = 0; i < b.length; i++) {
			      this.words[i] = this.words[i] & num.words[i];
			    }
			    this.length = b.length;
			    return this.strip();
			  };
			  BN.prototype.iand = function iand(num) {
			    assert((this.negative | num.negative) === 0);
			    return this.iuand(num);
			  };

			  // And `num` with `this`
			  BN.prototype.and = function and(num) {
			    if (this.length > num.length) return this.clone().iand(num);
			    return num.clone().iand(this);
			  };
			  BN.prototype.uand = function uand(num) {
			    if (this.length > num.length) return this.clone().iuand(num);
			    return num.clone().iuand(this);
			  };

			  // Xor `num` with `this` in-place
			  BN.prototype.iuxor = function iuxor(num) {
			    // a.length > b.length
			    var a;
			    var b;
			    if (this.length > num.length) {
			      a = this;
			      b = num;
			    } else {
			      a = num;
			      b = this;
			    }
			    for (var i = 0; i < b.length; i++) {
			      this.words[i] = a.words[i] ^ b.words[i];
			    }
			    if (this !== a) {
			      for (; i < a.length; i++) {
			        this.words[i] = a.words[i];
			      }
			    }
			    this.length = a.length;
			    return this.strip();
			  };
			  BN.prototype.ixor = function ixor(num) {
			    assert((this.negative | num.negative) === 0);
			    return this.iuxor(num);
			  };

			  // Xor `num` with `this`
			  BN.prototype.xor = function xor(num) {
			    if (this.length > num.length) return this.clone().ixor(num);
			    return num.clone().ixor(this);
			  };
			  BN.prototype.uxor = function uxor(num) {
			    if (this.length > num.length) return this.clone().iuxor(num);
			    return num.clone().iuxor(this);
			  };

			  // Not ``this`` with ``width`` bitwidth
			  BN.prototype.inotn = function inotn(width) {
			    assert(typeof width === 'number' && width >= 0);
			    var bytesNeeded = Math.ceil(width / 26) | 0;
			    var bitsLeft = width % 26;

			    // Extend the buffer with leading zeroes
			    this._expand(bytesNeeded);
			    if (bitsLeft > 0) {
			      bytesNeeded--;
			    }

			    // Handle complete words
			    for (var i = 0; i < bytesNeeded; i++) {
			      this.words[i] = ~this.words[i] & 0x3ffffff;
			    }

			    // Handle the residue
			    if (bitsLeft > 0) {
			      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
			    }

			    // And remove leading zeroes
			    return this.strip();
			  };
			  BN.prototype.notn = function notn(width) {
			    return this.clone().inotn(width);
			  };

			  // Set `bit` of `this`
			  BN.prototype.setn = function setn(bit, val) {
			    assert(typeof bit === 'number' && bit >= 0);
			    var off = bit / 26 | 0;
			    var wbit = bit % 26;
			    this._expand(off + 1);
			    if (val) {
			      this.words[off] = this.words[off] | 1 << wbit;
			    } else {
			      this.words[off] = this.words[off] & ~(1 << wbit);
			    }
			    return this.strip();
			  };

			  // Add `num` to `this` in-place
			  BN.prototype.iadd = function iadd(num) {
			    var r;

			    // negative + positive
			    if (this.negative !== 0 && num.negative === 0) {
			      this.negative = 0;
			      r = this.isub(num);
			      this.negative ^= 1;
			      return this._normSign();

			      // positive + negative
			    } else if (this.negative === 0 && num.negative !== 0) {
			      num.negative = 0;
			      r = this.isub(num);
			      num.negative = 1;
			      return r._normSign();
			    }

			    // a.length > b.length
			    var a, b;
			    if (this.length > num.length) {
			      a = this;
			      b = num;
			    } else {
			      a = num;
			      b = this;
			    }
			    var carry = 0;
			    for (var i = 0; i < b.length; i++) {
			      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
			      this.words[i] = r & 0x3ffffff;
			      carry = r >>> 26;
			    }
			    for (; carry !== 0 && i < a.length; i++) {
			      r = (a.words[i] | 0) + carry;
			      this.words[i] = r & 0x3ffffff;
			      carry = r >>> 26;
			    }
			    this.length = a.length;
			    if (carry !== 0) {
			      this.words[this.length] = carry;
			      this.length++;
			      // Copy the rest of the words
			    } else if (a !== this) {
			      for (; i < a.length; i++) {
			        this.words[i] = a.words[i];
			      }
			    }
			    return this;
			  };

			  // Add `num` to `this`
			  BN.prototype.add = function add(num) {
			    var res;
			    if (num.negative !== 0 && this.negative === 0) {
			      num.negative = 0;
			      res = this.sub(num);
			      num.negative ^= 1;
			      return res;
			    } else if (num.negative === 0 && this.negative !== 0) {
			      this.negative = 0;
			      res = num.sub(this);
			      this.negative = 1;
			      return res;
			    }
			    if (this.length > num.length) return this.clone().iadd(num);
			    return num.clone().iadd(this);
			  };

			  // Subtract `num` from `this` in-place
			  BN.prototype.isub = function isub(num) {
			    // this - (-num) = this + num
			    if (num.negative !== 0) {
			      num.negative = 0;
			      var r = this.iadd(num);
			      num.negative = 1;
			      return r._normSign();

			      // -this - num = -(this + num)
			    } else if (this.negative !== 0) {
			      this.negative = 0;
			      this.iadd(num);
			      this.negative = 1;
			      return this._normSign();
			    }

			    // At this point both numbers are positive
			    var cmp = this.cmp(num);

			    // Optimization - zeroify
			    if (cmp === 0) {
			      this.negative = 0;
			      this.length = 1;
			      this.words[0] = 0;
			      return this;
			    }

			    // a > b
			    var a, b;
			    if (cmp > 0) {
			      a = this;
			      b = num;
			    } else {
			      a = num;
			      b = this;
			    }
			    var carry = 0;
			    for (var i = 0; i < b.length; i++) {
			      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
			      carry = r >> 26;
			      this.words[i] = r & 0x3ffffff;
			    }
			    for (; carry !== 0 && i < a.length; i++) {
			      r = (a.words[i] | 0) + carry;
			      carry = r >> 26;
			      this.words[i] = r & 0x3ffffff;
			    }

			    // Copy rest of the words
			    if (carry === 0 && i < a.length && a !== this) {
			      for (; i < a.length; i++) {
			        this.words[i] = a.words[i];
			      }
			    }
			    this.length = Math.max(this.length, i);
			    if (a !== this) {
			      this.negative = 1;
			    }
			    return this.strip();
			  };

			  // Subtract `num` from `this`
			  BN.prototype.sub = function sub(num) {
			    return this.clone().isub(num);
			  };
			  function smallMulTo(self, num, out) {
			    out.negative = num.negative ^ self.negative;
			    var len = self.length + num.length | 0;
			    out.length = len;
			    len = len - 1 | 0;

			    // Peel one iteration (compiler can't do it, because of code complexity)
			    var a = self.words[0] | 0;
			    var b = num.words[0] | 0;
			    var r = a * b;
			    var lo = r & 0x3ffffff;
			    var carry = r / 0x4000000 | 0;
			    out.words[0] = lo;
			    for (var k = 1; k < len; k++) {
			      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
			      // note that ncarry could be >= 0x3ffffff
			      var ncarry = carry >>> 26;
			      var rword = carry & 0x3ffffff;
			      var maxJ = Math.min(k, num.length - 1);
			      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			        var i = k - j | 0;
			        a = self.words[i] | 0;
			        b = num.words[j] | 0;
			        r = a * b + rword;
			        ncarry += r / 0x4000000 | 0;
			        rword = r & 0x3ffffff;
			      }
			      out.words[k] = rword | 0;
			      carry = ncarry | 0;
			    }
			    if (carry !== 0) {
			      out.words[k] = carry | 0;
			    } else {
			      out.length--;
			    }
			    return out.strip();
			  }

			  // TODO(indutny): it may be reasonable to omit it for users who don't need
			  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
			  // multiplication (like elliptic secp256k1).
			  var comb10MulTo = function comb10MulTo(self, num, out) {
			    var a = self.words;
			    var b = num.words;
			    var o = out.words;
			    var c = 0;
			    var lo;
			    var mid;
			    var hi;
			    var a0 = a[0] | 0;
			    var al0 = a0 & 0x1fff;
			    var ah0 = a0 >>> 13;
			    var a1 = a[1] | 0;
			    var al1 = a1 & 0x1fff;
			    var ah1 = a1 >>> 13;
			    var a2 = a[2] | 0;
			    var al2 = a2 & 0x1fff;
			    var ah2 = a2 >>> 13;
			    var a3 = a[3] | 0;
			    var al3 = a3 & 0x1fff;
			    var ah3 = a3 >>> 13;
			    var a4 = a[4] | 0;
			    var al4 = a4 & 0x1fff;
			    var ah4 = a4 >>> 13;
			    var a5 = a[5] | 0;
			    var al5 = a5 & 0x1fff;
			    var ah5 = a5 >>> 13;
			    var a6 = a[6] | 0;
			    var al6 = a6 & 0x1fff;
			    var ah6 = a6 >>> 13;
			    var a7 = a[7] | 0;
			    var al7 = a7 & 0x1fff;
			    var ah7 = a7 >>> 13;
			    var a8 = a[8] | 0;
			    var al8 = a8 & 0x1fff;
			    var ah8 = a8 >>> 13;
			    var a9 = a[9] | 0;
			    var al9 = a9 & 0x1fff;
			    var ah9 = a9 >>> 13;
			    var b0 = b[0] | 0;
			    var bl0 = b0 & 0x1fff;
			    var bh0 = b0 >>> 13;
			    var b1 = b[1] | 0;
			    var bl1 = b1 & 0x1fff;
			    var bh1 = b1 >>> 13;
			    var b2 = b[2] | 0;
			    var bl2 = b2 & 0x1fff;
			    var bh2 = b2 >>> 13;
			    var b3 = b[3] | 0;
			    var bl3 = b3 & 0x1fff;
			    var bh3 = b3 >>> 13;
			    var b4 = b[4] | 0;
			    var bl4 = b4 & 0x1fff;
			    var bh4 = b4 >>> 13;
			    var b5 = b[5] | 0;
			    var bl5 = b5 & 0x1fff;
			    var bh5 = b5 >>> 13;
			    var b6 = b[6] | 0;
			    var bl6 = b6 & 0x1fff;
			    var bh6 = b6 >>> 13;
			    var b7 = b[7] | 0;
			    var bl7 = b7 & 0x1fff;
			    var bh7 = b7 >>> 13;
			    var b8 = b[8] | 0;
			    var bl8 = b8 & 0x1fff;
			    var bh8 = b8 >>> 13;
			    var b9 = b[9] | 0;
			    var bl9 = b9 & 0x1fff;
			    var bh9 = b9 >>> 13;
			    out.negative = self.negative ^ num.negative;
			    out.length = 19;
			    /* k = 0 */
			    lo = Math.imul(al0, bl0);
			    mid = Math.imul(al0, bh0);
			    mid = mid + Math.imul(ah0, bl0) | 0;
			    hi = Math.imul(ah0, bh0);
			    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
			    w0 &= 0x3ffffff;
			    /* k = 1 */
			    lo = Math.imul(al1, bl0);
			    mid = Math.imul(al1, bh0);
			    mid = mid + Math.imul(ah1, bl0) | 0;
			    hi = Math.imul(ah1, bh0);
			    lo = lo + Math.imul(al0, bl1) | 0;
			    mid = mid + Math.imul(al0, bh1) | 0;
			    mid = mid + Math.imul(ah0, bl1) | 0;
			    hi = hi + Math.imul(ah0, bh1) | 0;
			    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
			    w1 &= 0x3ffffff;
			    /* k = 2 */
			    lo = Math.imul(al2, bl0);
			    mid = Math.imul(al2, bh0);
			    mid = mid + Math.imul(ah2, bl0) | 0;
			    hi = Math.imul(ah2, bh0);
			    lo = lo + Math.imul(al1, bl1) | 0;
			    mid = mid + Math.imul(al1, bh1) | 0;
			    mid = mid + Math.imul(ah1, bl1) | 0;
			    hi = hi + Math.imul(ah1, bh1) | 0;
			    lo = lo + Math.imul(al0, bl2) | 0;
			    mid = mid + Math.imul(al0, bh2) | 0;
			    mid = mid + Math.imul(ah0, bl2) | 0;
			    hi = hi + Math.imul(ah0, bh2) | 0;
			    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
			    w2 &= 0x3ffffff;
			    /* k = 3 */
			    lo = Math.imul(al3, bl0);
			    mid = Math.imul(al3, bh0);
			    mid = mid + Math.imul(ah3, bl0) | 0;
			    hi = Math.imul(ah3, bh0);
			    lo = lo + Math.imul(al2, bl1) | 0;
			    mid = mid + Math.imul(al2, bh1) | 0;
			    mid = mid + Math.imul(ah2, bl1) | 0;
			    hi = hi + Math.imul(ah2, bh1) | 0;
			    lo = lo + Math.imul(al1, bl2) | 0;
			    mid = mid + Math.imul(al1, bh2) | 0;
			    mid = mid + Math.imul(ah1, bl2) | 0;
			    hi = hi + Math.imul(ah1, bh2) | 0;
			    lo = lo + Math.imul(al0, bl3) | 0;
			    mid = mid + Math.imul(al0, bh3) | 0;
			    mid = mid + Math.imul(ah0, bl3) | 0;
			    hi = hi + Math.imul(ah0, bh3) | 0;
			    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
			    w3 &= 0x3ffffff;
			    /* k = 4 */
			    lo = Math.imul(al4, bl0);
			    mid = Math.imul(al4, bh0);
			    mid = mid + Math.imul(ah4, bl0) | 0;
			    hi = Math.imul(ah4, bh0);
			    lo = lo + Math.imul(al3, bl1) | 0;
			    mid = mid + Math.imul(al3, bh1) | 0;
			    mid = mid + Math.imul(ah3, bl1) | 0;
			    hi = hi + Math.imul(ah3, bh1) | 0;
			    lo = lo + Math.imul(al2, bl2) | 0;
			    mid = mid + Math.imul(al2, bh2) | 0;
			    mid = mid + Math.imul(ah2, bl2) | 0;
			    hi = hi + Math.imul(ah2, bh2) | 0;
			    lo = lo + Math.imul(al1, bl3) | 0;
			    mid = mid + Math.imul(al1, bh3) | 0;
			    mid = mid + Math.imul(ah1, bl3) | 0;
			    hi = hi + Math.imul(ah1, bh3) | 0;
			    lo = lo + Math.imul(al0, bl4) | 0;
			    mid = mid + Math.imul(al0, bh4) | 0;
			    mid = mid + Math.imul(ah0, bl4) | 0;
			    hi = hi + Math.imul(ah0, bh4) | 0;
			    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
			    w4 &= 0x3ffffff;
			    /* k = 5 */
			    lo = Math.imul(al5, bl0);
			    mid = Math.imul(al5, bh0);
			    mid = mid + Math.imul(ah5, bl0) | 0;
			    hi = Math.imul(ah5, bh0);
			    lo = lo + Math.imul(al4, bl1) | 0;
			    mid = mid + Math.imul(al4, bh1) | 0;
			    mid = mid + Math.imul(ah4, bl1) | 0;
			    hi = hi + Math.imul(ah4, bh1) | 0;
			    lo = lo + Math.imul(al3, bl2) | 0;
			    mid = mid + Math.imul(al3, bh2) | 0;
			    mid = mid + Math.imul(ah3, bl2) | 0;
			    hi = hi + Math.imul(ah3, bh2) | 0;
			    lo = lo + Math.imul(al2, bl3) | 0;
			    mid = mid + Math.imul(al2, bh3) | 0;
			    mid = mid + Math.imul(ah2, bl3) | 0;
			    hi = hi + Math.imul(ah2, bh3) | 0;
			    lo = lo + Math.imul(al1, bl4) | 0;
			    mid = mid + Math.imul(al1, bh4) | 0;
			    mid = mid + Math.imul(ah1, bl4) | 0;
			    hi = hi + Math.imul(ah1, bh4) | 0;
			    lo = lo + Math.imul(al0, bl5) | 0;
			    mid = mid + Math.imul(al0, bh5) | 0;
			    mid = mid + Math.imul(ah0, bl5) | 0;
			    hi = hi + Math.imul(ah0, bh5) | 0;
			    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
			    w5 &= 0x3ffffff;
			    /* k = 6 */
			    lo = Math.imul(al6, bl0);
			    mid = Math.imul(al6, bh0);
			    mid = mid + Math.imul(ah6, bl0) | 0;
			    hi = Math.imul(ah6, bh0);
			    lo = lo + Math.imul(al5, bl1) | 0;
			    mid = mid + Math.imul(al5, bh1) | 0;
			    mid = mid + Math.imul(ah5, bl1) | 0;
			    hi = hi + Math.imul(ah5, bh1) | 0;
			    lo = lo + Math.imul(al4, bl2) | 0;
			    mid = mid + Math.imul(al4, bh2) | 0;
			    mid = mid + Math.imul(ah4, bl2) | 0;
			    hi = hi + Math.imul(ah4, bh2) | 0;
			    lo = lo + Math.imul(al3, bl3) | 0;
			    mid = mid + Math.imul(al3, bh3) | 0;
			    mid = mid + Math.imul(ah3, bl3) | 0;
			    hi = hi + Math.imul(ah3, bh3) | 0;
			    lo = lo + Math.imul(al2, bl4) | 0;
			    mid = mid + Math.imul(al2, bh4) | 0;
			    mid = mid + Math.imul(ah2, bl4) | 0;
			    hi = hi + Math.imul(ah2, bh4) | 0;
			    lo = lo + Math.imul(al1, bl5) | 0;
			    mid = mid + Math.imul(al1, bh5) | 0;
			    mid = mid + Math.imul(ah1, bl5) | 0;
			    hi = hi + Math.imul(ah1, bh5) | 0;
			    lo = lo + Math.imul(al0, bl6) | 0;
			    mid = mid + Math.imul(al0, bh6) | 0;
			    mid = mid + Math.imul(ah0, bl6) | 0;
			    hi = hi + Math.imul(ah0, bh6) | 0;
			    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
			    w6 &= 0x3ffffff;
			    /* k = 7 */
			    lo = Math.imul(al7, bl0);
			    mid = Math.imul(al7, bh0);
			    mid = mid + Math.imul(ah7, bl0) | 0;
			    hi = Math.imul(ah7, bh0);
			    lo = lo + Math.imul(al6, bl1) | 0;
			    mid = mid + Math.imul(al6, bh1) | 0;
			    mid = mid + Math.imul(ah6, bl1) | 0;
			    hi = hi + Math.imul(ah6, bh1) | 0;
			    lo = lo + Math.imul(al5, bl2) | 0;
			    mid = mid + Math.imul(al5, bh2) | 0;
			    mid = mid + Math.imul(ah5, bl2) | 0;
			    hi = hi + Math.imul(ah5, bh2) | 0;
			    lo = lo + Math.imul(al4, bl3) | 0;
			    mid = mid + Math.imul(al4, bh3) | 0;
			    mid = mid + Math.imul(ah4, bl3) | 0;
			    hi = hi + Math.imul(ah4, bh3) | 0;
			    lo = lo + Math.imul(al3, bl4) | 0;
			    mid = mid + Math.imul(al3, bh4) | 0;
			    mid = mid + Math.imul(ah3, bl4) | 0;
			    hi = hi + Math.imul(ah3, bh4) | 0;
			    lo = lo + Math.imul(al2, bl5) | 0;
			    mid = mid + Math.imul(al2, bh5) | 0;
			    mid = mid + Math.imul(ah2, bl5) | 0;
			    hi = hi + Math.imul(ah2, bh5) | 0;
			    lo = lo + Math.imul(al1, bl6) | 0;
			    mid = mid + Math.imul(al1, bh6) | 0;
			    mid = mid + Math.imul(ah1, bl6) | 0;
			    hi = hi + Math.imul(ah1, bh6) | 0;
			    lo = lo + Math.imul(al0, bl7) | 0;
			    mid = mid + Math.imul(al0, bh7) | 0;
			    mid = mid + Math.imul(ah0, bl7) | 0;
			    hi = hi + Math.imul(ah0, bh7) | 0;
			    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
			    w7 &= 0x3ffffff;
			    /* k = 8 */
			    lo = Math.imul(al8, bl0);
			    mid = Math.imul(al8, bh0);
			    mid = mid + Math.imul(ah8, bl0) | 0;
			    hi = Math.imul(ah8, bh0);
			    lo = lo + Math.imul(al7, bl1) | 0;
			    mid = mid + Math.imul(al7, bh1) | 0;
			    mid = mid + Math.imul(ah7, bl1) | 0;
			    hi = hi + Math.imul(ah7, bh1) | 0;
			    lo = lo + Math.imul(al6, bl2) | 0;
			    mid = mid + Math.imul(al6, bh2) | 0;
			    mid = mid + Math.imul(ah6, bl2) | 0;
			    hi = hi + Math.imul(ah6, bh2) | 0;
			    lo = lo + Math.imul(al5, bl3) | 0;
			    mid = mid + Math.imul(al5, bh3) | 0;
			    mid = mid + Math.imul(ah5, bl3) | 0;
			    hi = hi + Math.imul(ah5, bh3) | 0;
			    lo = lo + Math.imul(al4, bl4) | 0;
			    mid = mid + Math.imul(al4, bh4) | 0;
			    mid = mid + Math.imul(ah4, bl4) | 0;
			    hi = hi + Math.imul(ah4, bh4) | 0;
			    lo = lo + Math.imul(al3, bl5) | 0;
			    mid = mid + Math.imul(al3, bh5) | 0;
			    mid = mid + Math.imul(ah3, bl5) | 0;
			    hi = hi + Math.imul(ah3, bh5) | 0;
			    lo = lo + Math.imul(al2, bl6) | 0;
			    mid = mid + Math.imul(al2, bh6) | 0;
			    mid = mid + Math.imul(ah2, bl6) | 0;
			    hi = hi + Math.imul(ah2, bh6) | 0;
			    lo = lo + Math.imul(al1, bl7) | 0;
			    mid = mid + Math.imul(al1, bh7) | 0;
			    mid = mid + Math.imul(ah1, bl7) | 0;
			    hi = hi + Math.imul(ah1, bh7) | 0;
			    lo = lo + Math.imul(al0, bl8) | 0;
			    mid = mid + Math.imul(al0, bh8) | 0;
			    mid = mid + Math.imul(ah0, bl8) | 0;
			    hi = hi + Math.imul(ah0, bh8) | 0;
			    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
			    w8 &= 0x3ffffff;
			    /* k = 9 */
			    lo = Math.imul(al9, bl0);
			    mid = Math.imul(al9, bh0);
			    mid = mid + Math.imul(ah9, bl0) | 0;
			    hi = Math.imul(ah9, bh0);
			    lo = lo + Math.imul(al8, bl1) | 0;
			    mid = mid + Math.imul(al8, bh1) | 0;
			    mid = mid + Math.imul(ah8, bl1) | 0;
			    hi = hi + Math.imul(ah8, bh1) | 0;
			    lo = lo + Math.imul(al7, bl2) | 0;
			    mid = mid + Math.imul(al7, bh2) | 0;
			    mid = mid + Math.imul(ah7, bl2) | 0;
			    hi = hi + Math.imul(ah7, bh2) | 0;
			    lo = lo + Math.imul(al6, bl3) | 0;
			    mid = mid + Math.imul(al6, bh3) | 0;
			    mid = mid + Math.imul(ah6, bl3) | 0;
			    hi = hi + Math.imul(ah6, bh3) | 0;
			    lo = lo + Math.imul(al5, bl4) | 0;
			    mid = mid + Math.imul(al5, bh4) | 0;
			    mid = mid + Math.imul(ah5, bl4) | 0;
			    hi = hi + Math.imul(ah5, bh4) | 0;
			    lo = lo + Math.imul(al4, bl5) | 0;
			    mid = mid + Math.imul(al4, bh5) | 0;
			    mid = mid + Math.imul(ah4, bl5) | 0;
			    hi = hi + Math.imul(ah4, bh5) | 0;
			    lo = lo + Math.imul(al3, bl6) | 0;
			    mid = mid + Math.imul(al3, bh6) | 0;
			    mid = mid + Math.imul(ah3, bl6) | 0;
			    hi = hi + Math.imul(ah3, bh6) | 0;
			    lo = lo + Math.imul(al2, bl7) | 0;
			    mid = mid + Math.imul(al2, bh7) | 0;
			    mid = mid + Math.imul(ah2, bl7) | 0;
			    hi = hi + Math.imul(ah2, bh7) | 0;
			    lo = lo + Math.imul(al1, bl8) | 0;
			    mid = mid + Math.imul(al1, bh8) | 0;
			    mid = mid + Math.imul(ah1, bl8) | 0;
			    hi = hi + Math.imul(ah1, bh8) | 0;
			    lo = lo + Math.imul(al0, bl9) | 0;
			    mid = mid + Math.imul(al0, bh9) | 0;
			    mid = mid + Math.imul(ah0, bl9) | 0;
			    hi = hi + Math.imul(ah0, bh9) | 0;
			    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
			    w9 &= 0x3ffffff;
			    /* k = 10 */
			    lo = Math.imul(al9, bl1);
			    mid = Math.imul(al9, bh1);
			    mid = mid + Math.imul(ah9, bl1) | 0;
			    hi = Math.imul(ah9, bh1);
			    lo = lo + Math.imul(al8, bl2) | 0;
			    mid = mid + Math.imul(al8, bh2) | 0;
			    mid = mid + Math.imul(ah8, bl2) | 0;
			    hi = hi + Math.imul(ah8, bh2) | 0;
			    lo = lo + Math.imul(al7, bl3) | 0;
			    mid = mid + Math.imul(al7, bh3) | 0;
			    mid = mid + Math.imul(ah7, bl3) | 0;
			    hi = hi + Math.imul(ah7, bh3) | 0;
			    lo = lo + Math.imul(al6, bl4) | 0;
			    mid = mid + Math.imul(al6, bh4) | 0;
			    mid = mid + Math.imul(ah6, bl4) | 0;
			    hi = hi + Math.imul(ah6, bh4) | 0;
			    lo = lo + Math.imul(al5, bl5) | 0;
			    mid = mid + Math.imul(al5, bh5) | 0;
			    mid = mid + Math.imul(ah5, bl5) | 0;
			    hi = hi + Math.imul(ah5, bh5) | 0;
			    lo = lo + Math.imul(al4, bl6) | 0;
			    mid = mid + Math.imul(al4, bh6) | 0;
			    mid = mid + Math.imul(ah4, bl6) | 0;
			    hi = hi + Math.imul(ah4, bh6) | 0;
			    lo = lo + Math.imul(al3, bl7) | 0;
			    mid = mid + Math.imul(al3, bh7) | 0;
			    mid = mid + Math.imul(ah3, bl7) | 0;
			    hi = hi + Math.imul(ah3, bh7) | 0;
			    lo = lo + Math.imul(al2, bl8) | 0;
			    mid = mid + Math.imul(al2, bh8) | 0;
			    mid = mid + Math.imul(ah2, bl8) | 0;
			    hi = hi + Math.imul(ah2, bh8) | 0;
			    lo = lo + Math.imul(al1, bl9) | 0;
			    mid = mid + Math.imul(al1, bh9) | 0;
			    mid = mid + Math.imul(ah1, bl9) | 0;
			    hi = hi + Math.imul(ah1, bh9) | 0;
			    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
			    w10 &= 0x3ffffff;
			    /* k = 11 */
			    lo = Math.imul(al9, bl2);
			    mid = Math.imul(al9, bh2);
			    mid = mid + Math.imul(ah9, bl2) | 0;
			    hi = Math.imul(ah9, bh2);
			    lo = lo + Math.imul(al8, bl3) | 0;
			    mid = mid + Math.imul(al8, bh3) | 0;
			    mid = mid + Math.imul(ah8, bl3) | 0;
			    hi = hi + Math.imul(ah8, bh3) | 0;
			    lo = lo + Math.imul(al7, bl4) | 0;
			    mid = mid + Math.imul(al7, bh4) | 0;
			    mid = mid + Math.imul(ah7, bl4) | 0;
			    hi = hi + Math.imul(ah7, bh4) | 0;
			    lo = lo + Math.imul(al6, bl5) | 0;
			    mid = mid + Math.imul(al6, bh5) | 0;
			    mid = mid + Math.imul(ah6, bl5) | 0;
			    hi = hi + Math.imul(ah6, bh5) | 0;
			    lo = lo + Math.imul(al5, bl6) | 0;
			    mid = mid + Math.imul(al5, bh6) | 0;
			    mid = mid + Math.imul(ah5, bl6) | 0;
			    hi = hi + Math.imul(ah5, bh6) | 0;
			    lo = lo + Math.imul(al4, bl7) | 0;
			    mid = mid + Math.imul(al4, bh7) | 0;
			    mid = mid + Math.imul(ah4, bl7) | 0;
			    hi = hi + Math.imul(ah4, bh7) | 0;
			    lo = lo + Math.imul(al3, bl8) | 0;
			    mid = mid + Math.imul(al3, bh8) | 0;
			    mid = mid + Math.imul(ah3, bl8) | 0;
			    hi = hi + Math.imul(ah3, bh8) | 0;
			    lo = lo + Math.imul(al2, bl9) | 0;
			    mid = mid + Math.imul(al2, bh9) | 0;
			    mid = mid + Math.imul(ah2, bl9) | 0;
			    hi = hi + Math.imul(ah2, bh9) | 0;
			    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
			    w11 &= 0x3ffffff;
			    /* k = 12 */
			    lo = Math.imul(al9, bl3);
			    mid = Math.imul(al9, bh3);
			    mid = mid + Math.imul(ah9, bl3) | 0;
			    hi = Math.imul(ah9, bh3);
			    lo = lo + Math.imul(al8, bl4) | 0;
			    mid = mid + Math.imul(al8, bh4) | 0;
			    mid = mid + Math.imul(ah8, bl4) | 0;
			    hi = hi + Math.imul(ah8, bh4) | 0;
			    lo = lo + Math.imul(al7, bl5) | 0;
			    mid = mid + Math.imul(al7, bh5) | 0;
			    mid = mid + Math.imul(ah7, bl5) | 0;
			    hi = hi + Math.imul(ah7, bh5) | 0;
			    lo = lo + Math.imul(al6, bl6) | 0;
			    mid = mid + Math.imul(al6, bh6) | 0;
			    mid = mid + Math.imul(ah6, bl6) | 0;
			    hi = hi + Math.imul(ah6, bh6) | 0;
			    lo = lo + Math.imul(al5, bl7) | 0;
			    mid = mid + Math.imul(al5, bh7) | 0;
			    mid = mid + Math.imul(ah5, bl7) | 0;
			    hi = hi + Math.imul(ah5, bh7) | 0;
			    lo = lo + Math.imul(al4, bl8) | 0;
			    mid = mid + Math.imul(al4, bh8) | 0;
			    mid = mid + Math.imul(ah4, bl8) | 0;
			    hi = hi + Math.imul(ah4, bh8) | 0;
			    lo = lo + Math.imul(al3, bl9) | 0;
			    mid = mid + Math.imul(al3, bh9) | 0;
			    mid = mid + Math.imul(ah3, bl9) | 0;
			    hi = hi + Math.imul(ah3, bh9) | 0;
			    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
			    w12 &= 0x3ffffff;
			    /* k = 13 */
			    lo = Math.imul(al9, bl4);
			    mid = Math.imul(al9, bh4);
			    mid = mid + Math.imul(ah9, bl4) | 0;
			    hi = Math.imul(ah9, bh4);
			    lo = lo + Math.imul(al8, bl5) | 0;
			    mid = mid + Math.imul(al8, bh5) | 0;
			    mid = mid + Math.imul(ah8, bl5) | 0;
			    hi = hi + Math.imul(ah8, bh5) | 0;
			    lo = lo + Math.imul(al7, bl6) | 0;
			    mid = mid + Math.imul(al7, bh6) | 0;
			    mid = mid + Math.imul(ah7, bl6) | 0;
			    hi = hi + Math.imul(ah7, bh6) | 0;
			    lo = lo + Math.imul(al6, bl7) | 0;
			    mid = mid + Math.imul(al6, bh7) | 0;
			    mid = mid + Math.imul(ah6, bl7) | 0;
			    hi = hi + Math.imul(ah6, bh7) | 0;
			    lo = lo + Math.imul(al5, bl8) | 0;
			    mid = mid + Math.imul(al5, bh8) | 0;
			    mid = mid + Math.imul(ah5, bl8) | 0;
			    hi = hi + Math.imul(ah5, bh8) | 0;
			    lo = lo + Math.imul(al4, bl9) | 0;
			    mid = mid + Math.imul(al4, bh9) | 0;
			    mid = mid + Math.imul(ah4, bl9) | 0;
			    hi = hi + Math.imul(ah4, bh9) | 0;
			    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
			    w13 &= 0x3ffffff;
			    /* k = 14 */
			    lo = Math.imul(al9, bl5);
			    mid = Math.imul(al9, bh5);
			    mid = mid + Math.imul(ah9, bl5) | 0;
			    hi = Math.imul(ah9, bh5);
			    lo = lo + Math.imul(al8, bl6) | 0;
			    mid = mid + Math.imul(al8, bh6) | 0;
			    mid = mid + Math.imul(ah8, bl6) | 0;
			    hi = hi + Math.imul(ah8, bh6) | 0;
			    lo = lo + Math.imul(al7, bl7) | 0;
			    mid = mid + Math.imul(al7, bh7) | 0;
			    mid = mid + Math.imul(ah7, bl7) | 0;
			    hi = hi + Math.imul(ah7, bh7) | 0;
			    lo = lo + Math.imul(al6, bl8) | 0;
			    mid = mid + Math.imul(al6, bh8) | 0;
			    mid = mid + Math.imul(ah6, bl8) | 0;
			    hi = hi + Math.imul(ah6, bh8) | 0;
			    lo = lo + Math.imul(al5, bl9) | 0;
			    mid = mid + Math.imul(al5, bh9) | 0;
			    mid = mid + Math.imul(ah5, bl9) | 0;
			    hi = hi + Math.imul(ah5, bh9) | 0;
			    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
			    w14 &= 0x3ffffff;
			    /* k = 15 */
			    lo = Math.imul(al9, bl6);
			    mid = Math.imul(al9, bh6);
			    mid = mid + Math.imul(ah9, bl6) | 0;
			    hi = Math.imul(ah9, bh6);
			    lo = lo + Math.imul(al8, bl7) | 0;
			    mid = mid + Math.imul(al8, bh7) | 0;
			    mid = mid + Math.imul(ah8, bl7) | 0;
			    hi = hi + Math.imul(ah8, bh7) | 0;
			    lo = lo + Math.imul(al7, bl8) | 0;
			    mid = mid + Math.imul(al7, bh8) | 0;
			    mid = mid + Math.imul(ah7, bl8) | 0;
			    hi = hi + Math.imul(ah7, bh8) | 0;
			    lo = lo + Math.imul(al6, bl9) | 0;
			    mid = mid + Math.imul(al6, bh9) | 0;
			    mid = mid + Math.imul(ah6, bl9) | 0;
			    hi = hi + Math.imul(ah6, bh9) | 0;
			    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
			    w15 &= 0x3ffffff;
			    /* k = 16 */
			    lo = Math.imul(al9, bl7);
			    mid = Math.imul(al9, bh7);
			    mid = mid + Math.imul(ah9, bl7) | 0;
			    hi = Math.imul(ah9, bh7);
			    lo = lo + Math.imul(al8, bl8) | 0;
			    mid = mid + Math.imul(al8, bh8) | 0;
			    mid = mid + Math.imul(ah8, bl8) | 0;
			    hi = hi + Math.imul(ah8, bh8) | 0;
			    lo = lo + Math.imul(al7, bl9) | 0;
			    mid = mid + Math.imul(al7, bh9) | 0;
			    mid = mid + Math.imul(ah7, bl9) | 0;
			    hi = hi + Math.imul(ah7, bh9) | 0;
			    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
			    w16 &= 0x3ffffff;
			    /* k = 17 */
			    lo = Math.imul(al9, bl8);
			    mid = Math.imul(al9, bh8);
			    mid = mid + Math.imul(ah9, bl8) | 0;
			    hi = Math.imul(ah9, bh8);
			    lo = lo + Math.imul(al8, bl9) | 0;
			    mid = mid + Math.imul(al8, bh9) | 0;
			    mid = mid + Math.imul(ah8, bl9) | 0;
			    hi = hi + Math.imul(ah8, bh9) | 0;
			    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
			    w17 &= 0x3ffffff;
			    /* k = 18 */
			    lo = Math.imul(al9, bl9);
			    mid = Math.imul(al9, bh9);
			    mid = mid + Math.imul(ah9, bl9) | 0;
			    hi = Math.imul(ah9, bh9);
			    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
			    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
			    w18 &= 0x3ffffff;
			    o[0] = w0;
			    o[1] = w1;
			    o[2] = w2;
			    o[3] = w3;
			    o[4] = w4;
			    o[5] = w5;
			    o[6] = w6;
			    o[7] = w7;
			    o[8] = w8;
			    o[9] = w9;
			    o[10] = w10;
			    o[11] = w11;
			    o[12] = w12;
			    o[13] = w13;
			    o[14] = w14;
			    o[15] = w15;
			    o[16] = w16;
			    o[17] = w17;
			    o[18] = w18;
			    if (c !== 0) {
			      o[19] = c;
			      out.length++;
			    }
			    return out;
			  };

			  // Polyfill comb
			  if (!Math.imul) {
			    comb10MulTo = smallMulTo;
			  }
			  function bigMulTo(self, num, out) {
			    out.negative = num.negative ^ self.negative;
			    out.length = self.length + num.length;
			    var carry = 0;
			    var hncarry = 0;
			    for (var k = 0; k < out.length - 1; k++) {
			      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
			      // note that ncarry could be >= 0x3ffffff
			      var ncarry = hncarry;
			      hncarry = 0;
			      var rword = carry & 0x3ffffff;
			      var maxJ = Math.min(k, num.length - 1);
			      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			        var i = k - j;
			        var a = self.words[i] | 0;
			        var b = num.words[j] | 0;
			        var r = a * b;
			        var lo = r & 0x3ffffff;
			        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
			        lo = lo + rword | 0;
			        rword = lo & 0x3ffffff;
			        ncarry = ncarry + (lo >>> 26) | 0;
			        hncarry += ncarry >>> 26;
			        ncarry &= 0x3ffffff;
			      }
			      out.words[k] = rword;
			      carry = ncarry;
			      ncarry = hncarry;
			    }
			    if (carry !== 0) {
			      out.words[k] = carry;
			    } else {
			      out.length--;
			    }
			    return out.strip();
			  }
			  function jumboMulTo(self, num, out) {
			    var fftm = new FFTM();
			    return fftm.mulp(self, num, out);
			  }
			  BN.prototype.mulTo = function mulTo(num, out) {
			    var res;
			    var len = this.length + num.length;
			    if (this.length === 10 && num.length === 10) {
			      res = comb10MulTo(this, num, out);
			    } else if (len < 63) {
			      res = smallMulTo(this, num, out);
			    } else if (len < 1024) {
			      res = bigMulTo(this, num, out);
			    } else {
			      res = jumboMulTo(this, num, out);
			    }
			    return res;
			  };

			  // Cooley-Tukey algorithm for FFT
			  // slightly revisited to rely on looping instead of recursion

			  function FFTM(x, y) {
			    this.x = x;
			    this.y = y;
			  }
			  FFTM.prototype.makeRBT = function makeRBT(N) {
			    var t = new Array(N);
			    var l = BN.prototype._countBits(N) - 1;
			    for (var i = 0; i < N; i++) {
			      t[i] = this.revBin(i, l, N);
			    }
			    return t;
			  };

			  // Returns binary-reversed representation of `x`
			  FFTM.prototype.revBin = function revBin(x, l, N) {
			    if (x === 0 || x === N - 1) return x;
			    var rb = 0;
			    for (var i = 0; i < l; i++) {
			      rb |= (x & 1) << l - i - 1;
			      x >>= 1;
			    }
			    return rb;
			  };

			  // Performs "tweedling" phase, therefore 'emulating'
			  // behaviour of the recursive algorithm
			  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
			    for (var i = 0; i < N; i++) {
			      rtws[i] = rws[rbt[i]];
			      itws[i] = iws[rbt[i]];
			    }
			  };
			  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
			    this.permute(rbt, rws, iws, rtws, itws, N);
			    for (var s = 1; s < N; s <<= 1) {
			      var l = s << 1;
			      var rtwdf = Math.cos(2 * Math.PI / l);
			      var itwdf = Math.sin(2 * Math.PI / l);
			      for (var p = 0; p < N; p += l) {
			        var rtwdf_ = rtwdf;
			        var itwdf_ = itwdf;
			        for (var j = 0; j < s; j++) {
			          var re = rtws[p + j];
			          var ie = itws[p + j];
			          var ro = rtws[p + j + s];
			          var io = itws[p + j + s];
			          var rx = rtwdf_ * ro - itwdf_ * io;
			          io = rtwdf_ * io + itwdf_ * ro;
			          ro = rx;
			          rtws[p + j] = re + ro;
			          itws[p + j] = ie + io;
			          rtws[p + j + s] = re - ro;
			          itws[p + j + s] = ie - io;

			          /* jshint maxdepth : false */
			          if (j !== l) {
			            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
			            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
			            rtwdf_ = rx;
			          }
			        }
			      }
			    }
			  };
			  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
			    var N = Math.max(m, n) | 1;
			    var odd = N & 1;
			    var i = 0;
			    for (N = N / 2 | 0; N; N = N >>> 1) {
			      i++;
			    }
			    return 1 << i + 1 + odd;
			  };
			  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
			    if (N <= 1) return;
			    for (var i = 0; i < N / 2; i++) {
			      var t = rws[i];
			      rws[i] = rws[N - i - 1];
			      rws[N - i - 1] = t;
			      t = iws[i];
			      iws[i] = -iws[N - i - 1];
			      iws[N - i - 1] = -t;
			    }
			  };
			  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
			    var carry = 0;
			    for (var i = 0; i < N / 2; i++) {
			      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
			      ws[i] = w & 0x3ffffff;
			      if (w < 0x4000000) {
			        carry = 0;
			      } else {
			        carry = w / 0x4000000 | 0;
			      }
			    }
			    return ws;
			  };
			  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
			    var carry = 0;
			    for (var i = 0; i < len; i++) {
			      carry = carry + (ws[i] | 0);
			      rws[2 * i] = carry & 0x1fff;
			      carry = carry >>> 13;
			      rws[2 * i + 1] = carry & 0x1fff;
			      carry = carry >>> 13;
			    }

			    // Pad with zeroes
			    for (i = 2 * len; i < N; ++i) {
			      rws[i] = 0;
			    }
			    assert(carry === 0);
			    assert((carry & ~0x1fff) === 0);
			  };
			  FFTM.prototype.stub = function stub(N) {
			    var ph = new Array(N);
			    for (var i = 0; i < N; i++) {
			      ph[i] = 0;
			    }
			    return ph;
			  };
			  FFTM.prototype.mulp = function mulp(x, y, out) {
			    var N = 2 * this.guessLen13b(x.length, y.length);
			    var rbt = this.makeRBT(N);
			    var _ = this.stub(N);
			    var rws = new Array(N);
			    var rwst = new Array(N);
			    var iwst = new Array(N);
			    var nrws = new Array(N);
			    var nrwst = new Array(N);
			    var niwst = new Array(N);
			    var rmws = out.words;
			    rmws.length = N;
			    this.convert13b(x.words, x.length, rws, N);
			    this.convert13b(y.words, y.length, nrws, N);
			    this.transform(rws, _, rwst, iwst, N, rbt);
			    this.transform(nrws, _, nrwst, niwst, N, rbt);
			    for (var i = 0; i < N; i++) {
			      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
			      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
			      rwst[i] = rx;
			    }
			    this.conjugate(rwst, iwst, N);
			    this.transform(rwst, iwst, rmws, _, N, rbt);
			    this.conjugate(rmws, _, N);
			    this.normalize13b(rmws, N);
			    out.negative = x.negative ^ y.negative;
			    out.length = x.length + y.length;
			    return out.strip();
			  };

			  // Multiply `this` by `num`
			  BN.prototype.mul = function mul(num) {
			    var out = new BN(null);
			    out.words = new Array(this.length + num.length);
			    return this.mulTo(num, out);
			  };

			  // Multiply employing FFT
			  BN.prototype.mulf = function mulf(num) {
			    var out = new BN(null);
			    out.words = new Array(this.length + num.length);
			    return jumboMulTo(this, num, out);
			  };

			  // In-place Multiplication
			  BN.prototype.imul = function imul(num) {
			    return this.clone().mulTo(num, this);
			  };
			  BN.prototype.imuln = function imuln(num) {
			    assert(typeof num === 'number');
			    assert(num < 0x4000000);

			    // Carry
			    var carry = 0;
			    for (var i = 0; i < this.length; i++) {
			      var w = (this.words[i] | 0) * num;
			      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
			      carry >>= 26;
			      carry += w / 0x4000000 | 0;
			      // NOTE: lo is 27bit maximum
			      carry += lo >>> 26;
			      this.words[i] = lo & 0x3ffffff;
			    }
			    if (carry !== 0) {
			      this.words[i] = carry;
			      this.length++;
			    }
			    return this;
			  };
			  BN.prototype.muln = function muln(num) {
			    return this.clone().imuln(num);
			  };

			  // `this` * `this`
			  BN.prototype.sqr = function sqr() {
			    return this.mul(this);
			  };

			  // `this` * `this` in-place
			  BN.prototype.isqr = function isqr() {
			    return this.imul(this.clone());
			  };

			  // Math.pow(`this`, `num`)
			  BN.prototype.pow = function pow(num) {
			    var w = toBitArray(num);
			    if (w.length === 0) return new BN(1);

			    // Skip leading zeroes
			    var res = this;
			    for (var i = 0; i < w.length; i++, res = res.sqr()) {
			      if (w[i] !== 0) break;
			    }
			    if (++i < w.length) {
			      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
			        if (w[i] === 0) continue;
			        res = res.mul(q);
			      }
			    }
			    return res;
			  };

			  // Shift-left in-place
			  BN.prototype.iushln = function iushln(bits) {
			    assert(typeof bits === 'number' && bits >= 0);
			    var r = bits % 26;
			    var s = (bits - r) / 26;
			    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
			    var i;
			    if (r !== 0) {
			      var carry = 0;
			      for (i = 0; i < this.length; i++) {
			        var newCarry = this.words[i] & carryMask;
			        var c = (this.words[i] | 0) - newCarry << r;
			        this.words[i] = c | carry;
			        carry = newCarry >>> 26 - r;
			      }
			      if (carry) {
			        this.words[i] = carry;
			        this.length++;
			      }
			    }
			    if (s !== 0) {
			      for (i = this.length - 1; i >= 0; i--) {
			        this.words[i + s] = this.words[i];
			      }
			      for (i = 0; i < s; i++) {
			        this.words[i] = 0;
			      }
			      this.length += s;
			    }
			    return this.strip();
			  };
			  BN.prototype.ishln = function ishln(bits) {
			    // TODO(indutny): implement me
			    assert(this.negative === 0);
			    return this.iushln(bits);
			  };

			  // Shift-right in-place
			  // NOTE: `hint` is a lowest bit before trailing zeroes
			  // NOTE: if `extended` is present - it will be filled with destroyed bits
			  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
			    assert(typeof bits === 'number' && bits >= 0);
			    var h;
			    if (hint) {
			      h = (hint - hint % 26) / 26;
			    } else {
			      h = 0;
			    }
			    var r = bits % 26;
			    var s = Math.min((bits - r) / 26, this.length);
			    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
			    var maskedWords = extended;
			    h -= s;
			    h = Math.max(0, h);

			    // Extended mode, copy masked part
			    if (maskedWords) {
			      for (var i = 0; i < s; i++) {
			        maskedWords.words[i] = this.words[i];
			      }
			      maskedWords.length = s;
			    }
			    if (s === 0) ; else if (this.length > s) {
			      this.length -= s;
			      for (i = 0; i < this.length; i++) {
			        this.words[i] = this.words[i + s];
			      }
			    } else {
			      this.words[0] = 0;
			      this.length = 1;
			    }
			    var carry = 0;
			    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
			      var word = this.words[i] | 0;
			      this.words[i] = carry << 26 - r | word >>> r;
			      carry = word & mask;
			    }

			    // Push carried bits as a mask
			    if (maskedWords && carry !== 0) {
			      maskedWords.words[maskedWords.length++] = carry;
			    }
			    if (this.length === 0) {
			      this.words[0] = 0;
			      this.length = 1;
			    }
			    return this.strip();
			  };
			  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
			    // TODO(indutny): implement me
			    assert(this.negative === 0);
			    return this.iushrn(bits, hint, extended);
			  };

			  // Shift-left
			  BN.prototype.shln = function shln(bits) {
			    return this.clone().ishln(bits);
			  };
			  BN.prototype.ushln = function ushln(bits) {
			    return this.clone().iushln(bits);
			  };

			  // Shift-right
			  BN.prototype.shrn = function shrn(bits) {
			    return this.clone().ishrn(bits);
			  };
			  BN.prototype.ushrn = function ushrn(bits) {
			    return this.clone().iushrn(bits);
			  };

			  // Test if n bit is set
			  BN.prototype.testn = function testn(bit) {
			    assert(typeof bit === 'number' && bit >= 0);
			    var r = bit % 26;
			    var s = (bit - r) / 26;
			    var q = 1 << r;

			    // Fast case: bit is much higher than all existing words
			    if (this.length <= s) return false;

			    // Check bit and return
			    var w = this.words[s];
			    return !!(w & q);
			  };

			  // Return only lowers bits of number (in-place)
			  BN.prototype.imaskn = function imaskn(bits) {
			    assert(typeof bits === 'number' && bits >= 0);
			    var r = bits % 26;
			    var s = (bits - r) / 26;
			    assert(this.negative === 0, 'imaskn works only with positive numbers');
			    if (this.length <= s) {
			      return this;
			    }
			    if (r !== 0) {
			      s++;
			    }
			    this.length = Math.min(s, this.length);
			    if (r !== 0) {
			      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
			      this.words[this.length - 1] &= mask;
			    }
			    return this.strip();
			  };

			  // Return only lowers bits of number
			  BN.prototype.maskn = function maskn(bits) {
			    return this.clone().imaskn(bits);
			  };

			  // Add plain number `num` to `this`
			  BN.prototype.iaddn = function iaddn(num) {
			    assert(typeof num === 'number');
			    assert(num < 0x4000000);
			    if (num < 0) return this.isubn(-num);

			    // Possible sign change
			    if (this.negative !== 0) {
			      if (this.length === 1 && (this.words[0] | 0) < num) {
			        this.words[0] = num - (this.words[0] | 0);
			        this.negative = 0;
			        return this;
			      }
			      this.negative = 0;
			      this.isubn(num);
			      this.negative = 1;
			      return this;
			    }

			    // Add without checks
			    return this._iaddn(num);
			  };
			  BN.prototype._iaddn = function _iaddn(num) {
			    this.words[0] += num;

			    // Carry
			    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
			      this.words[i] -= 0x4000000;
			      if (i === this.length - 1) {
			        this.words[i + 1] = 1;
			      } else {
			        this.words[i + 1]++;
			      }
			    }
			    this.length = Math.max(this.length, i + 1);
			    return this;
			  };

			  // Subtract plain number `num` from `this`
			  BN.prototype.isubn = function isubn(num) {
			    assert(typeof num === 'number');
			    assert(num < 0x4000000);
			    if (num < 0) return this.iaddn(-num);
			    if (this.negative !== 0) {
			      this.negative = 0;
			      this.iaddn(num);
			      this.negative = 1;
			      return this;
			    }
			    this.words[0] -= num;
			    if (this.length === 1 && this.words[0] < 0) {
			      this.words[0] = -this.words[0];
			      this.negative = 1;
			    } else {
			      // Carry
			      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
			        this.words[i] += 0x4000000;
			        this.words[i + 1] -= 1;
			      }
			    }
			    return this.strip();
			  };
			  BN.prototype.addn = function addn(num) {
			    return this.clone().iaddn(num);
			  };
			  BN.prototype.subn = function subn(num) {
			    return this.clone().isubn(num);
			  };
			  BN.prototype.iabs = function iabs() {
			    this.negative = 0;
			    return this;
			  };
			  BN.prototype.abs = function abs() {
			    return this.clone().iabs();
			  };
			  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
			    var len = num.length + shift;
			    var i;
			    this._expand(len);
			    var w;
			    var carry = 0;
			    for (i = 0; i < num.length; i++) {
			      w = (this.words[i + shift] | 0) + carry;
			      var right = (num.words[i] | 0) * mul;
			      w -= right & 0x3ffffff;
			      carry = (w >> 26) - (right / 0x4000000 | 0);
			      this.words[i + shift] = w & 0x3ffffff;
			    }
			    for (; i < this.length - shift; i++) {
			      w = (this.words[i + shift] | 0) + carry;
			      carry = w >> 26;
			      this.words[i + shift] = w & 0x3ffffff;
			    }
			    if (carry === 0) return this.strip();

			    // Subtraction overflow
			    assert(carry === -1);
			    carry = 0;
			    for (i = 0; i < this.length; i++) {
			      w = -(this.words[i] | 0) + carry;
			      carry = w >> 26;
			      this.words[i] = w & 0x3ffffff;
			    }
			    this.negative = 1;
			    return this.strip();
			  };
			  BN.prototype._wordDiv = function _wordDiv(num, mode) {
			    var shift = this.length - num.length;
			    var a = this.clone();
			    var b = num;

			    // Normalize
			    var bhi = b.words[b.length - 1] | 0;
			    var bhiBits = this._countBits(bhi);
			    shift = 26 - bhiBits;
			    if (shift !== 0) {
			      b = b.ushln(shift);
			      a.iushln(shift);
			      bhi = b.words[b.length - 1] | 0;
			    }

			    // Initialize quotient
			    var m = a.length - b.length;
			    var q;
			    if (mode !== 'mod') {
			      q = new BN(null);
			      q.length = m + 1;
			      q.words = new Array(q.length);
			      for (var i = 0; i < q.length; i++) {
			        q.words[i] = 0;
			      }
			    }
			    var diff = a.clone()._ishlnsubmul(b, 1, m);
			    if (diff.negative === 0) {
			      a = diff;
			      if (q) {
			        q.words[m] = 1;
			      }
			    }
			    for (var j = m - 1; j >= 0; j--) {
			      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

			      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
			      // (0x7ffffff)
			      qj = Math.min(qj / bhi | 0, 0x3ffffff);
			      a._ishlnsubmul(b, qj, j);
			      while (a.negative !== 0) {
			        qj--;
			        a.negative = 0;
			        a._ishlnsubmul(b, 1, j);
			        if (!a.isZero()) {
			          a.negative ^= 1;
			        }
			      }
			      if (q) {
			        q.words[j] = qj;
			      }
			    }
			    if (q) {
			      q.strip();
			    }
			    a.strip();

			    // Denormalize
			    if (mode !== 'div' && shift !== 0) {
			      a.iushrn(shift);
			    }
			    return {
			      div: q || null,
			      mod: a
			    };
			  };

			  // NOTE: 1) `mode` can be set to `mod` to request mod only,
			  //       to `div` to request div only, or be absent to
			  //       request both div & mod
			  //       2) `positive` is true if unsigned mod is requested
			  BN.prototype.divmod = function divmod(num, mode, positive) {
			    assert(!num.isZero());
			    if (this.isZero()) {
			      return {
			        div: new BN(0),
			        mod: new BN(0)
			      };
			    }
			    var div, mod, res;
			    if (this.negative !== 0 && num.negative === 0) {
			      res = this.neg().divmod(num, mode);
			      if (mode !== 'mod') {
			        div = res.div.neg();
			      }
			      if (mode !== 'div') {
			        mod = res.mod.neg();
			        if (positive && mod.negative !== 0) {
			          mod.iadd(num);
			        }
			      }
			      return {
			        div: div,
			        mod: mod
			      };
			    }
			    if (this.negative === 0 && num.negative !== 0) {
			      res = this.divmod(num.neg(), mode);
			      if (mode !== 'mod') {
			        div = res.div.neg();
			      }
			      return {
			        div: div,
			        mod: res.mod
			      };
			    }
			    if ((this.negative & num.negative) !== 0) {
			      res = this.neg().divmod(num.neg(), mode);
			      if (mode !== 'div') {
			        mod = res.mod.neg();
			        if (positive && mod.negative !== 0) {
			          mod.isub(num);
			        }
			      }
			      return {
			        div: res.div,
			        mod: mod
			      };
			    }

			    // Both numbers are positive at this point

			    // Strip both numbers to approximate shift value
			    if (num.length > this.length || this.cmp(num) < 0) {
			      return {
			        div: new BN(0),
			        mod: this
			      };
			    }

			    // Very short reduction
			    if (num.length === 1) {
			      if (mode === 'div') {
			        return {
			          div: this.divn(num.words[0]),
			          mod: null
			        };
			      }
			      if (mode === 'mod') {
			        return {
			          div: null,
			          mod: new BN(this.modn(num.words[0]))
			        };
			      }
			      return {
			        div: this.divn(num.words[0]),
			        mod: new BN(this.modn(num.words[0]))
			      };
			    }
			    return this._wordDiv(num, mode);
			  };

			  // Find `this` / `num`
			  BN.prototype.div = function div(num) {
			    return this.divmod(num, 'div', false).div;
			  };

			  // Find `this` % `num`
			  BN.prototype.mod = function mod(num) {
			    return this.divmod(num, 'mod', false).mod;
			  };
			  BN.prototype.umod = function umod(num) {
			    return this.divmod(num, 'mod', true).mod;
			  };

			  // Find Round(`this` / `num`)
			  BN.prototype.divRound = function divRound(num) {
			    var dm = this.divmod(num);

			    // Fast case - exact division
			    if (dm.mod.isZero()) return dm.div;
			    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
			    var half = num.ushrn(1);
			    var r2 = num.andln(1);
			    var cmp = mod.cmp(half);

			    // Round down
			    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

			    // Round up
			    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
			  };
			  BN.prototype.modn = function modn(num) {
			    assert(num <= 0x3ffffff);
			    var p = (1 << 26) % num;
			    var acc = 0;
			    for (var i = this.length - 1; i >= 0; i--) {
			      acc = (p * acc + (this.words[i] | 0)) % num;
			    }
			    return acc;
			  };

			  // In-place division by number
			  BN.prototype.idivn = function idivn(num) {
			    assert(num <= 0x3ffffff);
			    var carry = 0;
			    for (var i = this.length - 1; i >= 0; i--) {
			      var w = (this.words[i] | 0) + carry * 0x4000000;
			      this.words[i] = w / num | 0;
			      carry = w % num;
			    }
			    return this.strip();
			  };
			  BN.prototype.divn = function divn(num) {
			    return this.clone().idivn(num);
			  };
			  BN.prototype.egcd = function egcd(p) {
			    assert(p.negative === 0);
			    assert(!p.isZero());
			    var x = this;
			    var y = p.clone();
			    if (x.negative !== 0) {
			      x = x.umod(p);
			    } else {
			      x = x.clone();
			    }

			    // A * x + B * y = x
			    var A = new BN(1);
			    var B = new BN(0);

			    // C * x + D * y = y
			    var C = new BN(0);
			    var D = new BN(1);
			    var g = 0;
			    while (x.isEven() && y.isEven()) {
			      x.iushrn(1);
			      y.iushrn(1);
			      ++g;
			    }
			    var yp = y.clone();
			    var xp = x.clone();
			    while (!x.isZero()) {
			      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
			      if (i > 0) {
			        x.iushrn(i);
			        while (i-- > 0) {
			          if (A.isOdd() || B.isOdd()) {
			            A.iadd(yp);
			            B.isub(xp);
			          }
			          A.iushrn(1);
			          B.iushrn(1);
			        }
			      }
			      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
			      if (j > 0) {
			        y.iushrn(j);
			        while (j-- > 0) {
			          if (C.isOdd() || D.isOdd()) {
			            C.iadd(yp);
			            D.isub(xp);
			          }
			          C.iushrn(1);
			          D.iushrn(1);
			        }
			      }
			      if (x.cmp(y) >= 0) {
			        x.isub(y);
			        A.isub(C);
			        B.isub(D);
			      } else {
			        y.isub(x);
			        C.isub(A);
			        D.isub(B);
			      }
			    }
			    return {
			      a: C,
			      b: D,
			      gcd: y.iushln(g)
			    };
			  };

			  // This is reduced incarnation of the binary EEA
			  // above, designated to invert members of the
			  // _prime_ fields F(p) at a maximal speed
			  BN.prototype._invmp = function _invmp(p) {
			    assert(p.negative === 0);
			    assert(!p.isZero());
			    var a = this;
			    var b = p.clone();
			    if (a.negative !== 0) {
			      a = a.umod(p);
			    } else {
			      a = a.clone();
			    }
			    var x1 = new BN(1);
			    var x2 = new BN(0);
			    var delta = b.clone();
			    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
			      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
			      if (i > 0) {
			        a.iushrn(i);
			        while (i-- > 0) {
			          if (x1.isOdd()) {
			            x1.iadd(delta);
			          }
			          x1.iushrn(1);
			        }
			      }
			      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
			      if (j > 0) {
			        b.iushrn(j);
			        while (j-- > 0) {
			          if (x2.isOdd()) {
			            x2.iadd(delta);
			          }
			          x2.iushrn(1);
			        }
			      }
			      if (a.cmp(b) >= 0) {
			        a.isub(b);
			        x1.isub(x2);
			      } else {
			        b.isub(a);
			        x2.isub(x1);
			      }
			    }
			    var res;
			    if (a.cmpn(1) === 0) {
			      res = x1;
			    } else {
			      res = x2;
			    }
			    if (res.cmpn(0) < 0) {
			      res.iadd(p);
			    }
			    return res;
			  };
			  BN.prototype.gcd = function gcd(num) {
			    if (this.isZero()) return num.abs();
			    if (num.isZero()) return this.abs();
			    var a = this.clone();
			    var b = num.clone();
			    a.negative = 0;
			    b.negative = 0;

			    // Remove common factor of two
			    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
			      a.iushrn(1);
			      b.iushrn(1);
			    }
			    do {
			      while (a.isEven()) {
			        a.iushrn(1);
			      }
			      while (b.isEven()) {
			        b.iushrn(1);
			      }
			      var r = a.cmp(b);
			      if (r < 0) {
			        // Swap `a` and `b` to make `a` always bigger than `b`
			        var t = a;
			        a = b;
			        b = t;
			      } else if (r === 0 || b.cmpn(1) === 0) {
			        break;
			      }
			      a.isub(b);
			    } while (true);
			    return b.iushln(shift);
			  };

			  // Invert number in the field F(num)
			  BN.prototype.invm = function invm(num) {
			    return this.egcd(num).a.umod(num);
			  };
			  BN.prototype.isEven = function isEven() {
			    return (this.words[0] & 1) === 0;
			  };
			  BN.prototype.isOdd = function isOdd() {
			    return (this.words[0] & 1) === 1;
			  };

			  // And first word and num
			  BN.prototype.andln = function andln(num) {
			    return this.words[0] & num;
			  };

			  // Increment at the bit position in-line
			  BN.prototype.bincn = function bincn(bit) {
			    assert(typeof bit === 'number');
			    var r = bit % 26;
			    var s = (bit - r) / 26;
			    var q = 1 << r;

			    // Fast case: bit is much higher than all existing words
			    if (this.length <= s) {
			      this._expand(s + 1);
			      this.words[s] |= q;
			      return this;
			    }

			    // Add bit and propagate, if needed
			    var carry = q;
			    for (var i = s; carry !== 0 && i < this.length; i++) {
			      var w = this.words[i] | 0;
			      w += carry;
			      carry = w >>> 26;
			      w &= 0x3ffffff;
			      this.words[i] = w;
			    }
			    if (carry !== 0) {
			      this.words[i] = carry;
			      this.length++;
			    }
			    return this;
			  };
			  BN.prototype.isZero = function isZero() {
			    return this.length === 1 && this.words[0] === 0;
			  };
			  BN.prototype.cmpn = function cmpn(num) {
			    var negative = num < 0;
			    if (this.negative !== 0 && !negative) return -1;
			    if (this.negative === 0 && negative) return 1;
			    this.strip();
			    var res;
			    if (this.length > 1) {
			      res = 1;
			    } else {
			      if (negative) {
			        num = -num;
			      }
			      assert(num <= 0x3ffffff, 'Number is too big');
			      var w = this.words[0] | 0;
			      res = w === num ? 0 : w < num ? -1 : 1;
			    }
			    if (this.negative !== 0) return -res | 0;
			    return res;
			  };

			  // Compare two numbers and return:
			  // 1 - if `this` > `num`
			  // 0 - if `this` == `num`
			  // -1 - if `this` < `num`
			  BN.prototype.cmp = function cmp(num) {
			    if (this.negative !== 0 && num.negative === 0) return -1;
			    if (this.negative === 0 && num.negative !== 0) return 1;
			    var res = this.ucmp(num);
			    if (this.negative !== 0) return -res | 0;
			    return res;
			  };

			  // Unsigned comparison
			  BN.prototype.ucmp = function ucmp(num) {
			    // At this point both numbers have the same sign
			    if (this.length > num.length) return 1;
			    if (this.length < num.length) return -1;
			    var res = 0;
			    for (var i = this.length - 1; i >= 0; i--) {
			      var a = this.words[i] | 0;
			      var b = num.words[i] | 0;
			      if (a === b) continue;
			      if (a < b) {
			        res = -1;
			      } else if (a > b) {
			        res = 1;
			      }
			      break;
			    }
			    return res;
			  };
			  BN.prototype.gtn = function gtn(num) {
			    return this.cmpn(num) === 1;
			  };
			  BN.prototype.gt = function gt(num) {
			    return this.cmp(num) === 1;
			  };
			  BN.prototype.gten = function gten(num) {
			    return this.cmpn(num) >= 0;
			  };
			  BN.prototype.gte = function gte(num) {
			    return this.cmp(num) >= 0;
			  };
			  BN.prototype.ltn = function ltn(num) {
			    return this.cmpn(num) === -1;
			  };
			  BN.prototype.lt = function lt(num) {
			    return this.cmp(num) === -1;
			  };
			  BN.prototype.lten = function lten(num) {
			    return this.cmpn(num) <= 0;
			  };
			  BN.prototype.lte = function lte(num) {
			    return this.cmp(num) <= 0;
			  };
			  BN.prototype.eqn = function eqn(num) {
			    return this.cmpn(num) === 0;
			  };
			  BN.prototype.eq = function eq(num) {
			    return this.cmp(num) === 0;
			  };

			  //
			  // A reduce context, could be using montgomery or something better, depending
			  // on the `m` itself.
			  //
			  BN.red = function red(num) {
			    return new Red(num);
			  };
			  BN.prototype.toRed = function toRed(ctx) {
			    assert(!this.red, 'Already a number in reduction context');
			    assert(this.negative === 0, 'red works only with positives');
			    return ctx.convertTo(this)._forceRed(ctx);
			  };
			  BN.prototype.fromRed = function fromRed() {
			    assert(this.red, 'fromRed works only with numbers in reduction context');
			    return this.red.convertFrom(this);
			  };
			  BN.prototype._forceRed = function _forceRed(ctx) {
			    this.red = ctx;
			    return this;
			  };
			  BN.prototype.forceRed = function forceRed(ctx) {
			    assert(!this.red, 'Already a number in reduction context');
			    return this._forceRed(ctx);
			  };
			  BN.prototype.redAdd = function redAdd(num) {
			    assert(this.red, 'redAdd works only with red numbers');
			    return this.red.add(this, num);
			  };
			  BN.prototype.redIAdd = function redIAdd(num) {
			    assert(this.red, 'redIAdd works only with red numbers');
			    return this.red.iadd(this, num);
			  };
			  BN.prototype.redSub = function redSub(num) {
			    assert(this.red, 'redSub works only with red numbers');
			    return this.red.sub(this, num);
			  };
			  BN.prototype.redISub = function redISub(num) {
			    assert(this.red, 'redISub works only with red numbers');
			    return this.red.isub(this, num);
			  };
			  BN.prototype.redShl = function redShl(num) {
			    assert(this.red, 'redShl works only with red numbers');
			    return this.red.shl(this, num);
			  };
			  BN.prototype.redMul = function redMul(num) {
			    assert(this.red, 'redMul works only with red numbers');
			    this.red._verify2(this, num);
			    return this.red.mul(this, num);
			  };
			  BN.prototype.redIMul = function redIMul(num) {
			    assert(this.red, 'redMul works only with red numbers');
			    this.red._verify2(this, num);
			    return this.red.imul(this, num);
			  };
			  BN.prototype.redSqr = function redSqr() {
			    assert(this.red, 'redSqr works only with red numbers');
			    this.red._verify1(this);
			    return this.red.sqr(this);
			  };
			  BN.prototype.redISqr = function redISqr() {
			    assert(this.red, 'redISqr works only with red numbers');
			    this.red._verify1(this);
			    return this.red.isqr(this);
			  };

			  // Square root over p
			  BN.prototype.redSqrt = function redSqrt() {
			    assert(this.red, 'redSqrt works only with red numbers');
			    this.red._verify1(this);
			    return this.red.sqrt(this);
			  };
			  BN.prototype.redInvm = function redInvm() {
			    assert(this.red, 'redInvm works only with red numbers');
			    this.red._verify1(this);
			    return this.red.invm(this);
			  };

			  // Return negative clone of `this` % `red modulo`
			  BN.prototype.redNeg = function redNeg() {
			    assert(this.red, 'redNeg works only with red numbers');
			    this.red._verify1(this);
			    return this.red.neg(this);
			  };
			  BN.prototype.redPow = function redPow(num) {
			    assert(this.red && !num.red, 'redPow(normalNum)');
			    this.red._verify1(this);
			    return this.red.pow(this, num);
			  };

			  // Prime numbers with efficient reduction
			  var primes = {
			    k256: null,
			    p224: null,
			    p192: null,
			    p25519: null
			  };

			  // Pseudo-Mersenne prime
			  function MPrime(name, p) {
			    // P = 2 ^ N - K
			    this.name = name;
			    this.p = new BN(p, 16);
			    this.n = this.p.bitLength();
			    this.k = new BN(1).iushln(this.n).isub(this.p);
			    this.tmp = this._tmp();
			  }
			  MPrime.prototype._tmp = function _tmp() {
			    var tmp = new BN(null);
			    tmp.words = new Array(Math.ceil(this.n / 13));
			    return tmp;
			  };
			  MPrime.prototype.ireduce = function ireduce(num) {
			    // Assumes that `num` is less than `P^2`
			    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
			    var r = num;
			    var rlen;
			    do {
			      this.split(r, this.tmp);
			      r = this.imulK(r);
			      r = r.iadd(this.tmp);
			      rlen = r.bitLength();
			    } while (rlen > this.n);
			    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
			    if (cmp === 0) {
			      r.words[0] = 0;
			      r.length = 1;
			    } else if (cmp > 0) {
			      r.isub(this.p);
			    } else {
			      if (r.strip !== undefined) {
			        // r is BN v4 instance
			        r.strip();
			      } else {
			        // r is BN v5 instance
			        r._strip();
			      }
			    }
			    return r;
			  };
			  MPrime.prototype.split = function split(input, out) {
			    input.iushrn(this.n, 0, out);
			  };
			  MPrime.prototype.imulK = function imulK(num) {
			    return num.imul(this.k);
			  };
			  function K256() {
			    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
			  }
			  inherits(K256, MPrime);
			  K256.prototype.split = function split(input, output) {
			    // 256 = 9 * 26 + 22
			    var mask = 0x3fffff;
			    var outLen = Math.min(input.length, 9);
			    for (var i = 0; i < outLen; i++) {
			      output.words[i] = input.words[i];
			    }
			    output.length = outLen;
			    if (input.length <= 9) {
			      input.words[0] = 0;
			      input.length = 1;
			      return;
			    }

			    // Shift by 9 limbs
			    var prev = input.words[9];
			    output.words[output.length++] = prev & mask;
			    for (i = 10; i < input.length; i++) {
			      var next = input.words[i] | 0;
			      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
			      prev = next;
			    }
			    prev >>>= 22;
			    input.words[i - 10] = prev;
			    if (prev === 0 && input.length > 10) {
			      input.length -= 10;
			    } else {
			      input.length -= 9;
			    }
			  };
			  K256.prototype.imulK = function imulK(num) {
			    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
			    num.words[num.length] = 0;
			    num.words[num.length + 1] = 0;
			    num.length += 2;

			    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
			    var lo = 0;
			    for (var i = 0; i < num.length; i++) {
			      var w = num.words[i] | 0;
			      lo += w * 0x3d1;
			      num.words[i] = lo & 0x3ffffff;
			      lo = w * 0x40 + (lo / 0x4000000 | 0);
			    }

			    // Fast length reduction
			    if (num.words[num.length - 1] === 0) {
			      num.length--;
			      if (num.words[num.length - 1] === 0) {
			        num.length--;
			      }
			    }
			    return num;
			  };
			  function P224() {
			    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
			  }
			  inherits(P224, MPrime);
			  function P192() {
			    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
			  }
			  inherits(P192, MPrime);
			  function P25519() {
			    // 2 ^ 255 - 19
			    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
			  }
			  inherits(P25519, MPrime);
			  P25519.prototype.imulK = function imulK(num) {
			    // K = 0x13
			    var carry = 0;
			    for (var i = 0; i < num.length; i++) {
			      var hi = (num.words[i] | 0) * 0x13 + carry;
			      var lo = hi & 0x3ffffff;
			      hi >>>= 26;
			      num.words[i] = lo;
			      carry = hi;
			    }
			    if (carry !== 0) {
			      num.words[num.length++] = carry;
			    }
			    return num;
			  };

			  // Exported mostly for testing purposes, use plain name instead
			  BN._prime = function prime(name) {
			    // Cached version of prime
			    if (primes[name]) return primes[name];
			    var prime;
			    if (name === 'k256') {
			      prime = new K256();
			    } else if (name === 'p224') {
			      prime = new P224();
			    } else if (name === 'p192') {
			      prime = new P192();
			    } else if (name === 'p25519') {
			      prime = new P25519();
			    } else {
			      throw new Error('Unknown prime ' + name);
			    }
			    primes[name] = prime;
			    return prime;
			  };

			  //
			  // Base reduction engine
			  //
			  function Red(m) {
			    if (typeof m === 'string') {
			      var prime = BN._prime(m);
			      this.m = prime.p;
			      this.prime = prime;
			    } else {
			      assert(m.gtn(1), 'modulus must be greater than 1');
			      this.m = m;
			      this.prime = null;
			    }
			  }
			  Red.prototype._verify1 = function _verify1(a) {
			    assert(a.negative === 0, 'red works only with positives');
			    assert(a.red, 'red works only with red numbers');
			  };
			  Red.prototype._verify2 = function _verify2(a, b) {
			    assert((a.negative | b.negative) === 0, 'red works only with positives');
			    assert(a.red && a.red === b.red, 'red works only with red numbers');
			  };
			  Red.prototype.imod = function imod(a) {
			    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
			    return a.umod(this.m)._forceRed(this);
			  };
			  Red.prototype.neg = function neg(a) {
			    if (a.isZero()) {
			      return a.clone();
			    }
			    return this.m.sub(a)._forceRed(this);
			  };
			  Red.prototype.add = function add(a, b) {
			    this._verify2(a, b);
			    var res = a.add(b);
			    if (res.cmp(this.m) >= 0) {
			      res.isub(this.m);
			    }
			    return res._forceRed(this);
			  };
			  Red.prototype.iadd = function iadd(a, b) {
			    this._verify2(a, b);
			    var res = a.iadd(b);
			    if (res.cmp(this.m) >= 0) {
			      res.isub(this.m);
			    }
			    return res;
			  };
			  Red.prototype.sub = function sub(a, b) {
			    this._verify2(a, b);
			    var res = a.sub(b);
			    if (res.cmpn(0) < 0) {
			      res.iadd(this.m);
			    }
			    return res._forceRed(this);
			  };
			  Red.prototype.isub = function isub(a, b) {
			    this._verify2(a, b);
			    var res = a.isub(b);
			    if (res.cmpn(0) < 0) {
			      res.iadd(this.m);
			    }
			    return res;
			  };
			  Red.prototype.shl = function shl(a, num) {
			    this._verify1(a);
			    return this.imod(a.ushln(num));
			  };
			  Red.prototype.imul = function imul(a, b) {
			    this._verify2(a, b);
			    return this.imod(a.imul(b));
			  };
			  Red.prototype.mul = function mul(a, b) {
			    this._verify2(a, b);
			    return this.imod(a.mul(b));
			  };
			  Red.prototype.isqr = function isqr(a) {
			    return this.imul(a, a.clone());
			  };
			  Red.prototype.sqr = function sqr(a) {
			    return this.mul(a, a);
			  };
			  Red.prototype.sqrt = function sqrt(a) {
			    if (a.isZero()) return a.clone();
			    var mod3 = this.m.andln(3);
			    assert(mod3 % 2 === 1);

			    // Fast case
			    if (mod3 === 3) {
			      var pow = this.m.add(new BN(1)).iushrn(2);
			      return this.pow(a, pow);
			    }

			    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
			    //
			    // Find Q and S, that Q * 2 ^ S = (P - 1)
			    var q = this.m.subn(1);
			    var s = 0;
			    while (!q.isZero() && q.andln(1) === 0) {
			      s++;
			      q.iushrn(1);
			    }
			    assert(!q.isZero());
			    var one = new BN(1).toRed(this);
			    var nOne = one.redNeg();

			    // Find quadratic non-residue
			    // NOTE: Max is such because of generalized Riemann hypothesis.
			    var lpow = this.m.subn(1).iushrn(1);
			    var z = this.m.bitLength();
			    z = new BN(2 * z * z).toRed(this);
			    while (this.pow(z, lpow).cmp(nOne) !== 0) {
			      z.redIAdd(nOne);
			    }
			    var c = this.pow(z, q);
			    var r = this.pow(a, q.addn(1).iushrn(1));
			    var t = this.pow(a, q);
			    var m = s;
			    while (t.cmp(one) !== 0) {
			      var tmp = t;
			      for (var i = 0; tmp.cmp(one) !== 0; i++) {
			        tmp = tmp.redSqr();
			      }
			      assert(i < m);
			      var b = this.pow(c, new BN(1).iushln(m - i - 1));
			      r = r.redMul(b);
			      c = b.redSqr();
			      t = t.redMul(c);
			      m = i;
			    }
			    return r;
			  };
			  Red.prototype.invm = function invm(a) {
			    var inv = a._invmp(this.m);
			    if (inv.negative !== 0) {
			      inv.negative = 0;
			      return this.imod(inv).redNeg();
			    } else {
			      return this.imod(inv);
			    }
			  };
			  Red.prototype.pow = function pow(a, num) {
			    if (num.isZero()) return new BN(1).toRed(this);
			    if (num.cmpn(1) === 0) return a.clone();
			    var windowSize = 4;
			    var wnd = new Array(1 << windowSize);
			    wnd[0] = new BN(1).toRed(this);
			    wnd[1] = a;
			    for (var i = 2; i < wnd.length; i++) {
			      wnd[i] = this.mul(wnd[i - 1], a);
			    }
			    var res = wnd[0];
			    var current = 0;
			    var currentLen = 0;
			    var start = num.bitLength() % 26;
			    if (start === 0) {
			      start = 26;
			    }
			    for (i = num.length - 1; i >= 0; i--) {
			      var word = num.words[i];
			      for (var j = start - 1; j >= 0; j--) {
			        var bit = word >> j & 1;
			        if (res !== wnd[0]) {
			          res = this.sqr(res);
			        }
			        if (bit === 0 && current === 0) {
			          currentLen = 0;
			          continue;
			        }
			        current <<= 1;
			        current |= bit;
			        currentLen++;
			        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
			        res = this.mul(res, wnd[current]);
			        currentLen = 0;
			        current = 0;
			      }
			      start = 26;
			    }
			    return res;
			  };
			  Red.prototype.convertTo = function convertTo(num) {
			    var r = num.umod(this.m);
			    return r === num ? r.clone() : r;
			  };
			  Red.prototype.convertFrom = function convertFrom(num) {
			    var res = num.clone();
			    res.red = null;
			    return res;
			  };

			  //
			  // Montgomery method engine
			  //

			  BN.mont = function mont(num) {
			    return new Mont(num);
			  };
			  function Mont(m) {
			    Red.call(this, m);
			    this.shift = this.m.bitLength();
			    if (this.shift % 26 !== 0) {
			      this.shift += 26 - this.shift % 26;
			    }
			    this.r = new BN(1).iushln(this.shift);
			    this.r2 = this.imod(this.r.sqr());
			    this.rinv = this.r._invmp(this.m);
			    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
			    this.minv = this.minv.umod(this.r);
			    this.minv = this.r.sub(this.minv);
			  }
			  inherits(Mont, Red);
			  Mont.prototype.convertTo = function convertTo(num) {
			    return this.imod(num.ushln(this.shift));
			  };
			  Mont.prototype.convertFrom = function convertFrom(num) {
			    var r = this.imod(num.mul(this.rinv));
			    r.red = null;
			    return r;
			  };
			  Mont.prototype.imul = function imul(a, b) {
			    if (a.isZero() || b.isZero()) {
			      a.words[0] = 0;
			      a.length = 1;
			      return a;
			    }
			    var t = a.imul(b);
			    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
			    var u = t.isub(c).iushrn(this.shift);
			    var res = u;
			    if (u.cmp(this.m) >= 0) {
			      res = u.isub(this.m);
			    } else if (u.cmpn(0) < 0) {
			      res = u.iadd(this.m);
			    }
			    return res._forceRed(this);
			  };
			  Mont.prototype.mul = function mul(a, b) {
			    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
			    var t = a.mul(b);
			    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
			    var u = t.isub(c).iushrn(this.shift);
			    var res = u;
			    if (u.cmp(this.m) >= 0) {
			      res = u.isub(this.m);
			    } else if (u.cmpn(0) < 0) {
			      res = u.iadd(this.m);
			    }
			    return res._forceRed(this);
			  };
			  Mont.prototype.invm = function invm(a) {
			    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
			    var res = this.imod(a._invmp(this.m).mul(this.r2));
			    return res._forceRed(this);
			  };
			})(module, bn$1); 
		} (bn$2));
		return bn$2.exports;
	}

	var api$2 = {};

	var encoders = {};

	var inherits = {exports: {}};

	var inherits_browser = {exports: {}};

	var hasRequiredInherits_browser;

	function requireInherits_browser () {
		if (hasRequiredInherits_browser) return inherits_browser.exports;
		hasRequiredInherits_browser = 1;
		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  inherits_browser.exports = function inherits(ctor, superCtor) {
		    if (superCtor) {
		      ctor.super_ = superCtor;
		      ctor.prototype = Object.create(superCtor.prototype, {
		        constructor: {
		          value: ctor,
		          enumerable: false,
		          writable: true,
		          configurable: true
		        }
		      });
		    }
		  };
		} else {
		  // old school shim for old browsers
		  inherits_browser.exports = function inherits(ctor, superCtor) {
		    if (superCtor) {
		      ctor.super_ = superCtor;
		      var TempCtor = function () {};
		      TempCtor.prototype = superCtor.prototype;
		      ctor.prototype = new TempCtor();
		      ctor.prototype.constructor = ctor;
		    }
		  };
		}
		return inherits_browser.exports;
	}

	var hasRequiredInherits;

	function requireInherits () {
		if (hasRequiredInherits) return inherits.exports;
		hasRequiredInherits = 1;
		try {
		  var util = require('util');
		  /* istanbul ignore next */
		  if (typeof util.inherits !== 'function') throw '';
		  inherits.exports = util.inherits;
		} catch (e) {
		  /* istanbul ignore next */
		  inherits.exports = requireInherits_browser();
		}
		return inherits.exports;
	}

	/* eslint-disable node/no-deprecated-api */

	var safer_1;
	var hasRequiredSafer;

	function requireSafer () {
		if (hasRequiredSafer) return safer_1;
		hasRequiredSafer = 1;

		var buffer = require$$0__default$4["default"];
		var Buffer = buffer.Buffer;
		var safer = {};
		var key;
		for (key in buffer) {
		  if (!buffer.hasOwnProperty(key)) continue;
		  if (key === 'SlowBuffer' || key === 'Buffer') continue;
		  safer[key] = buffer[key];
		}
		var Safer = safer.Buffer = {};
		for (key in Buffer) {
		  if (!Buffer.hasOwnProperty(key)) continue;
		  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
		  Safer[key] = Buffer[key];
		}
		safer.Buffer.prototype = Buffer.prototype;
		if (!Safer.from || Safer.from === Uint8Array.from) {
		  Safer.from = function (value, encodingOrOffset, length) {
		    if (typeof value === 'number') {
		      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
		    }
		    if (value && typeof value.length === 'undefined') {
		      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
		    }
		    return Buffer(value, encodingOrOffset, length);
		  };
		}
		if (!Safer.alloc) {
		  Safer.alloc = function (size, fill, encoding) {
		    if (typeof size !== 'number') {
		      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
		    }
		    if (size < 0 || size >= 2 * (1 << 30)) {
		      throw new RangeError('The value "' + size + '" is invalid for option "size"');
		    }
		    var buf = Buffer(size);
		    if (!fill || fill.length === 0) {
		      buf.fill(0);
		    } else if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		    return buf;
		  };
		}
		if (!safer.kStringMaxLength) {
		  try {
		    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
		  } catch (e) {
		    // we can't determine kStringMaxLength in environments where process.binding
		    // is unsupported, so let's not set it
		  }
		}
		if (!safer.constants) {
		  safer.constants = {
		    MAX_LENGTH: safer.kMaxLength
		  };
		  if (safer.kStringMaxLength) {
		    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
		  }
		}
		safer_1 = safer;
		return safer_1;
	}

	var reporter = {};

	var hasRequiredReporter;

	function requireReporter () {
		if (hasRequiredReporter) return reporter;
		hasRequiredReporter = 1;

		const inherits = requireInherits();
		function Reporter(options) {
		  this._reporterState = {
		    obj: null,
		    path: [],
		    options: options || {},
		    errors: []
		  };
		}
		reporter.Reporter = Reporter;
		Reporter.prototype.isError = function isError(obj) {
		  return obj instanceof ReporterError;
		};
		Reporter.prototype.save = function save() {
		  const state = this._reporterState;
		  return {
		    obj: state.obj,
		    pathLen: state.path.length
		  };
		};
		Reporter.prototype.restore = function restore(data) {
		  const state = this._reporterState;
		  state.obj = data.obj;
		  state.path = state.path.slice(0, data.pathLen);
		};
		Reporter.prototype.enterKey = function enterKey(key) {
		  return this._reporterState.path.push(key);
		};
		Reporter.prototype.exitKey = function exitKey(index) {
		  const state = this._reporterState;
		  state.path = state.path.slice(0, index - 1);
		};
		Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
		  const state = this._reporterState;
		  this.exitKey(index);
		  if (state.obj !== null) state.obj[key] = value;
		};
		Reporter.prototype.path = function path() {
		  return this._reporterState.path.join('/');
		};
		Reporter.prototype.enterObject = function enterObject() {
		  const state = this._reporterState;
		  const prev = state.obj;
		  state.obj = {};
		  return prev;
		};
		Reporter.prototype.leaveObject = function leaveObject(prev) {
		  const state = this._reporterState;
		  const now = state.obj;
		  state.obj = prev;
		  return now;
		};
		Reporter.prototype.error = function error(msg) {
		  let err;
		  const state = this._reporterState;
		  const inherited = msg instanceof ReporterError;
		  if (inherited) {
		    err = msg;
		  } else {
		    err = new ReporterError(state.path.map(function (elem) {
		      return '[' + JSON.stringify(elem) + ']';
		    }).join(''), msg.message || msg, msg.stack);
		  }
		  if (!state.options.partial) throw err;
		  if (!inherited) state.errors.push(err);
		  return err;
		};
		Reporter.prototype.wrapResult = function wrapResult(result) {
		  const state = this._reporterState;
		  if (!state.options.partial) return result;
		  return {
		    result: this.isError(result) ? null : result,
		    errors: state.errors
		  };
		};
		function ReporterError(path, msg) {
		  this.path = path;
		  this.rethrow(msg);
		}
		inherits(ReporterError, Error);
		ReporterError.prototype.rethrow = function rethrow(msg) {
		  this.message = msg + ' at: ' + (this.path || '(shallow)');
		  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
		  if (!this.stack) {
		    try {
		      // IE only adds stack when thrown
		      throw new Error(this.message);
		    } catch (e) {
		      this.stack = e.stack;
		    }
		  }
		  return this;
		};
		return reporter;
	}

	var buffer = {};

	var hasRequiredBuffer;

	function requireBuffer () {
		if (hasRequiredBuffer) return buffer;
		hasRequiredBuffer = 1;

		const inherits = requireInherits();
		const Reporter = requireReporter().Reporter;
		const Buffer = requireSafer().Buffer;
		function DecoderBuffer(base, options) {
		  Reporter.call(this, options);
		  if (!Buffer.isBuffer(base)) {
		    this.error('Input not Buffer');
		    return;
		  }
		  this.base = base;
		  this.offset = 0;
		  this.length = base.length;
		}
		inherits(DecoderBuffer, Reporter);
		buffer.DecoderBuffer = DecoderBuffer;
		DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
		  if (data instanceof DecoderBuffer) {
		    return true;
		  }

		  // Or accept compatible API
		  const isCompatible = typeof data === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
		  return isCompatible;
		};
		DecoderBuffer.prototype.save = function save() {
		  return {
		    offset: this.offset,
		    reporter: Reporter.prototype.save.call(this)
		  };
		};
		DecoderBuffer.prototype.restore = function restore(save) {
		  // Return skipped data
		  const res = new DecoderBuffer(this.base);
		  res.offset = save.offset;
		  res.length = this.offset;
		  this.offset = save.offset;
		  Reporter.prototype.restore.call(this, save.reporter);
		  return res;
		};
		DecoderBuffer.prototype.isEmpty = function isEmpty() {
		  return this.offset === this.length;
		};
		DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
		  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
		};
		DecoderBuffer.prototype.skip = function skip(bytes, fail) {
		  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
		  const res = new DecoderBuffer(this.base);

		  // Share reporter state
		  res._reporterState = this._reporterState;
		  res.offset = this.offset;
		  res.length = this.offset + bytes;
		  this.offset += bytes;
		  return res;
		};
		DecoderBuffer.prototype.raw = function raw(save) {
		  return this.base.slice(save ? save.offset : this.offset, this.length);
		};
		function EncoderBuffer(value, reporter) {
		  if (Array.isArray(value)) {
		    this.length = 0;
		    this.value = value.map(function (item) {
		      if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
		      this.length += item.length;
		      return item;
		    }, this);
		  } else if (typeof value === 'number') {
		    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
		    this.value = value;
		    this.length = 1;
		  } else if (typeof value === 'string') {
		    this.value = value;
		    this.length = Buffer.byteLength(value);
		  } else if (Buffer.isBuffer(value)) {
		    this.value = value;
		    this.length = value.length;
		  } else {
		    return reporter.error('Unsupported type: ' + typeof value);
		  }
		}
		buffer.EncoderBuffer = EncoderBuffer;
		EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
		  if (data instanceof EncoderBuffer) {
		    return true;
		  }

		  // Or accept compatible API
		  const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
		  return isCompatible;
		};
		EncoderBuffer.prototype.join = function join(out, offset) {
		  if (!out) out = Buffer.alloc(this.length);
		  if (!offset) offset = 0;
		  if (this.length === 0) return out;
		  if (Array.isArray(this.value)) {
		    this.value.forEach(function (item) {
		      item.join(out, offset);
		      offset += item.length;
		    });
		  } else {
		    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
		    offset += this.length;
		  }
		  return out;
		};
		return buffer;
	}

	var minimalisticAssert;
	var hasRequiredMinimalisticAssert;

	function requireMinimalisticAssert () {
		if (hasRequiredMinimalisticAssert) return minimalisticAssert;
		hasRequiredMinimalisticAssert = 1;
		minimalisticAssert = assert;
		function assert(val, msg) {
		  if (!val) throw new Error(msg || 'Assertion failed');
		}
		assert.equal = function assertEqual(l, r, msg) {
		  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
		};
		return minimalisticAssert;
	}

	var node$1;
	var hasRequiredNode$1;

	function requireNode$1 () {
		if (hasRequiredNode$1) return node$1;
		hasRequiredNode$1 = 1;

		const Reporter = requireReporter().Reporter;
		const EncoderBuffer = requireBuffer().EncoderBuffer;
		const DecoderBuffer = requireBuffer().DecoderBuffer;
		const assert = requireMinimalisticAssert();

		// Supported tags
		const tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];

		// Public methods list
		const methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);

		// Overrided methods list
		const overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];
		function Node(enc, parent, name) {
		  const state = {};
		  this._baseState = state;
		  state.name = name;
		  state.enc = enc;
		  state.parent = parent || null;
		  state.children = null;

		  // State
		  state.tag = null;
		  state.args = null;
		  state.reverseArgs = null;
		  state.choice = null;
		  state.optional = false;
		  state.any = false;
		  state.obj = false;
		  state.use = null;
		  state.useDecoder = null;
		  state.key = null;
		  state['default'] = null;
		  state.explicit = null;
		  state.implicit = null;
		  state.contains = null;

		  // Should create new instance on each method
		  if (!state.parent) {
		    state.children = [];
		    this._wrap();
		  }
		}
		node$1 = Node;
		const stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];
		Node.prototype.clone = function clone() {
		  const state = this._baseState;
		  const cstate = {};
		  stateProps.forEach(function (prop) {
		    cstate[prop] = state[prop];
		  });
		  const res = new this.constructor(cstate.parent);
		  res._baseState = cstate;
		  return res;
		};
		Node.prototype._wrap = function wrap() {
		  const state = this._baseState;
		  methods.forEach(function (method) {
		    this[method] = function _wrappedMethod() {
		      const clone = new this.constructor(this);
		      state.children.push(clone);
		      return clone[method].apply(clone, arguments);
		    };
		  }, this);
		};
		Node.prototype._init = function init(body) {
		  const state = this._baseState;
		  assert(state.parent === null);
		  body.call(this);

		  // Filter children
		  state.children = state.children.filter(function (child) {
		    return child._baseState.parent === this;
		  }, this);
		  assert.equal(state.children.length, 1, 'Root node can have only one child');
		};
		Node.prototype._useArgs = function useArgs(args) {
		  const state = this._baseState;

		  // Filter children and args
		  const children = args.filter(function (arg) {
		    return arg instanceof this.constructor;
		  }, this);
		  args = args.filter(function (arg) {
		    return !(arg instanceof this.constructor);
		  }, this);
		  if (children.length !== 0) {
		    assert(state.children === null);
		    state.children = children;

		    // Replace parent to maintain backward link
		    children.forEach(function (child) {
		      child._baseState.parent = this;
		    }, this);
		  }
		  if (args.length !== 0) {
		    assert(state.args === null);
		    state.args = args;
		    state.reverseArgs = args.map(function (arg) {
		      if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
		      const res = {};
		      Object.keys(arg).forEach(function (key) {
		        if (key == (key | 0)) key |= 0;
		        const value = arg[key];
		        res[value] = key;
		      });
		      return res;
		    });
		  }
		};

		//
		// Overrided methods
		//

		overrided.forEach(function (method) {
		  Node.prototype[method] = function _overrided() {
		    const state = this._baseState;
		    throw new Error(method + ' not implemented for encoding: ' + state.enc);
		  };
		});

		//
		// Public methods
		//

		tags.forEach(function (tag) {
		  Node.prototype[tag] = function _tagMethod() {
		    const state = this._baseState;
		    const args = Array.prototype.slice.call(arguments);
		    assert(state.tag === null);
		    state.tag = tag;
		    this._useArgs(args);
		    return this;
		  };
		});
		Node.prototype.use = function use(item) {
		  assert(item);
		  const state = this._baseState;
		  assert(state.use === null);
		  state.use = item;
		  return this;
		};
		Node.prototype.optional = function optional() {
		  const state = this._baseState;
		  state.optional = true;
		  return this;
		};
		Node.prototype.def = function def(val) {
		  const state = this._baseState;
		  assert(state['default'] === null);
		  state['default'] = val;
		  state.optional = true;
		  return this;
		};
		Node.prototype.explicit = function explicit(num) {
		  const state = this._baseState;
		  assert(state.explicit === null && state.implicit === null);
		  state.explicit = num;
		  return this;
		};
		Node.prototype.implicit = function implicit(num) {
		  const state = this._baseState;
		  assert(state.explicit === null && state.implicit === null);
		  state.implicit = num;
		  return this;
		};
		Node.prototype.obj = function obj() {
		  const state = this._baseState;
		  const args = Array.prototype.slice.call(arguments);
		  state.obj = true;
		  if (args.length !== 0) this._useArgs(args);
		  return this;
		};
		Node.prototype.key = function key(newKey) {
		  const state = this._baseState;
		  assert(state.key === null);
		  state.key = newKey;
		  return this;
		};
		Node.prototype.any = function any() {
		  const state = this._baseState;
		  state.any = true;
		  return this;
		};
		Node.prototype.choice = function choice(obj) {
		  const state = this._baseState;
		  assert(state.choice === null);
		  state.choice = obj;
		  this._useArgs(Object.keys(obj).map(function (key) {
		    return obj[key];
		  }));
		  return this;
		};
		Node.prototype.contains = function contains(item) {
		  const state = this._baseState;
		  assert(state.use === null);
		  state.contains = item;
		  return this;
		};

		//
		// Decoding
		//

		Node.prototype._decode = function decode(input, options) {
		  const state = this._baseState;

		  // Decode root node
		  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
		  let result = state['default'];
		  let present = true;
		  let prevKey = null;
		  if (state.key !== null) prevKey = input.enterKey(state.key);

		  // Check if tag is there
		  if (state.optional) {
		    let tag = null;
		    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;
		    if (tag === null && !state.any) {
		      // Trial and Error
		      const save = input.save();
		      try {
		        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
		        present = true;
		      } catch (e) {
		        present = false;
		      }
		      input.restore(save);
		    } else {
		      present = this._peekTag(input, tag, state.any);
		      if (input.isError(present)) return present;
		    }
		  }

		  // Push object on stack
		  let prevObj;
		  if (state.obj && present) prevObj = input.enterObject();
		  if (present) {
		    // Unwrap explicit values
		    if (state.explicit !== null) {
		      const explicit = this._decodeTag(input, state.explicit);
		      if (input.isError(explicit)) return explicit;
		      input = explicit;
		    }
		    const start = input.offset;

		    // Unwrap implicit and normal values
		    if (state.use === null && state.choice === null) {
		      let save;
		      if (state.any) save = input.save();
		      const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
		      if (input.isError(body)) return body;
		      if (state.any) result = input.raw(save);else input = body;
		    }
		    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
		    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');

		    // Select proper method for tag
		    if (state.any) ; else if (state.choice === null) {
		      result = this._decodeGeneric(state.tag, input, options);
		    } else {
		      result = this._decodeChoice(input, options);
		    }
		    if (input.isError(result)) return result;

		    // Decode children
		    if (!state.any && state.choice === null && state.children !== null) {
		      state.children.forEach(function decodeChildren(child) {
		        // NOTE: We are ignoring errors here, to let parser continue with other
		        // parts of encoded data
		        child._decode(input, options);
		      });
		    }

		    // Decode contained/encoded by schema, only in bit or octet strings
		    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
		      const data = new DecoderBuffer(result);
		      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
		    }
		  }

		  // Pop object
		  if (state.obj && present) result = input.leaveObject(prevObj);

		  // Set key
		  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);
		  return result;
		};
		Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
		  const state = this._baseState;
		  if (tag === 'seq' || tag === 'set') return null;
		  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
		  if (state.use !== null) {
		    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
		  } else {
		    return input.error('unknown tag: ' + tag);
		  }
		};
		Node.prototype._getUse = function _getUse(entity, obj) {
		  const state = this._baseState;
		  // Create altered use decoder if implicit is set
		  state.useDecoder = this._use(entity, obj);
		  assert(state.useDecoder._baseState.parent === null);
		  state.useDecoder = state.useDecoder._baseState.children[0];
		  if (state.implicit !== state.useDecoder._baseState.implicit) {
		    state.useDecoder = state.useDecoder.clone();
		    state.useDecoder._baseState.implicit = state.implicit;
		  }
		  return state.useDecoder;
		};
		Node.prototype._decodeChoice = function decodeChoice(input, options) {
		  const state = this._baseState;
		  let result = null;
		  let match = false;
		  Object.keys(state.choice).some(function (key) {
		    const save = input.save();
		    const node = state.choice[key];
		    try {
		      const value = node._decode(input, options);
		      if (input.isError(value)) return false;
		      result = {
		        type: key,
		        value: value
		      };
		      match = true;
		    } catch (e) {
		      input.restore(save);
		      return false;
		    }
		    return true;
		  }, this);
		  if (!match) return input.error('Choice not matched');
		  return result;
		};

		//
		// Encoding
		//

		Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
		  return new EncoderBuffer(data, this.reporter);
		};
		Node.prototype._encode = function encode(data, reporter, parent) {
		  const state = this._baseState;
		  if (state['default'] !== null && state['default'] === data) return;
		  const result = this._encodeValue(data, reporter, parent);
		  if (result === undefined) return;
		  if (this._skipDefault(result, reporter, parent)) return;
		  return result;
		};
		Node.prototype._encodeValue = function encode(data, reporter, parent) {
		  const state = this._baseState;

		  // Decode root node
		  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
		  let result = null;

		  // Set reporter to share it with a child class
		  this.reporter = reporter;

		  // Check if data is there
		  if (state.optional && data === undefined) {
		    if (state['default'] !== null) data = state['default'];else return;
		  }

		  // Encode children first
		  let content = null;
		  let primitive = false;
		  if (state.any) {
		    // Anything that was given is translated to buffer
		    result = this._createEncoderBuffer(data);
		  } else if (state.choice) {
		    result = this._encodeChoice(data, reporter);
		  } else if (state.contains) {
		    content = this._getUse(state.contains, parent)._encode(data, reporter);
		    primitive = true;
		  } else if (state.children) {
		    content = state.children.map(function (child) {
		      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
		      if (child._baseState.key === null) return reporter.error('Child should have a key');
		      const prevKey = reporter.enterKey(child._baseState.key);
		      if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
		      const res = child._encode(data[child._baseState.key], reporter, data);
		      reporter.leaveKey(prevKey);
		      return res;
		    }, this).filter(function (child) {
		      return child;
		    });
		    content = this._createEncoderBuffer(content);
		  } else {
		    if (state.tag === 'seqof' || state.tag === 'setof') {
		      // TODO(indutny): this should be thrown on DSL level
		      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
		      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
		      const child = this.clone();
		      child._baseState.implicit = null;
		      content = this._createEncoderBuffer(data.map(function (item) {
		        const state = this._baseState;
		        return this._getUse(state.args[0], data)._encode(item, reporter);
		      }, child));
		    } else if (state.use !== null) {
		      result = this._getUse(state.use, parent)._encode(data, reporter);
		    } else {
		      content = this._encodePrimitive(state.tag, data);
		      primitive = true;
		    }
		  }

		  // Encode data itself
		  if (!state.any && state.choice === null) {
		    const tag = state.implicit !== null ? state.implicit : state.tag;
		    const cls = state.implicit === null ? 'universal' : 'context';
		    if (tag === null) {
		      if (state.use === null) reporter.error('Tag could be omitted only for .use()');
		    } else {
		      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
		    }
		  }

		  // Wrap in explicit
		  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
		  return result;
		};
		Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
		  const state = this._baseState;
		  const node = state.choice[data.type];
		  if (!node) {
		    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
		  }
		  return node._encode(data.value, reporter);
		};
		Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
		  const state = this._baseState;
		  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
		};
		Node.prototype._isNumstr = function isNumstr(str) {
		  return /^[0-9 ]*$/.test(str);
		};
		Node.prototype._isPrintstr = function isPrintstr(str) {
		  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
		};
		return node$1;
	}

	var der = {};

	var hasRequiredDer$2;

	function requireDer$2 () {
		if (hasRequiredDer$2) return der;
		hasRequiredDer$2 = 1;
		(function (exports) {

			// Helper
			function reverse(map) {
			  const res = {};
			  Object.keys(map).forEach(function (key) {
			    // Convert key to integer if it is stringified
			    if ((key | 0) == key) key = key | 0;
			    const value = map[key];
			    res[value] = key;
			  });
			  return res;
			}
			exports.tagClass = {
			  0: 'universal',
			  1: 'application',
			  2: 'context',
			  3: 'private'
			};
			exports.tagClassByName = reverse(exports.tagClass);
			exports.tag = {
			  0x00: 'end',
			  0x01: 'bool',
			  0x02: 'int',
			  0x03: 'bitstr',
			  0x04: 'octstr',
			  0x05: 'null_',
			  0x06: 'objid',
			  0x07: 'objDesc',
			  0x08: 'external',
			  0x09: 'real',
			  0x0a: 'enum',
			  0x0b: 'embed',
			  0x0c: 'utf8str',
			  0x0d: 'relativeOid',
			  0x10: 'seq',
			  0x11: 'set',
			  0x12: 'numstr',
			  0x13: 'printstr',
			  0x14: 't61str',
			  0x15: 'videostr',
			  0x16: 'ia5str',
			  0x17: 'utctime',
			  0x18: 'gentime',
			  0x19: 'graphstr',
			  0x1a: 'iso646str',
			  0x1b: 'genstr',
			  0x1c: 'unistr',
			  0x1d: 'charstr',
			  0x1e: 'bmpstr'
			};
			exports.tagByName = reverse(exports.tag); 
		} (der));
		return der;
	}

	var der_1$1;
	var hasRequiredDer$1;

	function requireDer$1 () {
		if (hasRequiredDer$1) return der_1$1;
		hasRequiredDer$1 = 1;

		const inherits = requireInherits();
		const Buffer = requireSafer().Buffer;
		const Node = requireNode$1();

		// Import DER constants
		const der = requireDer$2();
		function DEREncoder(entity) {
		  this.enc = 'der';
		  this.name = entity.name;
		  this.entity = entity;

		  // Construct base tree
		  this.tree = new DERNode();
		  this.tree._init(entity.body);
		}
		der_1$1 = DEREncoder;
		DEREncoder.prototype.encode = function encode(data, reporter) {
		  return this.tree._encode(data, reporter).join();
		};

		// Tree methods

		function DERNode(parent) {
		  Node.call(this, 'der', parent);
		}
		inherits(DERNode, Node);
		DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
		  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

		  // Short form
		  if (content.length < 0x80) {
		    const header = Buffer.alloc(2);
		    header[0] = encodedTag;
		    header[1] = content.length;
		    return this._createEncoderBuffer([header, content]);
		  }

		  // Long form
		  // Count octets required to store length
		  let lenOctets = 1;
		  for (let i = content.length; i >= 0x100; i >>= 8) lenOctets++;
		  const header = Buffer.alloc(1 + 1 + lenOctets);
		  header[0] = encodedTag;
		  header[1] = 0x80 | lenOctets;
		  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) header[i] = j & 0xff;
		  return this._createEncoderBuffer([header, content]);
		};
		DERNode.prototype._encodeStr = function encodeStr(str, tag) {
		  if (tag === 'bitstr') {
		    return this._createEncoderBuffer([str.unused | 0, str.data]);
		  } else if (tag === 'bmpstr') {
		    const buf = Buffer.alloc(str.length * 2);
		    for (let i = 0; i < str.length; i++) {
		      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
		    }
		    return this._createEncoderBuffer(buf);
		  } else if (tag === 'numstr') {
		    if (!this._isNumstr(str)) {
		      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
		    }
		    return this._createEncoderBuffer(str);
		  } else if (tag === 'printstr') {
		    if (!this._isPrintstr(str)) {
		      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
		    }
		    return this._createEncoderBuffer(str);
		  } else if (/str$/.test(tag)) {
		    return this._createEncoderBuffer(str);
		  } else if (tag === 'objDesc') {
		    return this._createEncoderBuffer(str);
		  } else {
		    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
		  }
		};
		DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
		  if (typeof id === 'string') {
		    if (!values) return this.reporter.error('string objid given, but no values map found');
		    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
		    id = values[id].split(/[\s.]+/g);
		    for (let i = 0; i < id.length; i++) id[i] |= 0;
		  } else if (Array.isArray(id)) {
		    id = id.slice();
		    for (let i = 0; i < id.length; i++) id[i] |= 0;
		  }
		  if (!Array.isArray(id)) {
		    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
		  }
		  if (!relative) {
		    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
		    id.splice(0, 2, id[0] * 40 + id[1]);
		  }

		  // Count number of octets
		  let size = 0;
		  for (let i = 0; i < id.length; i++) {
		    let ident = id[i];
		    for (size++; ident >= 0x80; ident >>= 7) size++;
		  }
		  const objid = Buffer.alloc(size);
		  let offset = objid.length - 1;
		  for (let i = id.length - 1; i >= 0; i--) {
		    let ident = id[i];
		    objid[offset--] = ident & 0x7f;
		    while ((ident >>= 7) > 0) objid[offset--] = 0x80 | ident & 0x7f;
		  }
		  return this._createEncoderBuffer(objid);
		};
		function two(num) {
		  if (num < 10) return '0' + num;else return num;
		}
		DERNode.prototype._encodeTime = function encodeTime(time, tag) {
		  let str;
		  const date = new Date(time);
		  if (tag === 'gentime') {
		    str = [two(date.getUTCFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
		  } else if (tag === 'utctime') {
		    str = [two(date.getUTCFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
		  } else {
		    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
		  }
		  return this._encodeStr(str, 'octstr');
		};
		DERNode.prototype._encodeNull = function encodeNull() {
		  return this._createEncoderBuffer('');
		};
		DERNode.prototype._encodeInt = function encodeInt(num, values) {
		  if (typeof num === 'string') {
		    if (!values) return this.reporter.error('String int or enum given, but no values map');
		    if (!values.hasOwnProperty(num)) {
		      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
		    }
		    num = values[num];
		  }

		  // Bignum, assume big endian
		  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
		    const numArray = num.toArray();
		    if (!num.sign && numArray[0] & 0x80) {
		      numArray.unshift(0);
		    }
		    num = Buffer.from(numArray);
		  }
		  if (Buffer.isBuffer(num)) {
		    let size = num.length;
		    if (num.length === 0) size++;
		    const out = Buffer.alloc(size);
		    num.copy(out);
		    if (num.length === 0) out[0] = 0;
		    return this._createEncoderBuffer(out);
		  }
		  if (num < 0x80) return this._createEncoderBuffer(num);
		  if (num < 0x100) return this._createEncoderBuffer([0, num]);
		  let size = 1;
		  for (let i = num; i >= 0x100; i >>= 8) size++;
		  const out = new Array(size);
		  for (let i = out.length - 1; i >= 0; i--) {
		    out[i] = num & 0xff;
		    num >>= 8;
		  }
		  if (out[0] & 0x80) {
		    out.unshift(0);
		  }
		  return this._createEncoderBuffer(Buffer.from(out));
		};
		DERNode.prototype._encodeBool = function encodeBool(value) {
		  return this._createEncoderBuffer(value ? 0xff : 0);
		};
		DERNode.prototype._use = function use(entity, obj) {
		  if (typeof entity === 'function') entity = entity(obj);
		  return entity._getEncoder('der').tree;
		};
		DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
		  const state = this._baseState;
		  let i;
		  if (state['default'] === null) return false;
		  const data = dataBuffer.join();
		  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
		  if (data.length !== state.defaultBuffer.length) return false;
		  for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) return false;
		  return true;
		};

		// Utility methods

		function encodeTag(tag, primitive, cls, reporter) {
		  let res;
		  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';
		  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);
		  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
		  if (!primitive) res |= 0x20;
		  res |= der.tagClassByName[cls || 'universal'] << 6;
		  return res;
		}
		return der_1$1;
	}

	var pem$1;
	var hasRequiredPem$2;

	function requirePem$2 () {
		if (hasRequiredPem$2) return pem$1;
		hasRequiredPem$2 = 1;

		const inherits = requireInherits();
		const DEREncoder = requireDer$1();
		function PEMEncoder(entity) {
		  DEREncoder.call(this, entity);
		  this.enc = 'pem';
		}
		inherits(PEMEncoder, DEREncoder);
		pem$1 = PEMEncoder;
		PEMEncoder.prototype.encode = function encode(data, options) {
		  const buf = DEREncoder.prototype.encode.call(this, data);
		  const p = buf.toString('base64');
		  const out = ['-----BEGIN ' + options.label + '-----'];
		  for (let i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
		  out.push('-----END ' + options.label + '-----');
		  return out.join('\n');
		};
		return pem$1;
	}

	var hasRequiredEncoders;

	function requireEncoders () {
		if (hasRequiredEncoders) return encoders;
		hasRequiredEncoders = 1;
		(function (exports) {

			const encoders = exports;
			encoders.der = requireDer$1();
			encoders.pem = requirePem$2(); 
		} (encoders));
		return encoders;
	}

	var decoders = {};

	var der_1;
	var hasRequiredDer;

	function requireDer () {
		if (hasRequiredDer) return der_1;
		hasRequiredDer = 1;

		const inherits = requireInherits();
		const bignum = requireBn();
		const DecoderBuffer = requireBuffer().DecoderBuffer;
		const Node = requireNode$1();

		// Import DER constants
		const der = requireDer$2();
		function DERDecoder(entity) {
		  this.enc = 'der';
		  this.name = entity.name;
		  this.entity = entity;

		  // Construct base tree
		  this.tree = new DERNode();
		  this.tree._init(entity.body);
		}
		der_1 = DERDecoder;
		DERDecoder.prototype.decode = function decode(data, options) {
		  if (!DecoderBuffer.isDecoderBuffer(data)) {
		    data = new DecoderBuffer(data, options);
		  }
		  return this.tree._decode(data, options);
		};

		// Tree methods

		function DERNode(parent) {
		  Node.call(this, 'der', parent);
		}
		inherits(DERNode, Node);
		DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
		  if (buffer.isEmpty()) return false;
		  const state = buffer.save();
		  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
		  if (buffer.isError(decodedTag)) return decodedTag;
		  buffer.restore(state);
		  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
		};
		DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
		  const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
		  if (buffer.isError(decodedTag)) return decodedTag;
		  let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');

		  // Failure
		  if (buffer.isError(len)) return len;
		  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
		    return buffer.error('Failed to match tag: "' + tag + '"');
		  }
		  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

		  // Indefinite length... find END tag
		  const state = buffer.save();
		  const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
		  if (buffer.isError(res)) return res;
		  len = buffer.offset - state.offset;
		  buffer.restore(state);
		  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
		};
		DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
		  for (;;) {
		    const tag = derDecodeTag(buffer, fail);
		    if (buffer.isError(tag)) return tag;
		    const len = derDecodeLen(buffer, tag.primitive, fail);
		    if (buffer.isError(len)) return len;
		    let res;
		    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail);

		    // Failure
		    if (buffer.isError(res)) return res;
		    if (tag.tagStr === 'end') break;
		  }
		};
		DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
		  const result = [];
		  while (!buffer.isEmpty()) {
		    const possibleEnd = this._peekTag(buffer, 'end');
		    if (buffer.isError(possibleEnd)) return possibleEnd;
		    const res = decoder.decode(buffer, 'der', options);
		    if (buffer.isError(res) && possibleEnd) break;
		    result.push(res);
		  }
		  return result;
		};
		DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
		  if (tag === 'bitstr') {
		    const unused = buffer.readUInt8();
		    if (buffer.isError(unused)) return unused;
		    return {
		      unused: unused,
		      data: buffer.raw()
		    };
		  } else if (tag === 'bmpstr') {
		    const raw = buffer.raw();
		    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
		    let str = '';
		    for (let i = 0; i < raw.length / 2; i++) {
		      str += String.fromCharCode(raw.readUInt16BE(i * 2));
		    }
		    return str;
		  } else if (tag === 'numstr') {
		    const numstr = buffer.raw().toString('ascii');
		    if (!this._isNumstr(numstr)) {
		      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
		    }
		    return numstr;
		  } else if (tag === 'octstr') {
		    return buffer.raw();
		  } else if (tag === 'objDesc') {
		    return buffer.raw();
		  } else if (tag === 'printstr') {
		    const printstr = buffer.raw().toString('ascii');
		    if (!this._isPrintstr(printstr)) {
		      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
		    }
		    return printstr;
		  } else if (/str$/.test(tag)) {
		    return buffer.raw().toString();
		  } else {
		    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
		  }
		};
		DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
		  let result;
		  const identifiers = [];
		  let ident = 0;
		  let subident = 0;
		  while (!buffer.isEmpty()) {
		    subident = buffer.readUInt8();
		    ident <<= 7;
		    ident |= subident & 0x7f;
		    if ((subident & 0x80) === 0) {
		      identifiers.push(ident);
		      ident = 0;
		    }
		  }
		  if (subident & 0x80) identifiers.push(ident);
		  const first = identifiers[0] / 40 | 0;
		  const second = identifiers[0] % 40;
		  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));
		  if (values) {
		    let tmp = values[result.join(' ')];
		    if (tmp === undefined) tmp = values[result.join('.')];
		    if (tmp !== undefined) result = tmp;
		  }
		  return result;
		};
		DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
		  const str = buffer.raw().toString();
		  let year;
		  let mon;
		  let day;
		  let hour;
		  let min;
		  let sec;
		  if (tag === 'gentime') {
		    year = str.slice(0, 4) | 0;
		    mon = str.slice(4, 6) | 0;
		    day = str.slice(6, 8) | 0;
		    hour = str.slice(8, 10) | 0;
		    min = str.slice(10, 12) | 0;
		    sec = str.slice(12, 14) | 0;
		  } else if (tag === 'utctime') {
		    year = str.slice(0, 2) | 0;
		    mon = str.slice(2, 4) | 0;
		    day = str.slice(4, 6) | 0;
		    hour = str.slice(6, 8) | 0;
		    min = str.slice(8, 10) | 0;
		    sec = str.slice(10, 12) | 0;
		    if (year < 70) year = 2000 + year;else year = 1900 + year;
		  } else {
		    return buffer.error('Decoding ' + tag + ' time is not supported yet');
		  }
		  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
		};
		DERNode.prototype._decodeNull = function decodeNull() {
		  return null;
		};
		DERNode.prototype._decodeBool = function decodeBool(buffer) {
		  const res = buffer.readUInt8();
		  if (buffer.isError(res)) return res;else return res !== 0;
		};
		DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
		  // Bigint, return as it is (assume big endian)
		  const raw = buffer.raw();
		  let res = new bignum(raw);
		  if (values) res = values[res.toString(10)] || res;
		  return res;
		};
		DERNode.prototype._use = function use(entity, obj) {
		  if (typeof entity === 'function') entity = entity(obj);
		  return entity._getDecoder('der').tree;
		};

		// Utility methods

		function derDecodeTag(buf, fail) {
		  let tag = buf.readUInt8(fail);
		  if (buf.isError(tag)) return tag;
		  const cls = der.tagClass[tag >> 6];
		  const primitive = (tag & 0x20) === 0;

		  // Multi-octet tag - load
		  if ((tag & 0x1f) === 0x1f) {
		    let oct = tag;
		    tag = 0;
		    while ((oct & 0x80) === 0x80) {
		      oct = buf.readUInt8(fail);
		      if (buf.isError(oct)) return oct;
		      tag <<= 7;
		      tag |= oct & 0x7f;
		    }
		  } else {
		    tag &= 0x1f;
		  }
		  const tagStr = der.tag[tag];
		  return {
		    cls: cls,
		    primitive: primitive,
		    tag: tag,
		    tagStr: tagStr
		  };
		}
		function derDecodeLen(buf, primitive, fail) {
		  let len = buf.readUInt8(fail);
		  if (buf.isError(len)) return len;

		  // Indefinite form
		  if (!primitive && len === 0x80) return null;

		  // Definite form
		  if ((len & 0x80) === 0) {
		    // Short form
		    return len;
		  }

		  // Long form
		  const num = len & 0x7f;
		  if (num > 4) return buf.error('length octect is too long');
		  len = 0;
		  for (let i = 0; i < num; i++) {
		    len <<= 8;
		    const j = buf.readUInt8(fail);
		    if (buf.isError(j)) return j;
		    len |= j;
		  }
		  return len;
		}
		return der_1;
	}

	var pem;
	var hasRequiredPem$1;

	function requirePem$1 () {
		if (hasRequiredPem$1) return pem;
		hasRequiredPem$1 = 1;

		const inherits = requireInherits();
		const Buffer = requireSafer().Buffer;
		const DERDecoder = requireDer();
		function PEMDecoder(entity) {
		  DERDecoder.call(this, entity);
		  this.enc = 'pem';
		}
		inherits(PEMDecoder, DERDecoder);
		pem = PEMDecoder;
		PEMDecoder.prototype.decode = function decode(data, options) {
		  const lines = data.toString().split(/[\r\n]+/g);
		  const label = options.label.toUpperCase();
		  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
		  let start = -1;
		  let end = -1;
		  for (let i = 0; i < lines.length; i++) {
		    const match = lines[i].match(re);
		    if (match === null) continue;
		    if (match[2] !== label) continue;
		    if (start === -1) {
		      if (match[1] !== 'BEGIN') break;
		      start = i;
		    } else {
		      if (match[1] !== 'END') break;
		      end = i;
		      break;
		    }
		  }
		  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
		  const base64 = lines.slice(start + 1, end).join('');
		  // Remove excessive symbols
		  base64.replace(/[^a-z0-9+/=]+/gi, '');
		  const input = Buffer.from(base64, 'base64');
		  return DERDecoder.prototype.decode.call(this, input, options);
		};
		return pem;
	}

	var hasRequiredDecoders;

	function requireDecoders () {
		if (hasRequiredDecoders) return decoders;
		hasRequiredDecoders = 1;
		(function (exports) {

			const decoders = exports;
			decoders.der = requireDer();
			decoders.pem = requirePem$1(); 
		} (decoders));
		return decoders;
	}

	var hasRequiredApi$2;

	function requireApi$2 () {
		if (hasRequiredApi$2) return api$2;
		hasRequiredApi$2 = 1;
		(function (exports) {

			const encoders = requireEncoders();
			const decoders = requireDecoders();
			const inherits = requireInherits();
			const api = exports;
			api.define = function define(name, body) {
			  return new Entity(name, body);
			};
			function Entity(name, body) {
			  this.name = name;
			  this.body = body;
			  this.decoders = {};
			  this.encoders = {};
			}
			Entity.prototype._createNamed = function createNamed(Base) {
			  const name = this.name;
			  function Generated(entity) {
			    this._initNamed(entity, name);
			  }
			  inherits(Generated, Base);
			  Generated.prototype._initNamed = function _initNamed(entity, name) {
			    Base.call(this, entity, name);
			  };
			  return new Generated(this);
			};
			Entity.prototype._getDecoder = function _getDecoder(enc) {
			  enc = enc || 'der';
			  // Lazily create decoder
			  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
			  return this.decoders[enc];
			};
			Entity.prototype.decode = function decode(data, enc, options) {
			  return this._getDecoder(enc).decode(data, options);
			};
			Entity.prototype._getEncoder = function _getEncoder(enc) {
			  enc = enc || 'der';
			  // Lazily create encoder
			  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
			  return this.encoders[enc];
			};
			Entity.prototype.encode = function encode(data, enc, /* internal */reporter) {
			  return this._getEncoder(enc).encode(data, reporter);
			}; 
		} (api$2));
		return api$2;
	}

	var base = {};

	var hasRequiredBase;

	function requireBase () {
		if (hasRequiredBase) return base;
		hasRequiredBase = 1;
		(function (exports) {

			const base = exports;
			base.Reporter = requireReporter().Reporter;
			base.DecoderBuffer = requireBuffer().DecoderBuffer;
			base.EncoderBuffer = requireBuffer().EncoderBuffer;
			base.Node = requireNode$1(); 
		} (base));
		return base;
	}

	var constants$4 = {};

	var hasRequiredConstants$4;

	function requireConstants$4 () {
		if (hasRequiredConstants$4) return constants$4;
		hasRequiredConstants$4 = 1;
		(function (exports) {

			const constants = exports;

			// Helper
			constants._reverse = function reverse(map) {
			  const res = {};
			  Object.keys(map).forEach(function (key) {
			    // Convert key to integer if it is stringified
			    if ((key | 0) == key) key = key | 0;
			    const value = map[key];
			    res[value] = key;
			  });
			  return res;
			};
			constants.der = requireDer$2(); 
		} (constants$4));
		return constants$4;
	}

	var hasRequiredAsn1;

	function requireAsn1 () {
		if (hasRequiredAsn1) return asn1;
		hasRequiredAsn1 = 1;
		(function (exports) {

			const asn1 = exports;
			asn1.bignum = requireBn();
			asn1.define = requireApi$2().define;
			asn1.base = requireBase();
			asn1.constants = requireConstants$4();
			asn1.decoders = requireDecoders();
			asn1.encoders = requireEncoders(); 
		} (asn1));
		return asn1;
	}

	var hasRequiredPem;

	function requirePem () {
		if (hasRequiredPem) return pem$2;
		hasRequiredPem = 1;

		var __createBinding = pem$2 && pem$2.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = pem$2 && pem$2.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = pem$2 && pem$2.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(pem$2, "__esModule", {
		  value: true
		});
		pem$2.jwkTopem = pem$2.pemTojwk = void 0;
		// @ts-ignore
		const asn = __importStar(requireAsn1());
		function urlize(base64) {
		  return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
		}
		function hex2b64url(str) {
		  return urlize(Buffer.from(str, "hex").toString("base64"));
		}
		var RSAPublicKey = asn.define("RSAPublicKey", function () {
		  this.seq().obj(this.key("n").int(), this.key("e").int());
		});
		var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function () {
		  this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional().any());
		});
		var PublicKeyInfo = asn.define("PublicKeyInfo", function () {
		  this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("publicKey").bitstr());
		});
		var Version = asn.define("Version", function () {
		  this.int({
		    0: "two-prime",
		    1: "multi"
		  });
		});
		var OtherPrimeInfos = asn.define("OtherPrimeInfos", function () {
		  this.seq().obj(this.key("ri").int(), this.key("di").int(), this.key("ti").int());
		});
		var RSAPrivateKey = asn.define("RSAPrivateKey", function () {
		  this.seq().obj(this.key("version").use(Version), this.key("n").int(), this.key("e").int(), this.key("d").int(), this.key("p").int(), this.key("q").int(), this.key("dp").int(), this.key("dq").int(), this.key("qi").int(), this.key("other").optional().use(OtherPrimeInfos));
		});
		var PrivateKeyInfo = asn.define("PrivateKeyInfo", function () {
		  this.seq().obj(this.key("version").use(Version), this.key("algorithm").use(AlgorithmIdentifier), this.key("privateKey").bitstr());
		});
		function addExtras(obj, extras) {
		  extras = extras || {};
		  Object.keys(extras).forEach(function (key) {
		    obj[key] = extras[key];
		  });
		  return obj;
		}
		function pad(hex) {
		  return hex.length % 2 === 1 ? "0" + hex : hex;
		}
		function decodeRsaPublic(buffer, extras) {
		  var key = RSAPublicKey.decode(buffer, "der");
		  var e = pad(key.e.toString(16));
		  var jwk = {
		    kty: "RSA",
		    n: bn2base64url(key.n),
		    e: hex2b64url(e)
		  };
		  return addExtras(jwk, extras);
		}
		function decodeRsaPrivate(buffer, extras) {
		  var key = RSAPrivateKey.decode(buffer, "der");
		  var e = pad(key.e.toString(16));
		  var jwk = {
		    kty: "RSA",
		    n: bn2base64url(key.n),
		    e: hex2b64url(e),
		    d: bn2base64url(key.d),
		    p: bn2base64url(key.p),
		    q: bn2base64url(key.q),
		    dp: bn2base64url(key.dp),
		    dq: bn2base64url(key.dq),
		    qi: bn2base64url(key.qi)
		  };
		  return addExtras(jwk, extras);
		}
		function decodePublic(buffer, extras) {
		  var info = PublicKeyInfo.decode(buffer, "der");
		  return decodeRsaPublic(info.publicKey.data, extras);
		}
		function decodePrivate(buffer, extras) {
		  var info = PrivateKeyInfo.decode(buffer, "der");
		  return decodeRsaPrivate(info.privateKey.data, extras);
		}
		function getDecoder(header) {
		  var match = /^-----BEGIN (RSA )?(PUBLIC|PRIVATE) KEY-----$/.exec(header);
		  if (!match) {
		    return null;
		  }
		  var isRSA = !!match[1];
		  var isPrivate = match[2] === "PRIVATE";
		  if (isPrivate) {
		    return isRSA ? decodeRsaPrivate : decodePrivate;
		  } else {
		    return isRSA ? decodeRsaPublic : decodePublic;
		  }
		}
		function parse(jwk) {
		  return {
		    n: string2bn(jwk.n),
		    e: string2bn(jwk.e),
		    d: jwk.d && string2bn(jwk.d),
		    p: jwk.p && string2bn(jwk.p),
		    q: jwk.q && string2bn(jwk.q),
		    dp: jwk.dp && string2bn(jwk.dp),
		    dq: jwk.dq && string2bn(jwk.dq),
		    qi: jwk.qi && string2bn(jwk.qi)
		  };
		}
		function bn2base64url(bn) {
		  return hex2b64url(pad(bn.toString(16)));
		}
		function base64url2bn(str) {
		  return new asn.bignum(Buffer.from(str, "base64"));
		}
		function string2bn(str) {
		  if (/^[0-9]+$/.test(str)) {
		    return new asn.bignum(str, 10);
		  }
		  return base64url2bn(str);
		}
		function pemTojwk(pem, extras) {
		  var text = pem.toString().split(/(\r\n|\r|\n)+/g);
		  text = text.filter(function (line) {
		    return line.trim().length !== 0;
		  });
		  var decoder = getDecoder(text[0]);
		  text = text.slice(1, -1).join("");
		  return decoder(Buffer.from(text.replace(/[^\w\d\+\/=]+/g, ""), "base64"), extras);
		}
		pem$2.pemTojwk = pemTojwk;
		function jwkTopem(json) {
		  var jwk = parse(json);
		  var isPrivate = !!jwk.d;
		  var t = isPrivate ? "PRIVATE" : "PUBLIC";
		  var header = "-----BEGIN RSA " + t + " KEY-----\n";
		  var footer = "\n-----END RSA " + t + " KEY-----\n";
		  var data = Buffer.alloc(0);
		  if (isPrivate) {
		    jwk.version = "two-prime";
		    data = RSAPrivateKey.encode(jwk, "der");
		  } else {
		    data = RSAPublicKey.encode(jwk, "der");
		  }
		  var body = data.toString("base64").match(/.{1,64}/g).join("\n");
		  return header + body + footer;
		}
		pem$2.jwkTopem = jwkTopem;
		return pem$2;
	}

	var hasRequiredNodeDriver;

	function requireNodeDriver () {
		if (hasRequiredNodeDriver) return nodeDriver$1;
		hasRequiredNodeDriver = 1;

		var __createBinding = nodeDriver$1 && nodeDriver$1.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = nodeDriver$1 && nodeDriver$1.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = nodeDriver$1 && nodeDriver$1.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(nodeDriver$1, "__esModule", {
		  value: true
		});
		const pem_1 = requirePem();
		const crypto = __importStar(require$$1__default$2["default"]);
		class NodeCryptoDriver {
		  keyLength = 4096;
		  publicExponent = 0x10001;
		  hashAlgorithm = "sha256";
		  encryptionAlgorithm = "aes-256-cbc";
		  generateJWK() {
		    if (typeof crypto.generateKeyPair != "function") {
		      throw new Error("Keypair generation not supported in this version of Node, only supported in versions 10+");
		    }
		    return new Promise((resolve, reject) => {
		      crypto.generateKeyPair("rsa", {
		        modulusLength: this.keyLength,
		        publicExponent: this.publicExponent,
		        privateKeyEncoding: {
		          type: "pkcs1",
		          format: "pem"
		        },
		        publicKeyEncoding: {
		          type: "pkcs1",
		          format: "pem"
		        }
		      }, (err, publicKey, privateKey) => {
		        if (err) {
		          reject(err);
		        }
		        resolve(this.pemToJWK(privateKey));
		      });
		    });
		  }
		  sign(jwk, data, {
		    saltLength
		  } = {}) {
		    return new Promise((resolve, reject) => {
		      resolve(crypto.createSign(this.hashAlgorithm).update(data).sign({
		        key: this.jwkToPem(jwk),
		        padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
		        saltLength
		      }));
		    });
		  }
		  verify(publicModulus, data, signature) {
		    return new Promise((resolve, reject) => {
		      const publicKey = {
		        kty: "RSA",
		        e: "AQAB",
		        n: publicModulus
		      };
		      const pem = this.jwkToPem(publicKey);
		      resolve(crypto.createVerify(this.hashAlgorithm).update(data).verify({
		        key: pem,
		        padding: crypto.constants.RSA_PKCS1_PSS_PADDING
		      }, signature));
		    });
		  }
		  hash(data, algorithm = "SHA-256") {
		    if (typeof data === "string") {
		      throw new TypeError("Data must be a Uint8Array");
		    }
		    return new Promise((resolve, reject) => {
		      resolve(crypto.createHash(this.parseHashAlgorithm(algorithm)).update(data).digest());
		    });
		  }
		  /**
		   * If a key is passed as a buffer it *must* be exactly 32 bytes.
		   * If a key is passed as a string then any length may be used.
		   *
		   * @param {Buffer} data
		   * @param {(string | Buffer)} key
		   * @returns {Promise<Uint8Array>}
		   */
		  async encrypt(data, key, salt) {
		    // create a random string for deriving the key
		    // const salt = crypto.randomBytes(16);
		    // console.log(salt);
		    // As we're using CBC with a randomised IV per cypher we don't really need
		    // an additional random salt per passphrase.
		    const derivedKey = crypto.pbkdf2Sync(key, salt = salt ? salt : "salt", 100000, 32, this.hashAlgorithm);
		    const iv = crypto.randomBytes(16);
		    const cipher = crypto.createCipheriv(this.encryptionAlgorithm, derivedKey, iv);
		    const encrypted = Buffer.concat([iv, cipher.update(data), cipher.final()]);
		    return encrypted;
		  }
		  /**
		   * If a key is passed as a buffer it *must* be exactly 32 bytes.
		   * If a key is passed as a string then any length may be used.
		   *
		   * @param {Buffer} encrypted
		   * @param {(string | Buffer)} key
		   * @returns {Promise<Uint8Array>}
		   */
		  async decrypt(encrypted, key, salt) {
		    try {
		      // create a random string for deriving the key
		      // const salt = crypto.randomBytes(16).toString('hex');
		      // As we're using CBC with a randomised IV per cypher we don't really need
		      // an additional random salt per passphrase.
		      const derivedKey = crypto.pbkdf2Sync(key, salt = salt ? salt : "salt", 100000, 32, this.hashAlgorithm);
		      const iv = encrypted.slice(0, 16);
		      const data = encrypted.slice(16);
		      const decipher = crypto.createDecipheriv(this.encryptionAlgorithm, derivedKey, iv);
		      const decrypted = Buffer.concat([decipher.update(data), decipher.final()]);
		      return decrypted;
		    } catch (error) {
		      throw new Error("Failed to decrypt");
		    }
		  }
		  jwkToPem(jwk) {
		    return (0, pem_1.jwkTopem)(jwk);
		  }
		  pemToJWK(pem) {
		    let jwk = (0, pem_1.pemTojwk)(pem);
		    return jwk;
		  }
		  parseHashAlgorithm(algorithm) {
		    switch (algorithm) {
		      case "SHA-256":
		        return "sha256";
		      case "SHA-384":
		        return "sha384";
		      default:
		        throw new Error(`Algorithm not supported: ${algorithm}`);
		    }
		  }
		}
		nodeDriver$1.default = NodeCryptoDriver;
		return nodeDriver$1;
	}

	var nodeDriverExports = requireNodeDriver();
	var nodeDriver = /*@__PURE__*/getDefaultExportFromCjs(nodeDriverExports);

	const driver = nodeDriver['default'] ? nodeDriver['default'] : nodeDriver;
	class CryptoDriver extends driver {
	  getPublicKey(jwk) {
	    return require$$1$2.createPublicKey({
	      key: this.jwkToPem(jwk),
	      type: 'pkcs1',
	      format: 'pem'
	    }).export({
	      format: 'pem',
	      type: 'pkcs1'
	    }).toString();
	  }
	}
	let driverInstance;
	function getCryptoDriver() {
	  return driverInstance ??= new CryptoDriver();
	}

	var SignatureConfig;
	(function (SignatureConfig) {
	  SignatureConfig[SignatureConfig["ARWEAVE"] = 1] = "ARWEAVE";
	  SignatureConfig[SignatureConfig["ED25519"] = 2] = "ED25519";
	  SignatureConfig[SignatureConfig["ETHEREUM"] = 3] = "ETHEREUM";
	  SignatureConfig[SignatureConfig["SOLANA"] = 4] = "SOLANA";
	  SignatureConfig[SignatureConfig["INJECTEDAPTOS"] = 5] = "INJECTEDAPTOS";
	  SignatureConfig[SignatureConfig["MULTIAPTOS"] = 6] = "MULTIAPTOS";
	  SignatureConfig[SignatureConfig["TYPEDETHEREUM"] = 7] = "TYPEDETHEREUM";
	})(SignatureConfig || (SignatureConfig = {}));
	const SIG_CONFIG = {
	  [SignatureConfig.ARWEAVE]: {
	    sigLength: 512,
	    pubLength: 512,
	    sigName: 'arweave'
	  },
	  [SignatureConfig.ED25519]: {
	    sigLength: 64,
	    pubLength: 32,
	    sigName: 'ed25519'
	  },
	  [SignatureConfig.ETHEREUM]: {
	    sigLength: 65,
	    pubLength: 65,
	    sigName: 'ethereum'
	  },
	  [SignatureConfig.SOLANA]: {
	    sigLength: 64,
	    pubLength: 32,
	    sigName: 'solana'
	  },
	  [SignatureConfig.INJECTEDAPTOS]: {
	    sigLength: 64,
	    pubLength: 32,
	    sigName: 'injectedAptos'
	  },
	  [SignatureConfig.MULTIAPTOS]: {
	    sigLength: 64 * 32 + 4,
	    pubLength: 32 * 32 + 1,
	    sigName: 'multiAptos'
	  },
	  [SignatureConfig.TYPEDETHEREUM]: {
	    sigLength: 65,
	    pubLength: 42,
	    sigName: 'typedEthereum'
	  }
	};

	class ArweaveSigner {
	  signatureType = 1;
	  ownerLength = SIG_CONFIG[1].pubLength;
	  signatureLength = SIG_CONFIG[1].sigLength;
	  jwk;
	  pk;
	  constructor(jwk) {
	    this.pk = jwk.n;
	    this.jwk = jwk;
	  }
	  get publicKey() {
	    return base64url$1.toBuffer(this.pk);
	  }
	  sign(message) {
	    return getCryptoDriver().sign(this.jwk, message);
	  }
	  static async verify(pk, message, signature) {
	    return await getCryptoDriver().verify(pk, message, signature);
	  }
	}

	const indexToType = {
	  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // @ts-expect-error
	  1: ArweaveSigner
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // 2: Curve25519,
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // // @ts-expect-error
	  // 3: EthereumSigner,
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // // @ts-expect-error
	  // 4: HexInjectedSolanaSigner,
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // // @ts-expect-error
	  // 5: InjectedAptosSigner,
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // // @ts-expect-error
	  // 6: MultiSignatureAptosSigner,
	  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // // @ts-expect-error
	  // 7: TypedEthereumSigner,
	};

	async function getSignatureData(item) {
	  return deepHash$1([utilsExports.stringToBuffer('dataitem'), utilsExports.stringToBuffer('1'), utilsExports.stringToBuffer(item.signatureType.toString()), item.rawOwner, item.rawTarget, item.rawAnchor, item.rawTags, item.rawData]);
	}

	async function getSignatureAndId(item, signer) {
	  const signatureData = await getSignatureData(item);
	  const signatureBytes = await signer.sign(signatureData);
	  const idBytes = await getCryptoDriver().hash(signatureBytes);
	  return {
	    signature: Buffer.from(signatureBytes),
	    id: Buffer.from(idBytes)
	  };
	}
	async function sign$1(item, signer) {
	  const {
	    signature,
	    id
	  } = await getSignatureAndId(item, signer);
	  item.getRaw().set(signature, 2);
	  return id;
	}

	class AVSCTap {
	  buf;
	  pos;
	  constructor(buf = Buffer.alloc(MAX_TAG_BYTES), pos = 0) {
	    this.buf = buf;
	    this.pos = pos;
	  }
	  writeTags(tags) {
	    if (!Array.isArray(tags)) {
	      throw new Error('input must be array');
	    }
	    const n = tags.length;
	    let i;
	    if (n) {
	      this.writeLong(n);
	      for (i = 0; i < n; i++) {
	        // for this use case, assume tags/strings.
	        const tag = tags[i];
	        if (tag?.name === undefined || tag?.value === undefined) throw new Error(`Invalid tag format for ${tag}, expected {name:string, value: string}`);
	        this.writeString(tag.name);
	        this.writeString(tag.value);
	        // this.itemsType._write(tap, val[i]);
	      }
	    }
	    this.writeLong(0);
	  }
	  toBuffer() {
	    const buffer = Buffer.alloc(this.pos);
	    if (this.pos > this.buf.length) throw new Error(`Too many tag bytes (${this.pos} > ${this.buf.length})`);
	    this.buf.copy(buffer, 0, 0, this.pos);
	    return buffer;
	  }
	  tagsExceedLimit() {
	    return this.pos > this.buf.length;
	  }
	  writeLong(n) {
	    const buf = this.buf;
	    let f, m;
	    if (n >= -1073741824 && n < 1073741824) {
	      // Won't overflow, we can use integer arithmetic.
	      m = n >= 0 ? n << 1 : ~n << 1 | 1;
	      do {
	        buf[this.pos] = m & 0x7f;
	        m >>= 7;
	      } while (m && (buf[this.pos++] |= 0x80));
	    } else {
	      // We have to use slower floating arithmetic.
	      f = n >= 0 ? n * 2 : -n * 2 - 1;
	      do {
	        buf[this.pos] = f & 0x7f;
	        f /= 128;
	      } while (f >= 1 && (buf[this.pos++] |= 0x80));
	    }
	    this.pos++;
	    this.buf = buf;
	  }
	  // for some reason using setters/getters with ++ doesn't work right.
	  // set pos(newPos: number) {
	  //   const d = newPos + 1 - this.buf.length;
	  //   if (d > 0) this.buf = Buffer.concat([this.buf, Buffer.alloc(d)]);
	  //   this._pos = newPos;
	  // }
	  // get pos(): number {
	  //   return this._pos;
	  // }
	  // protected safeRead(position): number {
	  //   return position > this.buf.length ? 0 : this.buf[position];
	  // }
	  // protected safeWrite(position, value): Buffer {
	  //   if (position > this.buf.length) this.buf = Buffer.concat([this.buf, Buffer.alloc(1)]);
	  //   this.buf[position] = value;
	  //   return this.buf;
	  // }
	  writeString(s) {
	    const len = Buffer.byteLength(s);
	    const buf = this.buf;
	    this.writeLong(len);
	    let pos = this.pos;
	    this.pos += len;
	    if (this.pos > buf.length) {
	      return;
	    }
	    if (len > 64) {
	      // this._writeUtf8(s, len);
	      this.buf.write(s, this.pos - len, len, 'utf8');
	    } else {
	      let i, l, c1, c2;
	      for (i = 0, l = len; i < l; i++) {
	        c1 = s.charCodeAt(i);
	        if (c1 < 0x80) {
	          buf[pos++] = c1;
	        } else if (c1 < 0x800) {
	          buf[pos++] = c1 >> 6 | 0xc0;
	          buf[pos++] = c1 & 0x3f | 0x80;
	        } else if ((c1 & 0xfc00) === 0xd800 && ((c2 = s.charCodeAt(i + 1)) & 0xfc00) === 0xdc00) {
	          c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);
	          i++;
	          buf[pos++] = c1 >> 18 | 0xf0;
	          buf[pos++] = c1 >> 12 & 0x3f | 0x80;
	          buf[pos++] = c1 >> 6 & 0x3f | 0x80;
	          buf[pos++] = c1 & 0x3f | 0x80;
	        } else {
	          buf[pos++] = c1 >> 12 | 0xe0;
	          buf[pos++] = c1 >> 6 & 0x3f | 0x80;
	          buf[pos++] = c1 & 0x3f | 0x80;
	        }
	      }
	    }
	    this.buf = buf;
	  }
	  readLong() {
	    let n = 0;
	    let k = 0;
	    const buf = this.buf;
	    let b, h, f, fk;
	    do {
	      b = buf[this.pos++];
	      h = b & 0x80;
	      n |= (b & 0x7f) << k;
	      k += 7;
	    } while (h && k < 28);
	    if (h) {
	      // Switch to float arithmetic, otherwise we might overflow.
	      f = n;
	      fk = 268435456; // 2 ** 28.
	      do {
	        b = buf[this.pos++];
	        f += (b & 0x7f) * fk;
	        fk *= 128;
	      } while (b & 0x80);
	      return (f % 2 ? -(f + 1) : f) / 2;
	    }
	    return n >> 1 ^ -(n & 1);
	  }
	  skipLong() {
	    const buf = this.buf;
	    while (buf[this.pos++] & 0x80) {}
	  }
	  readTags() {
	    // var items = this.itemsType;
	    const val = [];
	    let n;
	    while (n = this.readLong()) {
	      if (n < 0) {
	        n = -n;
	        this.skipLong(); // Skip size.
	      }
	      while (n--) {
	        const name = this.readString();
	        const value = this.readString();
	        val.push(/* items._read(tap) */{
	          name,
	          value
	        });
	      }
	    }
	    return val;
	  }
	  readString() {
	    const len = this.readLong();
	    const pos = this.pos;
	    const buf = this.buf;
	    this.pos += len;
	    if (this.pos > buf.length) {
	      return undefined;
	    }
	    return this.buf.slice(pos, pos + len).toString();
	  }
	}
	function serializeTags(tags) {
	  const tap = new AVSCTap();
	  tap.writeTags(tags);
	  return tap.toBuffer();
	}
	function deserializeTags(tagsBuffer) {
	  const tap = new AVSCTap(tagsBuffer);
	  return tap.readTags();
	}

	function byteArrayToLong(byteArray) {
	  let value = 0;
	  for (let i = byteArray.length - 1; i >= 0; i--) {
	    value = value * 256 + byteArray[i];
	  }
	  return value;
	}
	function shortTo2ByteArray(long) {
	  if (long > (2 ^ 32 - 1)) throw new Error('Short too long');
	  // we want to represent the input as a 8-bytes array
	  const byteArray = [0, 0];
	  for (let index = 0; index < byteArray.length; index++) {
	    const byte = long & 0xff;
	    byteArray[index] = byte;
	    long = (long - byte) / 256;
	  }
	  return Uint8Array.from(byteArray);
	}
	function longTo8ByteArray(long) {
	  // we want to represent the input as a 8-bytes array
	  const byteArray = [0, 0, 0, 0, 0, 0, 0, 0];
	  for (let index = 0; index < byteArray.length; index++) {
	    const byte = long & 0xff;
	    byteArray[index] = byte;
	    long = (long - byte) / 256;
	  }
	  return Uint8Array.from(byteArray);
	}

	var undici = {};

	var symbols$4;
	var hasRequiredSymbols$4;

	function requireSymbols$4 () {
		if (hasRequiredSymbols$4) return symbols$4;
		hasRequiredSymbols$4 = 1;
		symbols$4 = {
		  kClose: Symbol('close'),
		  kDestroy: Symbol('destroy'),
		  kDispatch: Symbol('dispatch'),
		  kUrl: Symbol('url'),
		  kWriting: Symbol('writing'),
		  kResuming: Symbol('resuming'),
		  kQueue: Symbol('queue'),
		  kConnect: Symbol('connect'),
		  kConnecting: Symbol('connecting'),
		  kHeadersList: Symbol('headers list'),
		  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
		  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
		  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
		  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
		  kKeepAlive: Symbol('keep alive'),
		  kHeadersTimeout: Symbol('headers timeout'),
		  kBodyTimeout: Symbol('body timeout'),
		  kServerName: Symbol('server name'),
		  kLocalAddress: Symbol('local address'),
		  kHost: Symbol('host'),
		  kNoRef: Symbol('no ref'),
		  kBodyUsed: Symbol('used'),
		  kRunning: Symbol('running'),
		  kBlocking: Symbol('blocking'),
		  kPending: Symbol('pending'),
		  kSize: Symbol('size'),
		  kBusy: Symbol('busy'),
		  kQueued: Symbol('queued'),
		  kFree: Symbol('free'),
		  kConnected: Symbol('connected'),
		  kClosed: Symbol('closed'),
		  kNeedDrain: Symbol('need drain'),
		  kReset: Symbol('reset'),
		  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
		  kMaxHeadersSize: Symbol('max headers size'),
		  kRunningIdx: Symbol('running index'),
		  kPendingIdx: Symbol('pending index'),
		  kError: Symbol('error'),
		  kClients: Symbol('clients'),
		  kClient: Symbol('client'),
		  kParser: Symbol('parser'),
		  kOnDestroyed: Symbol('destroy callbacks'),
		  kPipelining: Symbol('pipelining'),
		  kSocket: Symbol('socket'),
		  kHostHeader: Symbol('host header'),
		  kConnector: Symbol('connector'),
		  kStrictContentLength: Symbol('strict content length'),
		  kMaxRedirections: Symbol('maxRedirections'),
		  kMaxRequests: Symbol('maxRequestsPerClient'),
		  kProxy: Symbol('proxy agent options'),
		  kCounter: Symbol('socket request counter'),
		  kInterceptors: Symbol('dispatch interceptors'),
		  kMaxResponseSize: Symbol('max response size'),
		  kHTTP2Session: Symbol('http2Session'),
		  kHTTP2SessionState: Symbol('http2Session state'),
		  kHTTP2BuildRequest: Symbol('http2 build request'),
		  kHTTP1BuildRequest: Symbol('http1 build request'),
		  kHTTP2CopyHeaders: Symbol('http2 copy headers'),
		  kHTTPConnVersion: Symbol('http connection version'),
		  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
		  kConstruct: Symbol('constructable')
		};
		return symbols$4;
	}

	var errors;
	var hasRequiredErrors;

	function requireErrors () {
		if (hasRequiredErrors) return errors;
		hasRequiredErrors = 1;

		class UndiciError extends Error {
		  constructor(message) {
		    super(message);
		    this.name = 'UndiciError';
		    this.code = 'UND_ERR';
		  }
		}
		class ConnectTimeoutError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, ConnectTimeoutError);
		    this.name = 'ConnectTimeoutError';
		    this.message = message || 'Connect Timeout Error';
		    this.code = 'UND_ERR_CONNECT_TIMEOUT';
		  }
		}
		class HeadersTimeoutError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, HeadersTimeoutError);
		    this.name = 'HeadersTimeoutError';
		    this.message = message || 'Headers Timeout Error';
		    this.code = 'UND_ERR_HEADERS_TIMEOUT';
		  }
		}
		class HeadersOverflowError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, HeadersOverflowError);
		    this.name = 'HeadersOverflowError';
		    this.message = message || 'Headers Overflow Error';
		    this.code = 'UND_ERR_HEADERS_OVERFLOW';
		  }
		}
		class BodyTimeoutError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, BodyTimeoutError);
		    this.name = 'BodyTimeoutError';
		    this.message = message || 'Body Timeout Error';
		    this.code = 'UND_ERR_BODY_TIMEOUT';
		  }
		}
		class ResponseStatusCodeError extends UndiciError {
		  constructor(message, statusCode, headers, body) {
		    super(message);
		    Error.captureStackTrace(this, ResponseStatusCodeError);
		    this.name = 'ResponseStatusCodeError';
		    this.message = message || 'Response Status Code Error';
		    this.code = 'UND_ERR_RESPONSE_STATUS_CODE';
		    this.body = body;
		    this.status = statusCode;
		    this.statusCode = statusCode;
		    this.headers = headers;
		  }
		}
		class InvalidArgumentError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, InvalidArgumentError);
		    this.name = 'InvalidArgumentError';
		    this.message = message || 'Invalid Argument Error';
		    this.code = 'UND_ERR_INVALID_ARG';
		  }
		}
		class InvalidReturnValueError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, InvalidReturnValueError);
		    this.name = 'InvalidReturnValueError';
		    this.message = message || 'Invalid Return Value Error';
		    this.code = 'UND_ERR_INVALID_RETURN_VALUE';
		  }
		}
		class RequestAbortedError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, RequestAbortedError);
		    this.name = 'AbortError';
		    this.message = message || 'Request aborted';
		    this.code = 'UND_ERR_ABORTED';
		  }
		}
		class InformationalError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, InformationalError);
		    this.name = 'InformationalError';
		    this.message = message || 'Request information';
		    this.code = 'UND_ERR_INFO';
		  }
		}
		class RequestContentLengthMismatchError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, RequestContentLengthMismatchError);
		    this.name = 'RequestContentLengthMismatchError';
		    this.message = message || 'Request body length does not match content-length header';
		    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';
		  }
		}
		class ResponseContentLengthMismatchError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, ResponseContentLengthMismatchError);
		    this.name = 'ResponseContentLengthMismatchError';
		    this.message = message || 'Response body length does not match content-length header';
		    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';
		  }
		}
		class ClientDestroyedError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, ClientDestroyedError);
		    this.name = 'ClientDestroyedError';
		    this.message = message || 'The client is destroyed';
		    this.code = 'UND_ERR_DESTROYED';
		  }
		}
		class ClientClosedError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, ClientClosedError);
		    this.name = 'ClientClosedError';
		    this.message = message || 'The client is closed';
		    this.code = 'UND_ERR_CLOSED';
		  }
		}
		class SocketError extends UndiciError {
		  constructor(message, socket) {
		    super(message);
		    Error.captureStackTrace(this, SocketError);
		    this.name = 'SocketError';
		    this.message = message || 'Socket error';
		    this.code = 'UND_ERR_SOCKET';
		    this.socket = socket;
		  }
		}
		class NotSupportedError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, NotSupportedError);
		    this.name = 'NotSupportedError';
		    this.message = message || 'Not supported error';
		    this.code = 'UND_ERR_NOT_SUPPORTED';
		  }
		}
		class BalancedPoolMissingUpstreamError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, NotSupportedError);
		    this.name = 'MissingUpstreamError';
		    this.message = message || 'No upstream has been added to the BalancedPool';
		    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';
		  }
		}
		class HTTPParserError extends Error {
		  constructor(message, code, data) {
		    super(message);
		    Error.captureStackTrace(this, HTTPParserError);
		    this.name = 'HTTPParserError';
		    this.code = code ? `HPE_${code}` : undefined;
		    this.data = data ? data.toString() : undefined;
		  }
		}
		class ResponseExceededMaxSizeError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, ResponseExceededMaxSizeError);
		    this.name = 'ResponseExceededMaxSizeError';
		    this.message = message || 'Response content exceeded max size';
		    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';
		  }
		}
		class RequestRetryError extends UndiciError {
		  constructor(message, code, {
		    headers,
		    data
		  }) {
		    super(message);
		    Error.captureStackTrace(this, RequestRetryError);
		    this.name = 'RequestRetryError';
		    this.message = message || 'Request retry error';
		    this.code = 'UND_ERR_REQ_RETRY';
		    this.statusCode = code;
		    this.data = data;
		    this.headers = headers;
		  }
		}
		errors = {
		  HTTPParserError,
		  UndiciError,
		  HeadersTimeoutError,
		  HeadersOverflowError,
		  BodyTimeoutError,
		  RequestContentLengthMismatchError,
		  ConnectTimeoutError,
		  ResponseStatusCodeError,
		  InvalidArgumentError,
		  InvalidReturnValueError,
		  RequestAbortedError,
		  ClientDestroyedError,
		  ClientClosedError,
		  InformationalError,
		  SocketError,
		  NotSupportedError,
		  ResponseContentLengthMismatchError,
		  BalancedPoolMissingUpstreamError,
		  ResponseExceededMaxSizeError,
		  RequestRetryError
		};
		return errors;
	}

	var util$6;
	var hasRequiredUtil$6;

	function requireUtil$6 () {
		if (hasRequiredUtil$6) return util$6;
		hasRequiredUtil$6 = 1;

		const assert = require$$0__default$3["default"];
		const {
		  kDestroyed,
		  kBodyUsed
		} = requireSymbols$4();
		const {
		  IncomingMessage
		} = require$$2__default["default"];
		const stream = stream__default["default"];
		const net = require$$4__default$1["default"];
		const {
		  InvalidArgumentError
		} = requireErrors();
		const {
		  Blob
		} = require$$0__default$4["default"];
		const nodeUtil = require$$1__default["default"];
		const {
		  stringify
		} = require$$8__default["default"];
		const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v));
		function nop() {}
		function isStream(obj) {
		  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function';
		}

		// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
		function isBlobLike(object) {
		  return Blob && object instanceof Blob || object && typeof object === 'object' && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
		}
		function buildURL(url, queryParams) {
		  if (url.includes('?') || url.includes('#')) {
		    throw new Error('Query params cannot be passed when url already contains "?" or "#".');
		  }
		  const stringified = stringify(queryParams);
		  if (stringified) {
		    url += '?' + stringified;
		  }
		  return url;
		}
		function parseURL(url) {
		  if (typeof url === 'string') {
		    url = new URL(url);
		    if (!/^https?:/.test(url.origin || url.protocol)) {
		      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');
		    }
		    return url;
		  }
		  if (!url || typeof url !== 'object') {
		    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.');
		  }
		  if (!/^https?:/.test(url.origin || url.protocol)) {
		    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');
		  }
		  if (!(url instanceof URL)) {
		    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {
		      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.');
		    }
		    if (url.path != null && typeof url.path !== 'string') {
		      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.');
		    }
		    if (url.pathname != null && typeof url.pathname !== 'string') {
		      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.');
		    }
		    if (url.hostname != null && typeof url.hostname !== 'string') {
		      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.');
		    }
		    if (url.origin != null && typeof url.origin !== 'string') {
		      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.');
		    }
		    const port = url.port != null ? url.port : url.protocol === 'https:' ? 443 : 80;
		    let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
		    let path = url.path != null ? url.path : `${url.pathname || ''}${url.search || ''}`;
		    if (origin.endsWith('/')) {
		      origin = origin.substring(0, origin.length - 1);
		    }
		    if (path && !path.startsWith('/')) {
		      path = `/${path}`;
		    }
		    // new URL(path, origin) is unsafe when `path` contains an absolute URL
		    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
		    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
		    // If first parameter is an absolute URL, a given second param will be ignored.
		    url = new URL(origin + path);
		  }
		  return url;
		}
		function parseOrigin(url) {
		  url = parseURL(url);
		  if (url.pathname !== '/' || url.search || url.hash) {
		    throw new InvalidArgumentError('invalid url');
		  }
		  return url;
		}
		function getHostname(host) {
		  if (host[0] === '[') {
		    const idx = host.indexOf(']');
		    assert(idx !== -1);
		    return host.substring(1, idx);
		  }
		  const idx = host.indexOf(':');
		  if (idx === -1) return host;
		  return host.substring(0, idx);
		}

		// IP addresses are not valid server names per RFC6066
		// > Currently, the only server names supported are DNS hostnames
		function getServerName(host) {
		  if (!host) {
		    return null;
		  }
		  assert.strictEqual(typeof host, 'string');
		  const servername = getHostname(host);
		  if (net.isIP(servername)) {
		    return '';
		  }
		  return servername;
		}
		function deepClone(obj) {
		  return JSON.parse(JSON.stringify(obj));
		}
		function isAsyncIterable(obj) {
		  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function');
		}
		function isIterable(obj) {
		  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'));
		}
		function bodyLength(body) {
		  if (body == null) {
		    return 0;
		  } else if (isStream(body)) {
		    const state = body._readableState;
		    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
		  } else if (isBlobLike(body)) {
		    return body.size != null ? body.size : null;
		  } else if (isBuffer(body)) {
		    return body.byteLength;
		  }
		  return null;
		}
		function isDestroyed(stream) {
		  return !stream || !!(stream.destroyed || stream[kDestroyed]);
		}
		function isReadableAborted(stream) {
		  const state = stream && stream._readableState;
		  return isDestroyed(stream) && state && !state.endEmitted;
		}
		function destroy(stream, err) {
		  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
		    return;
		  }
		  if (typeof stream.destroy === 'function') {
		    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
		      // See: https://github.com/nodejs/node/pull/38505/files
		      stream.socket = null;
		    }
		    stream.destroy(err);
		  } else if (err) {
		    process.nextTick((stream, err) => {
		      stream.emit('error', err);
		    }, stream, err);
		  }
		  if (stream.destroyed !== true) {
		    stream[kDestroyed] = true;
		  }
		}
		const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
		function parseKeepAliveTimeout(val) {
		  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
		  return m ? parseInt(m[1], 10) * 1000 : null;
		}
		function parseHeaders(headers, obj = {}) {
		  // For H2 support
		  if (!Array.isArray(headers)) return headers;
		  for (let i = 0; i < headers.length; i += 2) {
		    const key = headers[i].toString().toLowerCase();
		    let val = obj[key];
		    if (!val) {
		      if (Array.isArray(headers[i + 1])) {
		        obj[key] = headers[i + 1].map(x => x.toString('utf8'));
		      } else {
		        obj[key] = headers[i + 1].toString('utf8');
		      }
		    } else {
		      if (!Array.isArray(val)) {
		        val = [val];
		        obj[key] = val;
		      }
		      val.push(headers[i + 1].toString('utf8'));
		    }
		  }

		  // See https://github.com/nodejs/node/pull/46528
		  if ('content-length' in obj && 'content-disposition' in obj) {
		    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1');
		  }
		  return obj;
		}
		function parseRawHeaders(headers) {
		  const ret = [];
		  let hasContentLength = false;
		  let contentDispositionIdx = -1;
		  for (let n = 0; n < headers.length; n += 2) {
		    const key = headers[n + 0].toString();
		    const val = headers[n + 1].toString('utf8');
		    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
		      ret.push(key, val);
		      hasContentLength = true;
		    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
		      contentDispositionIdx = ret.push(key, val) - 1;
		    } else {
		      ret.push(key, val);
		    }
		  }

		  // See https://github.com/nodejs/node/pull/46528
		  if (hasContentLength && contentDispositionIdx !== -1) {
		    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1');
		  }
		  return ret;
		}
		function isBuffer(buffer) {
		  // See, https://github.com/mcollina/undici/pull/319
		  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
		}
		function validateHandler(handler, method, upgrade) {
		  if (!handler || typeof handler !== 'object') {
		    throw new InvalidArgumentError('handler must be an object');
		  }
		  if (typeof handler.onConnect !== 'function') {
		    throw new InvalidArgumentError('invalid onConnect method');
		  }
		  if (typeof handler.onError !== 'function') {
		    throw new InvalidArgumentError('invalid onError method');
		  }
		  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
		    throw new InvalidArgumentError('invalid onBodySent method');
		  }
		  if (upgrade || method === 'CONNECT') {
		    if (typeof handler.onUpgrade !== 'function') {
		      throw new InvalidArgumentError('invalid onUpgrade method');
		    }
		  } else {
		    if (typeof handler.onHeaders !== 'function') {
		      throw new InvalidArgumentError('invalid onHeaders method');
		    }
		    if (typeof handler.onData !== 'function') {
		      throw new InvalidArgumentError('invalid onData method');
		    }
		    if (typeof handler.onComplete !== 'function') {
		      throw new InvalidArgumentError('invalid onComplete method');
		    }
		  }
		}

		// A body is disturbed if it has been read from and it cannot
		// be re-used without losing state or data.
		function isDisturbed(body) {
		  return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
		  : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
		}
		function isErrored(body) {
		  return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
		}
		function isReadable(body) {
		  return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
		}
		function getSocketInfo(socket) {
		  return {
		    localAddress: socket.localAddress,
		    localPort: socket.localPort,
		    remoteAddress: socket.remoteAddress,
		    remotePort: socket.remotePort,
		    remoteFamily: socket.remoteFamily,
		    timeout: socket.timeout,
		    bytesWritten: socket.bytesWritten,
		    bytesRead: socket.bytesRead
		  };
		}
		async function* convertIterableToBuffer(iterable) {
		  for await (const chunk of iterable) {
		    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
		  }
		}
		let ReadableStream;
		function ReadableStreamFrom(iterable) {
		  if (!ReadableStream) {
		    ReadableStream = require$$13__default["default"].ReadableStream;
		  }
		  if (ReadableStream.from) {
		    return ReadableStream.from(convertIterableToBuffer(iterable));
		  }
		  let iterator;
		  return new ReadableStream({
		    async start() {
		      iterator = iterable[Symbol.asyncIterator]();
		    },
		    async pull(controller) {
		      const {
		        done,
		        value
		      } = await iterator.next();
		      if (done) {
		        queueMicrotask(() => {
		          controller.close();
		        });
		      } else {
		        const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
		        controller.enqueue(new Uint8Array(buf));
		      }
		      return controller.desiredSize > 0;
		    },
		    async cancel(reason) {
		      await iterator.return();
		    }
		  }, 0);
		}

		// The chunk should be a FormData instance and contains
		// all the required methods.
		function isFormDataLike(object) {
		  return object && typeof object === 'object' && typeof object.append === 'function' && typeof object.delete === 'function' && typeof object.get === 'function' && typeof object.getAll === 'function' && typeof object.has === 'function' && typeof object.set === 'function' && object[Symbol.toStringTag] === 'FormData';
		}
		function throwIfAborted(signal) {
		  if (!signal) {
		    return;
		  }
		  if (typeof signal.throwIfAborted === 'function') {
		    signal.throwIfAborted();
		  } else {
		    if (signal.aborted) {
		      // DOMException not available < v17.0.0
		      const err = new Error('The operation was aborted');
		      err.name = 'AbortError';
		      throw err;
		    }
		  }
		}
		function addAbortListener(signal, listener) {
		  if ('addEventListener' in signal) {
		    signal.addEventListener('abort', listener, {
		      once: true
		    });
		    return () => signal.removeEventListener('abort', listener);
		  }
		  signal.addListener('abort', listener);
		  return () => signal.removeListener('abort', listener);
		}
		const hasToWellFormed = !!String.prototype.toWellFormed;

		/**
		 * @param {string} val
		 */
		function toUSVString(val) {
		  if (hasToWellFormed) {
		    return `${val}`.toWellFormed();
		  } else if (nodeUtil.toUSVString) {
		    return nodeUtil.toUSVString(val);
		  }
		  return `${val}`;
		}

		// Parsed accordingly to RFC 9110
		// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
		function parseRangeHeader(range) {
		  if (range == null || range === '') return {
		    start: 0,
		    end: null,
		    size: null
		  };
		  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
		  return m ? {
		    start: parseInt(m[1]),
		    end: m[2] ? parseInt(m[2]) : null,
		    size: m[3] ? parseInt(m[3]) : null
		  } : null;
		}
		const kEnumerableProperty = Object.create(null);
		kEnumerableProperty.enumerable = true;
		util$6 = {
		  kEnumerableProperty,
		  nop,
		  isDisturbed,
		  isErrored,
		  isReadable,
		  toUSVString,
		  isReadableAborted,
		  isBlobLike,
		  parseOrigin,
		  parseURL,
		  getServerName,
		  isStream,
		  isIterable,
		  isAsyncIterable,
		  isDestroyed,
		  parseRawHeaders,
		  parseHeaders,
		  parseKeepAliveTimeout,
		  destroy,
		  bodyLength,
		  deepClone,
		  ReadableStreamFrom,
		  isBuffer,
		  validateHandler,
		  getSocketInfo,
		  isFormDataLike,
		  buildURL,
		  throwIfAborted,
		  addAbortListener,
		  parseRangeHeader,
		  nodeMajor,
		  nodeMinor,
		  nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
		  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
		};
		return util$6;
	}

	var timers;
	var hasRequiredTimers;

	function requireTimers () {
		if (hasRequiredTimers) return timers;
		hasRequiredTimers = 1;

		let fastNow = Date.now();
		let fastNowTimeout;
		const fastTimers = [];
		function onTimeout() {
		  fastNow = Date.now();
		  let len = fastTimers.length;
		  let idx = 0;
		  while (idx < len) {
		    const timer = fastTimers[idx];
		    if (timer.state === 0) {
		      timer.state = fastNow + timer.delay;
		    } else if (timer.state > 0 && fastNow >= timer.state) {
		      timer.state = -1;
		      timer.callback(timer.opaque);
		    }
		    if (timer.state === -1) {
		      timer.state = -2;
		      if (idx !== len - 1) {
		        fastTimers[idx] = fastTimers.pop();
		      } else {
		        fastTimers.pop();
		      }
		      len -= 1;
		    } else {
		      idx += 1;
		    }
		  }
		  if (fastTimers.length > 0) {
		    refreshTimeout();
		  }
		}
		function refreshTimeout() {
		  if (fastNowTimeout && fastNowTimeout.refresh) {
		    fastNowTimeout.refresh();
		  } else {
		    clearTimeout(fastNowTimeout);
		    fastNowTimeout = setTimeout(onTimeout, 1e3);
		    if (fastNowTimeout.unref) {
		      fastNowTimeout.unref();
		    }
		  }
		}
		class Timeout {
		  constructor(callback, delay, opaque) {
		    this.callback = callback;
		    this.delay = delay;
		    this.opaque = opaque;

		    //  -2 not in timer list
		    //  -1 in timer list but inactive
		    //   0 in timer list waiting for time
		    // > 0 in timer list waiting for time to expire
		    this.state = -2;
		    this.refresh();
		  }
		  refresh() {
		    if (this.state === -2) {
		      fastTimers.push(this);
		      if (!fastNowTimeout || fastTimers.length === 1) {
		        refreshTimeout();
		      }
		    }
		    this.state = 0;
		  }
		  clear() {
		    this.state = -1;
		  }
		}
		timers = {
		  setTimeout(callback, delay, opaque) {
		    return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
		  },
		  clearTimeout(timeout) {
		    if (timeout instanceof Timeout) {
		      timeout.clear();
		    } else {
		      clearTimeout(timeout);
		    }
		  }
		};
		return timers;
	}

	var main = {exports: {}};

	var sbmh;
	var hasRequiredSbmh;

	function requireSbmh () {
		if (hasRequiredSbmh) return sbmh;
		hasRequiredSbmh = 1;

		/**
		 * Copyright Brian White. All rights reserved.
		 *
		 * @see https://github.com/mscdex/streamsearch
		 *
		 * Permission is hereby granted, free of charge, to any person obtaining a copy
		 * of this software and associated documentation files (the "Software"), to
		 * deal in the Software without restriction, including without limitation the
		 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
		 * sell copies of the Software, and to permit persons to whom the Software is
		 * furnished to do so, subject to the following conditions:
		 *
		 * The above copyright notice and this permission notice shall be included in
		 * all copies or substantial portions of the Software.
		 *
		 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
		 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
		 * IN THE SOFTWARE.
		 *
		 * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
		 * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
		 */
		const EventEmitter = require$$0__default$5["default"].EventEmitter;
		const inherits = require$$1__default$3["default"].inherits;
		function SBMH(needle) {
		  if (typeof needle === 'string') {
		    needle = Buffer.from(needle);
		  }
		  if (!Buffer.isBuffer(needle)) {
		    throw new TypeError('The needle has to be a String or a Buffer.');
		  }
		  const needleLength = needle.length;
		  if (needleLength === 0) {
		    throw new Error('The needle cannot be an empty String/Buffer.');
		  }
		  if (needleLength > 256) {
		    throw new Error('The needle cannot have a length bigger than 256.');
		  }
		  this.maxMatches = Infinity;
		  this.matches = 0;
		  this._occ = new Array(256).fill(needleLength); // Initialize occurrence table.
		  this._lookbehind_size = 0;
		  this._needle = needle;
		  this._bufpos = 0;
		  this._lookbehind = Buffer.alloc(needleLength);

		  // Populate occurrence table with analysis of the needle,
		  // ignoring last letter.
		  for (var i = 0; i < needleLength - 1; ++i) {
		    // eslint-disable-line no-var
		    this._occ[needle[i]] = needleLength - 1 - i;
		  }
		}
		inherits(SBMH, EventEmitter);
		SBMH.prototype.reset = function () {
		  this._lookbehind_size = 0;
		  this.matches = 0;
		  this._bufpos = 0;
		};
		SBMH.prototype.push = function (chunk, pos) {
		  if (!Buffer.isBuffer(chunk)) {
		    chunk = Buffer.from(chunk, 'binary');
		  }
		  const chlen = chunk.length;
		  this._bufpos = pos || 0;
		  let r;
		  while (r !== chlen && this.matches < this.maxMatches) {
		    r = this._sbmh_feed(chunk);
		  }
		  return r;
		};
		SBMH.prototype._sbmh_feed = function (data) {
		  const len = data.length;
		  const needle = this._needle;
		  const needleLength = needle.length;
		  const lastNeedleChar = needle[needleLength - 1];

		  // Positive: points to a position in `data`
		  //           pos == 3 points to data[3]
		  // Negative: points to a position in the lookbehind buffer
		  //           pos == -2 points to lookbehind[lookbehind_size - 2]
		  let pos = -this._lookbehind_size;
		  let ch;
		  if (pos < 0) {
		    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
		    // search with character lookup code that considers both the
		    // lookbehind buffer and the current round's haystack data.
		    //
		    // Loop until
		    //   there is a match.
		    // or until
		    //   we've moved past the position that requires the
		    //   lookbehind buffer. In this case we switch to the
		    //   optimized loop.
		    // or until
		    //   the character to look at lies outside the haystack.
		    while (pos < 0 && pos <= len - needleLength) {
		      ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
		      if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
		        this._lookbehind_size = 0;
		        ++this.matches;
		        this.emit('info', true);
		        return this._bufpos = pos + needleLength;
		      }
		      pos += this._occ[ch];
		    }

		    // No match.

		    if (pos < 0) {
		      // There's too few data for Boyer-Moore-Horspool to run,
		      // so let's use a different algorithm to skip as much as
		      // we can.
		      // Forward pos until
		      //   the trailing part of lookbehind + data
		      //   looks like the beginning of the needle
		      // or until
		      //   pos == 0
		      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
		        ++pos;
		      }
		    }
		    if (pos >= 0) {
		      // Discard lookbehind buffer.
		      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size);
		      this._lookbehind_size = 0;
		    } else {
		      // Cut off part of the lookbehind buffer that has
		      // been processed and append the entire haystack
		      // into it.
		      const bytesToCutOff = this._lookbehind_size + pos;
		      if (bytesToCutOff > 0) {
		        // The cut off data is guaranteed not to contain the needle.
		        this.emit('info', false, this._lookbehind, 0, bytesToCutOff);
		      }
		      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
		      this._lookbehind_size -= bytesToCutOff;
		      data.copy(this._lookbehind, this._lookbehind_size);
		      this._lookbehind_size += len;
		      this._bufpos = len;
		      return len;
		    }
		  }
		  pos += (pos >= 0) * this._bufpos;

		  // Lookbehind buffer is now empty. We only need to check if the
		  // needle is in the haystack.
		  if (data.indexOf(needle, pos) !== -1) {
		    pos = data.indexOf(needle, pos);
		    ++this.matches;
		    if (pos > 0) {
		      this.emit('info', true, data, this._bufpos, pos);
		    } else {
		      this.emit('info', true);
		    }
		    return this._bufpos = pos + needleLength;
		  } else {
		    pos = len - needleLength;
		  }

		  // There was no match. If there's trailing haystack data that we cannot
		  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
		  // data is less than the needle size) then match using a modified
		  // algorithm that starts matching from the beginning instead of the end.
		  // Whatever trailing data is left after running this algorithm is added to
		  // the lookbehind buffer.
		  while (pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) {
		    ++pos;
		  }
		  if (pos < len) {
		    data.copy(this._lookbehind, 0, pos, pos + (len - pos));
		    this._lookbehind_size = len - pos;
		  }

		  // Everything until pos is guaranteed not to contain needle data.
		  if (pos > 0) {
		    this.emit('info', false, data, this._bufpos, pos < len ? pos : len);
		  }
		  this._bufpos = len;
		  return len;
		};
		SBMH.prototype._sbmh_lookup_char = function (data, pos) {
		  return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
		};
		SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
		  for (var i = 0; i < len; ++i) {
		    // eslint-disable-line no-var
		    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
		      return false;
		    }
		  }
		  return true;
		};
		sbmh = SBMH;
		return sbmh;
	}

	var PartStream_1;
	var hasRequiredPartStream;

	function requirePartStream () {
		if (hasRequiredPartStream) return PartStream_1;
		hasRequiredPartStream = 1;

		const inherits = require$$1__default$3["default"].inherits;
		const ReadableStream = require$$0__default$6["default"].Readable;
		function PartStream(opts) {
		  ReadableStream.call(this, opts);
		}
		inherits(PartStream, ReadableStream);
		PartStream.prototype._read = function (n) {};
		PartStream_1 = PartStream;
		return PartStream_1;
	}

	var getLimit;
	var hasRequiredGetLimit;

	function requireGetLimit () {
		if (hasRequiredGetLimit) return getLimit;
		hasRequiredGetLimit = 1;

		getLimit = function getLimit(limits, name, defaultLimit) {
		  if (!limits || limits[name] === undefined || limits[name] === null) {
		    return defaultLimit;
		  }
		  if (typeof limits[name] !== 'number' || isNaN(limits[name])) {
		    throw new TypeError('Limit ' + name + ' is not a valid number');
		  }
		  return limits[name];
		};
		return getLimit;
	}

	var HeaderParser_1;
	var hasRequiredHeaderParser;

	function requireHeaderParser () {
		if (hasRequiredHeaderParser) return HeaderParser_1;
		hasRequiredHeaderParser = 1;

		const EventEmitter = require$$0__default$5["default"].EventEmitter;
		const inherits = require$$1__default$3["default"].inherits;
		const getLimit = requireGetLimit();
		const StreamSearch = requireSbmh();
		const B_DCRLF = Buffer.from('\r\n\r\n');
		const RE_CRLF = /\r\n/g;
		const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/; // eslint-disable-line no-control-regex

		function HeaderParser(cfg) {
		  EventEmitter.call(this);
		  cfg = cfg || {};
		  const self = this;
		  this.nread = 0;
		  this.maxed = false;
		  this.npairs = 0;
		  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000);
		  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024);
		  this.buffer = '';
		  this.header = {};
		  this.finished = false;
		  this.ss = new StreamSearch(B_DCRLF);
		  this.ss.on('info', function (isMatch, data, start, end) {
		    if (data && !self.maxed) {
		      if (self.nread + end - start >= self.maxHeaderSize) {
		        end = self.maxHeaderSize - self.nread + start;
		        self.nread = self.maxHeaderSize;
		        self.maxed = true;
		      } else {
		        self.nread += end - start;
		      }
		      self.buffer += data.toString('binary', start, end);
		    }
		    if (isMatch) {
		      self._finish();
		    }
		  });
		}
		inherits(HeaderParser, EventEmitter);
		HeaderParser.prototype.push = function (data) {
		  const r = this.ss.push(data);
		  if (this.finished) {
		    return r;
		  }
		};
		HeaderParser.prototype.reset = function () {
		  this.finished = false;
		  this.buffer = '';
		  this.header = {};
		  this.ss.reset();
		};
		HeaderParser.prototype._finish = function () {
		  if (this.buffer) {
		    this._parseHeader();
		  }
		  this.ss.matches = this.ss.maxMatches;
		  const header = this.header;
		  this.header = {};
		  this.buffer = '';
		  this.finished = true;
		  this.nread = this.npairs = 0;
		  this.maxed = false;
		  this.emit('header', header);
		};
		HeaderParser.prototype._parseHeader = function () {
		  if (this.npairs === this.maxHeaderPairs) {
		    return;
		  }
		  const lines = this.buffer.split(RE_CRLF);
		  const len = lines.length;
		  let m, h;
		  for (var i = 0; i < len; ++i) {
		    // eslint-disable-line no-var
		    if (lines[i].length === 0) {
		      continue;
		    }
		    if (lines[i][0] === '\t' || lines[i][0] === ' ') {
		      // folded header content
		      // RFC2822 says to just remove the CRLF and not the whitespace following
		      // it, so we follow the RFC and include the leading whitespace ...
		      if (h) {
		        this.header[h][this.header[h].length - 1] += lines[i];
		        continue;
		      }
		    }
		    const posColon = lines[i].indexOf(':');
		    if (posColon === -1 || posColon === 0) {
		      return;
		    }
		    m = RE_HDR.exec(lines[i]);
		    h = m[1].toLowerCase();
		    this.header[h] = this.header[h] || [];
		    this.header[h].push(m[2] || '');
		    if (++this.npairs === this.maxHeaderPairs) {
		      break;
		    }
		  }
		};
		HeaderParser_1 = HeaderParser;
		return HeaderParser_1;
	}

	var Dicer_1;
	var hasRequiredDicer;

	function requireDicer () {
		if (hasRequiredDicer) return Dicer_1;
		hasRequiredDicer = 1;

		const WritableStream = require$$0__default$6["default"].Writable;
		const inherits = require$$1__default$3["default"].inherits;
		const StreamSearch = requireSbmh();
		const PartStream = requirePartStream();
		const HeaderParser = requireHeaderParser();
		const DASH = 45;
		const B_ONEDASH = Buffer.from('-');
		const B_CRLF = Buffer.from('\r\n');
		const EMPTY_FN = function () {};
		function Dicer(cfg) {
		  if (!(this instanceof Dicer)) {
		    return new Dicer(cfg);
		  }
		  WritableStream.call(this, cfg);
		  if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== 'string') {
		    throw new TypeError('Boundary required');
		  }
		  if (typeof cfg.boundary === 'string') {
		    this.setBoundary(cfg.boundary);
		  } else {
		    this._bparser = undefined;
		  }
		  this._headerFirst = cfg.headerFirst;
		  this._dashes = 0;
		  this._parts = 0;
		  this._finished = false;
		  this._realFinish = false;
		  this._isPreamble = true;
		  this._justMatched = false;
		  this._firstWrite = true;
		  this._inHeader = true;
		  this._part = undefined;
		  this._cb = undefined;
		  this._ignoreData = false;
		  this._partOpts = {
		    highWaterMark: cfg.partHwm
		  };
		  this._pause = false;
		  const self = this;
		  this._hparser = new HeaderParser(cfg);
		  this._hparser.on('header', function (header) {
		    self._inHeader = false;
		    self._part.emit('header', header);
		  });
		}
		inherits(Dicer, WritableStream);
		Dicer.prototype.emit = function (ev) {
		  if (ev === 'finish' && !this._realFinish) {
		    if (!this._finished) {
		      const self = this;
		      process.nextTick(function () {
		        self.emit('error', new Error('Unexpected end of multipart data'));
		        if (self._part && !self._ignoreData) {
		          const type = self._isPreamble ? 'Preamble' : 'Part';
		          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'));
		          self._part.push(null);
		          process.nextTick(function () {
		            self._realFinish = true;
		            self.emit('finish');
		            self._realFinish = false;
		          });
		          return;
		        }
		        self._realFinish = true;
		        self.emit('finish');
		        self._realFinish = false;
		      });
		    }
		  } else {
		    WritableStream.prototype.emit.apply(this, arguments);
		  }
		};
		Dicer.prototype._write = function (data, encoding, cb) {
		  // ignore unexpected data (e.g. extra trailer data after finished)
		  if (!this._hparser && !this._bparser) {
		    return cb();
		  }
		  if (this._headerFirst && this._isPreamble) {
		    if (!this._part) {
		      this._part = new PartStream(this._partOpts);
		      if (this._events.preamble) {
		        this.emit('preamble', this._part);
		      } else {
		        this._ignore();
		      }
		    }
		    const r = this._hparser.push(data);
		    if (!this._inHeader && r !== undefined && r < data.length) {
		      data = data.slice(r);
		    } else {
		      return cb();
		    }
		  }

		  // allows for "easier" testing
		  if (this._firstWrite) {
		    this._bparser.push(B_CRLF);
		    this._firstWrite = false;
		  }
		  this._bparser.push(data);
		  if (this._pause) {
		    this._cb = cb;
		  } else {
		    cb();
		  }
		};
		Dicer.prototype.reset = function () {
		  this._part = undefined;
		  this._bparser = undefined;
		  this._hparser = undefined;
		};
		Dicer.prototype.setBoundary = function (boundary) {
		  const self = this;
		  this._bparser = new StreamSearch('\r\n--' + boundary);
		  this._bparser.on('info', function (isMatch, data, start, end) {
		    self._oninfo(isMatch, data, start, end);
		  });
		};
		Dicer.prototype._ignore = function () {
		  if (this._part && !this._ignoreData) {
		    this._ignoreData = true;
		    this._part.on('error', EMPTY_FN);
		    // we must perform some kind of read on the stream even though we are
		    // ignoring the data, otherwise node's Readable stream will not emit 'end'
		    // after pushing null to the stream
		    this._part.resume();
		  }
		};
		Dicer.prototype._oninfo = function (isMatch, data, start, end) {
		  let buf;
		  const self = this;
		  let i = 0;
		  let r;
		  let shouldWriteMore = true;
		  if (!this._part && this._justMatched && data) {
		    while (this._dashes < 2 && start + i < end) {
		      if (data[start + i] === DASH) {
		        ++i;
		        ++this._dashes;
		      } else {
		        if (this._dashes) {
		          buf = B_ONEDASH;
		        }
		        this._dashes = 0;
		        break;
		      }
		    }
		    if (this._dashes === 2) {
		      if (start + i < end && this._events.trailer) {
		        this.emit('trailer', data.slice(start + i, end));
		      }
		      this.reset();
		      this._finished = true;
		      // no more parts will be added
		      if (self._parts === 0) {
		        self._realFinish = true;
		        self.emit('finish');
		        self._realFinish = false;
		      }
		    }
		    if (this._dashes) {
		      return;
		    }
		  }
		  if (this._justMatched) {
		    this._justMatched = false;
		  }
		  if (!this._part) {
		    this._part = new PartStream(this._partOpts);
		    this._part._read = function (n) {
		      self._unpause();
		    };
		    if (this._isPreamble && this._events.preamble) {
		      this.emit('preamble', this._part);
		    } else if (this._isPreamble !== true && this._events.part) {
		      this.emit('part', this._part);
		    } else {
		      this._ignore();
		    }
		    if (!this._isPreamble) {
		      this._inHeader = true;
		    }
		  }
		  if (data && start < end && !this._ignoreData) {
		    if (this._isPreamble || !this._inHeader) {
		      if (buf) {
		        shouldWriteMore = this._part.push(buf);
		      }
		      shouldWriteMore = this._part.push(data.slice(start, end));
		      if (!shouldWriteMore) {
		        this._pause = true;
		      }
		    } else if (!this._isPreamble && this._inHeader) {
		      if (buf) {
		        this._hparser.push(buf);
		      }
		      r = this._hparser.push(data.slice(start, end));
		      if (!this._inHeader && r !== undefined && r < end) {
		        this._oninfo(false, data, start + r, end);
		      }
		    }
		  }
		  if (isMatch) {
		    this._hparser.reset();
		    if (this._isPreamble) {
		      this._isPreamble = false;
		    } else {
		      if (start !== end) {
		        ++this._parts;
		        this._part.on('end', function () {
		          if (--self._parts === 0) {
		            if (self._finished) {
		              self._realFinish = true;
		              self.emit('finish');
		              self._realFinish = false;
		            } else {
		              self._unpause();
		            }
		          }
		        });
		      }
		    }
		    this._part.push(null);
		    this._part = undefined;
		    this._ignoreData = false;
		    this._justMatched = true;
		    this._dashes = 0;
		  }
		};
		Dicer.prototype._unpause = function () {
		  if (!this._pause) {
		    return;
		  }
		  this._pause = false;
		  if (this._cb) {
		    const cb = this._cb;
		    this._cb = undefined;
		    cb();
		  }
		};
		Dicer_1 = Dicer;
		return Dicer_1;
	}

	var decodeText_1;
	var hasRequiredDecodeText;

	function requireDecodeText () {
		if (hasRequiredDecodeText) return decodeText_1;
		hasRequiredDecodeText = 1;

		// Node has always utf-8
		const utf8Decoder = new TextDecoder('utf-8');
		const textDecoders = new Map([['utf-8', utf8Decoder], ['utf8', utf8Decoder]]);
		function getDecoder(charset) {
		  let lc;
		  while (true) {
		    switch (charset) {
		      case 'utf-8':
		      case 'utf8':
		        return decoders.utf8;
		      case 'latin1':
		      case 'ascii': // TODO: Make these a separate, strict decoder?
		      case 'us-ascii':
		      case 'iso-8859-1':
		      case 'iso8859-1':
		      case 'iso88591':
		      case 'iso_8859-1':
		      case 'windows-1252':
		      case 'iso_8859-1:1987':
		      case 'cp1252':
		      case 'x-cp1252':
		        return decoders.latin1;
		      case 'utf16le':
		      case 'utf-16le':
		      case 'ucs2':
		      case 'ucs-2':
		        return decoders.utf16le;
		      case 'base64':
		        return decoders.base64;
		      default:
		        if (lc === undefined) {
		          lc = true;
		          charset = charset.toLowerCase();
		          continue;
		        }
		        return decoders.other.bind(charset);
		    }
		  }
		}
		const decoders = {
		  utf8: (data, sourceEncoding) => {
		    if (data.length === 0) {
		      return '';
		    }
		    if (typeof data === 'string') {
		      data = Buffer.from(data, sourceEncoding);
		    }
		    return data.utf8Slice(0, data.length);
		  },
		  latin1: (data, sourceEncoding) => {
		    if (data.length === 0) {
		      return '';
		    }
		    if (typeof data === 'string') {
		      return data;
		    }
		    return data.latin1Slice(0, data.length);
		  },
		  utf16le: (data, sourceEncoding) => {
		    if (data.length === 0) {
		      return '';
		    }
		    if (typeof data === 'string') {
		      data = Buffer.from(data, sourceEncoding);
		    }
		    return data.ucs2Slice(0, data.length);
		  },
		  base64: (data, sourceEncoding) => {
		    if (data.length === 0) {
		      return '';
		    }
		    if (typeof data === 'string') {
		      data = Buffer.from(data, sourceEncoding);
		    }
		    return data.base64Slice(0, data.length);
		  },
		  other: (data, sourceEncoding) => {
		    if (data.length === 0) {
		      return '';
		    }
		    if (typeof data === 'string') {
		      data = Buffer.from(data, sourceEncoding);
		    }
		    if (textDecoders.has(this.toString())) {
		      try {
		        return textDecoders.get(this).decode(data);
		      } catch (e) {}
		    }
		    return typeof data === 'string' ? data : data.toString();
		  }
		};
		function decodeText(text, sourceEncoding, destEncoding) {
		  if (text) {
		    return getDecoder(destEncoding)(text, sourceEncoding);
		  }
		  return text;
		}
		decodeText_1 = decodeText;
		return decodeText_1;
	}

	/* eslint-disable object-property-newline */

	var parseParams_1;
	var hasRequiredParseParams;

	function requireParseParams () {
		if (hasRequiredParseParams) return parseParams_1;
		hasRequiredParseParams = 1;

		const decodeText = requireDecodeText();
		const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
		const EncodedLookup = {
		  '%00': '\x00',
		  '%01': '\x01',
		  '%02': '\x02',
		  '%03': '\x03',
		  '%04': '\x04',
		  '%05': '\x05',
		  '%06': '\x06',
		  '%07': '\x07',
		  '%08': '\x08',
		  '%09': '\x09',
		  '%0a': '\x0a',
		  '%0A': '\x0a',
		  '%0b': '\x0b',
		  '%0B': '\x0b',
		  '%0c': '\x0c',
		  '%0C': '\x0c',
		  '%0d': '\x0d',
		  '%0D': '\x0d',
		  '%0e': '\x0e',
		  '%0E': '\x0e',
		  '%0f': '\x0f',
		  '%0F': '\x0f',
		  '%10': '\x10',
		  '%11': '\x11',
		  '%12': '\x12',
		  '%13': '\x13',
		  '%14': '\x14',
		  '%15': '\x15',
		  '%16': '\x16',
		  '%17': '\x17',
		  '%18': '\x18',
		  '%19': '\x19',
		  '%1a': '\x1a',
		  '%1A': '\x1a',
		  '%1b': '\x1b',
		  '%1B': '\x1b',
		  '%1c': '\x1c',
		  '%1C': '\x1c',
		  '%1d': '\x1d',
		  '%1D': '\x1d',
		  '%1e': '\x1e',
		  '%1E': '\x1e',
		  '%1f': '\x1f',
		  '%1F': '\x1f',
		  '%20': '\x20',
		  '%21': '\x21',
		  '%22': '\x22',
		  '%23': '\x23',
		  '%24': '\x24',
		  '%25': '\x25',
		  '%26': '\x26',
		  '%27': '\x27',
		  '%28': '\x28',
		  '%29': '\x29',
		  '%2a': '\x2a',
		  '%2A': '\x2a',
		  '%2b': '\x2b',
		  '%2B': '\x2b',
		  '%2c': '\x2c',
		  '%2C': '\x2c',
		  '%2d': '\x2d',
		  '%2D': '\x2d',
		  '%2e': '\x2e',
		  '%2E': '\x2e',
		  '%2f': '\x2f',
		  '%2F': '\x2f',
		  '%30': '\x30',
		  '%31': '\x31',
		  '%32': '\x32',
		  '%33': '\x33',
		  '%34': '\x34',
		  '%35': '\x35',
		  '%36': '\x36',
		  '%37': '\x37',
		  '%38': '\x38',
		  '%39': '\x39',
		  '%3a': '\x3a',
		  '%3A': '\x3a',
		  '%3b': '\x3b',
		  '%3B': '\x3b',
		  '%3c': '\x3c',
		  '%3C': '\x3c',
		  '%3d': '\x3d',
		  '%3D': '\x3d',
		  '%3e': '\x3e',
		  '%3E': '\x3e',
		  '%3f': '\x3f',
		  '%3F': '\x3f',
		  '%40': '\x40',
		  '%41': '\x41',
		  '%42': '\x42',
		  '%43': '\x43',
		  '%44': '\x44',
		  '%45': '\x45',
		  '%46': '\x46',
		  '%47': '\x47',
		  '%48': '\x48',
		  '%49': '\x49',
		  '%4a': '\x4a',
		  '%4A': '\x4a',
		  '%4b': '\x4b',
		  '%4B': '\x4b',
		  '%4c': '\x4c',
		  '%4C': '\x4c',
		  '%4d': '\x4d',
		  '%4D': '\x4d',
		  '%4e': '\x4e',
		  '%4E': '\x4e',
		  '%4f': '\x4f',
		  '%4F': '\x4f',
		  '%50': '\x50',
		  '%51': '\x51',
		  '%52': '\x52',
		  '%53': '\x53',
		  '%54': '\x54',
		  '%55': '\x55',
		  '%56': '\x56',
		  '%57': '\x57',
		  '%58': '\x58',
		  '%59': '\x59',
		  '%5a': '\x5a',
		  '%5A': '\x5a',
		  '%5b': '\x5b',
		  '%5B': '\x5b',
		  '%5c': '\x5c',
		  '%5C': '\x5c',
		  '%5d': '\x5d',
		  '%5D': '\x5d',
		  '%5e': '\x5e',
		  '%5E': '\x5e',
		  '%5f': '\x5f',
		  '%5F': '\x5f',
		  '%60': '\x60',
		  '%61': '\x61',
		  '%62': '\x62',
		  '%63': '\x63',
		  '%64': '\x64',
		  '%65': '\x65',
		  '%66': '\x66',
		  '%67': '\x67',
		  '%68': '\x68',
		  '%69': '\x69',
		  '%6a': '\x6a',
		  '%6A': '\x6a',
		  '%6b': '\x6b',
		  '%6B': '\x6b',
		  '%6c': '\x6c',
		  '%6C': '\x6c',
		  '%6d': '\x6d',
		  '%6D': '\x6d',
		  '%6e': '\x6e',
		  '%6E': '\x6e',
		  '%6f': '\x6f',
		  '%6F': '\x6f',
		  '%70': '\x70',
		  '%71': '\x71',
		  '%72': '\x72',
		  '%73': '\x73',
		  '%74': '\x74',
		  '%75': '\x75',
		  '%76': '\x76',
		  '%77': '\x77',
		  '%78': '\x78',
		  '%79': '\x79',
		  '%7a': '\x7a',
		  '%7A': '\x7a',
		  '%7b': '\x7b',
		  '%7B': '\x7b',
		  '%7c': '\x7c',
		  '%7C': '\x7c',
		  '%7d': '\x7d',
		  '%7D': '\x7d',
		  '%7e': '\x7e',
		  '%7E': '\x7e',
		  '%7f': '\x7f',
		  '%7F': '\x7f',
		  '%80': '\x80',
		  '%81': '\x81',
		  '%82': '\x82',
		  '%83': '\x83',
		  '%84': '\x84',
		  '%85': '\x85',
		  '%86': '\x86',
		  '%87': '\x87',
		  '%88': '\x88',
		  '%89': '\x89',
		  '%8a': '\x8a',
		  '%8A': '\x8a',
		  '%8b': '\x8b',
		  '%8B': '\x8b',
		  '%8c': '\x8c',
		  '%8C': '\x8c',
		  '%8d': '\x8d',
		  '%8D': '\x8d',
		  '%8e': '\x8e',
		  '%8E': '\x8e',
		  '%8f': '\x8f',
		  '%8F': '\x8f',
		  '%90': '\x90',
		  '%91': '\x91',
		  '%92': '\x92',
		  '%93': '\x93',
		  '%94': '\x94',
		  '%95': '\x95',
		  '%96': '\x96',
		  '%97': '\x97',
		  '%98': '\x98',
		  '%99': '\x99',
		  '%9a': '\x9a',
		  '%9A': '\x9a',
		  '%9b': '\x9b',
		  '%9B': '\x9b',
		  '%9c': '\x9c',
		  '%9C': '\x9c',
		  '%9d': '\x9d',
		  '%9D': '\x9d',
		  '%9e': '\x9e',
		  '%9E': '\x9e',
		  '%9f': '\x9f',
		  '%9F': '\x9f',
		  '%a0': '\xa0',
		  '%A0': '\xa0',
		  '%a1': '\xa1',
		  '%A1': '\xa1',
		  '%a2': '\xa2',
		  '%A2': '\xa2',
		  '%a3': '\xa3',
		  '%A3': '\xa3',
		  '%a4': '\xa4',
		  '%A4': '\xa4',
		  '%a5': '\xa5',
		  '%A5': '\xa5',
		  '%a6': '\xa6',
		  '%A6': '\xa6',
		  '%a7': '\xa7',
		  '%A7': '\xa7',
		  '%a8': '\xa8',
		  '%A8': '\xa8',
		  '%a9': '\xa9',
		  '%A9': '\xa9',
		  '%aa': '\xaa',
		  '%Aa': '\xaa',
		  '%aA': '\xaa',
		  '%AA': '\xaa',
		  '%ab': '\xab',
		  '%Ab': '\xab',
		  '%aB': '\xab',
		  '%AB': '\xab',
		  '%ac': '\xac',
		  '%Ac': '\xac',
		  '%aC': '\xac',
		  '%AC': '\xac',
		  '%ad': '\xad',
		  '%Ad': '\xad',
		  '%aD': '\xad',
		  '%AD': '\xad',
		  '%ae': '\xae',
		  '%Ae': '\xae',
		  '%aE': '\xae',
		  '%AE': '\xae',
		  '%af': '\xaf',
		  '%Af': '\xaf',
		  '%aF': '\xaf',
		  '%AF': '\xaf',
		  '%b0': '\xb0',
		  '%B0': '\xb0',
		  '%b1': '\xb1',
		  '%B1': '\xb1',
		  '%b2': '\xb2',
		  '%B2': '\xb2',
		  '%b3': '\xb3',
		  '%B3': '\xb3',
		  '%b4': '\xb4',
		  '%B4': '\xb4',
		  '%b5': '\xb5',
		  '%B5': '\xb5',
		  '%b6': '\xb6',
		  '%B6': '\xb6',
		  '%b7': '\xb7',
		  '%B7': '\xb7',
		  '%b8': '\xb8',
		  '%B8': '\xb8',
		  '%b9': '\xb9',
		  '%B9': '\xb9',
		  '%ba': '\xba',
		  '%Ba': '\xba',
		  '%bA': '\xba',
		  '%BA': '\xba',
		  '%bb': '\xbb',
		  '%Bb': '\xbb',
		  '%bB': '\xbb',
		  '%BB': '\xbb',
		  '%bc': '\xbc',
		  '%Bc': '\xbc',
		  '%bC': '\xbc',
		  '%BC': '\xbc',
		  '%bd': '\xbd',
		  '%Bd': '\xbd',
		  '%bD': '\xbd',
		  '%BD': '\xbd',
		  '%be': '\xbe',
		  '%Be': '\xbe',
		  '%bE': '\xbe',
		  '%BE': '\xbe',
		  '%bf': '\xbf',
		  '%Bf': '\xbf',
		  '%bF': '\xbf',
		  '%BF': '\xbf',
		  '%c0': '\xc0',
		  '%C0': '\xc0',
		  '%c1': '\xc1',
		  '%C1': '\xc1',
		  '%c2': '\xc2',
		  '%C2': '\xc2',
		  '%c3': '\xc3',
		  '%C3': '\xc3',
		  '%c4': '\xc4',
		  '%C4': '\xc4',
		  '%c5': '\xc5',
		  '%C5': '\xc5',
		  '%c6': '\xc6',
		  '%C6': '\xc6',
		  '%c7': '\xc7',
		  '%C7': '\xc7',
		  '%c8': '\xc8',
		  '%C8': '\xc8',
		  '%c9': '\xc9',
		  '%C9': '\xc9',
		  '%ca': '\xca',
		  '%Ca': '\xca',
		  '%cA': '\xca',
		  '%CA': '\xca',
		  '%cb': '\xcb',
		  '%Cb': '\xcb',
		  '%cB': '\xcb',
		  '%CB': '\xcb',
		  '%cc': '\xcc',
		  '%Cc': '\xcc',
		  '%cC': '\xcc',
		  '%CC': '\xcc',
		  '%cd': '\xcd',
		  '%Cd': '\xcd',
		  '%cD': '\xcd',
		  '%CD': '\xcd',
		  '%ce': '\xce',
		  '%Ce': '\xce',
		  '%cE': '\xce',
		  '%CE': '\xce',
		  '%cf': '\xcf',
		  '%Cf': '\xcf',
		  '%cF': '\xcf',
		  '%CF': '\xcf',
		  '%d0': '\xd0',
		  '%D0': '\xd0',
		  '%d1': '\xd1',
		  '%D1': '\xd1',
		  '%d2': '\xd2',
		  '%D2': '\xd2',
		  '%d3': '\xd3',
		  '%D3': '\xd3',
		  '%d4': '\xd4',
		  '%D4': '\xd4',
		  '%d5': '\xd5',
		  '%D5': '\xd5',
		  '%d6': '\xd6',
		  '%D6': '\xd6',
		  '%d7': '\xd7',
		  '%D7': '\xd7',
		  '%d8': '\xd8',
		  '%D8': '\xd8',
		  '%d9': '\xd9',
		  '%D9': '\xd9',
		  '%da': '\xda',
		  '%Da': '\xda',
		  '%dA': '\xda',
		  '%DA': '\xda',
		  '%db': '\xdb',
		  '%Db': '\xdb',
		  '%dB': '\xdb',
		  '%DB': '\xdb',
		  '%dc': '\xdc',
		  '%Dc': '\xdc',
		  '%dC': '\xdc',
		  '%DC': '\xdc',
		  '%dd': '\xdd',
		  '%Dd': '\xdd',
		  '%dD': '\xdd',
		  '%DD': '\xdd',
		  '%de': '\xde',
		  '%De': '\xde',
		  '%dE': '\xde',
		  '%DE': '\xde',
		  '%df': '\xdf',
		  '%Df': '\xdf',
		  '%dF': '\xdf',
		  '%DF': '\xdf',
		  '%e0': '\xe0',
		  '%E0': '\xe0',
		  '%e1': '\xe1',
		  '%E1': '\xe1',
		  '%e2': '\xe2',
		  '%E2': '\xe2',
		  '%e3': '\xe3',
		  '%E3': '\xe3',
		  '%e4': '\xe4',
		  '%E4': '\xe4',
		  '%e5': '\xe5',
		  '%E5': '\xe5',
		  '%e6': '\xe6',
		  '%E6': '\xe6',
		  '%e7': '\xe7',
		  '%E7': '\xe7',
		  '%e8': '\xe8',
		  '%E8': '\xe8',
		  '%e9': '\xe9',
		  '%E9': '\xe9',
		  '%ea': '\xea',
		  '%Ea': '\xea',
		  '%eA': '\xea',
		  '%EA': '\xea',
		  '%eb': '\xeb',
		  '%Eb': '\xeb',
		  '%eB': '\xeb',
		  '%EB': '\xeb',
		  '%ec': '\xec',
		  '%Ec': '\xec',
		  '%eC': '\xec',
		  '%EC': '\xec',
		  '%ed': '\xed',
		  '%Ed': '\xed',
		  '%eD': '\xed',
		  '%ED': '\xed',
		  '%ee': '\xee',
		  '%Ee': '\xee',
		  '%eE': '\xee',
		  '%EE': '\xee',
		  '%ef': '\xef',
		  '%Ef': '\xef',
		  '%eF': '\xef',
		  '%EF': '\xef',
		  '%f0': '\xf0',
		  '%F0': '\xf0',
		  '%f1': '\xf1',
		  '%F1': '\xf1',
		  '%f2': '\xf2',
		  '%F2': '\xf2',
		  '%f3': '\xf3',
		  '%F3': '\xf3',
		  '%f4': '\xf4',
		  '%F4': '\xf4',
		  '%f5': '\xf5',
		  '%F5': '\xf5',
		  '%f6': '\xf6',
		  '%F6': '\xf6',
		  '%f7': '\xf7',
		  '%F7': '\xf7',
		  '%f8': '\xf8',
		  '%F8': '\xf8',
		  '%f9': '\xf9',
		  '%F9': '\xf9',
		  '%fa': '\xfa',
		  '%Fa': '\xfa',
		  '%fA': '\xfa',
		  '%FA': '\xfa',
		  '%fb': '\xfb',
		  '%Fb': '\xfb',
		  '%fB': '\xfb',
		  '%FB': '\xfb',
		  '%fc': '\xfc',
		  '%Fc': '\xfc',
		  '%fC': '\xfc',
		  '%FC': '\xfc',
		  '%fd': '\xfd',
		  '%Fd': '\xfd',
		  '%fD': '\xfd',
		  '%FD': '\xfd',
		  '%fe': '\xfe',
		  '%Fe': '\xfe',
		  '%fE': '\xfe',
		  '%FE': '\xfe',
		  '%ff': '\xff',
		  '%Ff': '\xff',
		  '%fF': '\xff',
		  '%FF': '\xff'
		};
		function encodedReplacer(match) {
		  return EncodedLookup[match];
		}
		const STATE_KEY = 0;
		const STATE_VALUE = 1;
		const STATE_CHARSET = 2;
		const STATE_LANG = 3;
		function parseParams(str) {
		  const res = [];
		  let state = STATE_KEY;
		  let charset = '';
		  let inquote = false;
		  let escaping = false;
		  let p = 0;
		  let tmp = '';
		  const len = str.length;
		  for (var i = 0; i < len; ++i) {
		    // eslint-disable-line no-var
		    const char = str[i];
		    if (char === '\\' && inquote) {
		      if (escaping) {
		        escaping = false;
		      } else {
		        escaping = true;
		        continue;
		      }
		    } else if (char === '"') {
		      if (!escaping) {
		        if (inquote) {
		          inquote = false;
		          state = STATE_KEY;
		        } else {
		          inquote = true;
		        }
		        continue;
		      } else {
		        escaping = false;
		      }
		    } else {
		      if (escaping && inquote) {
		        tmp += '\\';
		      }
		      escaping = false;
		      if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
		        if (state === STATE_CHARSET) {
		          state = STATE_LANG;
		          charset = tmp.substring(1);
		        } else {
		          state = STATE_VALUE;
		        }
		        tmp = '';
		        continue;
		      } else if (state === STATE_KEY && (char === '*' || char === '=') && res.length) {
		        state = char === '*' ? STATE_CHARSET : STATE_VALUE;
		        res[p] = [tmp, undefined];
		        tmp = '';
		        continue;
		      } else if (!inquote && char === ';') {
		        state = STATE_KEY;
		        if (charset) {
		          if (tmp.length) {
		            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);
		          }
		          charset = '';
		        } else if (tmp.length) {
		          tmp = decodeText(tmp, 'binary', 'utf8');
		        }
		        if (res[p] === undefined) {
		          res[p] = tmp;
		        } else {
		          res[p][1] = tmp;
		        }
		        tmp = '';
		        ++p;
		        continue;
		      } else if (!inquote && (char === ' ' || char === '\t')) {
		        continue;
		      }
		    }
		    tmp += char;
		  }
		  if (charset && tmp.length) {
		    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);
		  } else if (tmp) {
		    tmp = decodeText(tmp, 'binary', 'utf8');
		  }
		  if (res[p] === undefined) {
		    if (tmp) {
		      res[p] = tmp;
		    }
		  } else {
		    res[p][1] = tmp;
		  }
		  return res;
		}
		parseParams_1 = parseParams;
		return parseParams_1;
	}

	var basename;
	var hasRequiredBasename;

	function requireBasename () {
		if (hasRequiredBasename) return basename;
		hasRequiredBasename = 1;

		basename = function basename(path) {
		  if (typeof path !== 'string') {
		    return '';
		  }
		  for (var i = path.length - 1; i >= 0; --i) {
		    // eslint-disable-line no-var
		    switch (path.charCodeAt(i)) {
		      case 0x2F: // '/'
		      case 0x5C:
		        // '\'
		        path = path.slice(i + 1);
		        return path === '..' || path === '.' ? '' : path;
		    }
		  }
		  return path === '..' || path === '.' ? '' : path;
		};
		return basename;
	}

	var multipart;
	var hasRequiredMultipart;

	function requireMultipart () {
		if (hasRequiredMultipart) return multipart;
		hasRequiredMultipart = 1;

		// TODO:
		//  * support 1 nested multipart level
		//    (see second multipart example here:
		//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
		//  * support limits.fieldNameSize
		//     -- this will require modifications to utils.parseParams
		const {
		  Readable
		} = require$$0__default$6["default"];
		const {
		  inherits
		} = require$$1__default$3["default"];
		const Dicer = requireDicer();
		const parseParams = requireParseParams();
		const decodeText = requireDecodeText();
		const basename = requireBasename();
		const getLimit = requireGetLimit();
		const RE_BOUNDARY = /^boundary$/i;
		const RE_FIELD = /^form-data$/i;
		const RE_CHARSET = /^charset$/i;
		const RE_FILENAME = /^filename$/i;
		const RE_NAME = /^name$/i;
		Multipart.detect = /^multipart\/form-data/i;
		function Multipart(boy, cfg) {
		  let i;
		  let len;
		  const self = this;
		  let boundary;
		  const limits = cfg.limits;
		  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === 'application/octet-stream' || fileName !== undefined);
		  const parsedConType = cfg.parsedConType || [];
		  const defCharset = cfg.defCharset || 'utf8';
		  const preservePath = cfg.preservePath;
		  const fileOpts = {
		    highWaterMark: cfg.fileHwm
		  };
		  for (i = 0, len = parsedConType.length; i < len; ++i) {
		    if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
		      boundary = parsedConType[i][1];
		      break;
		    }
		  }
		  function checkFinished() {
		    if (nends === 0 && finished && !boy._done) {
		      finished = false;
		      self.end();
		    }
		  }
		  if (typeof boundary !== 'string') {
		    throw new Error('Multipart: Boundary not found');
		  }
		  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024);
		  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity);
		  const filesLimit = getLimit(limits, 'files', Infinity);
		  const fieldsLimit = getLimit(limits, 'fields', Infinity);
		  const partsLimit = getLimit(limits, 'parts', Infinity);
		  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000);
		  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024);
		  let nfiles = 0;
		  let nfields = 0;
		  let nends = 0;
		  let curFile;
		  let curField;
		  let finished = false;
		  this._needDrain = false;
		  this._pause = false;
		  this._cb = undefined;
		  this._nparts = 0;
		  this._boy = boy;
		  const parserCfg = {
		    boundary,
		    maxHeaderPairs: headerPairsLimit,
		    maxHeaderSize: headerSizeLimit,
		    partHwm: fileOpts.highWaterMark,
		    highWaterMark: cfg.highWaterMark
		  };
		  this.parser = new Dicer(parserCfg);
		  this.parser.on('drain', function () {
		    self._needDrain = false;
		    if (self._cb && !self._pause) {
		      const cb = self._cb;
		      self._cb = undefined;
		      cb();
		    }
		  }).on('part', function onPart(part) {
		    if (++self._nparts > partsLimit) {
		      self.parser.removeListener('part', onPart);
		      self.parser.on('part', skipPart);
		      boy.hitPartsLimit = true;
		      boy.emit('partsLimit');
		      return skipPart(part);
		    }

		    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
		    // us emit 'end' early since we know the part has ended if we are already
		    // seeing the next part
		    if (curField) {
		      const field = curField;
		      field.emit('end');
		      field.removeAllListeners('end');
		    }
		    part.on('header', function (header) {
		      let contype;
		      let fieldname;
		      let parsed;
		      let charset;
		      let encoding;
		      let filename;
		      let nsize = 0;
		      if (header['content-type']) {
		        parsed = parseParams(header['content-type'][0]);
		        if (parsed[0]) {
		          contype = parsed[0].toLowerCase();
		          for (i = 0, len = parsed.length; i < len; ++i) {
		            if (RE_CHARSET.test(parsed[i][0])) {
		              charset = parsed[i][1].toLowerCase();
		              break;
		            }
		          }
		        }
		      }
		      if (contype === undefined) {
		        contype = 'text/plain';
		      }
		      if (charset === undefined) {
		        charset = defCharset;
		      }
		      if (header['content-disposition']) {
		        parsed = parseParams(header['content-disposition'][0]);
		        if (!RE_FIELD.test(parsed[0])) {
		          return skipPart(part);
		        }
		        for (i = 0, len = parsed.length; i < len; ++i) {
		          if (RE_NAME.test(parsed[i][0])) {
		            fieldname = parsed[i][1];
		          } else if (RE_FILENAME.test(parsed[i][0])) {
		            filename = parsed[i][1];
		            if (!preservePath) {
		              filename = basename(filename);
		            }
		          }
		        }
		      } else {
		        return skipPart(part);
		      }
		      if (header['content-transfer-encoding']) {
		        encoding = header['content-transfer-encoding'][0].toLowerCase();
		      } else {
		        encoding = '7bit';
		      }
		      let onData, onEnd;
		      if (isPartAFile(fieldname, contype, filename)) {
		        // file/binary field
		        if (nfiles === filesLimit) {
		          if (!boy.hitFilesLimit) {
		            boy.hitFilesLimit = true;
		            boy.emit('filesLimit');
		          }
		          return skipPart(part);
		        }
		        ++nfiles;
		        if (!boy._events.file) {
		          self.parser._ignore();
		          return;
		        }
		        ++nends;
		        const file = new FileStream(fileOpts);
		        curFile = file;
		        file.on('end', function () {
		          --nends;
		          self._pause = false;
		          checkFinished();
		          if (self._cb && !self._needDrain) {
		            const cb = self._cb;
		            self._cb = undefined;
		            cb();
		          }
		        });
		        file._read = function (n) {
		          if (!self._pause) {
		            return;
		          }
		          self._pause = false;
		          if (self._cb && !self._needDrain) {
		            const cb = self._cb;
		            self._cb = undefined;
		            cb();
		          }
		        };
		        boy.emit('file', fieldname, file, filename, encoding, contype);
		        onData = function (data) {
		          if ((nsize += data.length) > fileSizeLimit) {
		            const extralen = fileSizeLimit - nsize + data.length;
		            if (extralen > 0) {
		              file.push(data.slice(0, extralen));
		            }
		            file.truncated = true;
		            file.bytesRead = fileSizeLimit;
		            part.removeAllListeners('data');
		            file.emit('limit');
		            return;
		          } else if (!file.push(data)) {
		            self._pause = true;
		          }
		          file.bytesRead = nsize;
		        };
		        onEnd = function () {
		          curFile = undefined;
		          file.push(null);
		        };
		      } else {
		        // non-file field
		        if (nfields === fieldsLimit) {
		          if (!boy.hitFieldsLimit) {
		            boy.hitFieldsLimit = true;
		            boy.emit('fieldsLimit');
		          }
		          return skipPart(part);
		        }
		        ++nfields;
		        ++nends;
		        let buffer = '';
		        let truncated = false;
		        curField = part;
		        onData = function (data) {
		          if ((nsize += data.length) > fieldSizeLimit) {
		            const extralen = fieldSizeLimit - (nsize - data.length);
		            buffer += data.toString('binary', 0, extralen);
		            truncated = true;
		            part.removeAllListeners('data');
		          } else {
		            buffer += data.toString('binary');
		          }
		        };
		        onEnd = function () {
		          curField = undefined;
		          if (buffer.length) {
		            buffer = decodeText(buffer, 'binary', charset);
		          }
		          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype);
		          --nends;
		          checkFinished();
		        };
		      }

		      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
		         broken. Streams2/streams3 is a huge black box of confusion, but
		         somehow overriding the sync state seems to fix things again (and still
		         seems to work for previous node versions).
		      */
		      part._readableState.sync = false;
		      part.on('data', onData);
		      part.on('end', onEnd);
		    }).on('error', function (err) {
		      if (curFile) {
		        curFile.emit('error', err);
		      }
		    });
		  }).on('error', function (err) {
		    boy.emit('error', err);
		  }).on('finish', function () {
		    finished = true;
		    checkFinished();
		  });
		}
		Multipart.prototype.write = function (chunk, cb) {
		  const r = this.parser.write(chunk);
		  if (r && !this._pause) {
		    cb();
		  } else {
		    this._needDrain = !r;
		    this._cb = cb;
		  }
		};
		Multipart.prototype.end = function () {
		  const self = this;
		  if (self.parser.writable) {
		    self.parser.end();
		  } else if (!self._boy._done) {
		    process.nextTick(function () {
		      self._boy._done = true;
		      self._boy.emit('finish');
		    });
		  }
		};
		function skipPart(part) {
		  part.resume();
		}
		function FileStream(opts) {
		  Readable.call(this, opts);
		  this.bytesRead = 0;
		  this.truncated = false;
		}
		inherits(FileStream, Readable);
		FileStream.prototype._read = function (n) {};
		multipart = Multipart;
		return multipart;
	}

	var Decoder_1;
	var hasRequiredDecoder;

	function requireDecoder () {
		if (hasRequiredDecoder) return Decoder_1;
		hasRequiredDecoder = 1;

		const RE_PLUS = /\+/g;
		const HEX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		function Decoder() {
		  this.buffer = undefined;
		}
		Decoder.prototype.write = function (str) {
		  // Replace '+' with ' ' before decoding
		  str = str.replace(RE_PLUS, ' ');
		  let res = '';
		  let i = 0;
		  let p = 0;
		  const len = str.length;
		  for (; i < len; ++i) {
		    if (this.buffer !== undefined) {
		      if (!HEX[str.charCodeAt(i)]) {
		        res += '%' + this.buffer;
		        this.buffer = undefined;
		        --i; // retry character
		      } else {
		        this.buffer += str[i];
		        ++p;
		        if (this.buffer.length === 2) {
		          res += String.fromCharCode(parseInt(this.buffer, 16));
		          this.buffer = undefined;
		        }
		      }
		    } else if (str[i] === '%') {
		      if (i > p) {
		        res += str.substring(p, i);
		        p = i;
		      }
		      this.buffer = '';
		      ++p;
		    }
		  }
		  if (p < len && this.buffer === undefined) {
		    res += str.substring(p);
		  }
		  return res;
		};
		Decoder.prototype.reset = function () {
		  this.buffer = undefined;
		};
		Decoder_1 = Decoder;
		return Decoder_1;
	}

	var urlencoded;
	var hasRequiredUrlencoded;

	function requireUrlencoded () {
		if (hasRequiredUrlencoded) return urlencoded;
		hasRequiredUrlencoded = 1;

		const Decoder = requireDecoder();
		const decodeText = requireDecodeText();
		const getLimit = requireGetLimit();
		const RE_CHARSET = /^charset$/i;
		UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
		function UrlEncoded(boy, cfg) {
		  const limits = cfg.limits;
		  const parsedConType = cfg.parsedConType;
		  this.boy = boy;
		  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024);
		  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100);
		  this.fieldsLimit = getLimit(limits, 'fields', Infinity);
		  let charset;
		  for (var i = 0, len = parsedConType.length; i < len; ++i) {
		    // eslint-disable-line no-var
		    if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
		      charset = parsedConType[i][1].toLowerCase();
		      break;
		    }
		  }
		  if (charset === undefined) {
		    charset = cfg.defCharset || 'utf8';
		  }
		  this.decoder = new Decoder();
		  this.charset = charset;
		  this._fields = 0;
		  this._state = 'key';
		  this._checkingBytes = true;
		  this._bytesKey = 0;
		  this._bytesVal = 0;
		  this._key = '';
		  this._val = '';
		  this._keyTrunc = false;
		  this._valTrunc = false;
		  this._hitLimit = false;
		}
		UrlEncoded.prototype.write = function (data, cb) {
		  if (this._fields === this.fieldsLimit) {
		    if (!this.boy.hitFieldsLimit) {
		      this.boy.hitFieldsLimit = true;
		      this.boy.emit('fieldsLimit');
		    }
		    return cb();
		  }
		  let idxeq;
		  let idxamp;
		  let i;
		  let p = 0;
		  const len = data.length;
		  while (p < len) {
		    if (this._state === 'key') {
		      idxeq = idxamp = undefined;
		      for (i = p; i < len; ++i) {
		        if (!this._checkingBytes) {
		          ++p;
		        }
		        if (data[i] === 0x3D /* = */) {
		          idxeq = i;
		          break;
		        } else if (data[i] === 0x26 /* & */) {
		          idxamp = i;
		          break;
		        }
		        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
		          this._hitLimit = true;
		          break;
		        } else if (this._checkingBytes) {
		          ++this._bytesKey;
		        }
		      }
		      if (idxeq !== undefined) {
		        // key with assignment
		        if (idxeq > p) {
		          this._key += this.decoder.write(data.toString('binary', p, idxeq));
		        }
		        this._state = 'val';
		        this._hitLimit = false;
		        this._checkingBytes = true;
		        this._val = '';
		        this._bytesVal = 0;
		        this._valTrunc = false;
		        this.decoder.reset();
		        p = idxeq + 1;
		      } else if (idxamp !== undefined) {
		        // key with no assignment
		        ++this._fields;
		        let key;
		        const keyTrunc = this._keyTrunc;
		        if (idxamp > p) {
		          key = this._key += this.decoder.write(data.toString('binary', p, idxamp));
		        } else {
		          key = this._key;
		        }
		        this._hitLimit = false;
		        this._checkingBytes = true;
		        this._key = '';
		        this._bytesKey = 0;
		        this._keyTrunc = false;
		        this.decoder.reset();
		        if (key.length) {
		          this.boy.emit('field', decodeText(key, 'binary', this.charset), '', keyTrunc, false);
		        }
		        p = idxamp + 1;
		        if (this._fields === this.fieldsLimit) {
		          return cb();
		        }
		      } else if (this._hitLimit) {
		        // we may not have hit the actual limit if there are encoded bytes...
		        if (i > p) {
		          this._key += this.decoder.write(data.toString('binary', p, i));
		        }
		        p = i;
		        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
		          // yep, we actually did hit the limit
		          this._checkingBytes = false;
		          this._keyTrunc = true;
		        }
		      } else {
		        if (p < len) {
		          this._key += this.decoder.write(data.toString('binary', p));
		        }
		        p = len;
		      }
		    } else {
		      idxamp = undefined;
		      for (i = p; i < len; ++i) {
		        if (!this._checkingBytes) {
		          ++p;
		        }
		        if (data[i] === 0x26 /* & */) {
		          idxamp = i;
		          break;
		        }
		        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
		          this._hitLimit = true;
		          break;
		        } else if (this._checkingBytes) {
		          ++this._bytesVal;
		        }
		      }
		      if (idxamp !== undefined) {
		        ++this._fields;
		        if (idxamp > p) {
		          this._val += this.decoder.write(data.toString('binary', p, idxamp));
		        }
		        this.boy.emit('field', decodeText(this._key, 'binary', this.charset), decodeText(this._val, 'binary', this.charset), this._keyTrunc, this._valTrunc);
		        this._state = 'key';
		        this._hitLimit = false;
		        this._checkingBytes = true;
		        this._key = '';
		        this._bytesKey = 0;
		        this._keyTrunc = false;
		        this.decoder.reset();
		        p = idxamp + 1;
		        if (this._fields === this.fieldsLimit) {
		          return cb();
		        }
		      } else if (this._hitLimit) {
		        // we may not have hit the actual limit if there are encoded bytes...
		        if (i > p) {
		          this._val += this.decoder.write(data.toString('binary', p, i));
		        }
		        p = i;
		        if (this._val === '' && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
		          // yep, we actually did hit the limit
		          this._checkingBytes = false;
		          this._valTrunc = true;
		        }
		      } else {
		        if (p < len) {
		          this._val += this.decoder.write(data.toString('binary', p));
		        }
		        p = len;
		      }
		    }
		  }
		  cb();
		};
		UrlEncoded.prototype.end = function () {
		  if (this.boy._done) {
		    return;
		  }
		  if (this._state === 'key' && this._key.length > 0) {
		    this.boy.emit('field', decodeText(this._key, 'binary', this.charset), '', this._keyTrunc, false);
		  } else if (this._state === 'val') {
		    this.boy.emit('field', decodeText(this._key, 'binary', this.charset), decodeText(this._val, 'binary', this.charset), this._keyTrunc, this._valTrunc);
		  }
		  this.boy._done = true;
		  this.boy.emit('finish');
		};
		urlencoded = UrlEncoded;
		return urlencoded;
	}

	var hasRequiredMain;

	function requireMain () {
		if (hasRequiredMain) return main.exports;
		hasRequiredMain = 1;

		const WritableStream = require$$0__default$6["default"].Writable;
		const {
		  inherits
		} = require$$1__default$3["default"];
		const Dicer = requireDicer();
		const MultipartParser = requireMultipart();
		const UrlencodedParser = requireUrlencoded();
		const parseParams = requireParseParams();
		function Busboy(opts) {
		  if (!(this instanceof Busboy)) {
		    return new Busboy(opts);
		  }
		  if (typeof opts !== 'object') {
		    throw new TypeError('Busboy expected an options-Object.');
		  }
		  if (typeof opts.headers !== 'object') {
		    throw new TypeError('Busboy expected an options-Object with headers-attribute.');
		  }
		  if (typeof opts.headers['content-type'] !== 'string') {
		    throw new TypeError('Missing Content-Type-header.');
		  }
		  const {
		    headers,
		    ...streamOptions
		  } = opts;
		  this.opts = {
		    autoDestroy: false,
		    ...streamOptions
		  };
		  WritableStream.call(this, this.opts);
		  this._done = false;
		  this._parser = this.getParserByHeaders(headers);
		  this._finished = false;
		}
		inherits(Busboy, WritableStream);
		Busboy.prototype.emit = function (ev) {
		  if (ev === 'finish') {
		    if (!this._done) {
		      this._parser?.end();
		      return;
		    } else if (this._finished) {
		      return;
		    }
		    this._finished = true;
		  }
		  WritableStream.prototype.emit.apply(this, arguments);
		};
		Busboy.prototype.getParserByHeaders = function (headers) {
		  const parsed = parseParams(headers['content-type']);
		  const cfg = {
		    defCharset: this.opts.defCharset,
		    fileHwm: this.opts.fileHwm,
		    headers,
		    highWaterMark: this.opts.highWaterMark,
		    isPartAFile: this.opts.isPartAFile,
		    limits: this.opts.limits,
		    parsedConType: parsed,
		    preservePath: this.opts.preservePath
		  };
		  if (MultipartParser.detect.test(parsed[0])) {
		    return new MultipartParser(this, cfg);
		  }
		  if (UrlencodedParser.detect.test(parsed[0])) {
		    return new UrlencodedParser(this, cfg);
		  }
		  throw new Error('Unsupported Content-Type.');
		};
		Busboy.prototype._write = function (chunk, encoding, cb) {
		  this._parser.write(chunk, cb);
		};
		main.exports = Busboy;
		main.exports.default = Busboy;
		main.exports.Busboy = Busboy;
		main.exports.Dicer = Dicer;
		return main.exports;
	}

	var constants$3;
	var hasRequiredConstants$3;

	function requireConstants$3 () {
		if (hasRequiredConstants$3) return constants$3;
		hasRequiredConstants$3 = 1;

		const {
		  MessageChannel,
		  receiveMessageOnPort
		} = require$$0__default$7["default"];
		const corsSafeListedMethods = ['GET', 'HEAD', 'POST'];
		const corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
		const nullBodyStatus = [101, 204, 205, 304];
		const redirectStatus = [301, 302, 303, 307, 308];
		const redirectStatusSet = new Set(redirectStatus);

		// https://fetch.spec.whatwg.org/#block-bad-port
		const badPorts = ['1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79', '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137', '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532', '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723', '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697', '10080'];
		const badPortsSet = new Set(badPorts);

		// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
		const referrerPolicy = ['', 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url'];
		const referrerPolicySet = new Set(referrerPolicy);
		const requestRedirect = ['follow', 'manual', 'error'];
		const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];
		const safeMethodsSet = new Set(safeMethods);
		const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors'];
		const requestCredentials = ['omit', 'same-origin', 'include'];
		const requestCache = ['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached'];

		// https://fetch.spec.whatwg.org/#request-body-header-name
		const requestBodyHeader = ['content-encoding', 'content-language', 'content-location', 'content-type',
		// See https://github.com/nodejs/undici/issues/2021
		// 'Content-Length' is a forbidden header name, which is typically
		// removed in the Headers implementation. However, undici doesn't
		// filter out headers, so we add it here.
		'content-length'];

		// https://fetch.spec.whatwg.org/#enumdef-requestduplex
		const requestDuplex = ['half'];

		// http://fetch.spec.whatwg.org/#forbidden-method
		const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK'];
		const forbiddenMethodsSet = new Set(forbiddenMethods);
		const subresource = ['audio', 'audioworklet', 'font', 'image', 'manifest', 'paintworklet', 'script', 'style', 'track', 'video', 'xslt', ''];
		const subresourceSet = new Set(subresource);

		/** @type {globalThis['DOMException']} */
		const DOMException = globalThis.DOMException ?? (() => {
		  // DOMException was only made a global in Node v17.0.0,
		  // but fetch supports >= v16.8.
		  try {
		    atob('~');
		  } catch (err) {
		    return Object.getPrototypeOf(err).constructor;
		  }
		})();
		let channel;

		/** @type {globalThis['structuredClone']} */
		const structuredClone = globalThis.structuredClone ??
		// https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
		// structuredClone was added in v17.0.0, but fetch supports v16.8
		function structuredClone(value, options = undefined) {
		  if (arguments.length === 0) {
		    throw new TypeError('missing argument');
		  }
		  if (!channel) {
		    channel = new MessageChannel();
		  }
		  channel.port1.unref();
		  channel.port2.unref();
		  channel.port1.postMessage(value, options?.transfer);
		  return receiveMessageOnPort(channel.port2).message;
		};
		constants$3 = {
		  DOMException,
		  structuredClone,
		  subresource,
		  forbiddenMethods,
		  requestBodyHeader,
		  referrerPolicy,
		  requestRedirect,
		  requestMode,
		  requestCredentials,
		  requestCache,
		  redirectStatus,
		  corsSafeListedMethods,
		  nullBodyStatus,
		  safeMethods,
		  badPorts,
		  requestDuplex,
		  subresourceSet,
		  badPortsSet,
		  redirectStatusSet,
		  corsSafeListedMethodsSet,
		  safeMethodsSet,
		  forbiddenMethodsSet,
		  referrerPolicySet
		};
		return constants$3;
	}

	var global$2;
	var hasRequiredGlobal$1;

	function requireGlobal$1 () {
		if (hasRequiredGlobal$1) return global$2;
		hasRequiredGlobal$1 = 1;

		// In case of breaking changes, increase the version
		// number to avoid conflicts.
		const globalOrigin = Symbol.for('undici.globalOrigin.1');
		function getGlobalOrigin() {
		  return globalThis[globalOrigin];
		}
		function setGlobalOrigin(newOrigin) {
		  if (newOrigin === undefined) {
		    Object.defineProperty(globalThis, globalOrigin, {
		      value: undefined,
		      writable: true,
		      enumerable: false,
		      configurable: false
		    });
		    return;
		  }
		  const parsedURL = new URL(newOrigin);
		  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
		    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		  }
		  Object.defineProperty(globalThis, globalOrigin, {
		    value: parsedURL,
		    writable: true,
		    enumerable: false,
		    configurable: false
		  });
		}
		global$2 = {
		  getGlobalOrigin,
		  setGlobalOrigin
		};
		return global$2;
	}

	var util$5;
	var hasRequiredUtil$5;

	function requireUtil$5 () {
		if (hasRequiredUtil$5) return util$5;
		hasRequiredUtil$5 = 1;

		const {
		  redirectStatusSet,
		  referrerPolicySet: referrerPolicyTokens,
		  badPortsSet
		} = requireConstants$3();
		const {
		  getGlobalOrigin
		} = requireGlobal$1();
		const {
		  performance
		} = require$$2__default$1["default"];
		const {
		  isBlobLike,
		  toUSVString,
		  ReadableStreamFrom
		} = requireUtil$6();
		const assert = require$$0__default$3["default"];
		const {
		  isUint8Array
		} = require$$5__default["default"];

		// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
		/** @type {import('crypto')|undefined} */
		let crypto;
		try {
		  crypto = require('crypto');
		} catch {}
		function responseURL(response) {
		  // https://fetch.spec.whatwg.org/#responses
		  // A response has an associated URL. It is a pointer to the last URL
		  // in response’s URL list and null if response’s URL list is empty.
		  const urlList = response.urlList;
		  const length = urlList.length;
		  return length === 0 ? null : urlList[length - 1].toString();
		}

		// https://fetch.spec.whatwg.org/#concept-response-location-url
		function responseLocationURL(response, requestFragment) {
		  // 1. If response’s status is not a redirect status, then return null.
		  if (!redirectStatusSet.has(response.status)) {
		    return null;
		  }

		  // 2. Let location be the result of extracting header list values given
		  // `Location` and response’s header list.
		  let location = response.headersList.get('location');

		  // 3. If location is a header value, then set location to the result of
		  //    parsing location with response’s URL.
		  if (location !== null && isValidHeaderValue(location)) {
		    location = new URL(location, responseURL(response));
		  }

		  // 4. If location is a URL whose fragment is null, then set location’s
		  // fragment to requestFragment.
		  if (location && !location.hash) {
		    location.hash = requestFragment;
		  }

		  // 5. Return location.
		  return location;
		}

		/** @returns {URL} */
		function requestCurrentURL(request) {
		  return request.urlList[request.urlList.length - 1];
		}
		function requestBadPort(request) {
		  // 1. Let url be request’s current URL.
		  const url = requestCurrentURL(request);

		  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
		  // then return blocked.
		  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
		    return 'blocked';
		  }

		  // 3. Return allowed.
		  return 'allowed';
		}
		function isErrorLike(object) {
		  return object instanceof Error || object?.constructor?.name === 'Error' || object?.constructor?.name === 'DOMException';
		}

		// Check whether |statusText| is a ByteString and
		// matches the Reason-Phrase token production.
		// RFC 2616: https://tools.ietf.org/html/rfc2616
		// RFC 7230: https://tools.ietf.org/html/rfc7230
		// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
		// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
		function isValidReasonPhrase(statusText) {
		  for (let i = 0; i < statusText.length; ++i) {
		    const c = statusText.charCodeAt(i);
		    if (!(c === 0x09 ||
		    // HTAB
		    c >= 0x20 && c <= 0x7e ||
		    // SP / VCHAR
		    c >= 0x80 && c <= 0xff
		    // obs-text
		    )) {
		      return false;
		    }
		  }
		  return true;
		}

		/**
		 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
		 * @param {number} c
		 */
		function isTokenCharCode(c) {
		  switch (c) {
		    case 0x22:
		    case 0x28:
		    case 0x29:
		    case 0x2c:
		    case 0x2f:
		    case 0x3a:
		    case 0x3b:
		    case 0x3c:
		    case 0x3d:
		    case 0x3e:
		    case 0x3f:
		    case 0x40:
		    case 0x5b:
		    case 0x5c:
		    case 0x5d:
		    case 0x7b:
		    case 0x7d:
		      // DQUOTE and "(),/:;<=>?@[\]{}"
		      return false;
		    default:
		      // VCHAR %x21-7E
		      return c >= 0x21 && c <= 0x7e;
		  }
		}

		/**
		 * @param {string} characters
		 */
		function isValidHTTPToken(characters) {
		  if (characters.length === 0) {
		    return false;
		  }
		  for (let i = 0; i < characters.length; ++i) {
		    if (!isTokenCharCode(characters.charCodeAt(i))) {
		      return false;
		    }
		  }
		  return true;
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#header-name
		 * @param {string} potentialValue
		 */
		function isValidHeaderName(potentialValue) {
		  return isValidHTTPToken(potentialValue);
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#header-value
		 * @param {string} potentialValue
		 */
		function isValidHeaderValue(potentialValue) {
		  // - Has no leading or trailing HTTP tab or space bytes.
		  // - Contains no 0x00 (NUL) or HTTP newline bytes.
		  if (potentialValue.startsWith('\t') || potentialValue.startsWith(' ') || potentialValue.endsWith('\t') || potentialValue.endsWith(' ')) {
		    return false;
		  }
		  if (potentialValue.includes('\0') || potentialValue.includes('\r') || potentialValue.includes('\n')) {
		    return false;
		  }
		  return true;
		}

		// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
		function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
		  //  Given a request request and a response actualResponse, this algorithm
		  //  updates request’s referrer policy according to the Referrer-Policy
		  //  header (if any) in actualResponse.

		  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
		  // from a Referrer-Policy header on actualResponse.

		  // 8.1 Parse a referrer policy from a Referrer-Policy header
		  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
		  const {
		    headersList
		  } = actualResponse;
		  // 2. Let policy be the empty string.
		  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
		  // 4. Return policy.
		  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',');

		  // Note: As the referrer-policy can contain multiple policies
		  // separated by comma, we need to loop through all of them
		  // and pick the first valid one.
		  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
		  let policy = '';
		  if (policyHeader.length > 0) {
		    // The right-most policy takes precedence.
		    // The left-most policy is the fallback.
		    for (let i = policyHeader.length; i !== 0; i--) {
		      const token = policyHeader[i - 1].trim();
		      if (referrerPolicyTokens.has(token)) {
		        policy = token;
		        break;
		      }
		    }
		  }

		  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
		  if (policy !== '') {
		    request.referrerPolicy = policy;
		  }
		}

		// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
		function crossOriginResourcePolicyCheck() {
		  // TODO
		  return 'allowed';
		}

		// https://fetch.spec.whatwg.org/#concept-cors-check
		function corsCheck() {
		  // TODO
		  return 'success';
		}

		// https://fetch.spec.whatwg.org/#concept-tao-check
		function TAOCheck() {
		  // TODO
		  return 'success';
		}
		function appendFetchMetadata(httpRequest) {
		  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
		  //  TODO

		  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

		  //  1. Assert: r’s url is a potentially trustworthy URL.
		  //  TODO

		  //  2. Let header be a Structured Header whose value is a token.
		  let header = null;

		  //  3. Set header’s value to r’s mode.
		  header = httpRequest.mode;

		  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
		  httpRequest.headersList.set('sec-fetch-mode', header);

		  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
		  //  TODO

		  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
		  //  TODO
		}

		// https://fetch.spec.whatwg.org/#append-a-request-origin-header
		function appendRequestOriginHeader(request) {
		  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
		  let serializedOrigin = request.origin;

		  // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
		  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
		    if (serializedOrigin) {
		      request.headersList.append('origin', serializedOrigin);
		    }

		    // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
		  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
		    // 1. Switch on request’s referrer policy:
		    switch (request.referrerPolicy) {
		      case 'no-referrer':
		        // Set serializedOrigin to `null`.
		        serializedOrigin = null;
		        break;
		      case 'no-referrer-when-downgrade':
		      case 'strict-origin':
		      case 'strict-origin-when-cross-origin':
		        // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
		        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
		          serializedOrigin = null;
		        }
		        break;
		      case 'same-origin':
		        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
		        if (!sameOrigin(request, requestCurrentURL(request))) {
		          serializedOrigin = null;
		        }
		        break;
		      // Do nothing.
		    }
		    if (serializedOrigin) {
		      // 2. Append (`Origin`, serializedOrigin) to request’s header list.
		      request.headersList.append('origin', serializedOrigin);
		    }
		  }
		}
		function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
		  // TODO
		  return performance.now();
		}

		// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
		function createOpaqueTimingInfo(timingInfo) {
		  return {
		    startTime: timingInfo.startTime ?? 0,
		    redirectStartTime: 0,
		    redirectEndTime: 0,
		    postRedirectStartTime: timingInfo.startTime ?? 0,
		    finalServiceWorkerStartTime: 0,
		    finalNetworkResponseStartTime: 0,
		    finalNetworkRequestStartTime: 0,
		    endTime: 0,
		    encodedBodySize: 0,
		    decodedBodySize: 0,
		    finalConnectionTimingInfo: null
		  };
		}

		// https://html.spec.whatwg.org/multipage/origin.html#policy-container
		function makePolicyContainer() {
		  // Note: the fetch spec doesn't make use of embedder policy or CSP list
		  return {
		    referrerPolicy: 'strict-origin-when-cross-origin'
		  };
		}

		// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
		function clonePolicyContainer(policyContainer) {
		  return {
		    referrerPolicy: policyContainer.referrerPolicy
		  };
		}

		// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
		function determineRequestsReferrer(request) {
		  // 1. Let policy be request's referrer policy.
		  const policy = request.referrerPolicy;

		  // Note: policy cannot (shouldn't) be null or an empty string.
		  assert(policy);

		  // 2. Let environment be request’s client.

		  let referrerSource = null;

		  // 3. Switch on request’s referrer:
		  if (request.referrer === 'client') {
		    // Note: node isn't a browser and doesn't implement document/iframes,
		    // so we bypass this step and replace it with our own.

		    const globalOrigin = getGlobalOrigin();
		    if (!globalOrigin || globalOrigin.origin === 'null') {
		      return 'no-referrer';
		    }

		    // note: we need to clone it as it's mutated
		    referrerSource = new URL(globalOrigin);
		  } else if (request.referrer instanceof URL) {
		    // Let referrerSource be request’s referrer.
		    referrerSource = request.referrer;
		  }

		  // 4. Let request’s referrerURL be the result of stripping referrerSource for
		  //    use as a referrer.
		  let referrerURL = stripURLForReferrer(referrerSource);

		  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
		  //    a referrer, with the origin-only flag set to true.
		  const referrerOrigin = stripURLForReferrer(referrerSource, true);

		  // 6. If the result of serializing referrerURL is a string whose length is
		  //    greater than 4096, set referrerURL to referrerOrigin.
		  if (referrerURL.toString().length > 4096) {
		    referrerURL = referrerOrigin;
		  }
		  const areSameOrigin = sameOrigin(request, referrerURL);
		  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);

		  // 8. Execute the switch statements corresponding to the value of policy:
		  switch (policy) {
		    case 'origin':
		      return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
		    case 'unsafe-url':
		      return referrerURL;
		    case 'same-origin':
		      return areSameOrigin ? referrerOrigin : 'no-referrer';
		    case 'origin-when-cross-origin':
		      return areSameOrigin ? referrerURL : referrerOrigin;
		    case 'strict-origin-when-cross-origin':
		      {
		        const currentURL = requestCurrentURL(request);

		        // 1. If the origin of referrerURL and the origin of request’s current
		        //    URL are the same, then return referrerURL.
		        if (sameOrigin(referrerURL, currentURL)) {
		          return referrerURL;
		        }

		        // 2. If referrerURL is a potentially trustworthy URL and request’s
		        //    current URL is not a potentially trustworthy URL, then return no
		        //    referrer.
		        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
		          return 'no-referrer';
		        }

		        // 3. Return referrerOrigin.
		        return referrerOrigin;
		      }
		    case 'strict-origin': // eslint-disable-line
		    /**
		       * 1. If referrerURL is a potentially trustworthy URL and
		       * request’s current URL is not a potentially trustworthy URL,
		       * then return no referrer.
		       * 2. Return referrerOrigin
		      */
		    case 'no-referrer-when-downgrade': // eslint-disable-line
		    /**
		     * 1. If referrerURL is a potentially trustworthy URL and
		     * request’s current URL is not a potentially trustworthy URL,
		     * then return no referrer.
		     * 2. Return referrerOrigin
		    */

		    default:
		      // eslint-disable-line
		      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin;
		  }
		}

		/**
		 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
		 * @param {URL} url
		 * @param {boolean|undefined} originOnly
		 */
		function stripURLForReferrer(url, originOnly) {
		  // 1. Assert: url is a URL.
		  assert(url instanceof URL);

		  // 2. If url’s scheme is a local scheme, then return no referrer.
		  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
		    return 'no-referrer';
		  }

		  // 3. Set url’s username to the empty string.
		  url.username = '';

		  // 4. Set url’s password to the empty string.
		  url.password = '';

		  // 5. Set url’s fragment to null.
		  url.hash = '';

		  // 6. If the origin-only flag is true, then:
		  if (originOnly) {
		    // 1. Set url’s path to « the empty string ».
		    url.pathname = '';

		    // 2. Set url’s query to null.
		    url.search = '';
		  }

		  // 7. Return url.
		  return url;
		}
		function isURLPotentiallyTrustworthy(url) {
		  if (!(url instanceof URL)) {
		    return false;
		  }

		  // If child of about, return true
		  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
		    return true;
		  }

		  // If scheme is data, return true
		  if (url.protocol === 'data:') return true;

		  // If file, return true
		  if (url.protocol === 'file:') return true;
		  return isOriginPotentiallyTrustworthy(url.origin);
		  function isOriginPotentiallyTrustworthy(origin) {
		    // If origin is explicitly null, return false
		    if (origin == null || origin === 'null') return false;
		    const originAsURL = new URL(origin);

		    // If secure, return true
		    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
		      return true;
		    }

		    // If localhost or variants, return true
		    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.') || originAsURL.hostname.endsWith('.localhost')) {
		      return true;
		    }

		    // If any other, return false
		    return false;
		  }
		}

		/**
		 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
		 * @param {Uint8Array} bytes
		 * @param {string} metadataList
		 */
		function bytesMatch(bytes, metadataList) {
		  // If node is not built with OpenSSL support, we cannot check
		  // a request's integrity, so allow it by default (the spec will
		  // allow requests if an invalid hash is given, as precedence).
		  /* istanbul ignore if: only if node is built with --without-ssl */
		  if (crypto === undefined) {
		    return true;
		  }

		  // 1. Let parsedMetadata be the result of parsing metadataList.
		  const parsedMetadata = parseMetadata(metadataList);

		  // 2. If parsedMetadata is no metadata, return true.
		  if (parsedMetadata === 'no metadata') {
		    return true;
		  }

		  // 3. If parsedMetadata is the empty set, return true.
		  if (parsedMetadata.length === 0) {
		    return true;
		  }

		  // 4. Let metadata be the result of getting the strongest
		  //    metadata from parsedMetadata.
		  const list = parsedMetadata.sort((c, d) => d.algo.localeCompare(c.algo));
		  // get the strongest algorithm
		  const strongest = list[0].algo;
		  // get all entries that use the strongest algorithm; ignore weaker
		  const metadata = list.filter(item => item.algo === strongest);

		  // 5. For each item in metadata:
		  for (const item of metadata) {
		    // 1. Let algorithm be the alg component of item.
		    const algorithm = item.algo;

		    // 2. Let expectedValue be the val component of item.
		    let expectedValue = item.hash;

		    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
		    // "be liberal with padding". This is annoying, and it's not even in the spec.

		    if (expectedValue.endsWith('==')) {
		      expectedValue = expectedValue.slice(0, -2);
		    }

		    // 3. Let actualValue be the result of applying algorithm to bytes.
		    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64');
		    if (actualValue.endsWith('==')) {
		      actualValue = actualValue.slice(0, -2);
		    }

		    // 4. If actualValue is a case-sensitive match for expectedValue,
		    //    return true.
		    if (actualValue === expectedValue) {
		      return true;
		    }
		    let actualBase64URL = crypto.createHash(algorithm).update(bytes).digest('base64url');
		    if (actualBase64URL.endsWith('==')) {
		      actualBase64URL = actualBase64URL.slice(0, -2);
		    }
		    if (actualBase64URL === expectedValue) {
		      return true;
		    }
		  }

		  // 6. Return false.
		  return false;
		}

		// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
		// https://www.w3.org/TR/CSP2/#source-list-syntax
		// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
		const parseHashWithOptions = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i;

		/**
		 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
		 * @param {string} metadata
		 */
		function parseMetadata(metadata) {
		  // 1. Let result be the empty set.
		  /** @type {{ algo: string, hash: string }[]} */
		  const result = [];

		  // 2. Let empty be equal to true.
		  let empty = true;
		  const supportedHashes = crypto.getHashes();

		  // 3. For each token returned by splitting metadata on spaces:
		  for (const token of metadata.split(' ')) {
		    // 1. Set empty to false.
		    empty = false;

		    // 2. Parse token as a hash-with-options.
		    const parsedToken = parseHashWithOptions.exec(token);

		    // 3. If token does not parse, continue to the next token.
		    if (parsedToken === null || parsedToken.groups === undefined) {
		      // Note: Chromium blocks the request at this point, but Firefox
		      // gives a warning that an invalid integrity was given. The
		      // correct behavior is to ignore these, and subsequently not
		      // check the integrity of the resource.
		      continue;
		    }

		    // 4. Let algorithm be the hash-algo component of token.
		    const algorithm = parsedToken.groups.algo;

		    // 5. If algorithm is a hash function recognized by the user
		    //    agent, add the parsed token to result.
		    if (supportedHashes.includes(algorithm.toLowerCase())) {
		      result.push(parsedToken.groups);
		    }
		  }

		  // 4. Return no metadata if empty is true, otherwise return result.
		  if (empty === true) {
		    return 'no metadata';
		  }
		  return result;
		}

		// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
		function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
		  // TODO
		}

		/**
		 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
		 * @param {URL} A
		 * @param {URL} B
		 */
		function sameOrigin(A, B) {
		  // 1. If A and B are the same opaque origin, then return true.
		  if (A.origin === B.origin && A.origin === 'null') {
		    return true;
		  }

		  // 2. If A and B are both tuple origins and their schemes,
		  //    hosts, and port are identical, then return true.
		  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
		    return true;
		  }

		  // 3. Return false.
		  return false;
		}
		function createDeferredPromise() {
		  let res;
		  let rej;
		  const promise = new Promise((resolve, reject) => {
		    res = resolve;
		    rej = reject;
		  });
		  return {
		    promise,
		    resolve: res,
		    reject: rej
		  };
		}
		function isAborted(fetchParams) {
		  return fetchParams.controller.state === 'aborted';
		}
		function isCancelled(fetchParams) {
		  return fetchParams.controller.state === 'aborted' || fetchParams.controller.state === 'terminated';
		}
		const normalizeMethodRecord = {
		  delete: 'DELETE',
		  DELETE: 'DELETE',
		  get: 'GET',
		  GET: 'GET',
		  head: 'HEAD',
		  HEAD: 'HEAD',
		  options: 'OPTIONS',
		  OPTIONS: 'OPTIONS',
		  post: 'POST',
		  POST: 'POST',
		  put: 'PUT',
		  PUT: 'PUT'
		};

		// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
		Object.setPrototypeOf(normalizeMethodRecord, null);

		/**
		 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
		 * @param {string} method
		 */
		function normalizeMethod(method) {
		  return normalizeMethodRecord[method.toLowerCase()] ?? method;
		}

		// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
		function serializeJavascriptValueToJSONString(value) {
		  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
		  const result = JSON.stringify(value);

		  // 2. If result is undefined, then throw a TypeError.
		  if (result === undefined) {
		    throw new TypeError('Value is not JSON serializable');
		  }

		  // 3. Assert: result is a string.
		  assert(typeof result === 'string');

		  // 4. Return result.
		  return result;
		}

		// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
		const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));

		/**
		 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
		 * @param {() => unknown[]} iterator
		 * @param {string} name name of the instance
		 * @param {'key'|'value'|'key+value'} kind
		 */
		function makeIterator(iterator, name, kind) {
		  const object = {
		    index: 0,
		    kind,
		    target: iterator
		  };
		  const i = {
		    next() {
		      // 1. Let interface be the interface for which the iterator prototype object exists.

		      // 2. Let thisValue be the this value.

		      // 3. Let object be ? ToObject(thisValue).

		      // 4. If object is a platform object, then perform a security
		      //    check, passing:

		      // 5. If object is not a default iterator object for interface,
		      //    then throw a TypeError.
		      if (Object.getPrototypeOf(this) !== i) {
		        throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
		      }

		      // 6. Let index be object’s index.
		      // 7. Let kind be object’s kind.
		      // 8. Let values be object’s target's value pairs to iterate over.
		      const {
		        index,
		        kind,
		        target
		      } = object;
		      const values = target();

		      // 9. Let len be the length of values.
		      const len = values.length;

		      // 10. If index is greater than or equal to len, then return
		      //     CreateIterResultObject(undefined, true).
		      if (index >= len) {
		        return {
		          value: undefined,
		          done: true
		        };
		      }

		      // 11. Let pair be the entry in values at index index.
		      const pair = values[index];

		      // 12. Set object’s index to index + 1.
		      object.index = index + 1;

		      // 13. Return the iterator result for pair and kind.
		      return iteratorResult(pair, kind);
		    },
		    // The class string of an iterator prototype object for a given interface is the
		    // result of concatenating the identifier of the interface and the string " Iterator".
		    [Symbol.toStringTag]: `${name} Iterator`
		  };

		  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
		  Object.setPrototypeOf(i, esIteratorPrototype);
		  // esIteratorPrototype needs to be the prototype of i
		  // which is the prototype of an empty object. Yes, it's confusing.
		  return Object.setPrototypeOf({}, i);
		}

		// https://webidl.spec.whatwg.org/#iterator-result
		function iteratorResult(pair, kind) {
		  let result;

		  // 1. Let result be a value determined by the value of kind:
		  switch (kind) {
		    case 'key':
		      {
		        // 1. Let idlKey be pair’s key.
		        // 2. Let key be the result of converting idlKey to an
		        //    ECMAScript value.
		        // 3. result is key.
		        result = pair[0];
		        break;
		      }
		    case 'value':
		      {
		        // 1. Let idlValue be pair’s value.
		        // 2. Let value be the result of converting idlValue to
		        //    an ECMAScript value.
		        // 3. result is value.
		        result = pair[1];
		        break;
		      }
		    case 'key+value':
		      {
		        // 1. Let idlKey be pair’s key.
		        // 2. Let idlValue be pair’s value.
		        // 3. Let key be the result of converting idlKey to an
		        //    ECMAScript value.
		        // 4. Let value be the result of converting idlValue to
		        //    an ECMAScript value.
		        // 5. Let array be ! ArrayCreate(2).
		        // 6. Call ! CreateDataProperty(array, "0", key).
		        // 7. Call ! CreateDataProperty(array, "1", value).
		        // 8. result is array.
		        result = pair;
		        break;
		      }
		  }

		  // 2. Return CreateIterResultObject(result, false).
		  return {
		    value: result,
		    done: false
		  };
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#body-fully-read
		 */
		async function fullyReadBody(body, processBody, processBodyError) {
		  // 1. If taskDestination is null, then set taskDestination to
		  //    the result of starting a new parallel queue.

		  // 2. Let successSteps given a byte sequence bytes be to queue a
		  //    fetch task to run processBody given bytes, with taskDestination.
		  const successSteps = processBody;

		  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
		  //    with taskDestination.
		  const errorSteps = processBodyError;

		  // 4. Let reader be the result of getting a reader for body’s stream.
		  //    If that threw an exception, then run errorSteps with that
		  //    exception and return.
		  let reader;
		  try {
		    reader = body.stream.getReader();
		  } catch (e) {
		    errorSteps(e);
		    return;
		  }

		  // 5. Read all bytes from reader, given successSteps and errorSteps.
		  try {
		    const result = await readAllBytes(reader);
		    successSteps(result);
		  } catch (e) {
		    errorSteps(e);
		  }
		}

		/** @type {ReadableStream} */
		let ReadableStream = globalThis.ReadableStream;
		function isReadableStreamLike(stream) {
		  if (!ReadableStream) {
		    ReadableStream = require$$13__default["default"].ReadableStream;
		  }
		  return stream instanceof ReadableStream || stream[Symbol.toStringTag] === 'ReadableStream' && typeof stream.tee === 'function';
		}
		const MAXIMUM_ARGUMENT_LENGTH = 65535;

		/**
		 * @see https://infra.spec.whatwg.org/#isomorphic-decode
		 * @param {number[]|Uint8Array} input
		 */
		function isomorphicDecode(input) {
		  // 1. To isomorphic decode a byte sequence input, return a string whose code point
		  //    length is equal to input’s length and whose code points have the same values
		  //    as the values of input’s bytes, in the same order.

		  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
		    return String.fromCharCode(...input);
		  }
		  return input.reduce((previous, current) => previous + String.fromCharCode(current), '');
		}

		/**
		 * @param {ReadableStreamController<Uint8Array>} controller
		 */
		function readableStreamClose(controller) {
		  try {
		    controller.close();
		  } catch (err) {
		    // TODO: add comment explaining why this error occurs.
		    if (!err.message.includes('Controller is already closed')) {
		      throw err;
		    }
		  }
		}

		/**
		 * @see https://infra.spec.whatwg.org/#isomorphic-encode
		 * @param {string} input
		 */
		function isomorphicEncode(input) {
		  // 1. Assert: input contains no code points greater than U+00FF.
		  for (let i = 0; i < input.length; i++) {
		    assert(input.charCodeAt(i) <= 0xFF);
		  }

		  // 2. Return a byte sequence whose length is equal to input’s code
		  //    point length and whose bytes have the same values as the
		  //    values of input’s code points, in the same order
		  return input;
		}

		/**
		 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
		 * @see https://streams.spec.whatwg.org/#read-loop
		 * @param {ReadableStreamDefaultReader} reader
		 */
		async function readAllBytes(reader) {
		  const bytes = [];
		  let byteLength = 0;
		  while (true) {
		    const {
		      done,
		      value: chunk
		    } = await reader.read();
		    if (done) {
		      // 1. Call successSteps with bytes.
		      return Buffer.concat(bytes, byteLength);
		    }

		    // 1. If chunk is not a Uint8Array object, call failureSteps
		    //    with a TypeError and abort these steps.
		    if (!isUint8Array(chunk)) {
		      throw new TypeError('Received non-Uint8Array chunk');
		    }

		    // 2. Append the bytes represented by chunk to bytes.
		    bytes.push(chunk);
		    byteLength += chunk.length;

		    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
		  }
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#is-local
		 * @param {URL} url
		 */
		function urlIsLocal(url) {
		  assert('protocol' in url); // ensure it's a url object

		  const protocol = url.protocol;
		  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:';
		}

		/**
		 * @param {string|URL} url
		 */
		function urlHasHttpsScheme(url) {
		  if (typeof url === 'string') {
		    return url.startsWith('https:');
		  }
		  return url.protocol === 'https:';
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#http-scheme
		 * @param {URL} url
		 */
		function urlIsHttpHttpsScheme(url) {
		  assert('protocol' in url); // ensure it's a url object

		  const protocol = url.protocol;
		  return protocol === 'http:' || protocol === 'https:';
		}

		/**
		 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
		 */
		const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
		util$5 = {
		  isAborted,
		  isCancelled,
		  createDeferredPromise,
		  ReadableStreamFrom,
		  toUSVString,
		  tryUpgradeRequestToAPotentiallyTrustworthyURL,
		  coarsenedSharedCurrentTime,
		  determineRequestsReferrer,
		  makePolicyContainer,
		  clonePolicyContainer,
		  appendFetchMetadata,
		  appendRequestOriginHeader,
		  TAOCheck,
		  corsCheck,
		  crossOriginResourcePolicyCheck,
		  createOpaqueTimingInfo,
		  setRequestReferrerPolicyOnRedirect,
		  isValidHTTPToken,
		  requestBadPort,
		  requestCurrentURL,
		  responseURL,
		  responseLocationURL,
		  isBlobLike,
		  isURLPotentiallyTrustworthy,
		  isValidReasonPhrase,
		  sameOrigin,
		  normalizeMethod,
		  serializeJavascriptValueToJSONString,
		  makeIterator,
		  isValidHeaderName,
		  isValidHeaderValue,
		  hasOwn,
		  isErrorLike,
		  fullyReadBody,
		  bytesMatch,
		  isReadableStreamLike,
		  readableStreamClose,
		  isomorphicEncode,
		  isomorphicDecode,
		  urlIsLocal,
		  urlHasHttpsScheme,
		  urlIsHttpHttpsScheme,
		  readAllBytes,
		  normalizeMethodRecord
		};
		return util$5;
	}

	var symbols$3;
	var hasRequiredSymbols$3;

	function requireSymbols$3 () {
		if (hasRequiredSymbols$3) return symbols$3;
		hasRequiredSymbols$3 = 1;

		symbols$3 = {
		  kUrl: Symbol('url'),
		  kHeaders: Symbol('headers'),
		  kSignal: Symbol('signal'),
		  kState: Symbol('state'),
		  kGuard: Symbol('guard'),
		  kRealm: Symbol('realm')
		};
		return symbols$3;
	}

	var webidl_1;
	var hasRequiredWebidl;

	function requireWebidl () {
		if (hasRequiredWebidl) return webidl_1;
		hasRequiredWebidl = 1;

		const {
		  types
		} = require$$1__default["default"];
		const {
		  hasOwn,
		  toUSVString
		} = requireUtil$5();

		/** @type {import('../../types/webidl').Webidl} */
		const webidl = {};
		webidl.converters = {};
		webidl.util = {};
		webidl.errors = {};
		webidl.errors.exception = function (message) {
		  return new TypeError(`${message.header}: ${message.message}`);
		};
		webidl.errors.conversionFailed = function (context) {
		  const plural = context.types.length === 1 ? '' : ' one of';
		  const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(', ')}.`;
		  return webidl.errors.exception({
		    header: context.prefix,
		    message
		  });
		};
		webidl.errors.invalidArgument = function (context) {
		  return webidl.errors.exception({
		    header: context.prefix,
		    message: `"${context.value}" is an invalid ${context.type}.`
		  });
		};

		// https://webidl.spec.whatwg.org/#implements
		webidl.brandCheck = function (V, I, opts = undefined) {
		  if (opts?.strict !== false && !(V instanceof I)) {
		    throw new TypeError('Illegal invocation');
		  } else {
		    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
		  }
		};
		webidl.argumentLengthCheck = function ({
		  length
		}, min, ctx) {
		  if (length < min) {
		    throw webidl.errors.exception({
		      message: `${min} argument${min !== 1 ? 's' : ''} required, ` + `but${length ? ' only' : ''} ${length} found.`,
		      ...ctx
		    });
		  }
		};
		webidl.illegalConstructor = function () {
		  throw webidl.errors.exception({
		    header: 'TypeError',
		    message: 'Illegal constructor'
		  });
		};

		// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
		webidl.util.Type = function (V) {
		  switch (typeof V) {
		    case 'undefined':
		      return 'Undefined';
		    case 'boolean':
		      return 'Boolean';
		    case 'string':
		      return 'String';
		    case 'symbol':
		      return 'Symbol';
		    case 'number':
		      return 'Number';
		    case 'bigint':
		      return 'BigInt';
		    case 'function':
		    case 'object':
		      {
		        if (V === null) {
		          return 'Null';
		        }
		        return 'Object';
		      }
		  }
		};

		// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
		webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
		  let upperBound;
		  let lowerBound;

		  // 1. If bitLength is 64, then:
		  if (bitLength === 64) {
		    // 1. Let upperBound be 2^53 − 1.
		    upperBound = Math.pow(2, 53) - 1;

		    // 2. If signedness is "unsigned", then let lowerBound be 0.
		    if (signedness === 'unsigned') {
		      lowerBound = 0;
		    } else {
		      // 3. Otherwise let lowerBound be −2^53 + 1.
		      lowerBound = Math.pow(-2, 53) + 1;
		    }
		  } else if (signedness === 'unsigned') {
		    // 2. Otherwise, if signedness is "unsigned", then:

		    // 1. Let lowerBound be 0.
		    lowerBound = 0;

		    // 2. Let upperBound be 2^bitLength − 1.
		    upperBound = Math.pow(2, bitLength) - 1;
		  } else {
		    // 3. Otherwise:

		    // 1. Let lowerBound be -2^bitLength − 1.
		    lowerBound = Math.pow(-2, bitLength) - 1;

		    // 2. Let upperBound be 2^bitLength − 1 − 1.
		    upperBound = Math.pow(2, bitLength - 1) - 1;
		  }

		  // 4. Let x be ? ToNumber(V).
		  let x = Number(V);

		  // 5. If x is −0, then set x to +0.
		  if (x === 0) {
		    x = 0;
		  }

		  // 6. If the conversion is to an IDL type associated
		  //    with the [EnforceRange] extended attribute, then:
		  if (opts.enforceRange === true) {
		    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
		    if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
		      throw webidl.errors.exception({
		        header: 'Integer conversion',
		        message: `Could not convert ${V} to an integer.`
		      });
		    }

		    // 2. Set x to IntegerPart(x).
		    x = webidl.util.IntegerPart(x);

		    // 3. If x < lowerBound or x > upperBound, then
		    //    throw a TypeError.
		    if (x < lowerBound || x > upperBound) {
		      throw webidl.errors.exception({
		        header: 'Integer conversion',
		        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
		      });
		    }

		    // 4. Return x.
		    return x;
		  }

		  // 7. If x is not NaN and the conversion is to an IDL
		  //    type associated with the [Clamp] extended
		  //    attribute, then:
		  if (!Number.isNaN(x) && opts.clamp === true) {
		    // 1. Set x to min(max(x, lowerBound), upperBound).
		    x = Math.min(Math.max(x, lowerBound), upperBound);

		    // 2. Round x to the nearest integer, choosing the
		    //    even integer if it lies halfway between two,
		    //    and choosing +0 rather than −0.
		    if (Math.floor(x) % 2 === 0) {
		      x = Math.floor(x);
		    } else {
		      x = Math.ceil(x);
		    }

		    // 3. Return x.
		    return x;
		  }

		  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
		  if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
		    return 0;
		  }

		  // 9. Set x to IntegerPart(x).
		  x = webidl.util.IntegerPart(x);

		  // 10. Set x to x modulo 2^bitLength.
		  x = x % Math.pow(2, bitLength);

		  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
		  //    then return x − 2^bitLength.
		  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
		    return x - Math.pow(2, bitLength);
		  }

		  // 12. Otherwise, return x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
		webidl.util.IntegerPart = function (n) {
		  // 1. Let r be floor(abs(n)).
		  const r = Math.floor(Math.abs(n));

		  // 2. If n < 0, then return -1 × r.
		  if (n < 0) {
		    return -1 * r;
		  }

		  // 3. Otherwise, return r.
		  return r;
		};

		// https://webidl.spec.whatwg.org/#es-sequence
		webidl.sequenceConverter = function (converter) {
		  return V => {
		    // 1. If Type(V) is not Object, throw a TypeError.
		    if (webidl.util.Type(V) !== 'Object') {
		      throw webidl.errors.exception({
		        header: 'Sequence',
		        message: `Value of type ${webidl.util.Type(V)} is not an Object.`
		      });
		    }

		    // 2. Let method be ? GetMethod(V, @@iterator).
		    /** @type {Generator} */
		    const method = V?.[Symbol.iterator]?.();
		    const seq = [];

		    // 3. If method is undefined, throw a TypeError.
		    if (method === undefined || typeof method.next !== 'function') {
		      throw webidl.errors.exception({
		        header: 'Sequence',
		        message: 'Object is not an iterator.'
		      });
		    }

		    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
		    while (true) {
		      const {
		        done,
		        value
		      } = method.next();
		      if (done) {
		        break;
		      }
		      seq.push(converter(value));
		    }
		    return seq;
		  };
		};

		// https://webidl.spec.whatwg.org/#es-to-record
		webidl.recordConverter = function (keyConverter, valueConverter) {
		  return O => {
		    // 1. If Type(O) is not Object, throw a TypeError.
		    if (webidl.util.Type(O) !== 'Object') {
		      throw webidl.errors.exception({
		        header: 'Record',
		        message: `Value of type ${webidl.util.Type(O)} is not an Object.`
		      });
		    }

		    // 2. Let result be a new empty instance of record<K, V>.
		    const result = {};
		    if (!types.isProxy(O)) {
		      // Object.keys only returns enumerable properties
		      const keys = Object.keys(O);
		      for (const key of keys) {
		        // 1. Let typedKey be key converted to an IDL value of type K.
		        const typedKey = keyConverter(key);

		        // 2. Let value be ? Get(O, key).
		        // 3. Let typedValue be value converted to an IDL value of type V.
		        const typedValue = valueConverter(O[key]);

		        // 4. Set result[typedKey] to typedValue.
		        result[typedKey] = typedValue;
		      }

		      // 5. Return result.
		      return result;
		    }

		    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
		    const keys = Reflect.ownKeys(O);

		    // 4. For each key of keys.
		    for (const key of keys) {
		      // 1. Let desc be ? O.[[GetOwnProperty]](key).
		      const desc = Reflect.getOwnPropertyDescriptor(O, key);

		      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
		      if (desc?.enumerable) {
		        // 1. Let typedKey be key converted to an IDL value of type K.
		        const typedKey = keyConverter(key);

		        // 2. Let value be ? Get(O, key).
		        // 3. Let typedValue be value converted to an IDL value of type V.
		        const typedValue = valueConverter(O[key]);

		        // 4. Set result[typedKey] to typedValue.
		        result[typedKey] = typedValue;
		      }
		    }

		    // 5. Return result.
		    return result;
		  };
		};
		webidl.interfaceConverter = function (i) {
		  return (V, opts = {}) => {
		    if (opts.strict !== false && !(V instanceof i)) {
		      throw webidl.errors.exception({
		        header: i.name,
		        message: `Expected ${V} to be an instance of ${i.name}.`
		      });
		    }
		    return V;
		  };
		};
		webidl.dictionaryConverter = function (converters) {
		  return dictionary => {
		    const type = webidl.util.Type(dictionary);
		    const dict = {};
		    if (type === 'Null' || type === 'Undefined') {
		      return dict;
		    } else if (type !== 'Object') {
		      throw webidl.errors.exception({
		        header: 'Dictionary',
		        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
		      });
		    }
		    for (const options of converters) {
		      const {
		        key,
		        defaultValue,
		        required,
		        converter
		      } = options;
		      if (required === true) {
		        if (!hasOwn(dictionary, key)) {
		          throw webidl.errors.exception({
		            header: 'Dictionary',
		            message: `Missing required key "${key}".`
		          });
		        }
		      }
		      let value = dictionary[key];
		      const hasDefault = hasOwn(options, 'defaultValue');

		      // Only use defaultValue if value is undefined and
		      // a defaultValue options was provided.
		      if (hasDefault && value !== null) {
		        value = value ?? defaultValue;
		      }

		      // A key can be optional and have no default value.
		      // When this happens, do not perform a conversion,
		      // and do not assign the key a value.
		      if (required || hasDefault || value !== undefined) {
		        value = converter(value);
		        if (options.allowedValues && !options.allowedValues.includes(value)) {
		          throw webidl.errors.exception({
		            header: 'Dictionary',
		            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
		          });
		        }
		        dict[key] = value;
		      }
		    }
		    return dict;
		  };
		};
		webidl.nullableConverter = function (converter) {
		  return V => {
		    if (V === null) {
		      return V;
		    }
		    return converter(V);
		  };
		};

		// https://webidl.spec.whatwg.org/#es-DOMString
		webidl.converters.DOMString = function (V, opts = {}) {
		  // 1. If V is null and the conversion is to an IDL type
		  //    associated with the [LegacyNullToEmptyString]
		  //    extended attribute, then return the DOMString value
		  //    that represents the empty string.
		  if (V === null && opts.legacyNullToEmptyString) {
		    return '';
		  }

		  // 2. Let x be ? ToString(V).
		  if (typeof V === 'symbol') {
		    throw new TypeError('Could not convert argument of type symbol to string.');
		  }

		  // 3. Return the IDL DOMString value that represents the
		  //    same sequence of code units as the one the
		  //    ECMAScript String value x represents.
		  return String(V);
		};

		// https://webidl.spec.whatwg.org/#es-ByteString
		webidl.converters.ByteString = function (V) {
		  // 1. Let x be ? ToString(V).
		  // Note: DOMString converter perform ? ToString(V)
		  const x = webidl.converters.DOMString(V);

		  // 2. If the value of any element of x is greater than
		  //    255, then throw a TypeError.
		  for (let index = 0; index < x.length; index++) {
		    if (x.charCodeAt(index) > 255) {
		      throw new TypeError('Cannot convert argument to a ByteString because the character at ' + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
		    }
		  }

		  // 3. Return an IDL ByteString value whose length is the
		  //    length of x, and where the value of each element is
		  //    the value of the corresponding element of x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#es-USVString
		webidl.converters.USVString = toUSVString;

		// https://webidl.spec.whatwg.org/#es-boolean
		webidl.converters.boolean = function (V) {
		  // 1. Let x be the result of computing ToBoolean(V).
		  const x = Boolean(V);

		  // 2. Return the IDL boolean value that is the one that represents
		  //    the same truth value as the ECMAScript Boolean value x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#es-any
		webidl.converters.any = function (V) {
		  return V;
		};

		// https://webidl.spec.whatwg.org/#es-long-long
		webidl.converters['long long'] = function (V) {
		  // 1. Let x be ? ConvertToInt(V, 64, "signed").
		  const x = webidl.util.ConvertToInt(V, 64, 'signed');

		  // 2. Return the IDL long long value that represents
		  //    the same numeric value as x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#es-unsigned-long-long
		webidl.converters['unsigned long long'] = function (V) {
		  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
		  const x = webidl.util.ConvertToInt(V, 64, 'unsigned');

		  // 2. Return the IDL unsigned long long value that
		  //    represents the same numeric value as x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#es-unsigned-long
		webidl.converters['unsigned long'] = function (V) {
		  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
		  const x = webidl.util.ConvertToInt(V, 32, 'unsigned');

		  // 2. Return the IDL unsigned long value that
		  //    represents the same numeric value as x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#es-unsigned-short
		webidl.converters['unsigned short'] = function (V, opts) {
		  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
		  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts);

		  // 2. Return the IDL unsigned short value that represents
		  //    the same numeric value as x.
		  return x;
		};

		// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
		webidl.converters.ArrayBuffer = function (V, opts = {}) {
		  // 1. If Type(V) is not Object, or V does not have an
		  //    [[ArrayBufferData]] internal slot, then throw a
		  //    TypeError.
		  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
		  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
		  if (webidl.util.Type(V) !== 'Object' || !types.isAnyArrayBuffer(V)) {
		    throw webidl.errors.conversionFailed({
		      prefix: `${V}`,
		      argument: `${V}`,
		      types: ['ArrayBuffer']
		    });
		  }

		  // 2. If the conversion is not to an IDL type associated
		  //    with the [AllowShared] extended attribute, and
		  //    IsSharedArrayBuffer(V) is true, then throw a
		  //    TypeError.
		  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
		    throw webidl.errors.exception({
		      header: 'ArrayBuffer',
		      message: 'SharedArrayBuffer is not allowed.'
		    });
		  }

		  // 3. If the conversion is not to an IDL type associated
		  //    with the [AllowResizable] extended attribute, and
		  //    IsResizableArrayBuffer(V) is true, then throw a
		  //    TypeError.
		  // Note: resizable ArrayBuffers are currently a proposal.

		  // 4. Return the IDL ArrayBuffer value that is a
		  //    reference to the same object as V.
		  return V;
		};
		webidl.converters.TypedArray = function (V, T, opts = {}) {
		  // 1. Let T be the IDL type V is being converted to.

		  // 2. If Type(V) is not Object, or V does not have a
		  //    [[TypedArrayName]] internal slot with a value
		  //    equal to T’s name, then throw a TypeError.
		  if (webidl.util.Type(V) !== 'Object' || !types.isTypedArray(V) || V.constructor.name !== T.name) {
		    throw webidl.errors.conversionFailed({
		      prefix: `${T.name}`,
		      argument: `${V}`,
		      types: [T.name]
		    });
		  }

		  // 3. If the conversion is not to an IDL type associated
		  //    with the [AllowShared] extended attribute, and
		  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
		  //    true, then throw a TypeError.
		  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
		    throw webidl.errors.exception({
		      header: 'ArrayBuffer',
		      message: 'SharedArrayBuffer is not allowed.'
		    });
		  }

		  // 4. If the conversion is not to an IDL type associated
		  //    with the [AllowResizable] extended attribute, and
		  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
		  //    true, then throw a TypeError.
		  // Note: resizable array buffers are currently a proposal

		  // 5. Return the IDL value of type T that is a reference
		  //    to the same object as V.
		  return V;
		};
		webidl.converters.DataView = function (V, opts = {}) {
		  // 1. If Type(V) is not Object, or V does not have a
		  //    [[DataView]] internal slot, then throw a TypeError.
		  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
		    throw webidl.errors.exception({
		      header: 'DataView',
		      message: 'Object is not a DataView.'
		    });
		  }

		  // 2. If the conversion is not to an IDL type associated
		  //    with the [AllowShared] extended attribute, and
		  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
		  //    then throw a TypeError.
		  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
		    throw webidl.errors.exception({
		      header: 'ArrayBuffer',
		      message: 'SharedArrayBuffer is not allowed.'
		    });
		  }

		  // 3. If the conversion is not to an IDL type associated
		  //    with the [AllowResizable] extended attribute, and
		  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
		  //    true, then throw a TypeError.
		  // Note: resizable ArrayBuffers are currently a proposal

		  // 4. Return the IDL DataView value that is a reference
		  //    to the same object as V.
		  return V;
		};

		// https://webidl.spec.whatwg.org/#BufferSource
		webidl.converters.BufferSource = function (V, opts = {}) {
		  if (types.isAnyArrayBuffer(V)) {
		    return webidl.converters.ArrayBuffer(V, opts);
		  }
		  if (types.isTypedArray(V)) {
		    return webidl.converters.TypedArray(V, V.constructor);
		  }
		  if (types.isDataView(V)) {
		    return webidl.converters.DataView(V, opts);
		  }
		  throw new TypeError(`Could not convert ${V} to a BufferSource.`);
		};
		webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(webidl.converters.ByteString);
		webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(webidl.converters['sequence<ByteString>']);
		webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);
		webidl_1 = {
		  webidl
		};
		return webidl_1;
	}

	var dataURL;
	var hasRequiredDataURL;

	function requireDataURL () {
		if (hasRequiredDataURL) return dataURL;
		hasRequiredDataURL = 1;
		const assert = require$$0__default$3["default"];
		const {
		  atob
		} = require$$0__default$4["default"];
		const {
		  isomorphicDecode
		} = requireUtil$5();
		const encoder = new TextEncoder();

		/**
		 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
		 */
		const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
		const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/; // eslint-disable-line
		/**
		 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
		 */
		const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/; // eslint-disable-line

		// https://fetch.spec.whatwg.org/#data-url-processor
		/** @param {URL} dataURL */
		function dataURLProcessor(dataURL) {
		  // 1. Assert: dataURL’s scheme is "data".
		  assert(dataURL.protocol === 'data:');

		  // 2. Let input be the result of running the URL
		  // serializer on dataURL with exclude fragment
		  // set to true.
		  let input = URLSerializer(dataURL, true);

		  // 3. Remove the leading "data:" string from input.
		  input = input.slice(5);

		  // 4. Let position point at the start of input.
		  const position = {
		    position: 0
		  };

		  // 5. Let mimeType be the result of collecting a
		  // sequence of code points that are not equal
		  // to U+002C (,), given position.
		  let mimeType = collectASequenceOfCodePointsFast(',', input, position);

		  // 6. Strip leading and trailing ASCII whitespace
		  // from mimeType.
		  // Undici implementation note: we need to store the
		  // length because if the mimetype has spaces removed,
		  // the wrong amount will be sliced from the input in
		  // step #9
		  const mimeTypeLength = mimeType.length;
		  mimeType = removeASCIIWhitespace(mimeType, true, true);

		  // 7. If position is past the end of input, then
		  // return failure
		  if (position.position >= input.length) {
		    return 'failure';
		  }

		  // 8. Advance position by 1.
		  position.position++;

		  // 9. Let encodedBody be the remainder of input.
		  const encodedBody = input.slice(mimeTypeLength + 1);

		  // 10. Let body be the percent-decoding of encodedBody.
		  let body = stringPercentDecode(encodedBody);

		  // 11. If mimeType ends with U+003B (;), followed by
		  // zero or more U+0020 SPACE, followed by an ASCII
		  // case-insensitive match for "base64", then:
		  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
		    // 1. Let stringBody be the isomorphic decode of body.
		    const stringBody = isomorphicDecode(body);

		    // 2. Set body to the forgiving-base64 decode of
		    // stringBody.
		    body = forgivingBase64(stringBody);

		    // 3. If body is failure, then return failure.
		    if (body === 'failure') {
		      return 'failure';
		    }

		    // 4. Remove the last 6 code points from mimeType.
		    mimeType = mimeType.slice(0, -6);

		    // 5. Remove trailing U+0020 SPACE code points from mimeType,
		    // if any.
		    mimeType = mimeType.replace(/(\u0020)+$/, '');

		    // 6. Remove the last U+003B (;) code point from mimeType.
		    mimeType = mimeType.slice(0, -1);
		  }

		  // 12. If mimeType starts with U+003B (;), then prepend
		  // "text/plain" to mimeType.
		  if (mimeType.startsWith(';')) {
		    mimeType = 'text/plain' + mimeType;
		  }

		  // 13. Let mimeTypeRecord be the result of parsing
		  // mimeType.
		  let mimeTypeRecord = parseMIMEType(mimeType);

		  // 14. If mimeTypeRecord is failure, then set
		  // mimeTypeRecord to text/plain;charset=US-ASCII.
		  if (mimeTypeRecord === 'failure') {
		    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII');
		  }

		  // 15. Return a new data: URL struct whose MIME
		  // type is mimeTypeRecord and body is body.
		  // https://fetch.spec.whatwg.org/#data-url-struct
		  return {
		    mimeType: mimeTypeRecord,
		    body
		  };
		}

		// https://url.spec.whatwg.org/#concept-url-serializer
		/**
		 * @param {URL} url
		 * @param {boolean} excludeFragment
		 */
		function URLSerializer(url, excludeFragment = false) {
		  if (!excludeFragment) {
		    return url.href;
		  }
		  const href = url.href;
		  const hashLength = url.hash.length;
		  return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
		}

		// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
		/**
		 * @param {(char: string) => boolean} condition
		 * @param {string} input
		 * @param {{ position: number }} position
		 */
		function collectASequenceOfCodePoints(condition, input, position) {
		  // 1. Let result be the empty string.
		  let result = '';

		  // 2. While position doesn’t point past the end of input and the
		  // code point at position within input meets the condition condition:
		  while (position.position < input.length && condition(input[position.position])) {
		    // 1. Append that code point to the end of result.
		    result += input[position.position];

		    // 2. Advance position by 1.
		    position.position++;
		  }

		  // 3. Return result.
		  return result;
		}

		/**
		 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
		 * @param {string} char
		 * @param {string} input
		 * @param {{ position: number }} position
		 */
		function collectASequenceOfCodePointsFast(char, input, position) {
		  const idx = input.indexOf(char, position.position);
		  const start = position.position;
		  if (idx === -1) {
		    position.position = input.length;
		    return input.slice(start);
		  }
		  position.position = idx;
		  return input.slice(start, position.position);
		}

		// https://url.spec.whatwg.org/#string-percent-decode
		/** @param {string} input */
		function stringPercentDecode(input) {
		  // 1. Let bytes be the UTF-8 encoding of input.
		  const bytes = encoder.encode(input);

		  // 2. Return the percent-decoding of bytes.
		  return percentDecode(bytes);
		}

		// https://url.spec.whatwg.org/#percent-decode
		/** @param {Uint8Array} input */
		function percentDecode(input) {
		  // 1. Let output be an empty byte sequence.
		  /** @type {number[]} */
		  const output = [];

		  // 2. For each byte byte in input:
		  for (let i = 0; i < input.length; i++) {
		    const byte = input[i];

		    // 1. If byte is not 0x25 (%), then append byte to output.
		    if (byte !== 0x25) {
		      output.push(byte);

		      // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
		      // after byte in input are not in the ranges
		      // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
		      // and 0x61 (a) to 0x66 (f), all inclusive, append byte
		      // to output.
		    } else if (byte === 0x25 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
		      output.push(0x25);

		      // 3. Otherwise:
		    } else {
		      // 1. Let bytePoint be the two bytes after byte in input,
		      // decoded, and then interpreted as hexadecimal number.
		      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
		      const bytePoint = Number.parseInt(nextTwoBytes, 16);

		      // 2. Append a byte whose value is bytePoint to output.
		      output.push(bytePoint);

		      // 3. Skip the next two bytes in input.
		      i += 2;
		    }
		  }

		  // 3. Return output.
		  return Uint8Array.from(output);
		}

		// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
		/** @param {string} input */
		function parseMIMEType(input) {
		  // 1. Remove any leading and trailing HTTP whitespace
		  // from input.
		  input = removeHTTPWhitespace(input, true, true);

		  // 2. Let position be a position variable for input,
		  // initially pointing at the start of input.
		  const position = {
		    position: 0
		  };

		  // 3. Let type be the result of collecting a sequence
		  // of code points that are not U+002F (/) from
		  // input, given position.
		  const type = collectASequenceOfCodePointsFast('/', input, position);

		  // 4. If type is the empty string or does not solely
		  // contain HTTP token code points, then return failure.
		  // https://mimesniff.spec.whatwg.org/#http-token-code-point
		  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
		    return 'failure';
		  }

		  // 5. If position is past the end of input, then return
		  // failure
		  if (position.position > input.length) {
		    return 'failure';
		  }

		  // 6. Advance position by 1. (This skips past U+002F (/).)
		  position.position++;

		  // 7. Let subtype be the result of collecting a sequence of
		  // code points that are not U+003B (;) from input, given
		  // position.
		  let subtype = collectASequenceOfCodePointsFast(';', input, position);

		  // 8. Remove any trailing HTTP whitespace from subtype.
		  subtype = removeHTTPWhitespace(subtype, false, true);

		  // 9. If subtype is the empty string or does not solely
		  // contain HTTP token code points, then return failure.
		  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
		    return 'failure';
		  }
		  const typeLowercase = type.toLowerCase();
		  const subtypeLowercase = subtype.toLowerCase();

		  // 10. Let mimeType be a new MIME type record whose type
		  // is type, in ASCII lowercase, and subtype is subtype,
		  // in ASCII lowercase.
		  // https://mimesniff.spec.whatwg.org/#mime-type
		  const mimeType = {
		    type: typeLowercase,
		    subtype: subtypeLowercase,
		    /** @type {Map<string, string>} */
		    parameters: new Map(),
		    // https://mimesniff.spec.whatwg.org/#mime-type-essence
		    essence: `${typeLowercase}/${subtypeLowercase}`
		  };

		  // 11. While position is not past the end of input:
		  while (position.position < input.length) {
		    // 1. Advance position by 1. (This skips past U+003B (;).)
		    position.position++;

		    // 2. Collect a sequence of code points that are HTTP
		    // whitespace from input given position.
		    collectASequenceOfCodePoints(
		    // https://fetch.spec.whatwg.org/#http-whitespace
		    char => HTTP_WHITESPACE_REGEX.test(char), input, position);

		    // 3. Let parameterName be the result of collecting a
		    // sequence of code points that are not U+003B (;)
		    // or U+003D (=) from input, given position.
		    let parameterName = collectASequenceOfCodePoints(char => char !== ';' && char !== '=', input, position);

		    // 4. Set parameterName to parameterName, in ASCII
		    // lowercase.
		    parameterName = parameterName.toLowerCase();

		    // 5. If position is not past the end of input, then:
		    if (position.position < input.length) {
		      // 1. If the code point at position within input is
		      // U+003B (;), then continue.
		      if (input[position.position] === ';') {
		        continue;
		      }

		      // 2. Advance position by 1. (This skips past U+003D (=).)
		      position.position++;
		    }

		    // 6. If position is past the end of input, then break.
		    if (position.position > input.length) {
		      break;
		    }

		    // 7. Let parameterValue be null.
		    let parameterValue = null;

		    // 8. If the code point at position within input is
		    // U+0022 ("), then:
		    if (input[position.position] === '"') {
		      // 1. Set parameterValue to the result of collecting
		      // an HTTP quoted string from input, given position
		      // and the extract-value flag.
		      parameterValue = collectAnHTTPQuotedString(input, position, true);

		      // 2. Collect a sequence of code points that are not
		      // U+003B (;) from input, given position.
		      collectASequenceOfCodePointsFast(';', input, position);

		      // 9. Otherwise:
		    } else {
		      // 1. Set parameterValue to the result of collecting
		      // a sequence of code points that are not U+003B (;)
		      // from input, given position.
		      parameterValue = collectASequenceOfCodePointsFast(';', input, position);

		      // 2. Remove any trailing HTTP whitespace from parameterValue.
		      parameterValue = removeHTTPWhitespace(parameterValue, false, true);

		      // 3. If parameterValue is the empty string, then continue.
		      if (parameterValue.length === 0) {
		        continue;
		      }
		    }

		    // 10. If all of the following are true
		    // - parameterName is not the empty string
		    // - parameterName solely contains HTTP token code points
		    // - parameterValue solely contains HTTP quoted-string token code points
		    // - mimeType’s parameters[parameterName] does not exist
		    // then set mimeType’s parameters[parameterName] to parameterValue.
		    if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
		      mimeType.parameters.set(parameterName, parameterValue);
		    }
		  }

		  // 12. Return mimeType.
		  return mimeType;
		}

		// https://infra.spec.whatwg.org/#forgiving-base64-decode
		/** @param {string} data */
		function forgivingBase64(data) {
		  // 1. Remove all ASCII whitespace from data.
		  data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, ''); // eslint-disable-line

		  // 2. If data’s code point length divides by 4 leaving
		  // no remainder, then:
		  if (data.length % 4 === 0) {
		    // 1. If data ends with one or two U+003D (=) code points,
		    // then remove them from data.
		    data = data.replace(/=?=$/, '');
		  }

		  // 3. If data’s code point length divides by 4 leaving
		  // a remainder of 1, then return failure.
		  if (data.length % 4 === 1) {
		    return 'failure';
		  }

		  // 4. If data contains a code point that is not one of
		  //  U+002B (+)
		  //  U+002F (/)
		  //  ASCII alphanumeric
		  // then return failure.
		  if (/[^+/0-9A-Za-z]/.test(data)) {
		    return 'failure';
		  }
		  const binary = atob(data);
		  const bytes = new Uint8Array(binary.length);
		  for (let byte = 0; byte < binary.length; byte++) {
		    bytes[byte] = binary.charCodeAt(byte);
		  }
		  return bytes;
		}

		// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
		// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
		/**
		 * @param {string} input
		 * @param {{ position: number }} position
		 * @param {boolean?} extractValue
		 */
		function collectAnHTTPQuotedString(input, position, extractValue) {
		  // 1. Let positionStart be position.
		  const positionStart = position.position;

		  // 2. Let value be the empty string.
		  let value = '';

		  // 3. Assert: the code point at position within input
		  // is U+0022 (").
		  assert(input[position.position] === '"');

		  // 4. Advance position by 1.
		  position.position++;

		  // 5. While true:
		  while (true) {
		    // 1. Append the result of collecting a sequence of code points
		    // that are not U+0022 (") or U+005C (\) from input, given
		    // position, to value.
		    value += collectASequenceOfCodePoints(char => char !== '"' && char !== '\\', input, position);

		    // 2. If position is past the end of input, then break.
		    if (position.position >= input.length) {
		      break;
		    }

		    // 3. Let quoteOrBackslash be the code point at position within
		    // input.
		    const quoteOrBackslash = input[position.position];

		    // 4. Advance position by 1.
		    position.position++;

		    // 5. If quoteOrBackslash is U+005C (\), then:
		    if (quoteOrBackslash === '\\') {
		      // 1. If position is past the end of input, then append
		      // U+005C (\) to value and break.
		      if (position.position >= input.length) {
		        value += '\\';
		        break;
		      }

		      // 2. Append the code point at position within input to value.
		      value += input[position.position];

		      // 3. Advance position by 1.
		      position.position++;

		      // 6. Otherwise:
		    } else {
		      // 1. Assert: quoteOrBackslash is U+0022 (").
		      assert(quoteOrBackslash === '"');

		      // 2. Break.
		      break;
		    }
		  }

		  // 6. If the extract-value flag is set, then return value.
		  if (extractValue) {
		    return value;
		  }

		  // 7. Return the code points from positionStart to position,
		  // inclusive, within input.
		  return input.slice(positionStart, position.position);
		}

		/**
		 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
		 */
		function serializeAMimeType(mimeType) {
		  assert(mimeType !== 'failure');
		  const {
		    parameters,
		    essence
		  } = mimeType;

		  // 1. Let serialization be the concatenation of mimeType’s
		  //    type, U+002F (/), and mimeType’s subtype.
		  let serialization = essence;

		  // 2. For each name → value of mimeType’s parameters:
		  for (let [name, value] of parameters.entries()) {
		    // 1. Append U+003B (;) to serialization.
		    serialization += ';';

		    // 2. Append name to serialization.
		    serialization += name;

		    // 3. Append U+003D (=) to serialization.
		    serialization += '=';

		    // 4. If value does not solely contain HTTP token code
		    //    points or value is the empty string, then:
		    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
		      // 1. Precede each occurence of U+0022 (") or
		      //    U+005C (\) in value with U+005C (\).
		      value = value.replace(/(\\|")/g, '\\$1');

		      // 2. Prepend U+0022 (") to value.
		      value = '"' + value;

		      // 3. Append U+0022 (") to value.
		      value += '"';
		    }

		    // 5. Append value to serialization.
		    serialization += value;
		  }

		  // 3. Return serialization.
		  return serialization;
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#http-whitespace
		 * @param {string} char
		 */
		function isHTTPWhiteSpace(char) {
		  return char === '\r' || char === '\n' || char === '\t' || char === ' ';
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#http-whitespace
		 * @param {string} str
		 */
		function removeHTTPWhitespace(str, leading = true, trailing = true) {
		  let lead = 0;
		  let trail = str.length - 1;
		  if (leading) {
		    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
		  }
		  if (trailing) {
		    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
		  }
		  return str.slice(lead, trail + 1);
		}

		/**
		 * @see https://infra.spec.whatwg.org/#ascii-whitespace
		 * @param {string} char
		 */
		function isASCIIWhitespace(char) {
		  return char === '\r' || char === '\n' || char === '\t' || char === '\f' || char === ' ';
		}

		/**
		 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
		 */
		function removeASCIIWhitespace(str, leading = true, trailing = true) {
		  let lead = 0;
		  let trail = str.length - 1;
		  if (leading) {
		    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
		  }
		  if (trailing) {
		    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
		  }
		  return str.slice(lead, trail + 1);
		}
		dataURL = {
		  dataURLProcessor,
		  URLSerializer,
		  collectASequenceOfCodePoints,
		  collectASequenceOfCodePointsFast,
		  stringPercentDecode,
		  parseMIMEType,
		  collectAnHTTPQuotedString,
		  serializeAMimeType
		};
		return dataURL;
	}

	var file;
	var hasRequiredFile;

	function requireFile () {
		if (hasRequiredFile) return file;
		hasRequiredFile = 1;

		const {
		  Blob,
		  File: NativeFile
		} = require$$0__default$4["default"];
		const {
		  types
		} = require$$1__default["default"];
		const {
		  kState
		} = requireSymbols$3();
		const {
		  isBlobLike
		} = requireUtil$5();
		const {
		  webidl
		} = requireWebidl();
		const {
		  parseMIMEType,
		  serializeAMimeType
		} = requireDataURL();
		const {
		  kEnumerableProperty
		} = requireUtil$6();
		const encoder = new TextEncoder();
		class File extends Blob {
		  constructor(fileBits, fileName, options = {}) {
		    // The File constructor is invoked with two or three parameters, depending
		    // on whether the optional dictionary parameter is used. When the File()
		    // constructor is invoked, user agents must run the following steps:
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'File constructor'
		    });
		    fileBits = webidl.converters['sequence<BlobPart>'](fileBits);
		    fileName = webidl.converters.USVString(fileName);
		    options = webidl.converters.FilePropertyBag(options);

		    // 1. Let bytes be the result of processing blob parts given fileBits and
		    // options.
		    // Note: Blob handles this for us

		    // 2. Let n be the fileName argument to the constructor.
		    const n = fileName;

		    // 3. Process FilePropertyBag dictionary argument by running the following
		    // substeps:

		    //    1. If the type member is provided and is not the empty string, let t
		    //    be set to the type dictionary member. If t contains any characters
		    //    outside the range U+0020 to U+007E, then set t to the empty string
		    //    and return from these substeps.
		    //    2. Convert every character in t to ASCII lowercase.
		    let t = options.type;
		    let d;

		    // eslint-disable-next-line no-labels
		    substep: {
		      if (t) {
		        t = parseMIMEType(t);
		        if (t === 'failure') {
		          t = '';
		          // eslint-disable-next-line no-labels
		          break substep;
		        }
		        t = serializeAMimeType(t).toLowerCase();
		      }

		      //    3. If the lastModified member is provided, let d be set to the
		      //    lastModified dictionary member. If it is not provided, set d to the
		      //    current date and time represented as the number of milliseconds since
		      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
		      d = options.lastModified;
		    }

		    // 4. Return a new File object F such that:
		    // F refers to the bytes byte sequence.
		    // F.size is set to the number of total bytes in bytes.
		    // F.name is set to n.
		    // F.type is set to t.
		    // F.lastModified is set to d.

		    super(processBlobParts(fileBits, options), {
		      type: t
		    });
		    this[kState] = {
		      name: n,
		      lastModified: d,
		      type: t
		    };
		  }
		  get name() {
		    webidl.brandCheck(this, File);
		    return this[kState].name;
		  }
		  get lastModified() {
		    webidl.brandCheck(this, File);
		    return this[kState].lastModified;
		  }
		  get type() {
		    webidl.brandCheck(this, File);
		    return this[kState].type;
		  }
		}
		class FileLike {
		  constructor(blobLike, fileName, options = {}) {
		    // TODO: argument idl type check

		    // The File constructor is invoked with two or three parameters, depending
		    // on whether the optional dictionary parameter is used. When the File()
		    // constructor is invoked, user agents must run the following steps:

		    // 1. Let bytes be the result of processing blob parts given fileBits and
		    // options.

		    // 2. Let n be the fileName argument to the constructor.
		    const n = fileName;

		    // 3. Process FilePropertyBag dictionary argument by running the following
		    // substeps:

		    //    1. If the type member is provided and is not the empty string, let t
		    //    be set to the type dictionary member. If t contains any characters
		    //    outside the range U+0020 to U+007E, then set t to the empty string
		    //    and return from these substeps.
		    //    TODO
		    const t = options.type;

		    //    2. Convert every character in t to ASCII lowercase.
		    //    TODO

		    //    3. If the lastModified member is provided, let d be set to the
		    //    lastModified dictionary member. If it is not provided, set d to the
		    //    current date and time represented as the number of milliseconds since
		    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
		    const d = options.lastModified ?? Date.now();

		    // 4. Return a new File object F such that:
		    // F refers to the bytes byte sequence.
		    // F.size is set to the number of total bytes in bytes.
		    // F.name is set to n.
		    // F.type is set to t.
		    // F.lastModified is set to d.

		    this[kState] = {
		      blobLike,
		      name: n,
		      type: t,
		      lastModified: d
		    };
		  }
		  stream(...args) {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.stream(...args);
		  }
		  arrayBuffer(...args) {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.arrayBuffer(...args);
		  }
		  slice(...args) {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.slice(...args);
		  }
		  text(...args) {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.text(...args);
		  }
		  get size() {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.size;
		  }
		  get type() {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].blobLike.type;
		  }
		  get name() {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].name;
		  }
		  get lastModified() {
		    webidl.brandCheck(this, FileLike);
		    return this[kState].lastModified;
		  }
		  get [Symbol.toStringTag]() {
		    return 'File';
		  }
		}
		Object.defineProperties(File.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'File',
		    configurable: true
		  },
		  name: kEnumerableProperty,
		  lastModified: kEnumerableProperty
		});
		webidl.converters.Blob = webidl.interfaceConverter(Blob);
		webidl.converters.BlobPart = function (V, opts) {
		  if (webidl.util.Type(V) === 'Object') {
		    if (isBlobLike(V)) {
		      return webidl.converters.Blob(V, {
		        strict: false
		      });
		    }
		    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
		      return webidl.converters.BufferSource(V, opts);
		    }
		  }
		  return webidl.converters.USVString(V, opts);
		};
		webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(webidl.converters.BlobPart);

		// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
		webidl.converters.FilePropertyBag = webidl.dictionaryConverter([{
		  key: 'lastModified',
		  converter: webidl.converters['long long'],
		  get defaultValue() {
		    return Date.now();
		  }
		}, {
		  key: 'type',
		  converter: webidl.converters.DOMString,
		  defaultValue: ''
		}, {
		  key: 'endings',
		  converter: value => {
		    value = webidl.converters.DOMString(value);
		    value = value.toLowerCase();
		    if (value !== 'native') {
		      value = 'transparent';
		    }
		    return value;
		  },
		  defaultValue: 'transparent'
		}]);

		/**
		 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
		 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
		 * @param {{ type: string, endings: string }} options
		 */
		function processBlobParts(parts, options) {
		  // 1. Let bytes be an empty sequence of bytes.
		  /** @type {NodeJS.TypedArray[]} */
		  const bytes = [];

		  // 2. For each element in parts:
		  for (const element of parts) {
		    // 1. If element is a USVString, run the following substeps:
		    if (typeof element === 'string') {
		      // 1. Let s be element.
		      let s = element;

		      // 2. If the endings member of options is "native", set s
		      //    to the result of converting line endings to native
		      //    of element.
		      if (options.endings === 'native') {
		        s = convertLineEndingsNative(s);
		      }

		      // 3. Append the result of UTF-8 encoding s to bytes.
		      bytes.push(encoder.encode(s));
		    } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
		      // 2. If element is a BufferSource, get a copy of the
		      //    bytes held by the buffer source, and append those
		      //    bytes to bytes.
		      if (!element.buffer) {
		        // ArrayBuffer
		        bytes.push(new Uint8Array(element));
		      } else {
		        bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
		      }
		    } else if (isBlobLike(element)) {
		      // 3. If element is a Blob, append the bytes it represents
		      //    to bytes.
		      bytes.push(element);
		    }
		  }

		  // 3. Return bytes.
		  return bytes;
		}

		/**
		 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
		 * @param {string} s
		 */
		function convertLineEndingsNative(s) {
		  // 1. Let native line ending be be the code point U+000A LF.
		  let nativeLineEnding = '\n';

		  // 2. If the underlying platform’s conventions are to
		  //    represent newlines as a carriage return and line feed
		  //    sequence, set native line ending to the code point
		  //    U+000D CR followed by the code point U+000A LF.
		  if (process.platform === 'win32') {
		    nativeLineEnding = '\r\n';
		  }
		  return s.replace(/\r?\n/g, nativeLineEnding);
		}

		// If this function is moved to ./util.js, some tools (such as
		// rollup) will warn about circular dependencies. See:
		// https://github.com/nodejs/undici/issues/1629
		function isFileLike(object) {
		  return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';
		}
		file = {
		  File,
		  FileLike,
		  isFileLike
		};
		return file;
	}

	var formdata;
	var hasRequiredFormdata;

	function requireFormdata () {
		if (hasRequiredFormdata) return formdata;
		hasRequiredFormdata = 1;

		const {
		  isBlobLike,
		  toUSVString,
		  makeIterator
		} = requireUtil$5();
		const {
		  kState
		} = requireSymbols$3();
		const {
		  File: UndiciFile,
		  FileLike,
		  isFileLike
		} = requireFile();
		const {
		  webidl
		} = requireWebidl();
		const {
		  Blob,
		  File: NativeFile
		} = require$$0__default$4["default"];

		/** @type {globalThis['File']} */
		const File = NativeFile ?? UndiciFile;

		// https://xhr.spec.whatwg.org/#formdata
		class FormData {
		  constructor(form) {
		    if (form !== undefined) {
		      throw webidl.errors.conversionFailed({
		        prefix: 'FormData constructor',
		        argument: 'Argument 1',
		        types: ['undefined']
		      });
		    }
		    this[kState] = [];
		  }
		  append(name, value, filename = undefined) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'FormData.append'
		    });
		    if (arguments.length === 3 && !isBlobLike(value)) {
		      throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
		    }

		    // 1. Let value be value if given; otherwise blobValue.

		    name = webidl.converters.USVString(name);
		    value = isBlobLike(value) ? webidl.converters.Blob(value, {
		      strict: false
		    }) : webidl.converters.USVString(value);
		    filename = arguments.length === 3 ? webidl.converters.USVString(filename) : undefined;

		    // 2. Let entry be the result of creating an entry with
		    // name, value, and filename if given.
		    const entry = makeEntry(name, value, filename);

		    // 3. Append entry to this’s entry list.
		    this[kState].push(entry);
		  }
		  delete(name) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FormData.delete'
		    });
		    name = webidl.converters.USVString(name);

		    // The delete(name) method steps are to remove all entries whose name
		    // is name from this’s entry list.
		    this[kState] = this[kState].filter(entry => entry.name !== name);
		  }
		  get(name) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FormData.get'
		    });
		    name = webidl.converters.USVString(name);

		    // 1. If there is no entry whose name is name in this’s entry list,
		    // then return null.
		    const idx = this[kState].findIndex(entry => entry.name === name);
		    if (idx === -1) {
		      return null;
		    }

		    // 2. Return the value of the first entry whose name is name from
		    // this’s entry list.
		    return this[kState][idx].value;
		  }
		  getAll(name) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FormData.getAll'
		    });
		    name = webidl.converters.USVString(name);

		    // 1. If there is no entry whose name is name in this’s entry list,
		    // then return the empty list.
		    // 2. Return the values of all entries whose name is name, in order,
		    // from this’s entry list.
		    return this[kState].filter(entry => entry.name === name).map(entry => entry.value);
		  }
		  has(name) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FormData.has'
		    });
		    name = webidl.converters.USVString(name);

		    // The has(name) method steps are to return true if there is an entry
		    // whose name is name in this’s entry list; otherwise false.
		    return this[kState].findIndex(entry => entry.name === name) !== -1;
		  }
		  set(name, value, filename = undefined) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'FormData.set'
		    });
		    if (arguments.length === 3 && !isBlobLike(value)) {
		      throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
		    }

		    // The set(name, value) and set(name, blobValue, filename) method steps
		    // are:

		    // 1. Let value be value if given; otherwise blobValue.

		    name = webidl.converters.USVString(name);
		    value = isBlobLike(value) ? webidl.converters.Blob(value, {
		      strict: false
		    }) : webidl.converters.USVString(value);
		    filename = arguments.length === 3 ? toUSVString(filename) : undefined;

		    // 2. Let entry be the result of creating an entry with name, value, and
		    // filename if given.
		    const entry = makeEntry(name, value, filename);

		    // 3. If there are entries in this’s entry list whose name is name, then
		    // replace the first such entry with entry and remove the others.
		    const idx = this[kState].findIndex(entry => entry.name === name);
		    if (idx !== -1) {
		      this[kState] = [...this[kState].slice(0, idx), entry, ...this[kState].slice(idx + 1).filter(entry => entry.name !== name)];
		    } else {
		      // 4. Otherwise, append entry to this’s entry list.
		      this[kState].push(entry);
		    }
		  }
		  entries() {
		    webidl.brandCheck(this, FormData);
		    return makeIterator(() => this[kState].map(pair => [pair.name, pair.value]), 'FormData', 'key+value');
		  }
		  keys() {
		    webidl.brandCheck(this, FormData);
		    return makeIterator(() => this[kState].map(pair => [pair.name, pair.value]), 'FormData', 'key');
		  }
		  values() {
		    webidl.brandCheck(this, FormData);
		    return makeIterator(() => this[kState].map(pair => [pair.name, pair.value]), 'FormData', 'value');
		  }

		  /**
		   * @param {(value: string, key: string, self: FormData) => void} callbackFn
		   * @param {unknown} thisArg
		   */
		  forEach(callbackFn, thisArg = globalThis) {
		    webidl.brandCheck(this, FormData);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FormData.forEach'
		    });
		    if (typeof callbackFn !== 'function') {
		      throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
		    }
		    for (const [key, value] of this) {
		      callbackFn.apply(thisArg, [value, key, this]);
		    }
		  }
		}
		FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
		Object.defineProperties(FormData.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'FormData',
		    configurable: true
		  }
		});

		/**
		 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
		 * @param {string} name
		 * @param {string|Blob} value
		 * @param {?string} filename
		 * @returns
		 */
		function makeEntry(name, value, filename) {
		  // 1. Set name to the result of converting name into a scalar value string.
		  // "To convert a string into a scalar value string, replace any surrogates
		  //  with U+FFFD."
		  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
		  name = Buffer.from(name).toString('utf8');

		  // 2. If value is a string, then set value to the result of converting
		  //    value into a scalar value string.
		  if (typeof value === 'string') {
		    value = Buffer.from(value).toString('utf8');
		  } else {
		    // 3. Otherwise:

		    // 1. If value is not a File object, then set value to a new File object,
		    //    representing the same bytes, whose name attribute value is "blob"
		    if (!isFileLike(value)) {
		      value = value instanceof Blob ? new File([value], 'blob', {
		        type: value.type
		      }) : new FileLike(value, 'blob', {
		        type: value.type
		      });
		    }

		    // 2. If filename is given, then set value to a new File object,
		    //    representing the same bytes, whose name attribute is filename.
		    if (filename !== undefined) {
		      /** @type {FilePropertyBag} */
		      const options = {
		        type: value.type,
		        lastModified: value.lastModified
		      };
		      value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([value], filename, options) : new FileLike(value, filename, options);
		    }
		  }

		  // 4. Return an entry whose name is name and whose value is value.
		  return {
		    name,
		    value
		  };
		}
		formdata = {
		  FormData
		};
		return formdata;
	}

	var body;
	var hasRequiredBody;

	function requireBody () {
		if (hasRequiredBody) return body;
		hasRequiredBody = 1;

		const Busboy = requireMain();
		const util = requireUtil$6();
		const {
		  ReadableStreamFrom,
		  isBlobLike,
		  isReadableStreamLike,
		  readableStreamClose,
		  createDeferredPromise,
		  fullyReadBody
		} = requireUtil$5();
		const {
		  FormData
		} = requireFormdata();
		const {
		  kState
		} = requireSymbols$3();
		const {
		  webidl
		} = requireWebidl();
		const {
		  DOMException,
		  structuredClone
		} = requireConstants$3();
		const {
		  Blob,
		  File: NativeFile
		} = require$$0__default$4["default"];
		const {
		  kBodyUsed
		} = requireSymbols$4();
		const assert = require$$0__default$3["default"];
		const {
		  isErrored
		} = requireUtil$6();
		const {
		  isUint8Array,
		  isArrayBuffer
		} = require$$5__default["default"];
		const {
		  File: UndiciFile
		} = requireFile();
		const {
		  parseMIMEType,
		  serializeAMimeType
		} = requireDataURL();
		let ReadableStream = globalThis.ReadableStream;

		/** @type {globalThis['File']} */
		const File = NativeFile ?? UndiciFile;
		const textEncoder = new TextEncoder();
		const textDecoder = new TextDecoder();

		// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
		function extractBody(object, keepalive = false) {
		  if (!ReadableStream) {
		    ReadableStream = require$$13__default["default"].ReadableStream;
		  }

		  // 1. Let stream be null.
		  let stream = null;

		  // 2. If object is a ReadableStream object, then set stream to object.
		  if (object instanceof ReadableStream) {
		    stream = object;
		  } else if (isBlobLike(object)) {
		    // 3. Otherwise, if object is a Blob object, set stream to the
		    //    result of running object’s get stream.
		    stream = object.stream();
		  } else {
		    // 4. Otherwise, set stream to a new ReadableStream object, and set
		    //    up stream.
		    stream = new ReadableStream({
		      async pull(controller) {
		        controller.enqueue(typeof source === 'string' ? textEncoder.encode(source) : source);
		        queueMicrotask(() => readableStreamClose(controller));
		      },
		      start() {},
		      type: undefined
		    });
		  }

		  // 5. Assert: stream is a ReadableStream object.
		  assert(isReadableStreamLike(stream));

		  // 6. Let action be null.
		  let action = null;

		  // 7. Let source be null.
		  let source = null;

		  // 8. Let length be null.
		  let length = null;

		  // 9. Let type be null.
		  let type = null;

		  // 10. Switch on object:
		  if (typeof object === 'string') {
		    // Set source to the UTF-8 encoding of object.
		    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
		    source = object;

		    // Set type to `text/plain;charset=UTF-8`.
		    type = 'text/plain;charset=UTF-8';
		  } else if (object instanceof URLSearchParams) {
		    // URLSearchParams

		    // spec says to run application/x-www-form-urlencoded on body.list
		    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
		    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
		    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

		    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
		    source = object.toString();

		    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
		    type = 'application/x-www-form-urlencoded;charset=UTF-8';
		  } else if (isArrayBuffer(object)) {
		    // BufferSource/ArrayBuffer

		    // Set source to a copy of the bytes held by object.
		    source = new Uint8Array(object.slice());
		  } else if (ArrayBuffer.isView(object)) {
		    // BufferSource/ArrayBufferView

		    // Set source to a copy of the bytes held by object.
		    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
		  } else if (util.isFormDataLike(object)) {
		    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;
		    const prefix = `--${boundary}\r\nContent-Disposition: form-data`;

		    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
		    const escape = str => str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22');
		    const normalizeLinefeeds = value => value.replace(/\r?\n|\r/g, '\r\n');

		    // Set action to this step: run the multipart/form-data
		    // encoding algorithm, with object’s entry list and UTF-8.
		    // - This ensures that the body is immutable and can't be changed afterwords
		    // - That the content-length is calculated in advance.
		    // - And that all parts are pre-encoded and ready to be sent.

		    const blobParts = [];
		    const rn = new Uint8Array([13, 10]); // '\r\n'
		    length = 0;
		    let hasUnknownSizeValue = false;
		    for (const [name, value] of object) {
		      if (typeof value === 'string') {
		        const chunk = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
		        blobParts.push(chunk);
		        length += chunk.byteLength;
		      } else {
		        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' + `Content-Type: ${value.type || 'application/octet-stream'}\r\n\r\n`);
		        blobParts.push(chunk, value, rn);
		        if (typeof value.size === 'number') {
		          length += chunk.byteLength + value.size + rn.byteLength;
		        } else {
		          hasUnknownSizeValue = true;
		        }
		      }
		    }
		    const chunk = textEncoder.encode(`--${boundary}--`);
		    blobParts.push(chunk);
		    length += chunk.byteLength;
		    if (hasUnknownSizeValue) {
		      length = null;
		    }

		    // Set source to object.
		    source = object;
		    action = async function* () {
		      for (const part of blobParts) {
		        if (part.stream) {
		          yield* part.stream();
		        } else {
		          yield part;
		        }
		      }
		    };

		    // Set type to `multipart/form-data; boundary=`,
		    // followed by the multipart/form-data boundary string generated
		    // by the multipart/form-data encoding algorithm.
		    type = 'multipart/form-data; boundary=' + boundary;
		  } else if (isBlobLike(object)) {
		    // Blob

		    // Set source to object.
		    source = object;

		    // Set length to object’s size.
		    length = object.size;

		    // If object’s type attribute is not the empty byte sequence, set
		    // type to its value.
		    if (object.type) {
		      type = object.type;
		    }
		  } else if (typeof object[Symbol.asyncIterator] === 'function') {
		    // If keepalive is true, then throw a TypeError.
		    if (keepalive) {
		      throw new TypeError('keepalive');
		    }

		    // If object is disturbed or locked, then throw a TypeError.
		    if (util.isDisturbed(object) || object.locked) {
		      throw new TypeError('Response body object should not be disturbed or locked');
		    }
		    stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);
		  }

		  // 11. If source is a byte sequence, then set action to a
		  // step that returns source and length to source’s length.
		  if (typeof source === 'string' || util.isBuffer(source)) {
		    length = Buffer.byteLength(source);
		  }

		  // 12. If action is non-null, then run these steps in in parallel:
		  if (action != null) {
		    // Run action.
		    let iterator;
		    stream = new ReadableStream({
		      async start() {
		        iterator = action(object)[Symbol.asyncIterator]();
		      },
		      async pull(controller) {
		        const {
		          value,
		          done
		        } = await iterator.next();
		        if (done) {
		          // When running action is done, close stream.
		          queueMicrotask(() => {
		            controller.close();
		          });
		        } else {
		          // Whenever one or more bytes are available and stream is not errored,
		          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
		          // bytes into stream.
		          if (!isErrored(stream)) {
		            controller.enqueue(new Uint8Array(value));
		          }
		        }
		        return controller.desiredSize > 0;
		      },
		      async cancel(reason) {
		        await iterator.return();
		      },
		      type: undefined
		    });
		  }

		  // 13. Let body be a body whose stream is stream, source is source,
		  // and length is length.
		  const body = {
		    stream,
		    source,
		    length
		  };

		  // 14. Return (body, type).
		  return [body, type];
		}

		// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
		function safelyExtractBody(object, keepalive = false) {
		  if (!ReadableStream) {
		    // istanbul ignore next
		    ReadableStream = require$$13__default["default"].ReadableStream;
		  }

		  // To safely extract a body and a `Content-Type` value from
		  // a byte sequence or BodyInit object object, run these steps:

		  // 1. If object is a ReadableStream object, then:
		  if (object instanceof ReadableStream) {
		    // Assert: object is neither disturbed nor locked.
		    // istanbul ignore next
		    assert(!util.isDisturbed(object), 'The body has already been consumed.');
		    // istanbul ignore next
		    assert(!object.locked, 'The stream is locked.');
		  }

		  // 2. Return the results of extracting object.
		  return extractBody(object, keepalive);
		}
		function cloneBody(body) {
		  // To clone a body body, run these steps:

		  // https://fetch.spec.whatwg.org/#concept-body-clone

		  // 1. Let « out1, out2 » be the result of teeing body’s stream.
		  const [out1, out2] = body.stream.tee();
		  const out2Clone = structuredClone(out2, {
		    transfer: [out2]
		  });
		  // This, for whatever reasons, unrefs out2Clone which allows
		  // the process to exit by itself.
		  const [, finalClone] = out2Clone.tee();

		  // 2. Set body’s stream to out1.
		  body.stream = out1;

		  // 3. Return a body whose stream is out2 and other members are copied from body.
		  return {
		    stream: finalClone,
		    length: body.length,
		    source: body.source
		  };
		}
		async function* consumeBody(body) {
		  if (body) {
		    if (isUint8Array(body)) {
		      yield body;
		    } else {
		      const stream = body.stream;
		      if (util.isDisturbed(stream)) {
		        throw new TypeError('The body has already been consumed.');
		      }
		      if (stream.locked) {
		        throw new TypeError('The stream is locked.');
		      }

		      // Compat.
		      stream[kBodyUsed] = true;
		      yield* stream;
		    }
		  }
		}
		function throwIfAborted(state) {
		  if (state.aborted) {
		    throw new DOMException('The operation was aborted.', 'AbortError');
		  }
		}
		function bodyMixinMethods(instance) {
		  const methods = {
		    blob() {
		      // The blob() method steps are to return the result of
		      // running consume body with this and the following step
		      // given a byte sequence bytes: return a Blob whose
		      // contents are bytes and whose type attribute is this’s
		      // MIME type.
		      return specConsumeBody(this, bytes => {
		        let mimeType = bodyMimeType(this);
		        if (mimeType === 'failure') {
		          mimeType = '';
		        } else if (mimeType) {
		          mimeType = serializeAMimeType(mimeType);
		        }

		        // Return a Blob whose contents are bytes and type attribute
		        // is mimeType.
		        return new Blob([bytes], {
		          type: mimeType
		        });
		      }, instance);
		    },
		    arrayBuffer() {
		      // The arrayBuffer() method steps are to return the result
		      // of running consume body with this and the following step
		      // given a byte sequence bytes: return a new ArrayBuffer
		      // whose contents are bytes.
		      return specConsumeBody(this, bytes => {
		        return new Uint8Array(bytes).buffer;
		      }, instance);
		    },
		    text() {
		      // The text() method steps are to return the result of running
		      // consume body with this and UTF-8 decode.
		      return specConsumeBody(this, utf8DecodeBytes, instance);
		    },
		    json() {
		      // The json() method steps are to return the result of running
		      // consume body with this and parse JSON from bytes.
		      return specConsumeBody(this, parseJSONFromBytes, instance);
		    },
		    async formData() {
		      webidl.brandCheck(this, instance);
		      throwIfAborted(this[kState]);
		      const contentType = this.headers.get('Content-Type');

		      // If mimeType’s essence is "multipart/form-data", then:
		      if (/multipart\/form-data/.test(contentType)) {
		        const headers = {};
		        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
		        const responseFormData = new FormData();
		        let busboy;
		        try {
		          busboy = new Busboy({
		            headers,
		            preservePath: true
		          });
		        } catch (err) {
		          throw new DOMException(`${err}`, 'AbortError');
		        }
		        busboy.on('field', (name, value) => {
		          responseFormData.append(name, value);
		        });
		        busboy.on('file', (name, value, filename, encoding, mimeType) => {
		          const chunks = [];
		          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {
		            let base64chunk = '';
		            value.on('data', chunk => {
		              base64chunk += chunk.toString().replace(/[\r\n]/gm, '');
		              const end = base64chunk.length - base64chunk.length % 4;
		              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'));
		              base64chunk = base64chunk.slice(end);
		            });
		            value.on('end', () => {
		              chunks.push(Buffer.from(base64chunk, 'base64'));
		              responseFormData.append(name, new File(chunks, filename, {
		                type: mimeType
		              }));
		            });
		          } else {
		            value.on('data', chunk => {
		              chunks.push(chunk);
		            });
		            value.on('end', () => {
		              responseFormData.append(name, new File(chunks, filename, {
		                type: mimeType
		              }));
		            });
		          }
		        });
		        const busboyResolve = new Promise((resolve, reject) => {
		          busboy.on('finish', resolve);
		          busboy.on('error', err => reject(new TypeError(err)));
		        });
		        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk);
		        busboy.end();
		        await busboyResolve;
		        return responseFormData;
		      } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
		        // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

		        // 1. Let entries be the result of parsing bytes.
		        let entries;
		        try {
		          let text = '';
		          // application/x-www-form-urlencoded parser will keep the BOM.
		          // https://url.spec.whatwg.org/#concept-urlencoded-parser
		          // Note that streaming decoder is stateful and cannot be reused
		          const streamingDecoder = new TextDecoder('utf-8', {
		            ignoreBOM: true
		          });
		          for await (const chunk of consumeBody(this[kState].body)) {
		            if (!isUint8Array(chunk)) {
		              throw new TypeError('Expected Uint8Array chunk');
		            }
		            text += streamingDecoder.decode(chunk, {
		              stream: true
		            });
		          }
		          text += streamingDecoder.decode();
		          entries = new URLSearchParams(text);
		        } catch (err) {
		          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
		          // 2. If entries is failure, then throw a TypeError.
		          throw Object.assign(new TypeError(), {
		            cause: err
		          });
		        }

		        // 3. Return a new FormData object whose entries are entries.
		        const formData = new FormData();
		        for (const [name, value] of entries) {
		          formData.append(name, value);
		        }
		        return formData;
		      } else {
		        // Wait a tick before checking if the request has been aborted.
		        // Otherwise, a TypeError can be thrown when an AbortError should.
		        await Promise.resolve();
		        throwIfAborted(this[kState]);

		        // Otherwise, throw a TypeError.
		        throw webidl.errors.exception({
		          header: `${instance.name}.formData`,
		          message: 'Could not parse content as FormData.'
		        });
		      }
		    }
		  };
		  return methods;
		}
		function mixinBody(prototype) {
		  Object.assign(prototype.prototype, bodyMixinMethods(prototype));
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
		 * @param {Response|Request} object
		 * @param {(value: unknown) => unknown} convertBytesToJSValue
		 * @param {Response|Request} instance
		 */
		async function specConsumeBody(object, convertBytesToJSValue, instance) {
		  webidl.brandCheck(object, instance);
		  throwIfAborted(object[kState]);

		  // 1. If object is unusable, then return a promise rejected
		  //    with a TypeError.
		  if (bodyUnusable(object[kState].body)) {
		    throw new TypeError('Body is unusable');
		  }

		  // 2. Let promise be a new promise.
		  const promise = createDeferredPromise();

		  // 3. Let errorSteps given error be to reject promise with error.
		  const errorSteps = error => promise.reject(error);

		  // 4. Let successSteps given a byte sequence data be to resolve
		  //    promise with the result of running convertBytesToJSValue
		  //    with data. If that threw an exception, then run errorSteps
		  //    with that exception.
		  const successSteps = data => {
		    try {
		      promise.resolve(convertBytesToJSValue(data));
		    } catch (e) {
		      errorSteps(e);
		    }
		  };

		  // 5. If object’s body is null, then run successSteps with an
		  //    empty byte sequence.
		  if (object[kState].body == null) {
		    successSteps(new Uint8Array());
		    return promise.promise;
		  }

		  // 6. Otherwise, fully read object’s body given successSteps,
		  //    errorSteps, and object’s relevant global object.
		  await fullyReadBody(object[kState].body, successSteps, errorSteps);

		  // 7. Return promise.
		  return promise.promise;
		}

		// https://fetch.spec.whatwg.org/#body-unusable
		function bodyUnusable(body) {
		  // An object including the Body interface mixin is
		  // said to be unusable if its body is non-null and
		  // its body’s stream is disturbed or locked.
		  return body != null && (body.stream.locked || util.isDisturbed(body.stream));
		}

		/**
		 * @see https://encoding.spec.whatwg.org/#utf-8-decode
		 * @param {Buffer} buffer
		 */
		function utf8DecodeBytes(buffer) {
		  if (buffer.length === 0) {
		    return '';
		  }

		  // 1. Let buffer be the result of peeking three bytes from
		  //    ioQueue, converted to a byte sequence.

		  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
		  //    bytes from ioQueue. (Do nothing with those bytes.)
		  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
		    buffer = buffer.subarray(3);
		  }

		  // 3. Process a queue with an instance of UTF-8’s
		  //    decoder, ioQueue, output, and "replacement".
		  const output = textDecoder.decode(buffer);

		  // 4. Return output.
		  return output;
		}

		/**
		 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
		 * @param {Uint8Array} bytes
		 */
		function parseJSONFromBytes(bytes) {
		  return JSON.parse(utf8DecodeBytes(bytes));
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
		 * @param {import('./response').Response|import('./request').Request} object
		 */
		function bodyMimeType(object) {
		  const {
		    headersList
		  } = object[kState];
		  const contentType = headersList.get('content-type');
		  if (contentType === null) {
		    return 'failure';
		  }
		  return parseMIMEType(contentType);
		}
		body = {
		  extractBody,
		  safelyExtractBody,
		  cloneBody,
		  mixinBody
		};
		return body;
	}

	var request$1;
	var hasRequiredRequest$1;

	function requireRequest$1 () {
		if (hasRequiredRequest$1) return request$1;
		hasRequiredRequest$1 = 1;

		const {
		  InvalidArgumentError,
		  NotSupportedError
		} = requireErrors();
		const assert = require$$0__default$3["default"];
		const {
		  kHTTP2BuildRequest,
		  kHTTP2CopyHeaders,
		  kHTTP1BuildRequest
		} = requireSymbols$4();
		const util = requireUtil$6();

		// tokenRegExp and headerCharRegex have been lifted from
		// https://github.com/nodejs/node/blob/main/lib/_http_common.js

		/**
		 * Verifies that the given val is a valid HTTP token
		 * per the rules defined in RFC 7230
		 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
		 */
		const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;

		/**
		 * Matches if val contains an invalid field-vchar
		 *  field-value    = *( field-content / obs-fold )
		 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
		 *  field-vchar    = VCHAR / obs-text
		 */
		const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

		// Verifies that a given path is valid does not contain control chars \x00 to \x20
		const invalidPathRegex = /[^\u0021-\u00ff]/;
		const kHandler = Symbol('handler');
		const channels = {};
		let extractBody;
		try {
		  const diagnosticsChannel = require('diagnostics_channel');
		  channels.create = diagnosticsChannel.channel('undici:request:create');
		  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent');
		  channels.headers = diagnosticsChannel.channel('undici:request:headers');
		  channels.trailers = diagnosticsChannel.channel('undici:request:trailers');
		  channels.error = diagnosticsChannel.channel('undici:request:error');
		} catch {
		  channels.create = {
		    hasSubscribers: false
		  };
		  channels.bodySent = {
		    hasSubscribers: false
		  };
		  channels.headers = {
		    hasSubscribers: false
		  };
		  channels.trailers = {
		    hasSubscribers: false
		  };
		  channels.error = {
		    hasSubscribers: false
		  };
		}
		class Request {
		  constructor(origin, {
		    path,
		    method,
		    body,
		    headers,
		    query,
		    idempotent,
		    blocking,
		    upgrade,
		    headersTimeout,
		    bodyTimeout,
		    reset,
		    throwOnError,
		    expectContinue
		  }, handler) {
		    if (typeof path !== 'string') {
		      throw new InvalidArgumentError('path must be a string');
		    } else if (path[0] !== '/' && !(path.startsWith('http://') || path.startsWith('https://')) && method !== 'CONNECT') {
		      throw new InvalidArgumentError('path must be an absolute URL or start with a slash');
		    } else if (invalidPathRegex.exec(path) !== null) {
		      throw new InvalidArgumentError('invalid request path');
		    }
		    if (typeof method !== 'string') {
		      throw new InvalidArgumentError('method must be a string');
		    } else if (tokenRegExp.exec(method) === null) {
		      throw new InvalidArgumentError('invalid request method');
		    }
		    if (upgrade && typeof upgrade !== 'string') {
		      throw new InvalidArgumentError('upgrade must be a string');
		    }
		    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
		      throw new InvalidArgumentError('invalid headersTimeout');
		    }
		    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
		      throw new InvalidArgumentError('invalid bodyTimeout');
		    }
		    if (reset != null && typeof reset !== 'boolean') {
		      throw new InvalidArgumentError('invalid reset');
		    }
		    if (expectContinue != null && typeof expectContinue !== 'boolean') {
		      throw new InvalidArgumentError('invalid expectContinue');
		    }
		    this.headersTimeout = headersTimeout;
		    this.bodyTimeout = bodyTimeout;
		    this.throwOnError = throwOnError === true;
		    this.method = method;
		    this.abort = null;
		    if (body == null) {
		      this.body = null;
		    } else if (util.isStream(body)) {
		      this.body = body;
		      const rState = this.body._readableState;
		      if (!rState || !rState.autoDestroy) {
		        this.endHandler = function autoDestroy() {
		          util.destroy(this);
		        };
		        this.body.on('end', this.endHandler);
		      }
		      this.errorHandler = err => {
		        if (this.abort) {
		          this.abort(err);
		        } else {
		          this.error = err;
		        }
		      };
		      this.body.on('error', this.errorHandler);
		    } else if (util.isBuffer(body)) {
		      this.body = body.byteLength ? body : null;
		    } else if (ArrayBuffer.isView(body)) {
		      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
		    } else if (body instanceof ArrayBuffer) {
		      this.body = body.byteLength ? Buffer.from(body) : null;
		    } else if (typeof body === 'string') {
		      this.body = body.length ? Buffer.from(body) : null;
		    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
		      this.body = body;
		    } else {
		      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable');
		    }
		    this.completed = false;
		    this.aborted = false;
		    this.upgrade = upgrade || null;
		    this.path = query ? util.buildURL(path, query) : path;
		    this.origin = origin;
		    this.idempotent = idempotent == null ? method === 'HEAD' || method === 'GET' : idempotent;
		    this.blocking = blocking == null ? false : blocking;
		    this.reset = reset == null ? null : reset;
		    this.host = null;
		    this.contentLength = null;
		    this.contentType = null;
		    this.headers = '';

		    // Only for H2
		    this.expectContinue = expectContinue != null ? expectContinue : false;
		    if (Array.isArray(headers)) {
		      if (headers.length % 2 !== 0) {
		        throw new InvalidArgumentError('headers array must be even');
		      }
		      for (let i = 0; i < headers.length; i += 2) {
		        processHeader(this, headers[i], headers[i + 1]);
		      }
		    } else if (headers && typeof headers === 'object') {
		      const keys = Object.keys(headers);
		      for (let i = 0; i < keys.length; i++) {
		        const key = keys[i];
		        processHeader(this, key, headers[key]);
		      }
		    } else if (headers != null) {
		      throw new InvalidArgumentError('headers must be an object or an array');
		    }
		    if (util.isFormDataLike(this.body)) {
		      if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
		        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.');
		      }
		      if (!extractBody) {
		        extractBody = requireBody().extractBody;
		      }
		      const [bodyStream, contentType] = extractBody(body);
		      if (this.contentType == null) {
		        this.contentType = contentType;
		        this.headers += `content-type: ${contentType}\r\n`;
		      }
		      this.body = bodyStream.stream;
		      this.contentLength = bodyStream.length;
		    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
		      this.contentType = body.type;
		      this.headers += `content-type: ${body.type}\r\n`;
		    }
		    util.validateHandler(handler, method, upgrade);
		    this.servername = util.getServerName(this.host);
		    this[kHandler] = handler;
		    if (channels.create.hasSubscribers) {
		      channels.create.publish({
		        request: this
		      });
		    }
		  }
		  onBodySent(chunk) {
		    if (this[kHandler].onBodySent) {
		      try {
		        return this[kHandler].onBodySent(chunk);
		      } catch (err) {
		        this.abort(err);
		      }
		    }
		  }
		  onRequestSent() {
		    if (channels.bodySent.hasSubscribers) {
		      channels.bodySent.publish({
		        request: this
		      });
		    }
		    if (this[kHandler].onRequestSent) {
		      try {
		        return this[kHandler].onRequestSent();
		      } catch (err) {
		        this.abort(err);
		      }
		    }
		  }
		  onConnect(abort) {
		    assert(!this.aborted);
		    assert(!this.completed);
		    if (this.error) {
		      abort(this.error);
		    } else {
		      this.abort = abort;
		      return this[kHandler].onConnect(abort);
		    }
		  }
		  onHeaders(statusCode, headers, resume, statusText) {
		    assert(!this.aborted);
		    assert(!this.completed);
		    if (channels.headers.hasSubscribers) {
		      channels.headers.publish({
		        request: this,
		        response: {
		          statusCode,
		          headers,
		          statusText
		        }
		      });
		    }
		    try {
		      return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
		    } catch (err) {
		      this.abort(err);
		    }
		  }
		  onData(chunk) {
		    assert(!this.aborted);
		    assert(!this.completed);
		    try {
		      return this[kHandler].onData(chunk);
		    } catch (err) {
		      this.abort(err);
		      return false;
		    }
		  }
		  onUpgrade(statusCode, headers, socket) {
		    assert(!this.aborted);
		    assert(!this.completed);
		    return this[kHandler].onUpgrade(statusCode, headers, socket);
		  }
		  onComplete(trailers) {
		    this.onFinally();
		    assert(!this.aborted);
		    this.completed = true;
		    if (channels.trailers.hasSubscribers) {
		      channels.trailers.publish({
		        request: this,
		        trailers
		      });
		    }
		    try {
		      return this[kHandler].onComplete(trailers);
		    } catch (err) {
		      // TODO (fix): This might be a bad idea?
		      this.onError(err);
		    }
		  }
		  onError(error) {
		    this.onFinally();
		    if (channels.error.hasSubscribers) {
		      channels.error.publish({
		        request: this,
		        error
		      });
		    }
		    if (this.aborted) {
		      return;
		    }
		    this.aborted = true;
		    return this[kHandler].onError(error);
		  }
		  onFinally() {
		    if (this.errorHandler) {
		      this.body.off('error', this.errorHandler);
		      this.errorHandler = null;
		    }
		    if (this.endHandler) {
		      this.body.off('end', this.endHandler);
		      this.endHandler = null;
		    }
		  }

		  // TODO: adjust to support H2
		  addHeader(key, value) {
		    processHeader(this, key, value);
		    return this;
		  }
		  static [kHTTP1BuildRequest](origin, opts, handler) {
		    // TODO: Migrate header parsing here, to make Requests
		    // HTTP agnostic
		    return new Request(origin, opts, handler);
		  }
		  static [kHTTP2BuildRequest](origin, opts, handler) {
		    const headers = opts.headers;
		    opts = {
		      ...opts,
		      headers: null
		    };
		    const request = new Request(origin, opts, handler);
		    request.headers = {};
		    if (Array.isArray(headers)) {
		      if (headers.length % 2 !== 0) {
		        throw new InvalidArgumentError('headers array must be even');
		      }
		      for (let i = 0; i < headers.length; i += 2) {
		        processHeader(request, headers[i], headers[i + 1], true);
		      }
		    } else if (headers && typeof headers === 'object') {
		      const keys = Object.keys(headers);
		      for (let i = 0; i < keys.length; i++) {
		        const key = keys[i];
		        processHeader(request, key, headers[key], true);
		      }
		    } else if (headers != null) {
		      throw new InvalidArgumentError('headers must be an object or an array');
		    }
		    return request;
		  }
		  static [kHTTP2CopyHeaders](raw) {
		    const rawHeaders = raw.split('\r\n');
		    const headers = {};
		    for (const header of rawHeaders) {
		      const [key, value] = header.split(': ');
		      if (value == null || value.length === 0) continue;
		      if (headers[key]) headers[key] += `,${value}`;else headers[key] = value;
		    }
		    return headers;
		  }
		}
		function processHeaderValue(key, val, skipAppend) {
		  if (val && typeof val === 'object') {
		    throw new InvalidArgumentError(`invalid ${key} header`);
		  }
		  val = val != null ? `${val}` : '';
		  if (headerCharRegex.exec(val) !== null) {
		    throw new InvalidArgumentError(`invalid ${key} header`);
		  }
		  return skipAppend ? val : `${key}: ${val}\r\n`;
		}
		function processHeader(request, key, val, skipAppend = false) {
		  if (val && typeof val === 'object' && !Array.isArray(val)) {
		    throw new InvalidArgumentError(`invalid ${key} header`);
		  } else if (val === undefined) {
		    return;
		  }
		  if (request.host === null && key.length === 4 && key.toLowerCase() === 'host') {
		    if (headerCharRegex.exec(val) !== null) {
		      throw new InvalidArgumentError(`invalid ${key} header`);
		    }
		    // Consumed by Client
		    request.host = val;
		  } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === 'content-length') {
		    request.contentLength = parseInt(val, 10);
		    if (!Number.isFinite(request.contentLength)) {
		      throw new InvalidArgumentError('invalid content-length header');
		    }
		  } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === 'content-type') {
		    request.contentType = val;
		    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);else request.headers += processHeaderValue(key, val);
		  } else if (key.length === 17 && key.toLowerCase() === 'transfer-encoding') {
		    throw new InvalidArgumentError('invalid transfer-encoding header');
		  } else if (key.length === 10 && key.toLowerCase() === 'connection') {
		    const value = typeof val === 'string' ? val.toLowerCase() : null;
		    if (value !== 'close' && value !== 'keep-alive') {
		      throw new InvalidArgumentError('invalid connection header');
		    } else if (value === 'close') {
		      request.reset = true;
		    }
		  } else if (key.length === 10 && key.toLowerCase() === 'keep-alive') {
		    throw new InvalidArgumentError('invalid keep-alive header');
		  } else if (key.length === 7 && key.toLowerCase() === 'upgrade') {
		    throw new InvalidArgumentError('invalid upgrade header');
		  } else if (key.length === 6 && key.toLowerCase() === 'expect') {
		    throw new NotSupportedError('expect header not supported');
		  } else if (tokenRegExp.exec(key) === null) {
		    throw new InvalidArgumentError('invalid header key');
		  } else {
		    if (Array.isArray(val)) {
		      for (let i = 0; i < val.length; i++) {
		        if (skipAppend) {
		          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;else request.headers[key] = processHeaderValue(key, val[i], skipAppend);
		        } else {
		          request.headers += processHeaderValue(key, val[i]);
		        }
		      }
		    } else {
		      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);else request.headers += processHeaderValue(key, val);
		    }
		  }
		}
		request$1 = Request;
		return request$1;
	}

	var dispatcher;
	var hasRequiredDispatcher;

	function requireDispatcher () {
		if (hasRequiredDispatcher) return dispatcher;
		hasRequiredDispatcher = 1;

		const EventEmitter = EventEmitter__default["default"];
		class Dispatcher extends EventEmitter {
		  dispatch() {
		    throw new Error('not implemented');
		  }
		  close() {
		    throw new Error('not implemented');
		  }
		  destroy() {
		    throw new Error('not implemented');
		  }
		}
		dispatcher = Dispatcher;
		return dispatcher;
	}

	var dispatcherBase;
	var hasRequiredDispatcherBase;

	function requireDispatcherBase () {
		if (hasRequiredDispatcherBase) return dispatcherBase;
		hasRequiredDispatcherBase = 1;

		const Dispatcher = requireDispatcher();
		const {
		  ClientDestroyedError,
		  ClientClosedError,
		  InvalidArgumentError
		} = requireErrors();
		const {
		  kDestroy,
		  kClose,
		  kDispatch,
		  kInterceptors
		} = requireSymbols$4();
		const kDestroyed = Symbol('destroyed');
		const kClosed = Symbol('closed');
		const kOnDestroyed = Symbol('onDestroyed');
		const kOnClosed = Symbol('onClosed');
		const kInterceptedDispatch = Symbol('Intercepted Dispatch');
		class DispatcherBase extends Dispatcher {
		  constructor() {
		    super();
		    this[kDestroyed] = false;
		    this[kOnDestroyed] = null;
		    this[kClosed] = false;
		    this[kOnClosed] = [];
		  }
		  get destroyed() {
		    return this[kDestroyed];
		  }
		  get closed() {
		    return this[kClosed];
		  }
		  get interceptors() {
		    return this[kInterceptors];
		  }
		  set interceptors(newInterceptors) {
		    if (newInterceptors) {
		      for (let i = newInterceptors.length - 1; i >= 0; i--) {
		        const interceptor = this[kInterceptors][i];
		        if (typeof interceptor !== 'function') {
		          throw new InvalidArgumentError('interceptor must be an function');
		        }
		      }
		    }
		    this[kInterceptors] = newInterceptors;
		  }
		  close(callback) {
		    if (callback === undefined) {
		      return new Promise((resolve, reject) => {
		        this.close((err, data) => {
		          return err ? reject(err) : resolve(data);
		        });
		      });
		    }
		    if (typeof callback !== 'function') {
		      throw new InvalidArgumentError('invalid callback');
		    }
		    if (this[kDestroyed]) {
		      queueMicrotask(() => callback(new ClientDestroyedError(), null));
		      return;
		    }
		    if (this[kClosed]) {
		      if (this[kOnClosed]) {
		        this[kOnClosed].push(callback);
		      } else {
		        queueMicrotask(() => callback(null, null));
		      }
		      return;
		    }
		    this[kClosed] = true;
		    this[kOnClosed].push(callback);
		    const onClosed = () => {
		      const callbacks = this[kOnClosed];
		      this[kOnClosed] = null;
		      for (let i = 0; i < callbacks.length; i++) {
		        callbacks[i](null, null);
		      }
		    };

		    // Should not error.
		    this[kClose]().then(() => this.destroy()).then(() => {
		      queueMicrotask(onClosed);
		    });
		  }
		  destroy(err, callback) {
		    if (typeof err === 'function') {
		      callback = err;
		      err = null;
		    }
		    if (callback === undefined) {
		      return new Promise((resolve, reject) => {
		        this.destroy(err, (err, data) => {
		          return err ? /* istanbul ignore next: should never error */reject(err) : resolve(data);
		        });
		      });
		    }
		    if (typeof callback !== 'function') {
		      throw new InvalidArgumentError('invalid callback');
		    }
		    if (this[kDestroyed]) {
		      if (this[kOnDestroyed]) {
		        this[kOnDestroyed].push(callback);
		      } else {
		        queueMicrotask(() => callback(null, null));
		      }
		      return;
		    }
		    if (!err) {
		      err = new ClientDestroyedError();
		    }
		    this[kDestroyed] = true;
		    this[kOnDestroyed] = this[kOnDestroyed] || [];
		    this[kOnDestroyed].push(callback);
		    const onDestroyed = () => {
		      const callbacks = this[kOnDestroyed];
		      this[kOnDestroyed] = null;
		      for (let i = 0; i < callbacks.length; i++) {
		        callbacks[i](null, null);
		      }
		    };

		    // Should not error.
		    this[kDestroy](err).then(() => {
		      queueMicrotask(onDestroyed);
		    });
		  }
		  [kInterceptedDispatch](opts, handler) {
		    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
		      this[kInterceptedDispatch] = this[kDispatch];
		      return this[kDispatch](opts, handler);
		    }
		    let dispatch = this[kDispatch].bind(this);
		    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
		      dispatch = this[kInterceptors][i](dispatch);
		    }
		    this[kInterceptedDispatch] = dispatch;
		    return dispatch(opts, handler);
		  }
		  dispatch(opts, handler) {
		    if (!handler || typeof handler !== 'object') {
		      throw new InvalidArgumentError('handler must be an object');
		    }
		    try {
		      if (!opts || typeof opts !== 'object') {
		        throw new InvalidArgumentError('opts must be an object.');
		      }
		      if (this[kDestroyed] || this[kOnDestroyed]) {
		        throw new ClientDestroyedError();
		      }
		      if (this[kClosed]) {
		        throw new ClientClosedError();
		      }
		      return this[kInterceptedDispatch](opts, handler);
		    } catch (err) {
		      if (typeof handler.onError !== 'function') {
		        throw new InvalidArgumentError('invalid onError method');
		      }
		      handler.onError(err);
		      return false;
		    }
		  }
		}
		dispatcherBase = DispatcherBase;
		return dispatcherBase;
	}

	var connect;
	var hasRequiredConnect;

	function requireConnect () {
		if (hasRequiredConnect) return connect;
		hasRequiredConnect = 1;

		const net = require$$4__default$1["default"];
		const assert = require$$0__default$3["default"];
		const util = requireUtil$6();
		const {
		  InvalidArgumentError,
		  ConnectTimeoutError
		} = requireErrors();
		let tls; // include tls conditionally since it is not always available

		// TODO: session re-use does not wait for the first
		// connection to resolve the session and might therefore
		// resolve the same servername multiple times even when
		// re-use is enabled.

		let SessionCache;
		// FIXME: remove workaround when the Node bug is fixed
		// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
		if (commonjsGlobal.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
		  SessionCache = class WeakSessionCache {
		    constructor(maxCachedSessions) {
		      this._maxCachedSessions = maxCachedSessions;
		      this._sessionCache = new Map();
		      this._sessionRegistry = new commonjsGlobal.FinalizationRegistry(key => {
		        if (this._sessionCache.size < this._maxCachedSessions) {
		          return;
		        }
		        const ref = this._sessionCache.get(key);
		        if (ref !== undefined && ref.deref() === undefined) {
		          this._sessionCache.delete(key);
		        }
		      });
		    }
		    get(sessionKey) {
		      const ref = this._sessionCache.get(sessionKey);
		      return ref ? ref.deref() : null;
		    }
		    set(sessionKey, session) {
		      if (this._maxCachedSessions === 0) {
		        return;
		      }
		      this._sessionCache.set(sessionKey, new WeakRef(session));
		      this._sessionRegistry.register(session, sessionKey);
		    }
		  };
		} else {
		  SessionCache = class SimpleSessionCache {
		    constructor(maxCachedSessions) {
		      this._maxCachedSessions = maxCachedSessions;
		      this._sessionCache = new Map();
		    }
		    get(sessionKey) {
		      return this._sessionCache.get(sessionKey);
		    }
		    set(sessionKey, session) {
		      if (this._maxCachedSessions === 0) {
		        return;
		      }
		      if (this._sessionCache.size >= this._maxCachedSessions) {
		        // remove the oldest session
		        const {
		          value: oldestKey
		        } = this._sessionCache.keys().next();
		        this._sessionCache.delete(oldestKey);
		      }
		      this._sessionCache.set(sessionKey, session);
		    }
		  };
		}
		function buildConnector({
		  allowH2,
		  maxCachedSessions,
		  socketPath,
		  timeout,
		  ...opts
		}) {
		  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
		    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero');
		  }
		  const options = {
		    path: socketPath,
		    ...opts
		  };
		  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
		  timeout = timeout == null ? 10e3 : timeout;
		  allowH2 = allowH2 != null ? allowH2 : false;
		  return function connect({
		    hostname,
		    host,
		    protocol,
		    port,
		    servername,
		    localAddress,
		    httpSocket
		  }, callback) {
		    let socket;
		    if (protocol === 'https:') {
		      if (!tls) {
		        tls = require$$4__default$2["default"];
		      }
		      servername = servername || options.servername || util.getServerName(host) || null;
		      const sessionKey = servername || hostname;
		      const session = sessionCache.get(sessionKey) || null;
		      assert(sessionKey);
		      socket = tls.connect({
		        highWaterMark: 16384,
		        // TLS in node can't have bigger HWM anyway...
		        ...options,
		        servername,
		        session,
		        localAddress,
		        // TODO(HTTP/2): Add support for h2c
		        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
		        socket: httpSocket,
		        // upgrade socket connection
		        port: port || 443,
		        host: hostname
		      });
		      socket.on('session', function (session) {
		        // TODO (fix): Can a session become invalid once established? Don't think so?
		        sessionCache.set(sessionKey, session);
		      });
		    } else {
		      assert(!httpSocket, 'httpSocket can only be sent on TLS update');
		      socket = net.connect({
		        highWaterMark: 64 * 1024,
		        // Same as nodejs fs streams.
		        ...options,
		        localAddress,
		        port: port || 80,
		        host: hostname
		      });
		    }

		    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
		    if (options.keepAlive == null || options.keepAlive) {
		      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;
		      socket.setKeepAlive(true, keepAliveInitialDelay);
		    }
		    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
		    socket.setNoDelay(true).once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
		      cancelTimeout();
		      if (callback) {
		        const cb = callback;
		        callback = null;
		        cb(null, this);
		      }
		    }).on('error', function (err) {
		      cancelTimeout();
		      if (callback) {
		        const cb = callback;
		        callback = null;
		        cb(err);
		      }
		    });
		    return socket;
		  };
		}
		function setupTimeout(onConnectTimeout, timeout) {
		  if (!timeout) {
		    return () => {};
		  }
		  let s1 = null;
		  let s2 = null;
		  const timeoutId = setTimeout(() => {
		    // setImmediate is added to make sure that we priotorise socket error events over timeouts
		    s1 = setImmediate(() => {
		      if (process.platform === 'win32') {
		        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
		        s2 = setImmediate(() => onConnectTimeout());
		      } else {
		        onConnectTimeout();
		      }
		    });
		  }, timeout);
		  return () => {
		    clearTimeout(timeoutId);
		    clearImmediate(s1);
		    clearImmediate(s2);
		  };
		}
		function onConnectTimeout(socket) {
		  util.destroy(socket, new ConnectTimeoutError());
		}
		connect = buildConnector;
		return connect;
	}

	var constants$2 = {};

	var utils = {};

	var hasRequiredUtils;

	function requireUtils () {
		if (hasRequiredUtils) return utils;
		hasRequiredUtils = 1;

		Object.defineProperty(utils, "__esModule", {
		  value: true
		});
		utils.enumToMap = void 0;
		function enumToMap(obj) {
		  const res = {};
		  Object.keys(obj).forEach(key => {
		    const value = obj[key];
		    if (typeof value === 'number') {
		      res[key] = value;
		    }
		  });
		  return res;
		}
		utils.enumToMap = enumToMap;
		return utils;
	}

	var hasRequiredConstants$2;

	function requireConstants$2 () {
		if (hasRequiredConstants$2) return constants$2;
		hasRequiredConstants$2 = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
			const utils_1 = requireUtils();
			(function (ERROR) {
			  ERROR[ERROR["OK"] = 0] = "OK";
			  ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
			  ERROR[ERROR["STRICT"] = 2] = "STRICT";
			  ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
			  ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
			  ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
			  ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
			  ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
			  ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
			  ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
			  ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
			  ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
			  ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
			  ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
			  ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
			  ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
			  ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
			  ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
			  ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
			  ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
			  ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
			  ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
			  ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
			  ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
			  ERROR[ERROR["USER"] = 24] = "USER";
			})(exports.ERROR || (exports.ERROR = {}));
			(function (TYPE) {
			  TYPE[TYPE["BOTH"] = 0] = "BOTH";
			  TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
			  TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
			})(exports.TYPE || (exports.TYPE = {}));
			(function (FLAGS) {
			  FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
			  FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
			  FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
			  FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
			  FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
			  FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
			  FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
			  FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
			  // 1 << 8 is unused
			  FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
			})(exports.FLAGS || (exports.FLAGS = {}));
			(function (LENIENT_FLAGS) {
			  LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
			  LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
			  LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
			})(exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
			var METHODS;
			(function (METHODS) {
			  METHODS[METHODS["DELETE"] = 0] = "DELETE";
			  METHODS[METHODS["GET"] = 1] = "GET";
			  METHODS[METHODS["HEAD"] = 2] = "HEAD";
			  METHODS[METHODS["POST"] = 3] = "POST";
			  METHODS[METHODS["PUT"] = 4] = "PUT";
			  /* pathological */
			  METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
			  METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
			  METHODS[METHODS["TRACE"] = 7] = "TRACE";
			  /* WebDAV */
			  METHODS[METHODS["COPY"] = 8] = "COPY";
			  METHODS[METHODS["LOCK"] = 9] = "LOCK";
			  METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
			  METHODS[METHODS["MOVE"] = 11] = "MOVE";
			  METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
			  METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
			  METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
			  METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
			  METHODS[METHODS["BIND"] = 16] = "BIND";
			  METHODS[METHODS["REBIND"] = 17] = "REBIND";
			  METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
			  METHODS[METHODS["ACL"] = 19] = "ACL";
			  /* subversion */
			  METHODS[METHODS["REPORT"] = 20] = "REPORT";
			  METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
			  METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
			  METHODS[METHODS["MERGE"] = 23] = "MERGE";
			  /* upnp */
			  METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
			  METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
			  METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
			  METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
			  /* RFC-5789 */
			  METHODS[METHODS["PATCH"] = 28] = "PATCH";
			  METHODS[METHODS["PURGE"] = 29] = "PURGE";
			  /* CalDAV */
			  METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
			  /* RFC-2068, section 19.6.1.2 */
			  METHODS[METHODS["LINK"] = 31] = "LINK";
			  METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
			  /* icecast */
			  METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
			  /* RFC-7540, section 11.6 */
			  METHODS[METHODS["PRI"] = 34] = "PRI";
			  /* RFC-2326 RTSP */
			  METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
			  METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
			  METHODS[METHODS["SETUP"] = 37] = "SETUP";
			  METHODS[METHODS["PLAY"] = 38] = "PLAY";
			  METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
			  METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
			  METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
			  METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
			  METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
			  METHODS[METHODS["RECORD"] = 44] = "RECORD";
			  /* RAOP */
			  METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
			})(METHODS = exports.METHODS || (exports.METHODS = {}));
			exports.METHODS_HTTP = [METHODS.DELETE, METHODS.GET, METHODS.HEAD, METHODS.POST, METHODS.PUT, METHODS.CONNECT, METHODS.OPTIONS, METHODS.TRACE, METHODS.COPY, METHODS.LOCK, METHODS.MKCOL, METHODS.MOVE, METHODS.PROPFIND, METHODS.PROPPATCH, METHODS.SEARCH, METHODS.UNLOCK, METHODS.BIND, METHODS.REBIND, METHODS.UNBIND, METHODS.ACL, METHODS.REPORT, METHODS.MKACTIVITY, METHODS.CHECKOUT, METHODS.MERGE, METHODS['M-SEARCH'], METHODS.NOTIFY, METHODS.SUBSCRIBE, METHODS.UNSUBSCRIBE, METHODS.PATCH, METHODS.PURGE, METHODS.MKCALENDAR, METHODS.LINK, METHODS.UNLINK, METHODS.PRI,
			// TODO(indutny): should we allow it with HTTP?
			METHODS.SOURCE];
			exports.METHODS_ICE = [METHODS.SOURCE];
			exports.METHODS_RTSP = [METHODS.OPTIONS, METHODS.DESCRIBE, METHODS.ANNOUNCE, METHODS.SETUP, METHODS.PLAY, METHODS.PAUSE, METHODS.TEARDOWN, METHODS.GET_PARAMETER, METHODS.SET_PARAMETER, METHODS.REDIRECT, METHODS.RECORD, METHODS.FLUSH,
			// For AirPlay
			METHODS.GET, METHODS.POST];
			exports.METHOD_MAP = utils_1.enumToMap(METHODS);
			exports.H_METHOD_MAP = {};
			Object.keys(exports.METHOD_MAP).forEach(key => {
			  if (/^H/.test(key)) {
			    exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
			  }
			});
			(function (FINISH) {
			  FINISH[FINISH["SAFE"] = 0] = "SAFE";
			  FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
			  FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
			})(exports.FINISH || (exports.FINISH = {}));
			exports.ALPHA = [];
			for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
			  // Upper case
			  exports.ALPHA.push(String.fromCharCode(i));
			  // Lower case
			  exports.ALPHA.push(String.fromCharCode(i + 0x20));
			}
			exports.NUM_MAP = {
			  0: 0,
			  1: 1,
			  2: 2,
			  3: 3,
			  4: 4,
			  5: 5,
			  6: 6,
			  7: 7,
			  8: 8,
			  9: 9
			};
			exports.HEX_MAP = {
			  0: 0,
			  1: 1,
			  2: 2,
			  3: 3,
			  4: 4,
			  5: 5,
			  6: 6,
			  7: 7,
			  8: 8,
			  9: 9,
			  A: 0XA,
			  B: 0XB,
			  C: 0XC,
			  D: 0XD,
			  E: 0XE,
			  F: 0XF,
			  a: 0xa,
			  b: 0xb,
			  c: 0xc,
			  d: 0xd,
			  e: 0xe,
			  f: 0xf
			};
			exports.NUM = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
			exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
			exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
			exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(['%', ';', ':', '&', '=', '+', '$', ',']);
			// TODO(indutny): use RFC
			exports.STRICT_URL_CHAR = ['!', '"', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~'].concat(exports.ALPHANUM);
			exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(['\t', '\f']);
			// All characters with 0x80 bit set to 1
			for (let i = 0x80; i <= 0xff; i++) {
			  exports.URL_CHAR.push(i);
			}
			exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
			/* Tokens as defined by rfc 2616. Also lowercases them.
			 *        token       = 1*<any CHAR except CTLs or separators>
			 *     separators     = "(" | ")" | "<" | ">" | "@"
			 *                    | "," | ";" | ":" | "\" | <">
			 *                    | "/" | "[" | "]" | "?" | "="
			 *                    | "{" | "}" | SP | HT
			 */
			exports.STRICT_TOKEN = ['!', '#', '$', '%', '&', '\'', '*', '+', '-', '.', '^', '_', '`', '|', '~'].concat(exports.ALPHANUM);
			exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
			/*
			 * Verify that a char is a valid visible (printable) US-ASCII
			 * character or %x80-FF
			 */
			exports.HEADER_CHARS = ['\t'];
			for (let i = 32; i <= 255; i++) {
			  if (i !== 127) {
			    exports.HEADER_CHARS.push(i);
			  }
			}
			// ',' = \x44
			exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter(c => c !== 44);
			exports.MAJOR = exports.NUM_MAP;
			exports.MINOR = exports.MAJOR;
			var HEADER_STATE;
			(function (HEADER_STATE) {
			  HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
			  HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
			  HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
			  HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
			  HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
			  HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
			  HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
			  HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
			  HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
			})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
			exports.SPECIAL_HEADERS = {
			  'connection': HEADER_STATE.CONNECTION,
			  'content-length': HEADER_STATE.CONTENT_LENGTH,
			  'proxy-connection': HEADER_STATE.CONNECTION,
			  'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
			  'upgrade': HEADER_STATE.UPGRADE
			}; 
		} (constants$2));
		return constants$2;
	}

	var RedirectHandler_1;
	var hasRequiredRedirectHandler;

	function requireRedirectHandler () {
		if (hasRequiredRedirectHandler) return RedirectHandler_1;
		hasRequiredRedirectHandler = 1;

		const util = requireUtil$6();
		const {
		  kBodyUsed
		} = requireSymbols$4();
		const assert = require$$0__default$3["default"];
		const {
		  InvalidArgumentError
		} = requireErrors();
		const EE = EventEmitter__default["default"];
		const redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
		const kBody = Symbol('body');
		class BodyAsyncIterable {
		  constructor(body) {
		    this[kBody] = body;
		    this[kBodyUsed] = false;
		  }
		  async *[Symbol.asyncIterator]() {
		    assert(!this[kBodyUsed], 'disturbed');
		    this[kBodyUsed] = true;
		    yield* this[kBody];
		  }
		}
		class RedirectHandler {
		  constructor(dispatch, maxRedirections, opts, handler) {
		    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
		      throw new InvalidArgumentError('maxRedirections must be a positive number');
		    }
		    util.validateHandler(handler, opts.method, opts.upgrade);
		    this.dispatch = dispatch;
		    this.location = null;
		    this.abort = null;
		    this.opts = {
		      ...opts,
		      maxRedirections: 0
		    }; // opts must be a copy
		    this.maxRedirections = maxRedirections;
		    this.handler = handler;
		    this.history = [];
		    if (util.isStream(this.opts.body)) {
		      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
		      // so that it can be dispatched again?
		      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
		      if (util.bodyLength(this.opts.body) === 0) {
		        this.opts.body.on('data', function () {
		          assert(false);
		        });
		      }
		      if (typeof this.opts.body.readableDidRead !== 'boolean') {
		        this.opts.body[kBodyUsed] = false;
		        EE.prototype.on.call(this.opts.body, 'data', function () {
		          this[kBodyUsed] = true;
		        });
		      }
		    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
		      // TODO (fix): We can't access ReadableStream internal state
		      // to determine whether or not it has been disturbed. This is just
		      // a workaround.
		      this.opts.body = new BodyAsyncIterable(this.opts.body);
		    } else if (this.opts.body && typeof this.opts.body !== 'string' && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
		      // TODO: Should we allow re-using iterable if !this.opts.idempotent
		      // or through some other flag?
		      this.opts.body = new BodyAsyncIterable(this.opts.body);
		    }
		  }
		  onConnect(abort) {
		    this.abort = abort;
		    this.handler.onConnect(abort, {
		      history: this.history
		    });
		  }
		  onUpgrade(statusCode, headers, socket) {
		    this.handler.onUpgrade(statusCode, headers, socket);
		  }
		  onError(error) {
		    this.handler.onError(error);
		  }
		  onHeaders(statusCode, headers, resume, statusText) {
		    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
		    if (this.opts.origin) {
		      this.history.push(new URL(this.opts.path, this.opts.origin));
		    }
		    if (!this.location) {
		      return this.handler.onHeaders(statusCode, headers, resume, statusText);
		    }
		    const {
		      origin,
		      pathname,
		      search
		    } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
		    const path = search ? `${pathname}${search}` : pathname;

		    // Remove headers referring to the original URL.
		    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
		    // https://tools.ietf.org/html/rfc7231#section-6.4
		    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
		    this.opts.path = path;
		    this.opts.origin = origin;
		    this.opts.maxRedirections = 0;
		    this.opts.query = null;

		    // https://tools.ietf.org/html/rfc7231#section-6.4.4
		    // In case of HTTP 303, always replace method to be either HEAD or GET
		    if (statusCode === 303 && this.opts.method !== 'HEAD') {
		      this.opts.method = 'GET';
		      this.opts.body = null;
		    }
		  }
		  onData(chunk) {
		    if (this.location) ; else {
		      return this.handler.onData(chunk);
		    }
		  }
		  onComplete(trailers) {
		    if (this.location) {
		      /*
		        https://tools.ietf.org/html/rfc7231#section-6.4
		         TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
		        and neither are useful if present.
		         See comment on onData method above for more detailed informations.
		      */

		      this.location = null;
		      this.abort = null;
		      this.dispatch(this.opts, this);
		    } else {
		      this.handler.onComplete(trailers);
		    }
		  }
		  onBodySent(chunk) {
		    if (this.handler.onBodySent) {
		      this.handler.onBodySent(chunk);
		    }
		  }
		}
		function parseLocation(statusCode, headers) {
		  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
		    return null;
		  }
		  for (let i = 0; i < headers.length; i += 2) {
		    if (headers[i].toString().toLowerCase() === 'location') {
		      return headers[i + 1];
		    }
		  }
		}

		// https://tools.ietf.org/html/rfc7231#section-6.4.4
		function shouldRemoveHeader(header, removeContent, unknownOrigin) {
		  return header.length === 4 && header.toString().toLowerCase() === 'host' || removeContent && header.toString().toLowerCase().indexOf('content-') === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === 'authorization' || unknownOrigin && header.length === 6 && header.toString().toLowerCase() === 'cookie';
		}

		// https://tools.ietf.org/html/rfc7231#section-6.4
		function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
		  const ret = [];
		  if (Array.isArray(headers)) {
		    for (let i = 0; i < headers.length; i += 2) {
		      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
		        ret.push(headers[i], headers[i + 1]);
		      }
		    }
		  } else if (headers && typeof headers === 'object') {
		    for (const key of Object.keys(headers)) {
		      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
		        ret.push(key, headers[key]);
		      }
		    }
		  } else {
		    assert(headers == null, 'headers must be an object or an array');
		  }
		  return ret;
		}
		RedirectHandler_1 = RedirectHandler;
		return RedirectHandler_1;
	}

	var redirectInterceptor;
	var hasRequiredRedirectInterceptor;

	function requireRedirectInterceptor () {
		if (hasRequiredRedirectInterceptor) return redirectInterceptor;
		hasRequiredRedirectInterceptor = 1;

		const RedirectHandler = requireRedirectHandler();
		function createRedirectInterceptor({
		  maxRedirections: defaultMaxRedirections
		}) {
		  return dispatch => {
		    return function Intercept(opts, handler) {
		      const {
		        maxRedirections = defaultMaxRedirections
		      } = opts;
		      if (!maxRedirections) {
		        return dispatch(opts, handler);
		      }
		      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
		      opts = {
		        ...opts,
		        maxRedirections: 0
		      }; // Stop sub dispatcher from also redirecting.
		      return dispatch(opts, redirectHandler);
		    };
		  };
		}
		redirectInterceptor = createRedirectInterceptor;
		return redirectInterceptor;
	}

	var llhttpWasm;
	var hasRequiredLlhttpWasm;

	function requireLlhttpWasm () {
		if (hasRequiredLlhttpWasm) return llhttpWasm;
		hasRequiredLlhttpWasm = 1;
		llhttpWasm = '';
		return llhttpWasm;
	}

	var llhttp_simdWasm;
	var hasRequiredLlhttp_simdWasm;

	function requireLlhttp_simdWasm () {
		if (hasRequiredLlhttp_simdWasm) return llhttp_simdWasm;
		hasRequiredLlhttp_simdWasm = 1;
		llhttp_simdWasm = '';
		return llhttp_simdWasm;
	}

	var client;
	var hasRequiredClient;

	function requireClient () {
		if (hasRequiredClient) return client;
		hasRequiredClient = 1;

		/* global WebAssembly */
		const assert = require$$0__default$3["default"];
		const net = require$$4__default$1["default"];
		const http = require$$2__default["default"];
		const {
		  pipeline
		} = stream__default["default"];
		const util = requireUtil$6();
		const timers = requireTimers();
		const Request = requireRequest$1();
		const DispatcherBase = requireDispatcherBase();
		const {
		  RequestContentLengthMismatchError,
		  ResponseContentLengthMismatchError,
		  InvalidArgumentError,
		  RequestAbortedError,
		  HeadersTimeoutError,
		  HeadersOverflowError,
		  SocketError,
		  InformationalError,
		  BodyTimeoutError,
		  HTTPParserError,
		  ResponseExceededMaxSizeError,
		  ClientDestroyedError
		} = requireErrors();
		const buildConnector = requireConnect();
		const {
		  kUrl,
		  kReset,
		  kServerName,
		  kClient,
		  kBusy,
		  kParser,
		  kConnect,
		  kBlocking,
		  kResuming,
		  kRunning,
		  kPending,
		  kSize,
		  kWriting,
		  kQueue,
		  kConnected,
		  kConnecting,
		  kNeedDrain,
		  kNoRef,
		  kKeepAliveDefaultTimeout,
		  kHostHeader,
		  kPendingIdx,
		  kRunningIdx,
		  kError,
		  kPipelining,
		  kSocket,
		  kKeepAliveTimeoutValue,
		  kMaxHeadersSize,
		  kKeepAliveMaxTimeout,
		  kKeepAliveTimeoutThreshold,
		  kHeadersTimeout,
		  kBodyTimeout,
		  kStrictContentLength,
		  kConnector,
		  kMaxRedirections,
		  kMaxRequests,
		  kCounter,
		  kClose,
		  kDestroy,
		  kDispatch,
		  kInterceptors,
		  kLocalAddress,
		  kMaxResponseSize,
		  kHTTPConnVersion,
		  // HTTP2
		  kHost,
		  kHTTP2Session,
		  kHTTP2SessionState,
		  kHTTP2BuildRequest,
		  kHTTP2CopyHeaders,
		  kHTTP1BuildRequest
		} = requireSymbols$4();

		/** @type {import('http2')} */
		let http2;
		try {
		  http2 = require('http2');
		} catch {
		  // @ts-ignore
		  http2 = {
		    constants: {}
		  };
		}
		const {
		  constants: {
		    HTTP2_HEADER_AUTHORITY,
		    HTTP2_HEADER_METHOD,
		    HTTP2_HEADER_PATH,
		    HTTP2_HEADER_SCHEME,
		    HTTP2_HEADER_CONTENT_LENGTH,
		    HTTP2_HEADER_EXPECT,
		    HTTP2_HEADER_STATUS
		  }
		} = http2;

		// Experimental
		let h2ExperimentalWarned = false;
		const FastBuffer = Buffer[Symbol.species];
		const kClosedResolve = Symbol('kClosedResolve');
		const channels = {};
		try {
		  const diagnosticsChannel = require('diagnostics_channel');
		  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders');
		  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect');
		  channels.connectError = diagnosticsChannel.channel('undici:client:connectError');
		  channels.connected = diagnosticsChannel.channel('undici:client:connected');
		} catch {
		  channels.sendHeaders = {
		    hasSubscribers: false
		  };
		  channels.beforeConnect = {
		    hasSubscribers: false
		  };
		  channels.connectError = {
		    hasSubscribers: false
		  };
		  channels.connected = {
		    hasSubscribers: false
		  };
		}

		/**
		 * @type {import('../types/client').default}
		 */
		class Client extends DispatcherBase {
		  /**
		   *
		   * @param {string|URL} url
		   * @param {import('../types/client').Client.Options} options
		   */
		  constructor(url, {
		    interceptors,
		    maxHeaderSize,
		    headersTimeout,
		    socketTimeout,
		    requestTimeout,
		    connectTimeout,
		    bodyTimeout,
		    idleTimeout,
		    keepAlive,
		    keepAliveTimeout,
		    maxKeepAliveTimeout,
		    keepAliveMaxTimeout,
		    keepAliveTimeoutThreshold,
		    socketPath,
		    pipelining,
		    tls,
		    strictContentLength,
		    maxCachedSessions,
		    maxRedirections,
		    connect,
		    maxRequestsPerClient,
		    localAddress,
		    maxResponseSize,
		    autoSelectFamily,
		    autoSelectFamilyAttemptTimeout,
		    // h2
		    allowH2,
		    maxConcurrentStreams
		  } = {}) {
		    super();
		    if (keepAlive !== undefined) {
		      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead');
		    }
		    if (socketTimeout !== undefined) {
		      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead');
		    }
		    if (requestTimeout !== undefined) {
		      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead');
		    }
		    if (idleTimeout !== undefined) {
		      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead');
		    }
		    if (maxKeepAliveTimeout !== undefined) {
		      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead');
		    }
		    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
		      throw new InvalidArgumentError('invalid maxHeaderSize');
		    }
		    if (socketPath != null && typeof socketPath !== 'string') {
		      throw new InvalidArgumentError('invalid socketPath');
		    }
		    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
		      throw new InvalidArgumentError('invalid connectTimeout');
		    }
		    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
		      throw new InvalidArgumentError('invalid keepAliveTimeout');
		    }
		    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
		      throw new InvalidArgumentError('invalid keepAliveMaxTimeout');
		    }
		    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
		      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold');
		    }
		    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
		      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero');
		    }
		    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
		      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero');
		    }
		    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
		      throw new InvalidArgumentError('connect must be a function or an object');
		    }
		    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
		      throw new InvalidArgumentError('maxRedirections must be a positive number');
		    }
		    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
		      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number');
		    }
		    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
		      throw new InvalidArgumentError('localAddress must be valid string IP address');
		    }
		    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
		      throw new InvalidArgumentError('maxResponseSize must be a positive number');
		    }
		    if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
		      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number');
		    }

		    // h2
		    if (allowH2 != null && typeof allowH2 !== 'boolean') {
		      throw new InvalidArgumentError('allowH2 must be a valid boolean value');
		    }
		    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
		      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0');
		    }
		    if (typeof connect !== 'function') {
		      connect = buildConnector({
		        ...tls,
		        maxCachedSessions,
		        allowH2,
		        socketPath,
		        timeout: connectTimeout,
		        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? {
		          autoSelectFamily,
		          autoSelectFamilyAttemptTimeout
		        } : undefined),
		        ...connect
		      });
		    }
		    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({
		      maxRedirections
		    })];
		    this[kUrl] = util.parseOrigin(url);
		    this[kConnector] = connect;
		    this[kSocket] = null;
		    this[kPipelining] = pipelining != null ? pipelining : 1;
		    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
		    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
		    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;
		    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
		    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
		    this[kServerName] = null;
		    this[kLocalAddress] = localAddress != null ? localAddress : null;
		    this[kResuming] = 0; // 0, idle, 1, scheduled, 2 resuming
		    this[kNeedDrain] = 0; // 0, idle, 1, scheduled, 2 resuming
		    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`;
		    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;
		    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;
		    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
		    this[kMaxRedirections] = maxRedirections;
		    this[kMaxRequests] = maxRequestsPerClient;
		    this[kClosedResolve] = null;
		    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
		    this[kHTTPConnVersion] = 'h1';

		    // HTTP/2
		    this[kHTTP2Session] = null;
		    this[kHTTP2SessionState] = !allowH2 ? null : {
		      // streams: null, // Fixed queue of streams - For future support of `push`
		      openStreams: 0,
		      // Keep track of them to decide wether or not unref the session
		      maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
		    };
		    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`;

		    // kQueue is built up of 3 sections separated by
		    // the kRunningIdx and kPendingIdx indices.
		    // |   complete   |   running   |   pending   |
		    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
		    // kRunningIdx points to the first running element.
		    // kPendingIdx points to the first pending element.
		    // This implements a fast queue with an amortized
		    // time of O(1).

		    this[kQueue] = [];
		    this[kRunningIdx] = 0;
		    this[kPendingIdx] = 0;
		  }
		  get pipelining() {
		    return this[kPipelining];
		  }
		  set pipelining(value) {
		    this[kPipelining] = value;
		    resume(this, true);
		  }
		  get [kPending]() {
		    return this[kQueue].length - this[kPendingIdx];
		  }
		  get [kRunning]() {
		    return this[kPendingIdx] - this[kRunningIdx];
		  }
		  get [kSize]() {
		    return this[kQueue].length - this[kRunningIdx];
		  }
		  get [kConnected]() {
		    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
		  }
		  get [kBusy]() {
		    const socket = this[kSocket];
		    return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
		  }

		  /* istanbul ignore: only used for test */
		  [kConnect](cb) {
		    connect(this);
		    this.once('connect', cb);
		  }
		  [kDispatch](opts, handler) {
		    const origin = opts.origin || this[kUrl].origin;
		    const request = this[kHTTPConnVersion] === 'h2' ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
		    this[kQueue].push(request);
		    if (this[kResuming]) ; else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
		      // Wait a tick in case stream/iterator is ended in the same tick.
		      this[kResuming] = 1;
		      process.nextTick(resume, this);
		    } else {
		      resume(this, true);
		    }
		    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
		      this[kNeedDrain] = 2;
		    }
		    return this[kNeedDrain] < 2;
		  }
		  async [kClose]() {
		    // TODO: for H2 we need to gracefully flush the remaining enqueued
		    // request and close each stream.
		    return new Promise(resolve => {
		      if (!this[kSize]) {
		        resolve(null);
		      } else {
		        this[kClosedResolve] = resolve;
		      }
		    });
		  }
		  async [kDestroy](err) {
		    return new Promise(resolve => {
		      const requests = this[kQueue].splice(this[kPendingIdx]);
		      for (let i = 0; i < requests.length; i++) {
		        const request = requests[i];
		        errorRequest(this, request, err);
		      }
		      const callback = () => {
		        if (this[kClosedResolve]) {
		          // TODO (fix): Should we error here with ClientDestroyedError?
		          this[kClosedResolve]();
		          this[kClosedResolve] = null;
		        }
		        resolve();
		      };
		      if (this[kHTTP2Session] != null) {
		        util.destroy(this[kHTTP2Session], err);
		        this[kHTTP2Session] = null;
		        this[kHTTP2SessionState] = null;
		      }
		      if (!this[kSocket]) {
		        queueMicrotask(callback);
		      } else {
		        util.destroy(this[kSocket].on('close', callback), err);
		      }
		      resume(this);
		    });
		  }
		}
		function onHttp2SessionError(err) {
		  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
		  this[kSocket][kError] = err;
		  onError(this[kClient], err);
		}
		function onHttp2FrameError(type, code, id) {
		  const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
		  if (id === 0) {
		    this[kSocket][kError] = err;
		    onError(this[kClient], err);
		  }
		}
		function onHttp2SessionEnd() {
		  util.destroy(this, new SocketError('other side closed'));
		  util.destroy(this[kSocket], new SocketError('other side closed'));
		}
		function onHTTP2GoAway(code) {
		  const client = this[kClient];
		  const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
		  client[kSocket] = null;
		  client[kHTTP2Session] = null;
		  if (client.destroyed) {
		    assert(this[kPending] === 0);

		    // Fail entire queue.
		    const requests = client[kQueue].splice(client[kRunningIdx]);
		    for (let i = 0; i < requests.length; i++) {
		      const request = requests[i];
		      errorRequest(this, request, err);
		    }
		  } else if (client[kRunning] > 0) {
		    // Fail head of pipeline.
		    const request = client[kQueue][client[kRunningIdx]];
		    client[kQueue][client[kRunningIdx]++] = null;
		    errorRequest(client, request, err);
		  }
		  client[kPendingIdx] = client[kRunningIdx];
		  assert(client[kRunning] === 0);
		  client.emit('disconnect', client[kUrl], [client], err);
		  resume(client);
		}
		const constants = requireConstants$2();
		const createRedirectInterceptor = requireRedirectInterceptor();
		const EMPTY_BUF = Buffer.alloc(0);
		async function lazyllhttp() {
		  const llhttpWasmData = process.env.JEST_WORKER_ID ? requireLlhttpWasm() : undefined;
		  let mod;
		  try {
		    mod = await WebAssembly.compile(Buffer.from(requireLlhttp_simdWasm(), 'base64'));
		  } catch (e) {
		    /* istanbul ignore next */

		    // We could check if the error was caused by the simd option not
		    // being enabled, but the occurring of this other error
		    // * https://github.com/emscripten-core/emscripten/issues/11495
		    // got me to remove that check to avoid breaking Node 12.
		    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || requireLlhttpWasm(), 'base64'));
		  }
		  return await WebAssembly.instantiate(mod, {
		    env: {
		      /* eslint-disable camelcase */

		      wasm_on_url: (p, at, len) => {
		        /* istanbul ignore next */
		        return 0;
		      },
		      wasm_on_status: (p, at, len) => {
		        assert.strictEqual(currentParser.ptr, p);
		        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
		        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
		      },
		      wasm_on_message_begin: p => {
		        assert.strictEqual(currentParser.ptr, p);
		        return currentParser.onMessageBegin() || 0;
		      },
		      wasm_on_header_field: (p, at, len) => {
		        assert.strictEqual(currentParser.ptr, p);
		        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
		        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
		      },
		      wasm_on_header_value: (p, at, len) => {
		        assert.strictEqual(currentParser.ptr, p);
		        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
		        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
		      },
		      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
		        assert.strictEqual(currentParser.ptr, p);
		        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
		      },
		      wasm_on_body: (p, at, len) => {
		        assert.strictEqual(currentParser.ptr, p);
		        const start = at - currentBufferPtr + currentBufferRef.byteOffset;
		        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
		      },
		      wasm_on_message_complete: p => {
		        assert.strictEqual(currentParser.ptr, p);
		        return currentParser.onMessageComplete() || 0;
		      }

		      /* eslint-enable camelcase */
		    }
		  });
		}
		let llhttpInstance = null;
		let llhttpPromise = lazyllhttp();
		llhttpPromise.catch();
		let currentParser = null;
		let currentBufferRef = null;
		let currentBufferSize = 0;
		let currentBufferPtr = null;
		const TIMEOUT_HEADERS = 1;
		const TIMEOUT_BODY = 2;
		const TIMEOUT_IDLE = 3;
		class Parser {
		  constructor(client, socket, {
		    exports
		  }) {
		    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
		    this.llhttp = exports;
		    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
		    this.client = client;
		    this.socket = socket;
		    this.timeout = null;
		    this.timeoutValue = null;
		    this.timeoutType = null;
		    this.statusCode = null;
		    this.statusText = '';
		    this.upgrade = false;
		    this.headers = [];
		    this.headersSize = 0;
		    this.headersMaxSize = client[kMaxHeadersSize];
		    this.shouldKeepAlive = false;
		    this.paused = false;
		    this.resume = this.resume.bind(this);
		    this.bytesRead = 0;
		    this.keepAlive = '';
		    this.contentLength = '';
		    this.connection = '';
		    this.maxResponseSize = client[kMaxResponseSize];
		  }
		  setTimeout(value, type) {
		    this.timeoutType = type;
		    if (value !== this.timeoutValue) {
		      timers.clearTimeout(this.timeout);
		      if (value) {
		        this.timeout = timers.setTimeout(onParserTimeout, value, this);
		        // istanbul ignore else: only for jest
		        if (this.timeout.unref) {
		          this.timeout.unref();
		        }
		      } else {
		        this.timeout = null;
		      }
		      this.timeoutValue = value;
		    } else if (this.timeout) {
		      // istanbul ignore else: only for jest
		      if (this.timeout.refresh) {
		        this.timeout.refresh();
		      }
		    }
		  }
		  resume() {
		    if (this.socket.destroyed || !this.paused) {
		      return;
		    }
		    assert(this.ptr != null);
		    assert(currentParser == null);
		    this.llhttp.llhttp_resume(this.ptr);
		    assert(this.timeoutType === TIMEOUT_BODY);
		    if (this.timeout) {
		      // istanbul ignore else: only for jest
		      if (this.timeout.refresh) {
		        this.timeout.refresh();
		      }
		    }
		    this.paused = false;
		    this.execute(this.socket.read() || EMPTY_BUF); // Flush parser.
		    this.readMore();
		  }
		  readMore() {
		    while (!this.paused && this.ptr) {
		      const chunk = this.socket.read();
		      if (chunk === null) {
		        break;
		      }
		      this.execute(chunk);
		    }
		  }
		  execute(data) {
		    assert(this.ptr != null);
		    assert(currentParser == null);
		    assert(!this.paused);
		    const {
		      socket,
		      llhttp
		    } = this;
		    if (data.length > currentBufferSize) {
		      if (currentBufferPtr) {
		        llhttp.free(currentBufferPtr);
		      }
		      currentBufferSize = Math.ceil(data.length / 4096) * 4096;
		      currentBufferPtr = llhttp.malloc(currentBufferSize);
		    }
		    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);

		    // Call `execute` on the wasm parser.
		    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
		    // and finally the length of bytes to parse.
		    // The return value is an error code or `constants.ERROR.OK`.
		    try {
		      let ret;
		      try {
		        currentBufferRef = data;
		        currentParser = this;
		        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
		        /* eslint-disable-next-line no-useless-catch */
		      } catch (err) {
		        /* istanbul ignore next: difficult to make a test case for */
		        throw err;
		      } finally {
		        currentParser = null;
		        currentBufferRef = null;
		      }
		      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
		      if (ret === constants.ERROR.PAUSED_UPGRADE) {
		        this.onUpgrade(data.slice(offset));
		      } else if (ret === constants.ERROR.PAUSED) {
		        this.paused = true;
		        socket.unshift(data.slice(offset));
		      } else if (ret !== constants.ERROR.OK) {
		        const ptr = llhttp.llhttp_get_error_reason(this.ptr);
		        let message = '';
		        /* istanbul ignore else: difficult to make a test case for */
		        if (ptr) {
		          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
		          message = 'Response does not match the HTTP/1.1 protocol (' + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ')';
		        }
		        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
		      }
		    } catch (err) {
		      util.destroy(socket, err);
		    }
		  }
		  destroy() {
		    assert(this.ptr != null);
		    assert(currentParser == null);
		    this.llhttp.llhttp_free(this.ptr);
		    this.ptr = null;
		    timers.clearTimeout(this.timeout);
		    this.timeout = null;
		    this.timeoutValue = null;
		    this.timeoutType = null;
		    this.paused = false;
		  }
		  onStatus(buf) {
		    this.statusText = buf.toString();
		  }
		  onMessageBegin() {
		    const {
		      socket,
		      client
		    } = this;

		    /* istanbul ignore next: difficult to make a test case for */
		    if (socket.destroyed) {
		      return -1;
		    }
		    const request = client[kQueue][client[kRunningIdx]];
		    if (!request) {
		      return -1;
		    }
		  }
		  onHeaderField(buf) {
		    const len = this.headers.length;
		    if ((len & 1) === 0) {
		      this.headers.push(buf);
		    } else {
		      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
		    }
		    this.trackHeader(buf.length);
		  }
		  onHeaderValue(buf) {
		    let len = this.headers.length;
		    if ((len & 1) === 1) {
		      this.headers.push(buf);
		      len += 1;
		    } else {
		      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
		    }
		    const key = this.headers[len - 2];
		    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {
		      this.keepAlive += buf.toString();
		    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {
		      this.connection += buf.toString();
		    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {
		      this.contentLength += buf.toString();
		    }
		    this.trackHeader(buf.length);
		  }
		  trackHeader(len) {
		    this.headersSize += len;
		    if (this.headersSize >= this.headersMaxSize) {
		      util.destroy(this.socket, new HeadersOverflowError());
		    }
		  }
		  onUpgrade(head) {
		    const {
		      upgrade,
		      client,
		      socket,
		      headers,
		      statusCode
		    } = this;
		    assert(upgrade);
		    const request = client[kQueue][client[kRunningIdx]];
		    assert(request);
		    assert(!socket.destroyed);
		    assert(socket === client[kSocket]);
		    assert(!this.paused);
		    assert(request.upgrade || request.method === 'CONNECT');
		    this.statusCode = null;
		    this.statusText = '';
		    this.shouldKeepAlive = null;
		    assert(this.headers.length % 2 === 0);
		    this.headers = [];
		    this.headersSize = 0;
		    socket.unshift(head);
		    socket[kParser].destroy();
		    socket[kParser] = null;
		    socket[kClient] = null;
		    socket[kError] = null;
		    socket.removeListener('error', onSocketError).removeListener('readable', onSocketReadable).removeListener('end', onSocketEnd).removeListener('close', onSocketClose);
		    client[kSocket] = null;
		    client[kQueue][client[kRunningIdx]++] = null;
		    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'));
		    try {
		      request.onUpgrade(statusCode, headers, socket);
		    } catch (err) {
		      util.destroy(socket, err);
		    }
		    resume(client);
		  }
		  onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
		    const {
		      client,
		      socket,
		      headers,
		      statusText
		    } = this;

		    /* istanbul ignore next: difficult to make a test case for */
		    if (socket.destroyed) {
		      return -1;
		    }
		    const request = client[kQueue][client[kRunningIdx]];

		    /* istanbul ignore next: difficult to make a test case for */
		    if (!request) {
		      return -1;
		    }
		    assert(!this.upgrade);
		    assert(this.statusCode < 200);
		    if (statusCode === 100) {
		      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)));
		      return -1;
		    }

		    /* this can only happen if server is misbehaving */
		    if (upgrade && !request.upgrade) {
		      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)));
		      return -1;
		    }
		    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
		    this.statusCode = statusCode;
		    this.shouldKeepAlive = shouldKeepAlive ||
		    // Override llhttp value which does not allow keepAlive for HEAD.
		    request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive';
		    if (this.statusCode >= 200) {
		      const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
		      this.setTimeout(bodyTimeout, TIMEOUT_BODY);
		    } else if (this.timeout) {
		      // istanbul ignore else: only for jest
		      if (this.timeout.refresh) {
		        this.timeout.refresh();
		      }
		    }
		    if (request.method === 'CONNECT') {
		      assert(client[kRunning] === 1);
		      this.upgrade = true;
		      return 2;
		    }
		    if (upgrade) {
		      assert(client[kRunning] === 1);
		      this.upgrade = true;
		      return 2;
		    }
		    assert(this.headers.length % 2 === 0);
		    this.headers = [];
		    this.headersSize = 0;
		    if (this.shouldKeepAlive && client[kPipelining]) {
		      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
		      if (keepAliveTimeout != null) {
		        const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
		        if (timeout <= 0) {
		          socket[kReset] = true;
		        } else {
		          client[kKeepAliveTimeoutValue] = timeout;
		        }
		      } else {
		        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
		      }
		    } else {
		      // Stop more requests from being dispatched.
		      socket[kReset] = true;
		    }
		    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
		    if (request.aborted) {
		      return -1;
		    }
		    if (request.method === 'HEAD') {
		      return 1;
		    }
		    if (statusCode < 200) {
		      return 1;
		    }
		    if (socket[kBlocking]) {
		      socket[kBlocking] = false;
		      resume(client);
		    }
		    return pause ? constants.ERROR.PAUSED : 0;
		  }
		  onBody(buf) {
		    const {
		      client,
		      socket,
		      statusCode,
		      maxResponseSize
		    } = this;
		    if (socket.destroyed) {
		      return -1;
		    }
		    const request = client[kQueue][client[kRunningIdx]];
		    assert(request);
		    assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
		    if (this.timeout) {
		      // istanbul ignore else: only for jest
		      if (this.timeout.refresh) {
		        this.timeout.refresh();
		      }
		    }
		    assert(statusCode >= 200);
		    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
		      util.destroy(socket, new ResponseExceededMaxSizeError());
		      return -1;
		    }
		    this.bytesRead += buf.length;
		    if (request.onData(buf) === false) {
		      return constants.ERROR.PAUSED;
		    }
		  }
		  onMessageComplete() {
		    const {
		      client,
		      socket,
		      statusCode,
		      upgrade,
		      headers,
		      contentLength,
		      bytesRead,
		      shouldKeepAlive
		    } = this;
		    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
		      return -1;
		    }
		    if (upgrade) {
		      return;
		    }
		    const request = client[kQueue][client[kRunningIdx]];
		    assert(request);
		    assert(statusCode >= 100);
		    this.statusCode = null;
		    this.statusText = '';
		    this.bytesRead = 0;
		    this.contentLength = '';
		    this.keepAlive = '';
		    this.connection = '';
		    assert(this.headers.length % 2 === 0);
		    this.headers = [];
		    this.headersSize = 0;
		    if (statusCode < 200) {
		      return;
		    }

		    /* istanbul ignore next: should be handled by llhttp? */
		    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
		      util.destroy(socket, new ResponseContentLengthMismatchError());
		      return -1;
		    }
		    request.onComplete(headers);
		    client[kQueue][client[kRunningIdx]++] = null;
		    if (socket[kWriting]) {
		      assert.strictEqual(client[kRunning], 0);
		      // Response completed before request.
		      util.destroy(socket, new InformationalError('reset'));
		      return constants.ERROR.PAUSED;
		    } else if (!shouldKeepAlive) {
		      util.destroy(socket, new InformationalError('reset'));
		      return constants.ERROR.PAUSED;
		    } else if (socket[kReset] && client[kRunning] === 0) {
		      // Destroy socket once all requests have completed.
		      // The request at the tail of the pipeline is the one
		      // that requested reset and no further requests should
		      // have been queued since then.
		      util.destroy(socket, new InformationalError('reset'));
		      return constants.ERROR.PAUSED;
		    } else if (client[kPipelining] === 1) {
		      // We must wait a full event loop cycle to reuse this socket to make sure
		      // that non-spec compliant servers are not closing the connection even if they
		      // said they won't.
		      setImmediate(resume, client);
		    } else {
		      resume(client);
		    }
		  }
		}
		function onParserTimeout(parser) {
		  const {
		    socket,
		    timeoutType,
		    client
		  } = parser;

		  /* istanbul ignore else */
		  if (timeoutType === TIMEOUT_HEADERS) {
		    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
		      assert(!parser.paused, 'cannot be paused while waiting for headers');
		      util.destroy(socket, new HeadersTimeoutError());
		    }
		  } else if (timeoutType === TIMEOUT_BODY) {
		    if (!parser.paused) {
		      util.destroy(socket, new BodyTimeoutError());
		    }
		  } else if (timeoutType === TIMEOUT_IDLE) {
		    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
		    util.destroy(socket, new InformationalError('socket idle timeout'));
		  }
		}
		function onSocketReadable() {
		  const {
		    [kParser]: parser
		  } = this;
		  if (parser) {
		    parser.readMore();
		  }
		}
		function onSocketError(err) {
		  const {
		    [kClient]: client,
		    [kParser]: parser
		  } = this;
		  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
		  if (client[kHTTPConnVersion] !== 'h2') {
		    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
		    // to the user.
		    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
		      // We treat all incoming data so for as a valid response.
		      parser.onMessageComplete();
		      return;
		    }
		  }
		  this[kError] = err;
		  onError(this[kClient], err);
		}
		function onError(client, err) {
		  if (client[kRunning] === 0 && err.code !== 'UND_ERR_INFO' && err.code !== 'UND_ERR_SOCKET') {
		    // Error is not caused by running request and not a recoverable
		    // socket error.

		    assert(client[kPendingIdx] === client[kRunningIdx]);
		    const requests = client[kQueue].splice(client[kRunningIdx]);
		    for (let i = 0; i < requests.length; i++) {
		      const request = requests[i];
		      errorRequest(client, request, err);
		    }
		    assert(client[kSize] === 0);
		  }
		}
		function onSocketEnd() {
		  const {
		    [kParser]: parser,
		    [kClient]: client
		  } = this;
		  if (client[kHTTPConnVersion] !== 'h2') {
		    if (parser.statusCode && !parser.shouldKeepAlive) {
		      // We treat all incoming data so far as a valid response.
		      parser.onMessageComplete();
		      return;
		    }
		  }
		  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));
		}
		function onSocketClose() {
		  const {
		    [kClient]: client,
		    [kParser]: parser
		  } = this;
		  if (client[kHTTPConnVersion] === 'h1' && parser) {
		    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
		      // We treat all incoming data so far as a valid response.
		      parser.onMessageComplete();
		    }
		    this[kParser].destroy();
		    this[kParser] = null;
		  }
		  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));
		  client[kSocket] = null;
		  if (client.destroyed) {
		    assert(client[kPending] === 0);

		    // Fail entire queue.
		    const requests = client[kQueue].splice(client[kRunningIdx]);
		    for (let i = 0; i < requests.length; i++) {
		      const request = requests[i];
		      errorRequest(client, request, err);
		    }
		  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
		    // Fail head of pipeline.
		    const request = client[kQueue][client[kRunningIdx]];
		    client[kQueue][client[kRunningIdx]++] = null;
		    errorRequest(client, request, err);
		  }
		  client[kPendingIdx] = client[kRunningIdx];
		  assert(client[kRunning] === 0);
		  client.emit('disconnect', client[kUrl], [client], err);
		  resume(client);
		}
		async function connect(client) {
		  assert(!client[kConnecting]);
		  assert(!client[kSocket]);
		  let {
		    host,
		    hostname,
		    protocol,
		    port
		  } = client[kUrl];

		  // Resolve ipv6
		  if (hostname[0] === '[') {
		    const idx = hostname.indexOf(']');
		    assert(idx !== -1);
		    const ip = hostname.substring(1, idx);
		    assert(net.isIP(ip));
		    hostname = ip;
		  }
		  client[kConnecting] = true;
		  if (channels.beforeConnect.hasSubscribers) {
		    channels.beforeConnect.publish({
		      connectParams: {
		        host,
		        hostname,
		        protocol,
		        port,
		        servername: client[kServerName],
		        localAddress: client[kLocalAddress]
		      },
		      connector: client[kConnector]
		    });
		  }
		  try {
		    const socket = await new Promise((resolve, reject) => {
		      client[kConnector]({
		        host,
		        hostname,
		        protocol,
		        port,
		        servername: client[kServerName],
		        localAddress: client[kLocalAddress]
		      }, (err, socket) => {
		        if (err) {
		          reject(err);
		        } else {
		          resolve(socket);
		        }
		      });
		    });
		    if (client.destroyed) {
		      util.destroy(socket.on('error', () => {}), new ClientDestroyedError());
		      return;
		    }
		    client[kConnecting] = false;
		    assert(socket);
		    const isH2 = socket.alpnProtocol === 'h2';
		    if (isH2) {
		      if (!h2ExperimentalWarned) {
		        h2ExperimentalWarned = true;
		        process.emitWarning('H2 support is experimental, expect them to change at any time.', {
		          code: 'UNDICI-H2'
		        });
		      }
		      const session = http2.connect(client[kUrl], {
		        createConnection: () => socket,
		        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
		      });
		      client[kHTTPConnVersion] = 'h2';
		      session[kClient] = client;
		      session[kSocket] = socket;
		      session.on('error', onHttp2SessionError);
		      session.on('frameError', onHttp2FrameError);
		      session.on('end', onHttp2SessionEnd);
		      session.on('goaway', onHTTP2GoAway);
		      session.on('close', onSocketClose);
		      session.unref();
		      client[kHTTP2Session] = session;
		      socket[kHTTP2Session] = session;
		    } else {
		      if (!llhttpInstance) {
		        llhttpInstance = await llhttpPromise;
		        llhttpPromise = null;
		      }
		      socket[kNoRef] = false;
		      socket[kWriting] = false;
		      socket[kReset] = false;
		      socket[kBlocking] = false;
		      socket[kParser] = new Parser(client, socket, llhttpInstance);
		    }
		    socket[kCounter] = 0;
		    socket[kMaxRequests] = client[kMaxRequests];
		    socket[kClient] = client;
		    socket[kError] = null;
		    socket.on('error', onSocketError).on('readable', onSocketReadable).on('end', onSocketEnd).on('close', onSocketClose);
		    client[kSocket] = socket;
		    if (channels.connected.hasSubscribers) {
		      channels.connected.publish({
		        connectParams: {
		          host,
		          hostname,
		          protocol,
		          port,
		          servername: client[kServerName],
		          localAddress: client[kLocalAddress]
		        },
		        connector: client[kConnector],
		        socket
		      });
		    }
		    client.emit('connect', client[kUrl], [client]);
		  } catch (err) {
		    if (client.destroyed) {
		      return;
		    }
		    client[kConnecting] = false;
		    if (channels.connectError.hasSubscribers) {
		      channels.connectError.publish({
		        connectParams: {
		          host,
		          hostname,
		          protocol,
		          port,
		          servername: client[kServerName],
		          localAddress: client[kLocalAddress]
		        },
		        connector: client[kConnector],
		        error: err
		      });
		    }
		    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
		      assert(client[kRunning] === 0);
		      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
		        const request = client[kQueue][client[kPendingIdx]++];
		        errorRequest(client, request, err);
		      }
		    } else {
		      onError(client, err);
		    }
		    client.emit('connectionError', client[kUrl], [client], err);
		  }
		  resume(client);
		}
		function emitDrain(client) {
		  client[kNeedDrain] = 0;
		  client.emit('drain', client[kUrl], [client]);
		}
		function resume(client, sync) {
		  if (client[kResuming] === 2) {
		    return;
		  }
		  client[kResuming] = 2;
		  _resume(client, sync);
		  client[kResuming] = 0;
		  if (client[kRunningIdx] > 256) {
		    client[kQueue].splice(0, client[kRunningIdx]);
		    client[kPendingIdx] -= client[kRunningIdx];
		    client[kRunningIdx] = 0;
		  }
		}
		function _resume(client, sync) {
		  while (true) {
		    if (client.destroyed) {
		      assert(client[kPending] === 0);
		      return;
		    }
		    if (client[kClosedResolve] && !client[kSize]) {
		      client[kClosedResolve]();
		      client[kClosedResolve] = null;
		      return;
		    }
		    const socket = client[kSocket];
		    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
		      if (client[kSize] === 0) {
		        if (!socket[kNoRef] && socket.unref) {
		          socket.unref();
		          socket[kNoRef] = true;
		        }
		      } else if (socket[kNoRef] && socket.ref) {
		        socket.ref();
		        socket[kNoRef] = false;
		      }
		      if (client[kSize] === 0) {
		        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
		          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
		        }
		      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
		        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
		          const request = client[kQueue][client[kRunningIdx]];
		          const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];
		          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
		        }
		      }
		    }
		    if (client[kBusy]) {
		      client[kNeedDrain] = 2;
		    } else if (client[kNeedDrain] === 2) {
		      if (sync) {
		        client[kNeedDrain] = 1;
		        process.nextTick(emitDrain, client);
		      } else {
		        emitDrain(client);
		      }
		      continue;
		    }
		    if (client[kPending] === 0) {
		      return;
		    }
		    if (client[kRunning] >= (client[kPipelining] || 1)) {
		      return;
		    }
		    const request = client[kQueue][client[kPendingIdx]];
		    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
		      if (client[kRunning] > 0) {
		        return;
		      }
		      client[kServerName] = request.servername;
		      if (socket && socket.servername !== request.servername) {
		        util.destroy(socket, new InformationalError('servername changed'));
		        return;
		      }
		    }
		    if (client[kConnecting]) {
		      return;
		    }
		    if (!socket && !client[kHTTP2Session]) {
		      connect(client);
		      return;
		    }
		    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
		      return;
		    }
		    if (client[kRunning] > 0 && !request.idempotent) {
		      // Non-idempotent request cannot be retried.
		      // Ensure that no other requests are inflight and
		      // could cause failure.
		      return;
		    }
		    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
		      // Don't dispatch an upgrade until all preceding requests have completed.
		      // A misbehaving server might upgrade the connection before all pipelined
		      // request has completed.
		      return;
		    }
		    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
		      // Request with stream or iterator body can error while other requests
		      // are inflight and indirectly error those as well.
		      // Ensure this doesn't happen by waiting for inflight
		      // to complete before dispatching.

		      // Request with stream or iterator body cannot be retried.
		      // Ensure that no other requests are inflight and
		      // could cause failure.
		      return;
		    }
		    if (!request.aborted && write(client, request)) {
		      client[kPendingIdx]++;
		    } else {
		      client[kQueue].splice(client[kPendingIdx], 1);
		    }
		  }
		}

		// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
		function shouldSendContentLength(method) {
		  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT';
		}
		function write(client, request) {
		  if (client[kHTTPConnVersion] === 'h2') {
		    writeH2(client, client[kHTTP2Session], request);
		    return;
		  }
		  const {
		    body,
		    method,
		    path,
		    host,
		    upgrade,
		    headers,
		    blocking,
		    reset
		  } = request;

		  // https://tools.ietf.org/html/rfc7231#section-4.3.1
		  // https://tools.ietf.org/html/rfc7231#section-4.3.2
		  // https://tools.ietf.org/html/rfc7231#section-4.3.5

		  // Sending a payload body on a request that does not
		  // expect it can cause undefined behavior on some
		  // servers and corrupt connection state. Do not
		  // re-use the connection for further requests.

		  const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';
		  if (body && typeof body.read === 'function') {
		    // Try to read EOF in order to get length.
		    body.read(0);
		  }
		  const bodyLength = util.bodyLength(body);
		  let contentLength = bodyLength;
		  if (contentLength === null) {
		    contentLength = request.contentLength;
		  }
		  if (contentLength === 0 && !expectsPayload) {
		    // https://tools.ietf.org/html/rfc7230#section-3.3.2
		    // A user agent SHOULD NOT send a Content-Length header field when
		    // the request message does not contain a payload body and the method
		    // semantics do not anticipate such a body.

		    contentLength = null;
		  }

		  // https://github.com/nodejs/undici/issues/2046
		  // A user agent may send a Content-Length header with 0 value, this should be allowed.
		  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
		    if (client[kStrictContentLength]) {
		      errorRequest(client, request, new RequestContentLengthMismatchError());
		      return false;
		    }
		    process.emitWarning(new RequestContentLengthMismatchError());
		  }
		  const socket = client[kSocket];
		  try {
		    request.onConnect(err => {
		      if (request.aborted || request.completed) {
		        return;
		      }
		      errorRequest(client, request, err || new RequestAbortedError());
		      util.destroy(socket, new InformationalError('aborted'));
		    });
		  } catch (err) {
		    errorRequest(client, request, err);
		  }
		  if (request.aborted) {
		    return false;
		  }
		  if (method === 'HEAD') {
		    // https://github.com/mcollina/undici/issues/258
		    // Close after a HEAD request to interop with misbehaving servers
		    // that may send a body in the response.

		    socket[kReset] = true;
		  }
		  if (upgrade || method === 'CONNECT') {
		    // On CONNECT or upgrade, block pipeline from dispatching further
		    // requests on this connection.

		    socket[kReset] = true;
		  }
		  if (reset != null) {
		    socket[kReset] = reset;
		  }
		  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
		    socket[kReset] = true;
		  }
		  if (blocking) {
		    socket[kBlocking] = true;
		  }
		  let header = `${method} ${path} HTTP/1.1\r\n`;
		  if (typeof host === 'string') {
		    header += `host: ${host}\r\n`;
		  } else {
		    header += client[kHostHeader];
		  }
		  if (upgrade) {
		    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`;
		  } else if (client[kPipelining] && !socket[kReset]) {
		    header += 'connection: keep-alive\r\n';
		  } else {
		    header += 'connection: close\r\n';
		  }
		  if (headers) {
		    header += headers;
		  }
		  if (channels.sendHeaders.hasSubscribers) {
		    channels.sendHeaders.publish({
		      request,
		      headers: header,
		      socket
		    });
		  }

		  /* istanbul ignore else: assertion */
		  if (!body || bodyLength === 0) {
		    if (contentLength === 0) {
		      socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1');
		    } else {
		      assert(contentLength === null, 'no body must not have content length');
		      socket.write(`${header}\r\n`, 'latin1');
		    }
		    request.onRequestSent();
		  } else if (util.isBuffer(body)) {
		    assert(contentLength === body.byteLength, 'buffer body must have content length');
		    socket.cork();
		    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
		    socket.write(body);
		    socket.uncork();
		    request.onBodySent(body);
		    request.onRequestSent();
		    if (!expectsPayload) {
		      socket[kReset] = true;
		    }
		  } else if (util.isBlobLike(body)) {
		    if (typeof body.stream === 'function') {
		      writeIterable({
		        body: body.stream(),
		        client,
		        request,
		        socket,
		        contentLength,
		        header,
		        expectsPayload
		      });
		    } else {
		      writeBlob({
		        body,
		        client,
		        request,
		        socket,
		        contentLength,
		        header,
		        expectsPayload
		      });
		    }
		  } else if (util.isStream(body)) {
		    writeStream({
		      body,
		      client,
		      request,
		      socket,
		      contentLength,
		      header,
		      expectsPayload
		    });
		  } else if (util.isIterable(body)) {
		    writeIterable({
		      body,
		      client,
		      request,
		      socket,
		      contentLength,
		      header,
		      expectsPayload
		    });
		  } else {
		    assert(false);
		  }
		  return true;
		}
		function writeH2(client, session, request) {
		  const {
		    body,
		    method,
		    path,
		    host,
		    upgrade,
		    expectContinue,
		    signal,
		    headers: reqHeaders
		  } = request;
		  let headers;
		  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());else headers = reqHeaders;
		  if (upgrade) {
		    errorRequest(client, request, new Error('Upgrade not supported for H2'));
		    return false;
		  }
		  try {
		    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
		    request.onConnect(err => {
		      if (request.aborted || request.completed) {
		        return;
		      }
		      errorRequest(client, request, err || new RequestAbortedError());
		    });
		  } catch (err) {
		    errorRequest(client, request, err);
		  }
		  if (request.aborted) {
		    return false;
		  }

		  /** @type {import('node:http2').ClientHttp2Stream} */
		  let stream;
		  const h2State = client[kHTTP2SessionState];
		  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
		  headers[HTTP2_HEADER_METHOD] = method;
		  if (method === 'CONNECT') {
		    session.ref();
		    // we are already connected, streams are pending, first request
		    // will create a new stream. We trigger a request to create the stream and wait until
		    // `ready` event is triggered
		    // We disabled endStream to allow the user to write to the stream
		    stream = session.request(headers, {
		      endStream: false,
		      signal
		    });
		    if (stream.id && !stream.pending) {
		      request.onUpgrade(null, null, stream);
		      ++h2State.openStreams;
		    } else {
		      stream.once('ready', () => {
		        request.onUpgrade(null, null, stream);
		        ++h2State.openStreams;
		      });
		    }
		    stream.once('close', () => {
		      h2State.openStreams -= 1;
		      // TODO(HTTP/2): unref only if current streams count is 0
		      if (h2State.openStreams === 0) session.unref();
		    });
		    return true;
		  }

		  // https://tools.ietf.org/html/rfc7540#section-8.3
		  // :path and :scheme headers must be omited when sending CONNECT

		  headers[HTTP2_HEADER_PATH] = path;
		  headers[HTTP2_HEADER_SCHEME] = 'https';

		  // https://tools.ietf.org/html/rfc7231#section-4.3.1
		  // https://tools.ietf.org/html/rfc7231#section-4.3.2
		  // https://tools.ietf.org/html/rfc7231#section-4.3.5

		  // Sending a payload body on a request that does not
		  // expect it can cause undefined behavior on some
		  // servers and corrupt connection state. Do not
		  // re-use the connection for further requests.

		  const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';
		  if (body && typeof body.read === 'function') {
		    // Try to read EOF in order to get length.
		    body.read(0);
		  }
		  let contentLength = util.bodyLength(body);
		  if (contentLength == null) {
		    contentLength = request.contentLength;
		  }
		  if (contentLength === 0 || !expectsPayload) {
		    // https://tools.ietf.org/html/rfc7230#section-3.3.2
		    // A user agent SHOULD NOT send a Content-Length header field when
		    // the request message does not contain a payload body and the method
		    // semantics do not anticipate such a body.

		    contentLength = null;
		  }

		  // https://github.com/nodejs/undici/issues/2046
		  // A user agent may send a Content-Length header with 0 value, this should be allowed.
		  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
		    if (client[kStrictContentLength]) {
		      errorRequest(client, request, new RequestContentLengthMismatchError());
		      return false;
		    }
		    process.emitWarning(new RequestContentLengthMismatchError());
		  }
		  if (contentLength != null) {
		    assert(body, 'no body must not have content length');
		    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
		  }
		  session.ref();
		  const shouldEndStream = method === 'GET' || method === 'HEAD';
		  if (expectContinue) {
		    headers[HTTP2_HEADER_EXPECT] = '100-continue';
		    stream = session.request(headers, {
		      endStream: shouldEndStream,
		      signal
		    });
		    stream.once('continue', writeBodyH2);
		  } else {
		    stream = session.request(headers, {
		      endStream: shouldEndStream,
		      signal
		    });
		    writeBodyH2();
		  }

		  // Increment counter as we have new several streams open
		  ++h2State.openStreams;
		  stream.once('response', headers => {
		    const {
		      [HTTP2_HEADER_STATUS]: statusCode,
		      ...realHeaders
		    } = headers;
		    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {
		      stream.pause();
		    }
		  });
		  stream.once('end', () => {
		    request.onComplete([]);
		  });
		  stream.on('data', chunk => {
		    if (request.onData(chunk) === false) {
		      stream.pause();
		    }
		  });
		  stream.once('close', () => {
		    h2State.openStreams -= 1;
		    // TODO(HTTP/2): unref only if current streams count is 0
		    if (h2State.openStreams === 0) {
		      session.unref();
		    }
		  });
		  stream.once('error', function (err) {
		    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
		      h2State.streams -= 1;
		      util.destroy(stream, err);
		    }
		  });
		  stream.once('frameError', (type, code) => {
		    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
		    errorRequest(client, request, err);
		    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
		      h2State.streams -= 1;
		      util.destroy(stream, err);
		    }
		  });

		  // stream.on('aborted', () => {
		  //   // TODO(HTTP/2): Support aborted
		  // })

		  // stream.on('timeout', () => {
		  //   // TODO(HTTP/2): Support timeout
		  // })

		  // stream.on('push', headers => {
		  //   // TODO(HTTP/2): Suppor push
		  // })

		  // stream.on('trailers', headers => {
		  //   // TODO(HTTP/2): Support trailers
		  // })

		  return true;
		  function writeBodyH2() {
		    /* istanbul ignore else: assertion */
		    if (!body) {
		      request.onRequestSent();
		    } else if (util.isBuffer(body)) {
		      assert(contentLength === body.byteLength, 'buffer body must have content length');
		      stream.cork();
		      stream.write(body);
		      stream.uncork();
		      stream.end();
		      request.onBodySent(body);
		      request.onRequestSent();
		    } else if (util.isBlobLike(body)) {
		      if (typeof body.stream === 'function') {
		        writeIterable({
		          client,
		          request,
		          contentLength,
		          h2stream: stream,
		          expectsPayload,
		          body: body.stream(),
		          socket: client[kSocket],
		          header: ''
		        });
		      } else {
		        writeBlob({
		          body,
		          client,
		          request,
		          contentLength,
		          expectsPayload,
		          h2stream: stream,
		          header: '',
		          socket: client[kSocket]
		        });
		      }
		    } else if (util.isStream(body)) {
		      writeStream({
		        body,
		        client,
		        request,
		        contentLength,
		        expectsPayload,
		        socket: client[kSocket],
		        h2stream: stream,
		        header: ''
		      });
		    } else if (util.isIterable(body)) {
		      writeIterable({
		        body,
		        client,
		        request,
		        contentLength,
		        expectsPayload,
		        header: '',
		        h2stream: stream,
		        socket: client[kSocket]
		      });
		    } else {
		      assert(false);
		    }
		  }
		}
		function writeStream({
		  h2stream,
		  body,
		  client,
		  request,
		  socket,
		  contentLength,
		  header,
		  expectsPayload
		}) {
		  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');
		  if (client[kHTTPConnVersion] === 'h2') {
		    // For HTTP/2, is enough to pipe the stream
		    const pipe = pipeline(body, h2stream, err => {
		      if (err) {
		        util.destroy(body, err);
		        util.destroy(h2stream, err);
		      } else {
		        request.onRequestSent();
		      }
		    });
		    pipe.on('data', onPipeData);
		    pipe.once('end', () => {
		      pipe.removeListener('data', onPipeData);
		      util.destroy(pipe);
		    });
		    function onPipeData(chunk) {
		      request.onBodySent(chunk);
		    }
		    return;
		  }
		  let finished = false;
		  const writer = new AsyncWriter({
		    socket,
		    request,
		    contentLength,
		    client,
		    expectsPayload,
		    header
		  });
		  const onData = function (chunk) {
		    if (finished) {
		      return;
		    }
		    try {
		      if (!writer.write(chunk) && this.pause) {
		        this.pause();
		      }
		    } catch (err) {
		      util.destroy(this, err);
		    }
		  };
		  const onDrain = function () {
		    if (finished) {
		      return;
		    }
		    if (body.resume) {
		      body.resume();
		    }
		  };
		  const onAbort = function () {
		    if (finished) {
		      return;
		    }
		    const err = new RequestAbortedError();
		    queueMicrotask(() => onFinished(err));
		  };
		  const onFinished = function (err) {
		    if (finished) {
		      return;
		    }
		    finished = true;
		    assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
		    socket.off('drain', onDrain).off('error', onFinished);
		    body.removeListener('data', onData).removeListener('end', onFinished).removeListener('error', onFinished).removeListener('close', onAbort);
		    if (!err) {
		      try {
		        writer.end();
		      } catch (er) {
		        err = er;
		      }
		    }
		    writer.destroy(err);
		    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
		      util.destroy(body, err);
		    } else {
		      util.destroy(body);
		    }
		  };
		  body.on('data', onData).on('end', onFinished).on('error', onFinished).on('close', onAbort);
		  if (body.resume) {
		    body.resume();
		  }
		  socket.on('drain', onDrain).on('error', onFinished);
		}
		async function writeBlob({
		  h2stream,
		  body,
		  client,
		  request,
		  socket,
		  contentLength,
		  header,
		  expectsPayload
		}) {
		  assert(contentLength === body.size, 'blob body must have content length');
		  const isH2 = client[kHTTPConnVersion] === 'h2';
		  try {
		    if (contentLength != null && contentLength !== body.size) {
		      throw new RequestContentLengthMismatchError();
		    }
		    const buffer = Buffer.from(await body.arrayBuffer());
		    if (isH2) {
		      h2stream.cork();
		      h2stream.write(buffer);
		      h2stream.uncork();
		    } else {
		      socket.cork();
		      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
		      socket.write(buffer);
		      socket.uncork();
		    }
		    request.onBodySent(buffer);
		    request.onRequestSent();
		    if (!expectsPayload) {
		      socket[kReset] = true;
		    }
		    resume(client);
		  } catch (err) {
		    util.destroy(isH2 ? h2stream : socket, err);
		  }
		}
		async function writeIterable({
		  h2stream,
		  body,
		  client,
		  request,
		  socket,
		  contentLength,
		  header,
		  expectsPayload
		}) {
		  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');
		  let callback = null;
		  function onDrain() {
		    if (callback) {
		      const cb = callback;
		      callback = null;
		      cb();
		    }
		  }
		  const waitForDrain = () => new Promise((resolve, reject) => {
		    assert(callback === null);
		    if (socket[kError]) {
		      reject(socket[kError]);
		    } else {
		      callback = resolve;
		    }
		  });
		  if (client[kHTTPConnVersion] === 'h2') {
		    h2stream.on('close', onDrain).on('drain', onDrain);
		    try {
		      // It's up to the user to somehow abort the async iterable.
		      for await (const chunk of body) {
		        if (socket[kError]) {
		          throw socket[kError];
		        }
		        const res = h2stream.write(chunk);
		        request.onBodySent(chunk);
		        if (!res) {
		          await waitForDrain();
		        }
		      }
		    } catch (err) {
		      h2stream.destroy(err);
		    } finally {
		      request.onRequestSent();
		      h2stream.end();
		      h2stream.off('close', onDrain).off('drain', onDrain);
		    }
		    return;
		  }
		  socket.on('close', onDrain).on('drain', onDrain);
		  const writer = new AsyncWriter({
		    socket,
		    request,
		    contentLength,
		    client,
		    expectsPayload,
		    header
		  });
		  try {
		    // It's up to the user to somehow abort the async iterable.
		    for await (const chunk of body) {
		      if (socket[kError]) {
		        throw socket[kError];
		      }
		      if (!writer.write(chunk)) {
		        await waitForDrain();
		      }
		    }
		    writer.end();
		  } catch (err) {
		    writer.destroy(err);
		  } finally {
		    socket.off('close', onDrain).off('drain', onDrain);
		  }
		}
		class AsyncWriter {
		  constructor({
		    socket,
		    request,
		    contentLength,
		    client,
		    expectsPayload,
		    header
		  }) {
		    this.socket = socket;
		    this.request = request;
		    this.contentLength = contentLength;
		    this.client = client;
		    this.bytesWritten = 0;
		    this.expectsPayload = expectsPayload;
		    this.header = header;
		    socket[kWriting] = true;
		  }
		  write(chunk) {
		    const {
		      socket,
		      request,
		      contentLength,
		      client,
		      bytesWritten,
		      expectsPayload,
		      header
		    } = this;
		    if (socket[kError]) {
		      throw socket[kError];
		    }
		    if (socket.destroyed) {
		      return false;
		    }
		    const len = Buffer.byteLength(chunk);
		    if (!len) {
		      return true;
		    }

		    // We should defer writing chunks.
		    if (contentLength !== null && bytesWritten + len > contentLength) {
		      if (client[kStrictContentLength]) {
		        throw new RequestContentLengthMismatchError();
		      }
		      process.emitWarning(new RequestContentLengthMismatchError());
		    }
		    socket.cork();
		    if (bytesWritten === 0) {
		      if (!expectsPayload) {
		        socket[kReset] = true;
		      }
		      if (contentLength === null) {
		        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1');
		      } else {
		        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1');
		      }
		    }
		    if (contentLength === null) {
		      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1');
		    }
		    this.bytesWritten += len;
		    const ret = socket.write(chunk);
		    socket.uncork();
		    request.onBodySent(chunk);
		    if (!ret) {
		      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
		        // istanbul ignore else: only for jest
		        if (socket[kParser].timeout.refresh) {
		          socket[kParser].timeout.refresh();
		        }
		      }
		    }
		    return ret;
		  }
		  end() {
		    const {
		      socket,
		      contentLength,
		      client,
		      bytesWritten,
		      expectsPayload,
		      header,
		      request
		    } = this;
		    request.onRequestSent();
		    socket[kWriting] = false;
		    if (socket[kError]) {
		      throw socket[kError];
		    }
		    if (socket.destroyed) {
		      return;
		    }
		    if (bytesWritten === 0) {
		      if (expectsPayload) {
		        // https://tools.ietf.org/html/rfc7230#section-3.3.2
		        // A user agent SHOULD send a Content-Length in a request message when
		        // no Transfer-Encoding is sent and the request method defines a meaning
		        // for an enclosed payload body.

		        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1');
		      } else {
		        socket.write(`${header}\r\n`, 'latin1');
		      }
		    } else if (contentLength === null) {
		      socket.write('\r\n0\r\n\r\n', 'latin1');
		    }
		    if (contentLength !== null && bytesWritten !== contentLength) {
		      if (client[kStrictContentLength]) {
		        throw new RequestContentLengthMismatchError();
		      } else {
		        process.emitWarning(new RequestContentLengthMismatchError());
		      }
		    }
		    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
		      // istanbul ignore else: only for jest
		      if (socket[kParser].timeout.refresh) {
		        socket[kParser].timeout.refresh();
		      }
		    }
		    resume(client);
		  }
		  destroy(err) {
		    const {
		      socket,
		      client
		    } = this;
		    socket[kWriting] = false;
		    if (err) {
		      assert(client[kRunning] <= 1, 'pipeline should only contain this request');
		      util.destroy(socket, err);
		    }
		  }
		}
		function errorRequest(client, request, err) {
		  try {
		    request.onError(err);
		    assert(request.aborted);
		  } catch (err) {
		    client.emit('error', err);
		  }
		}
		client = Client;
		return client;
	}

	/* eslint-disable */

	var fixedQueue;
	var hasRequiredFixedQueue;

	function requireFixedQueue () {
		if (hasRequiredFixedQueue) return fixedQueue;
		hasRequiredFixedQueue = 1;

		// Extracted from node/lib/internal/fixed_queue.js

		// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
		const kSize = 2048;
		const kMask = kSize - 1;

		// The FixedQueue is implemented as a singly-linked list of fixed-size
		// circular buffers. It looks something like this:
		//
		//  head                                                       tail
		//    |                                                          |
		//    v                                                          v
		// +-----------+ <-----\       +-----------+ <------\         +-----------+
		// |  [null]   |        \----- |   next    |         \------- |   next    |
		// +-----------+               +-----------+                  +-----------+
		// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
		// |   item    |               |   item    |                  |  [empty]  |
		// |   item    |               |   item    |                  |  [empty]  |
		// |   item    |               |   item    |                  |  [empty]  |
		// |   item    |               |   item    |       bottom --> |   item    |
		// |   item    |               |   item    |                  |   item    |
		// |    ...    |               |    ...    |                  |    ...    |
		// |   item    |               |   item    |                  |   item    |
		// |   item    |               |   item    |                  |   item    |
		// |  [empty]  | <-- top       |   item    |                  |   item    |
		// |  [empty]  |               |   item    |                  |   item    |
		// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
		// +-----------+               +-----------+                  +-----------+
		//
		// Or, if there is only one circular buffer, it looks something
		// like either of these:
		//
		//  head   tail                                 head   tail
		//    |     |                                     |     |
		//    v     v                                     v     v
		// +-----------+                               +-----------+
		// |  [null]   |                               |  [null]   |
		// +-----------+                               +-----------+
		// |  [empty]  |                               |   item    |
		// |  [empty]  |                               |   item    |
		// |   item    | <-- bottom            top --> |  [empty]  |
		// |   item    |                               |  [empty]  |
		// |  [empty]  | <-- top            bottom --> |   item    |
		// |  [empty]  |                               |   item    |
		// +-----------+                               +-----------+
		//
		// Adding a value means moving `top` forward by one, removing means
		// moving `bottom` forward by one. After reaching the end, the queue
		// wraps around.
		//
		// When `top === bottom` the current queue is empty and when
		// `top + 1 === bottom` it's full. This wastes a single space of storage
		// but allows much quicker checks.

		class FixedCircularBuffer {
		  constructor() {
		    this.bottom = 0;
		    this.top = 0;
		    this.list = new Array(kSize);
		    this.next = null;
		  }
		  isEmpty() {
		    return this.top === this.bottom;
		  }
		  isFull() {
		    return (this.top + 1 & kMask) === this.bottom;
		  }
		  push(data) {
		    this.list[this.top] = data;
		    this.top = this.top + 1 & kMask;
		  }
		  shift() {
		    const nextItem = this.list[this.bottom];
		    if (nextItem === undefined) return null;
		    this.list[this.bottom] = undefined;
		    this.bottom = this.bottom + 1 & kMask;
		    return nextItem;
		  }
		}
		fixedQueue = class FixedQueue {
		  constructor() {
		    this.head = this.tail = new FixedCircularBuffer();
		  }
		  isEmpty() {
		    return this.head.isEmpty();
		  }
		  push(data) {
		    if (this.head.isFull()) {
		      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
		      // and sets it as the new main queue.
		      this.head = this.head.next = new FixedCircularBuffer();
		    }
		    this.head.push(data);
		  }
		  shift() {
		    const tail = this.tail;
		    const next = tail.shift();
		    if (tail.isEmpty() && tail.next !== null) {
		      // If there is another queue, it forms the new tail.
		      this.tail = tail.next;
		    }
		    return next;
		  }
		};
		return fixedQueue;
	}

	var poolStats;
	var hasRequiredPoolStats;

	function requirePoolStats () {
		if (hasRequiredPoolStats) return poolStats;
		hasRequiredPoolStats = 1;
		const {
		  kFree,
		  kConnected,
		  kPending,
		  kQueued,
		  kRunning,
		  kSize
		} = requireSymbols$4();
		const kPool = Symbol('pool');
		class PoolStats {
		  constructor(pool) {
		    this[kPool] = pool;
		  }
		  get connected() {
		    return this[kPool][kConnected];
		  }
		  get free() {
		    return this[kPool][kFree];
		  }
		  get pending() {
		    return this[kPool][kPending];
		  }
		  get queued() {
		    return this[kPool][kQueued];
		  }
		  get running() {
		    return this[kPool][kRunning];
		  }
		  get size() {
		    return this[kPool][kSize];
		  }
		}
		poolStats = PoolStats;
		return poolStats;
	}

	var poolBase;
	var hasRequiredPoolBase;

	function requirePoolBase () {
		if (hasRequiredPoolBase) return poolBase;
		hasRequiredPoolBase = 1;

		const DispatcherBase = requireDispatcherBase();
		const FixedQueue = requireFixedQueue();
		const {
		  kConnected,
		  kSize,
		  kRunning,
		  kPending,
		  kQueued,
		  kBusy,
		  kFree,
		  kUrl,
		  kClose,
		  kDestroy,
		  kDispatch
		} = requireSymbols$4();
		const PoolStats = requirePoolStats();
		const kClients = Symbol('clients');
		const kNeedDrain = Symbol('needDrain');
		const kQueue = Symbol('queue');
		const kClosedResolve = Symbol('closed resolve');
		const kOnDrain = Symbol('onDrain');
		const kOnConnect = Symbol('onConnect');
		const kOnDisconnect = Symbol('onDisconnect');
		const kOnConnectionError = Symbol('onConnectionError');
		const kGetDispatcher = Symbol('get dispatcher');
		const kAddClient = Symbol('add client');
		const kRemoveClient = Symbol('remove client');
		const kStats = Symbol('stats');
		class PoolBase extends DispatcherBase {
		  constructor() {
		    super();
		    this[kQueue] = new FixedQueue();
		    this[kClients] = [];
		    this[kQueued] = 0;
		    const pool = this;
		    this[kOnDrain] = function onDrain(origin, targets) {
		      const queue = pool[kQueue];
		      let needDrain = false;
		      while (!needDrain) {
		        const item = queue.shift();
		        if (!item) {
		          break;
		        }
		        pool[kQueued]--;
		        needDrain = !this.dispatch(item.opts, item.handler);
		      }
		      this[kNeedDrain] = needDrain;
		      if (!this[kNeedDrain] && pool[kNeedDrain]) {
		        pool[kNeedDrain] = false;
		        pool.emit('drain', origin, [pool, ...targets]);
		      }
		      if (pool[kClosedResolve] && queue.isEmpty()) {
		        Promise.all(pool[kClients].map(c => c.close())).then(pool[kClosedResolve]);
		      }
		    };
		    this[kOnConnect] = (origin, targets) => {
		      pool.emit('connect', origin, [pool, ...targets]);
		    };
		    this[kOnDisconnect] = (origin, targets, err) => {
		      pool.emit('disconnect', origin, [pool, ...targets], err);
		    };
		    this[kOnConnectionError] = (origin, targets, err) => {
		      pool.emit('connectionError', origin, [pool, ...targets], err);
		    };
		    this[kStats] = new PoolStats(this);
		  }
		  get [kBusy]() {
		    return this[kNeedDrain];
		  }
		  get [kConnected]() {
		    return this[kClients].filter(client => client[kConnected]).length;
		  }
		  get [kFree]() {
		    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length;
		  }
		  get [kPending]() {
		    let ret = this[kQueued];
		    for (const {
		      [kPending]: pending
		    } of this[kClients]) {
		      ret += pending;
		    }
		    return ret;
		  }
		  get [kRunning]() {
		    let ret = 0;
		    for (const {
		      [kRunning]: running
		    } of this[kClients]) {
		      ret += running;
		    }
		    return ret;
		  }
		  get [kSize]() {
		    let ret = this[kQueued];
		    for (const {
		      [kSize]: size
		    } of this[kClients]) {
		      ret += size;
		    }
		    return ret;
		  }
		  get stats() {
		    return this[kStats];
		  }
		  async [kClose]() {
		    if (this[kQueue].isEmpty()) {
		      return Promise.all(this[kClients].map(c => c.close()));
		    } else {
		      return new Promise(resolve => {
		        this[kClosedResolve] = resolve;
		      });
		    }
		  }
		  async [kDestroy](err) {
		    while (true) {
		      const item = this[kQueue].shift();
		      if (!item) {
		        break;
		      }
		      item.handler.onError(err);
		    }
		    return Promise.all(this[kClients].map(c => c.destroy(err)));
		  }
		  [kDispatch](opts, handler) {
		    const dispatcher = this[kGetDispatcher]();
		    if (!dispatcher) {
		      this[kNeedDrain] = true;
		      this[kQueue].push({
		        opts,
		        handler
		      });
		      this[kQueued]++;
		    } else if (!dispatcher.dispatch(opts, handler)) {
		      dispatcher[kNeedDrain] = true;
		      this[kNeedDrain] = !this[kGetDispatcher]();
		    }
		    return !this[kNeedDrain];
		  }
		  [kAddClient](client) {
		    client.on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);
		    this[kClients].push(client);
		    if (this[kNeedDrain]) {
		      process.nextTick(() => {
		        if (this[kNeedDrain]) {
		          this[kOnDrain](client[kUrl], [this, client]);
		        }
		      });
		    }
		    return this;
		  }
		  [kRemoveClient](client) {
		    client.close(() => {
		      const idx = this[kClients].indexOf(client);
		      if (idx !== -1) {
		        this[kClients].splice(idx, 1);
		      }
		    });
		    this[kNeedDrain] = this[kClients].some(dispatcher => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		  }
		}
		poolBase = {
		  PoolBase,
		  kClients,
		  kNeedDrain,
		  kAddClient,
		  kRemoveClient,
		  kGetDispatcher
		};
		return poolBase;
	}

	var pool;
	var hasRequiredPool;

	function requirePool () {
		if (hasRequiredPool) return pool;
		hasRequiredPool = 1;

		const {
		  PoolBase,
		  kClients,
		  kNeedDrain,
		  kAddClient,
		  kGetDispatcher
		} = requirePoolBase();
		const Client = requireClient();
		const {
		  InvalidArgumentError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  kUrl,
		  kInterceptors
		} = requireSymbols$4();
		const buildConnector = requireConnect();
		const kOptions = Symbol('options');
		const kConnections = Symbol('connections');
		const kFactory = Symbol('factory');
		function defaultFactory(origin, opts) {
		  return new Client(origin, opts);
		}
		class Pool extends PoolBase {
		  constructor(origin, {
		    connections,
		    factory = defaultFactory,
		    connect,
		    connectTimeout,
		    tls,
		    maxCachedSessions,
		    socketPath,
		    autoSelectFamily,
		    autoSelectFamilyAttemptTimeout,
		    allowH2,
		    ...options
		  } = {}) {
		    super();
		    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
		      throw new InvalidArgumentError('invalid connections');
		    }
		    if (typeof factory !== 'function') {
		      throw new InvalidArgumentError('factory must be a function.');
		    }
		    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
		      throw new InvalidArgumentError('connect must be a function or an object');
		    }
		    if (typeof connect !== 'function') {
		      connect = buildConnector({
		        ...tls,
		        maxCachedSessions,
		        allowH2,
		        socketPath,
		        timeout: connectTimeout,
		        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? {
		          autoSelectFamily,
		          autoSelectFamilyAttemptTimeout
		        } : undefined),
		        ...connect
		      });
		    }
		    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
		    this[kConnections] = connections || null;
		    this[kUrl] = util.parseOrigin(origin);
		    this[kOptions] = {
		      ...util.deepClone(options),
		      connect,
		      allowH2
		    };
		    this[kOptions].interceptors = options.interceptors ? {
		      ...options.interceptors
		    } : undefined;
		    this[kFactory] = factory;
		  }
		  [kGetDispatcher]() {
		    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain]);
		    if (dispatcher) {
		      return dispatcher;
		    }
		    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
		      dispatcher = this[kFactory](this[kUrl], this[kOptions]);
		      this[kAddClient](dispatcher);
		    }
		    return dispatcher;
		  }
		}
		pool = Pool;
		return pool;
	}

	var balancedPool;
	var hasRequiredBalancedPool;

	function requireBalancedPool () {
		if (hasRequiredBalancedPool) return balancedPool;
		hasRequiredBalancedPool = 1;

		const {
		  BalancedPoolMissingUpstreamError,
		  InvalidArgumentError
		} = requireErrors();
		const {
		  PoolBase,
		  kClients,
		  kNeedDrain,
		  kAddClient,
		  kRemoveClient,
		  kGetDispatcher
		} = requirePoolBase();
		const Pool = requirePool();
		const {
		  kUrl,
		  kInterceptors
		} = requireSymbols$4();
		const {
		  parseOrigin
		} = requireUtil$6();
		const kFactory = Symbol('factory');
		const kOptions = Symbol('options');
		const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');
		const kCurrentWeight = Symbol('kCurrentWeight');
		const kIndex = Symbol('kIndex');
		const kWeight = Symbol('kWeight');
		const kMaxWeightPerServer = Symbol('kMaxWeightPerServer');
		const kErrorPenalty = Symbol('kErrorPenalty');
		function getGreatestCommonDivisor(a, b) {
		  if (b === 0) return a;
		  return getGreatestCommonDivisor(b, a % b);
		}
		function defaultFactory(origin, opts) {
		  return new Pool(origin, opts);
		}
		class BalancedPool extends PoolBase {
		  constructor(upstreams = [], {
		    factory = defaultFactory,
		    ...opts
		  } = {}) {
		    super();
		    this[kOptions] = opts;
		    this[kIndex] = -1;
		    this[kCurrentWeight] = 0;
		    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
		    this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
		    if (!Array.isArray(upstreams)) {
		      upstreams = [upstreams];
		    }
		    if (typeof factory !== 'function') {
		      throw new InvalidArgumentError('factory must be a function.');
		    }
		    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
		    this[kFactory] = factory;
		    for (const upstream of upstreams) {
		      this.addUpstream(upstream);
		    }
		    this._updateBalancedPoolStats();
		  }
		  addUpstream(upstream) {
		    const upstreamOrigin = parseOrigin(upstream).origin;
		    if (this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {
		      return this;
		    }
		    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
		    this[kAddClient](pool);
		    pool.on('connect', () => {
		      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
		    });
		    pool.on('connectionError', () => {
		      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
		      this._updateBalancedPoolStats();
		    });
		    pool.on('disconnect', (...args) => {
		      const err = args[2];
		      if (err && err.code === 'UND_ERR_SOCKET') {
		        // decrease the weight of the pool.
		        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
		        this._updateBalancedPoolStats();
		      }
		    });
		    for (const client of this[kClients]) {
		      client[kWeight] = this[kMaxWeightPerServer];
		    }
		    this._updateBalancedPoolStats();
		    return this;
		  }
		  _updateBalancedPoolStats() {
		    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
		  }
		  removeUpstream(upstream) {
		    const upstreamOrigin = parseOrigin(upstream).origin;
		    const pool = this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);
		    if (pool) {
		      this[kRemoveClient](pool);
		    }
		    return this;
		  }
		  get upstreams() {
		    return this[kClients].filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true).map(p => p[kUrl].origin);
		  }
		  [kGetDispatcher]() {
		    // We validate that pools is greater than 0,
		    // otherwise we would have to wait until an upstream
		    // is added, which might never happen.
		    if (this[kClients].length === 0) {
		      throw new BalancedPoolMissingUpstreamError();
		    }
		    const dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		    if (!dispatcher) {
		      return;
		    }
		    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true);
		    if (allClientsBusy) {
		      return;
		    }
		    let counter = 0;
		    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain]);
		    while (counter++ < this[kClients].length) {
		      this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
		      const pool = this[kClients][this[kIndex]];

		      // find pool index with the largest weight
		      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
		        maxWeightIndex = this[kIndex];
		      }

		      // decrease the current weight every `this[kClients].length`.
		      if (this[kIndex] === 0) {
		        // Set the current weight to the next lower weight.
		        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
		        if (this[kCurrentWeight] <= 0) {
		          this[kCurrentWeight] = this[kMaxWeightPerServer];
		        }
		      }
		      if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
		        return pool;
		      }
		    }
		    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
		    this[kIndex] = maxWeightIndex;
		    return this[kClients][maxWeightIndex];
		  }
		}
		balancedPool = BalancedPool;
		return balancedPool;
	}

	var dispatcherWeakref;
	var hasRequiredDispatcherWeakref;

	function requireDispatcherWeakref () {
		if (hasRequiredDispatcherWeakref) return dispatcherWeakref;
		hasRequiredDispatcherWeakref = 1;

		/* istanbul ignore file: only for Node 12 */
		const {
		  kConnected,
		  kSize
		} = requireSymbols$4();
		class CompatWeakRef {
		  constructor(value) {
		    this.value = value;
		  }
		  deref() {
		    return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;
		  }
		}
		class CompatFinalizer {
		  constructor(finalizer) {
		    this.finalizer = finalizer;
		  }
		  register(dispatcher, key) {
		    if (dispatcher.on) {
		      dispatcher.on('disconnect', () => {
		        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
		          this.finalizer(key);
		        }
		      });
		    }
		  }
		}
		dispatcherWeakref = function () {
		  // FIXME: remove workaround when the Node bug is fixed
		  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
		  if (process.env.NODE_V8_COVERAGE) {
		    return {
		      WeakRef: CompatWeakRef,
		      FinalizationRegistry: CompatFinalizer
		    };
		  }
		  return {
		    WeakRef: commonjsGlobal.WeakRef || CompatWeakRef,
		    FinalizationRegistry: commonjsGlobal.FinalizationRegistry || CompatFinalizer
		  };
		};
		return dispatcherWeakref;
	}

	var agent;
	var hasRequiredAgent;

	function requireAgent () {
		if (hasRequiredAgent) return agent;
		hasRequiredAgent = 1;

		const {
		  InvalidArgumentError
		} = requireErrors();
		const {
		  kClients,
		  kRunning,
		  kClose,
		  kDestroy,
		  kDispatch,
		  kInterceptors
		} = requireSymbols$4();
		const DispatcherBase = requireDispatcherBase();
		const Pool = requirePool();
		const Client = requireClient();
		const util = requireUtil$6();
		const createRedirectInterceptor = requireRedirectInterceptor();
		const {
		  WeakRef,
		  FinalizationRegistry
		} = requireDispatcherWeakref()();
		const kOnConnect = Symbol('onConnect');
		const kOnDisconnect = Symbol('onDisconnect');
		const kOnConnectionError = Symbol('onConnectionError');
		const kMaxRedirections = Symbol('maxRedirections');
		const kOnDrain = Symbol('onDrain');
		const kFactory = Symbol('factory');
		const kFinalizer = Symbol('finalizer');
		const kOptions = Symbol('options');
		function defaultFactory(origin, opts) {
		  return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
		}
		class Agent extends DispatcherBase {
		  constructor({
		    factory = defaultFactory,
		    maxRedirections = 0,
		    connect,
		    ...options
		  } = {}) {
		    super();
		    if (typeof factory !== 'function') {
		      throw new InvalidArgumentError('factory must be a function.');
		    }
		    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
		      throw new InvalidArgumentError('connect must be a function or an object');
		    }
		    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
		      throw new InvalidArgumentError('maxRedirections must be a positive number');
		    }
		    if (connect && typeof connect !== 'function') {
		      connect = {
		        ...connect
		      };
		    }
		    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({
		      maxRedirections
		    })];
		    this[kOptions] = {
		      ...util.deepClone(options),
		      connect
		    };
		    this[kOptions].interceptors = options.interceptors ? {
		      ...options.interceptors
		    } : undefined;
		    this[kMaxRedirections] = maxRedirections;
		    this[kFactory] = factory;
		    this[kClients] = new Map();
		    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */key => {
		      const ref = this[kClients].get(key);
		      if (ref !== undefined && ref.deref() === undefined) {
		        this[kClients].delete(key);
		      }
		    });
		    const agent = this;
		    this[kOnDrain] = (origin, targets) => {
		      agent.emit('drain', origin, [agent, ...targets]);
		    };
		    this[kOnConnect] = (origin, targets) => {
		      agent.emit('connect', origin, [agent, ...targets]);
		    };
		    this[kOnDisconnect] = (origin, targets, err) => {
		      agent.emit('disconnect', origin, [agent, ...targets], err);
		    };
		    this[kOnConnectionError] = (origin, targets, err) => {
		      agent.emit('connectionError', origin, [agent, ...targets], err);
		    };
		  }
		  get [kRunning]() {
		    let ret = 0;
		    for (const ref of this[kClients].values()) {
		      const client = ref.deref();
		      /* istanbul ignore next: gc is undeterministic */
		      if (client) {
		        ret += client[kRunning];
		      }
		    }
		    return ret;
		  }
		  [kDispatch](opts, handler) {
		    let key;
		    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
		      key = String(opts.origin);
		    } else {
		      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.');
		    }
		    const ref = this[kClients].get(key);
		    let dispatcher = ref ? ref.deref() : null;
		    if (!dispatcher) {
		      dispatcher = this[kFactory](opts.origin, this[kOptions]).on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);
		      this[kClients].set(key, new WeakRef(dispatcher));
		      this[kFinalizer].register(dispatcher, key);
		    }
		    return dispatcher.dispatch(opts, handler);
		  }
		  async [kClose]() {
		    const closePromises = [];
		    for (const ref of this[kClients].values()) {
		      const client = ref.deref();
		      /* istanbul ignore else: gc is undeterministic */
		      if (client) {
		        closePromises.push(client.close());
		      }
		    }
		    await Promise.all(closePromises);
		  }
		  async [kDestroy](err) {
		    const destroyPromises = [];
		    for (const ref of this[kClients].values()) {
		      const client = ref.deref();
		      /* istanbul ignore else: gc is undeterministic */
		      if (client) {
		        destroyPromises.push(client.destroy(err));
		      }
		    }
		    await Promise.all(destroyPromises);
		  }
		}
		agent = Agent;
		return agent;
	}

	var api$1 = {};

	var apiRequest = {exports: {}};

	var readable;
	var hasRequiredReadable;

	function requireReadable () {
		if (hasRequiredReadable) return readable;
		hasRequiredReadable = 1;

		const assert = require$$0__default$3["default"];
		const {
		  Readable
		} = stream__default["default"];
		const {
		  RequestAbortedError,
		  NotSupportedError,
		  InvalidArgumentError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  ReadableStreamFrom,
		  toUSVString
		} = requireUtil$6();
		let Blob;
		const kConsume = Symbol('kConsume');
		const kReading = Symbol('kReading');
		const kBody = Symbol('kBody');
		const kAbort = Symbol('abort');
		const kContentType = Symbol('kContentType');
		const noop = () => {};
		readable = class BodyReadable extends Readable {
		  constructor({
		    resume,
		    abort,
		    contentType = '',
		    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
		  }) {
		    super({
		      autoDestroy: true,
		      read: resume,
		      highWaterMark
		    });
		    this._readableState.dataEmitted = false;
		    this[kAbort] = abort;
		    this[kConsume] = null;
		    this[kBody] = null;
		    this[kContentType] = contentType;

		    // Is stream being consumed through Readable API?
		    // This is an optimization so that we avoid checking
		    // for 'data' and 'readable' listeners in the hot path
		    // inside push().
		    this[kReading] = false;
		  }
		  destroy(err) {
		    if (this.destroyed) {
		      // Node < 16
		      return this;
		    }
		    if (!err && !this._readableState.endEmitted) {
		      err = new RequestAbortedError();
		    }
		    if (err) {
		      this[kAbort]();
		    }
		    return super.destroy(err);
		  }
		  emit(ev, ...args) {
		    if (ev === 'data') {
		      // Node < 16.7
		      this._readableState.dataEmitted = true;
		    } else if (ev === 'error') {
		      // Node < 16
		      this._readableState.errorEmitted = true;
		    }
		    return super.emit(ev, ...args);
		  }
		  on(ev, ...args) {
		    if (ev === 'data' || ev === 'readable') {
		      this[kReading] = true;
		    }
		    return super.on(ev, ...args);
		  }
		  addListener(ev, ...args) {
		    return this.on(ev, ...args);
		  }
		  off(ev, ...args) {
		    const ret = super.off(ev, ...args);
		    if (ev === 'data' || ev === 'readable') {
		      this[kReading] = this.listenerCount('data') > 0 || this.listenerCount('readable') > 0;
		    }
		    return ret;
		  }
		  removeListener(ev, ...args) {
		    return this.off(ev, ...args);
		  }
		  push(chunk) {
		    if (this[kConsume] && chunk !== null && this.readableLength === 0) {
		      consumePush(this[kConsume], chunk);
		      return this[kReading] ? super.push(chunk) : true;
		    }
		    return super.push(chunk);
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-text
		  async text() {
		    return consume(this, 'text');
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-json
		  async json() {
		    return consume(this, 'json');
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-blob
		  async blob() {
		    return consume(this, 'blob');
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
		  async arrayBuffer() {
		    return consume(this, 'arrayBuffer');
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-formdata
		  async formData() {
		    // TODO: Implement.
		    throw new NotSupportedError();
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-bodyused
		  get bodyUsed() {
		    return util.isDisturbed(this);
		  }

		  // https://fetch.spec.whatwg.org/#dom-body-body
		  get body() {
		    if (!this[kBody]) {
		      this[kBody] = ReadableStreamFrom(this);
		      if (this[kConsume]) {
		        // TODO: Is this the best way to force a lock?
		        this[kBody].getReader(); // Ensure stream is locked.
		        assert(this[kBody].locked);
		      }
		    }
		    return this[kBody];
		  }
		  dump(opts) {
		    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
		    const signal = opts && opts.signal;
		    if (signal) {
		      try {
		        if (typeof signal !== 'object' || !('aborted' in signal)) {
		          throw new InvalidArgumentError('signal must be an AbortSignal');
		        }
		        util.throwIfAborted(signal);
		      } catch (err) {
		        return Promise.reject(err);
		      }
		    }
		    if (this.closed) {
		      return Promise.resolve(null);
		    }
		    return new Promise((resolve, reject) => {
		      const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
		        this.destroy();
		      }) : noop;
		      this.on('close', function () {
		        signalListenerCleanup();
		        if (signal && signal.aborted) {
		          reject(signal.reason || Object.assign(new Error('The operation was aborted'), {
		            name: 'AbortError'
		          }));
		        } else {
		          resolve(null);
		        }
		      }).on('error', noop).on('data', function (chunk) {
		        limit -= chunk.length;
		        if (limit <= 0) {
		          this.destroy();
		        }
		      }).resume();
		    });
		  }
		};

		// https://streams.spec.whatwg.org/#readablestream-locked
		function isLocked(self) {
		  // Consume is an implicit lock.
		  return self[kBody] && self[kBody].locked === true || self[kConsume];
		}

		// https://fetch.spec.whatwg.org/#body-unusable
		function isUnusable(self) {
		  return util.isDisturbed(self) || isLocked(self);
		}
		async function consume(stream, type) {
		  if (isUnusable(stream)) {
		    throw new TypeError('unusable');
		  }
		  assert(!stream[kConsume]);
		  return new Promise((resolve, reject) => {
		    stream[kConsume] = {
		      type,
		      stream,
		      resolve,
		      reject,
		      length: 0,
		      body: []
		    };
		    stream.on('error', function (err) {
		      consumeFinish(this[kConsume], err);
		    }).on('close', function () {
		      if (this[kConsume].body !== null) {
		        consumeFinish(this[kConsume], new RequestAbortedError());
		      }
		    });
		    process.nextTick(consumeStart, stream[kConsume]);
		  });
		}
		function consumeStart(consume) {
		  if (consume.body === null) {
		    return;
		  }
		  const {
		    _readableState: state
		  } = consume.stream;
		  for (const chunk of state.buffer) {
		    consumePush(consume, chunk);
		  }
		  if (state.endEmitted) {
		    consumeEnd(this[kConsume]);
		  } else {
		    consume.stream.on('end', function () {
		      consumeEnd(this[kConsume]);
		    });
		  }
		  consume.stream.resume();
		  while (consume.stream.read() != null) {
		    // Loop
		  }
		}
		function consumeEnd(consume) {
		  const {
		    type,
		    body,
		    resolve,
		    stream,
		    length
		  } = consume;
		  try {
		    if (type === 'text') {
		      resolve(toUSVString(Buffer.concat(body)));
		    } else if (type === 'json') {
		      resolve(JSON.parse(Buffer.concat(body)));
		    } else if (type === 'arrayBuffer') {
		      const dst = new Uint8Array(length);
		      let pos = 0;
		      for (const buf of body) {
		        dst.set(buf, pos);
		        pos += buf.byteLength;
		      }
		      resolve(dst.buffer);
		    } else if (type === 'blob') {
		      if (!Blob) {
		        Blob = require('buffer').Blob;
		      }
		      resolve(new Blob(body, {
		        type: stream[kContentType]
		      }));
		    }
		    consumeFinish(consume);
		  } catch (err) {
		    stream.destroy(err);
		  }
		}
		function consumePush(consume, chunk) {
		  consume.length += chunk.length;
		  consume.body.push(chunk);
		}
		function consumeFinish(consume, err) {
		  if (consume.body === null) {
		    return;
		  }
		  if (err) {
		    consume.reject(err);
		  } else {
		    consume.resolve();
		  }
		  consume.type = null;
		  consume.stream = null;
		  consume.resolve = null;
		  consume.reject = null;
		  consume.length = 0;
		  consume.body = null;
		}
		return readable;
	}

	var util$4;
	var hasRequiredUtil$4;

	function requireUtil$4 () {
		if (hasRequiredUtil$4) return util$4;
		hasRequiredUtil$4 = 1;
		const assert = require$$0__default$3["default"];
		const {
		  ResponseStatusCodeError
		} = requireErrors();
		const {
		  toUSVString
		} = requireUtil$6();
		async function getResolveErrorBodyCallback({
		  callback,
		  body,
		  contentType,
		  statusCode,
		  statusMessage,
		  headers
		}) {
		  assert(body);
		  let chunks = [];
		  let limit = 0;
		  for await (const chunk of body) {
		    chunks.push(chunk);
		    limit += chunk.length;
		    if (limit > 128 * 1024) {
		      chunks = null;
		      break;
		    }
		  }
		  if (statusCode === 204 || !contentType || !chunks) {
		    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers));
		    return;
		  }
		  try {
		    if (contentType.startsWith('application/json')) {
		      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
		      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload));
		      return;
		    }
		    if (contentType.startsWith('text/')) {
		      const payload = toUSVString(Buffer.concat(chunks));
		      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload));
		      return;
		    }
		  } catch (err) {
		    // Process in a fallback if error
		  }
		  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers));
		}
		util$4 = {
		  getResolveErrorBodyCallback
		};
		return util$4;
	}

	var abortSignal;
	var hasRequiredAbortSignal;

	function requireAbortSignal () {
		if (hasRequiredAbortSignal) return abortSignal;
		hasRequiredAbortSignal = 1;
		const {
		  addAbortListener
		} = requireUtil$6();
		const {
		  RequestAbortedError
		} = requireErrors();
		const kListener = Symbol('kListener');
		const kSignal = Symbol('kSignal');
		function abort(self) {
		  if (self.abort) {
		    self.abort();
		  } else {
		    self.onError(new RequestAbortedError());
		  }
		}
		function addSignal(self, signal) {
		  self[kSignal] = null;
		  self[kListener] = null;
		  if (!signal) {
		    return;
		  }
		  if (signal.aborted) {
		    abort(self);
		    return;
		  }
		  self[kSignal] = signal;
		  self[kListener] = () => {
		    abort(self);
		  };
		  addAbortListener(self[kSignal], self[kListener]);
		}
		function removeSignal(self) {
		  if (!self[kSignal]) {
		    return;
		  }
		  if ('removeEventListener' in self[kSignal]) {
		    self[kSignal].removeEventListener('abort', self[kListener]);
		  } else {
		    self[kSignal].removeListener('abort', self[kListener]);
		  }
		  self[kSignal] = null;
		  self[kListener] = null;
		}
		abortSignal = {
		  addSignal,
		  removeSignal
		};
		return abortSignal;
	}

	var hasRequiredApiRequest;

	function requireApiRequest () {
		if (hasRequiredApiRequest) return apiRequest.exports;
		hasRequiredApiRequest = 1;

		const Readable = requireReadable();
		const {
		  InvalidArgumentError,
		  RequestAbortedError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  getResolveErrorBodyCallback
		} = requireUtil$4();
		const {
		  AsyncResource
		} = require$$4__default$3["default"];
		const {
		  addSignal,
		  removeSignal
		} = requireAbortSignal();
		class RequestHandler extends AsyncResource {
		  constructor(opts, callback) {
		    if (!opts || typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    const {
		      signal,
		      method,
		      opaque,
		      body,
		      onInfo,
		      responseHeaders,
		      throwOnError,
		      highWaterMark
		    } = opts;
		    try {
		      if (typeof callback !== 'function') {
		        throw new InvalidArgumentError('invalid callback');
		      }
		      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
		        throw new InvalidArgumentError('invalid highWaterMark');
		      }
		      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
		        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');
		      }
		      if (method === 'CONNECT') {
		        throw new InvalidArgumentError('invalid method');
		      }
		      if (onInfo && typeof onInfo !== 'function') {
		        throw new InvalidArgumentError('invalid onInfo callback');
		      }
		      super('UNDICI_REQUEST');
		    } catch (err) {
		      if (util.isStream(body)) {
		        util.destroy(body.on('error', util.nop), err);
		      }
		      throw err;
		    }
		    this.responseHeaders = responseHeaders || null;
		    this.opaque = opaque || null;
		    this.callback = callback;
		    this.res = null;
		    this.abort = null;
		    this.body = body;
		    this.trailers = {};
		    this.context = null;
		    this.onInfo = onInfo || null;
		    this.throwOnError = throwOnError;
		    this.highWaterMark = highWaterMark;
		    if (util.isStream(body)) {
		      body.on('error', err => {
		        this.onError(err);
		      });
		    }
		    addSignal(this, signal);
		  }
		  onConnect(abort, context) {
		    if (!this.callback) {
		      throw new RequestAbortedError();
		    }
		    this.abort = abort;
		    this.context = context;
		  }
		  onHeaders(statusCode, rawHeaders, resume, statusMessage) {
		    const {
		      callback,
		      opaque,
		      abort,
		      context,
		      responseHeaders,
		      highWaterMark
		    } = this;
		    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		    if (statusCode < 200) {
		      if (this.onInfo) {
		        this.onInfo({
		          statusCode,
		          headers
		        });
		      }
		      return;
		    }
		    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;
		    const contentType = parsedHeaders['content-type'];
		    const body = new Readable({
		      resume,
		      abort,
		      contentType,
		      highWaterMark
		    });
		    this.callback = null;
		    this.res = body;
		    if (callback !== null) {
		      if (this.throwOnError && statusCode >= 400) {
		        this.runInAsyncScope(getResolveErrorBodyCallback, null, {
		          callback,
		          body,
		          contentType,
		          statusCode,
		          statusMessage,
		          headers
		        });
		      } else {
		        this.runInAsyncScope(callback, null, null, {
		          statusCode,
		          headers,
		          trailers: this.trailers,
		          opaque,
		          body,
		          context
		        });
		      }
		    }
		  }
		  onData(chunk) {
		    const {
		      res
		    } = this;
		    return res.push(chunk);
		  }
		  onComplete(trailers) {
		    const {
		      res
		    } = this;
		    removeSignal(this);
		    util.parseHeaders(trailers, this.trailers);
		    res.push(null);
		  }
		  onError(err) {
		    const {
		      res,
		      callback,
		      body,
		      opaque
		    } = this;
		    removeSignal(this);
		    if (callback) {
		      // TODO: Does this need queueMicrotask?
		      this.callback = null;
		      queueMicrotask(() => {
		        this.runInAsyncScope(callback, null, err, {
		          opaque
		        });
		      });
		    }
		    if (res) {
		      this.res = null;
		      // Ensure all queued handlers are invoked before destroying res.
		      queueMicrotask(() => {
		        util.destroy(res, err);
		      });
		    }
		    if (body) {
		      this.body = null;
		      util.destroy(body, err);
		    }
		  }
		}
		function request(opts, callback) {
		  if (callback === undefined) {
		    return new Promise((resolve, reject) => {
		      request.call(this, opts, (err, data) => {
		        return err ? reject(err) : resolve(data);
		      });
		    });
		  }
		  try {
		    this.dispatch(opts, new RequestHandler(opts, callback));
		  } catch (err) {
		    if (typeof callback !== 'function') {
		      throw err;
		    }
		    const opaque = opts && opts.opaque;
		    queueMicrotask(() => callback(err, {
		      opaque
		    }));
		  }
		}
		apiRequest.exports = request;
		apiRequest.exports.RequestHandler = RequestHandler;
		return apiRequest.exports;
	}

	var apiStream;
	var hasRequiredApiStream;

	function requireApiStream () {
		if (hasRequiredApiStream) return apiStream;
		hasRequiredApiStream = 1;

		const {
		  finished,
		  PassThrough
		} = stream__default["default"];
		const {
		  InvalidArgumentError,
		  InvalidReturnValueError,
		  RequestAbortedError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  getResolveErrorBodyCallback
		} = requireUtil$4();
		const {
		  AsyncResource
		} = require$$4__default$3["default"];
		const {
		  addSignal,
		  removeSignal
		} = requireAbortSignal();
		class StreamHandler extends AsyncResource {
		  constructor(opts, factory, callback) {
		    if (!opts || typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    const {
		      signal,
		      method,
		      opaque,
		      body,
		      onInfo,
		      responseHeaders,
		      throwOnError
		    } = opts;
		    try {
		      if (typeof callback !== 'function') {
		        throw new InvalidArgumentError('invalid callback');
		      }
		      if (typeof factory !== 'function') {
		        throw new InvalidArgumentError('invalid factory');
		      }
		      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
		        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');
		      }
		      if (method === 'CONNECT') {
		        throw new InvalidArgumentError('invalid method');
		      }
		      if (onInfo && typeof onInfo !== 'function') {
		        throw new InvalidArgumentError('invalid onInfo callback');
		      }
		      super('UNDICI_STREAM');
		    } catch (err) {
		      if (util.isStream(body)) {
		        util.destroy(body.on('error', util.nop), err);
		      }
		      throw err;
		    }
		    this.responseHeaders = responseHeaders || null;
		    this.opaque = opaque || null;
		    this.factory = factory;
		    this.callback = callback;
		    this.res = null;
		    this.abort = null;
		    this.context = null;
		    this.trailers = null;
		    this.body = body;
		    this.onInfo = onInfo || null;
		    this.throwOnError = throwOnError || false;
		    if (util.isStream(body)) {
		      body.on('error', err => {
		        this.onError(err);
		      });
		    }
		    addSignal(this, signal);
		  }
		  onConnect(abort, context) {
		    if (!this.callback) {
		      throw new RequestAbortedError();
		    }
		    this.abort = abort;
		    this.context = context;
		  }
		  onHeaders(statusCode, rawHeaders, resume, statusMessage) {
		    const {
		      factory,
		      opaque,
		      context,
		      callback,
		      responseHeaders
		    } = this;
		    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		    if (statusCode < 200) {
		      if (this.onInfo) {
		        this.onInfo({
		          statusCode,
		          headers
		        });
		      }
		      return;
		    }
		    this.factory = null;
		    let res;
		    if (this.throwOnError && statusCode >= 400) {
		      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;
		      const contentType = parsedHeaders['content-type'];
		      res = new PassThrough();
		      this.callback = null;
		      this.runInAsyncScope(getResolveErrorBodyCallback, null, {
		        callback,
		        body: res,
		        contentType,
		        statusCode,
		        statusMessage,
		        headers
		      });
		    } else {
		      if (factory === null) {
		        return;
		      }
		      res = this.runInAsyncScope(factory, null, {
		        statusCode,
		        headers,
		        opaque,
		        context
		      });
		      if (!res || typeof res.write !== 'function' || typeof res.end !== 'function' || typeof res.on !== 'function') {
		        throw new InvalidReturnValueError('expected Writable');
		      }

		      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
		      finished(res, {
		        readable: false
		      }, err => {
		        const {
		          callback,
		          res,
		          opaque,
		          trailers,
		          abort
		        } = this;
		        this.res = null;
		        if (err || !res.readable) {
		          util.destroy(res, err);
		        }
		        this.callback = null;
		        this.runInAsyncScope(callback, null, err || null, {
		          opaque,
		          trailers
		        });
		        if (err) {
		          abort();
		        }
		      });
		    }
		    res.on('drain', resume);
		    this.res = res;
		    const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
		    return needDrain !== true;
		  }
		  onData(chunk) {
		    const {
		      res
		    } = this;
		    return res ? res.write(chunk) : true;
		  }
		  onComplete(trailers) {
		    const {
		      res
		    } = this;
		    removeSignal(this);
		    if (!res) {
		      return;
		    }
		    this.trailers = util.parseHeaders(trailers);
		    res.end();
		  }
		  onError(err) {
		    const {
		      res,
		      callback,
		      opaque,
		      body
		    } = this;
		    removeSignal(this);
		    this.factory = null;
		    if (res) {
		      this.res = null;
		      util.destroy(res, err);
		    } else if (callback) {
		      this.callback = null;
		      queueMicrotask(() => {
		        this.runInAsyncScope(callback, null, err, {
		          opaque
		        });
		      });
		    }
		    if (body) {
		      this.body = null;
		      util.destroy(body, err);
		    }
		  }
		}
		function stream(opts, factory, callback) {
		  if (callback === undefined) {
		    return new Promise((resolve, reject) => {
		      stream.call(this, opts, factory, (err, data) => {
		        return err ? reject(err) : resolve(data);
		      });
		    });
		  }
		  try {
		    this.dispatch(opts, new StreamHandler(opts, factory, callback));
		  } catch (err) {
		    if (typeof callback !== 'function') {
		      throw err;
		    }
		    const opaque = opts && opts.opaque;
		    queueMicrotask(() => callback(err, {
		      opaque
		    }));
		  }
		}
		apiStream = stream;
		return apiStream;
	}

	var apiPipeline;
	var hasRequiredApiPipeline;

	function requireApiPipeline () {
		if (hasRequiredApiPipeline) return apiPipeline;
		hasRequiredApiPipeline = 1;

		const {
		  Readable,
		  Duplex,
		  PassThrough
		} = stream__default["default"];
		const {
		  InvalidArgumentError,
		  InvalidReturnValueError,
		  RequestAbortedError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  AsyncResource
		} = require$$4__default$3["default"];
		const {
		  addSignal,
		  removeSignal
		} = requireAbortSignal();
		const assert = require$$0__default$3["default"];
		const kResume = Symbol('resume');
		class PipelineRequest extends Readable {
		  constructor() {
		    super({
		      autoDestroy: true
		    });
		    this[kResume] = null;
		  }
		  _read() {
		    const {
		      [kResume]: resume
		    } = this;
		    if (resume) {
		      this[kResume] = null;
		      resume();
		    }
		  }
		  _destroy(err, callback) {
		    this._read();
		    callback(err);
		  }
		}
		class PipelineResponse extends Readable {
		  constructor(resume) {
		    super({
		      autoDestroy: true
		    });
		    this[kResume] = resume;
		  }
		  _read() {
		    this[kResume]();
		  }
		  _destroy(err, callback) {
		    if (!err && !this._readableState.endEmitted) {
		      err = new RequestAbortedError();
		    }
		    callback(err);
		  }
		}
		class PipelineHandler extends AsyncResource {
		  constructor(opts, handler) {
		    if (!opts || typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    if (typeof handler !== 'function') {
		      throw new InvalidArgumentError('invalid handler');
		    }
		    const {
		      signal,
		      method,
		      opaque,
		      onInfo,
		      responseHeaders
		    } = opts;
		    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
		      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');
		    }
		    if (method === 'CONNECT') {
		      throw new InvalidArgumentError('invalid method');
		    }
		    if (onInfo && typeof onInfo !== 'function') {
		      throw new InvalidArgumentError('invalid onInfo callback');
		    }
		    super('UNDICI_PIPELINE');
		    this.opaque = opaque || null;
		    this.responseHeaders = responseHeaders || null;
		    this.handler = handler;
		    this.abort = null;
		    this.context = null;
		    this.onInfo = onInfo || null;
		    this.req = new PipelineRequest().on('error', util.nop);
		    this.ret = new Duplex({
		      readableObjectMode: opts.objectMode,
		      autoDestroy: true,
		      read: () => {
		        const {
		          body
		        } = this;
		        if (body && body.resume) {
		          body.resume();
		        }
		      },
		      write: (chunk, encoding, callback) => {
		        const {
		          req
		        } = this;
		        if (req.push(chunk, encoding) || req._readableState.destroyed) {
		          callback();
		        } else {
		          req[kResume] = callback;
		        }
		      },
		      destroy: (err, callback) => {
		        const {
		          body,
		          req,
		          res,
		          ret,
		          abort
		        } = this;
		        if (!err && !ret._readableState.endEmitted) {
		          err = new RequestAbortedError();
		        }
		        if (abort && err) {
		          abort();
		        }
		        util.destroy(body, err);
		        util.destroy(req, err);
		        util.destroy(res, err);
		        removeSignal(this);
		        callback(err);
		      }
		    }).on('prefinish', () => {
		      const {
		        req
		      } = this;

		      // Node < 15 does not call _final in same tick.
		      req.push(null);
		    });
		    this.res = null;
		    addSignal(this, signal);
		  }
		  onConnect(abort, context) {
		    const {
		      ret,
		      res
		    } = this;
		    assert(!res, 'pipeline cannot be retried');
		    if (ret.destroyed) {
		      throw new RequestAbortedError();
		    }
		    this.abort = abort;
		    this.context = context;
		  }
		  onHeaders(statusCode, rawHeaders, resume) {
		    const {
		      opaque,
		      handler,
		      context
		    } = this;
		    if (statusCode < 200) {
		      if (this.onInfo) {
		        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		        this.onInfo({
		          statusCode,
		          headers
		        });
		      }
		      return;
		    }
		    this.res = new PipelineResponse(resume);
		    let body;
		    try {
		      this.handler = null;
		      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		      body = this.runInAsyncScope(handler, null, {
		        statusCode,
		        headers,
		        opaque,
		        body: this.res,
		        context
		      });
		    } catch (err) {
		      this.res.on('error', util.nop);
		      throw err;
		    }
		    if (!body || typeof body.on !== 'function') {
		      throw new InvalidReturnValueError('expected Readable');
		    }
		    body.on('data', chunk => {
		      const {
		        ret,
		        body
		      } = this;
		      if (!ret.push(chunk) && body.pause) {
		        body.pause();
		      }
		    }).on('error', err => {
		      const {
		        ret
		      } = this;
		      util.destroy(ret, err);
		    }).on('end', () => {
		      const {
		        ret
		      } = this;
		      ret.push(null);
		    }).on('close', () => {
		      const {
		        ret
		      } = this;
		      if (!ret._readableState.ended) {
		        util.destroy(ret, new RequestAbortedError());
		      }
		    });
		    this.body = body;
		  }
		  onData(chunk) {
		    const {
		      res
		    } = this;
		    return res.push(chunk);
		  }
		  onComplete(trailers) {
		    const {
		      res
		    } = this;
		    res.push(null);
		  }
		  onError(err) {
		    const {
		      ret
		    } = this;
		    this.handler = null;
		    util.destroy(ret, err);
		  }
		}
		function pipeline(opts, handler) {
		  try {
		    const pipelineHandler = new PipelineHandler(opts, handler);
		    this.dispatch({
		      ...opts,
		      body: pipelineHandler.req
		    }, pipelineHandler);
		    return pipelineHandler.ret;
		  } catch (err) {
		    return new PassThrough().destroy(err);
		  }
		}
		apiPipeline = pipeline;
		return apiPipeline;
	}

	var apiUpgrade;
	var hasRequiredApiUpgrade;

	function requireApiUpgrade () {
		if (hasRequiredApiUpgrade) return apiUpgrade;
		hasRequiredApiUpgrade = 1;

		const {
		  InvalidArgumentError,
		  RequestAbortedError,
		  SocketError
		} = requireErrors();
		const {
		  AsyncResource
		} = require$$4__default$3["default"];
		const util = requireUtil$6();
		const {
		  addSignal,
		  removeSignal
		} = requireAbortSignal();
		const assert = require$$0__default$3["default"];
		class UpgradeHandler extends AsyncResource {
		  constructor(opts, callback) {
		    if (!opts || typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    if (typeof callback !== 'function') {
		      throw new InvalidArgumentError('invalid callback');
		    }
		    const {
		      signal,
		      opaque,
		      responseHeaders
		    } = opts;
		    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
		      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');
		    }
		    super('UNDICI_UPGRADE');
		    this.responseHeaders = responseHeaders || null;
		    this.opaque = opaque || null;
		    this.callback = callback;
		    this.abort = null;
		    this.context = null;
		    addSignal(this, signal);
		  }
		  onConnect(abort, context) {
		    if (!this.callback) {
		      throw new RequestAbortedError();
		    }
		    this.abort = abort;
		    this.context = null;
		  }
		  onHeaders() {
		    throw new SocketError('bad upgrade', null);
		  }
		  onUpgrade(statusCode, rawHeaders, socket) {
		    const {
		      callback,
		      opaque,
		      context
		    } = this;
		    assert.strictEqual(statusCode, 101);
		    removeSignal(this);
		    this.callback = null;
		    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		    this.runInAsyncScope(callback, null, null, {
		      headers,
		      socket,
		      opaque,
		      context
		    });
		  }
		  onError(err) {
		    const {
		      callback,
		      opaque
		    } = this;
		    removeSignal(this);
		    if (callback) {
		      this.callback = null;
		      queueMicrotask(() => {
		        this.runInAsyncScope(callback, null, err, {
		          opaque
		        });
		      });
		    }
		  }
		}
		function upgrade(opts, callback) {
		  if (callback === undefined) {
		    return new Promise((resolve, reject) => {
		      upgrade.call(this, opts, (err, data) => {
		        return err ? reject(err) : resolve(data);
		      });
		    });
		  }
		  try {
		    const upgradeHandler = new UpgradeHandler(opts, callback);
		    this.dispatch({
		      ...opts,
		      method: opts.method || 'GET',
		      upgrade: opts.protocol || 'Websocket'
		    }, upgradeHandler);
		  } catch (err) {
		    if (typeof callback !== 'function') {
		      throw err;
		    }
		    const opaque = opts && opts.opaque;
		    queueMicrotask(() => callback(err, {
		      opaque
		    }));
		  }
		}
		apiUpgrade = upgrade;
		return apiUpgrade;
	}

	var apiConnect;
	var hasRequiredApiConnect;

	function requireApiConnect () {
		if (hasRequiredApiConnect) return apiConnect;
		hasRequiredApiConnect = 1;

		const {
		  AsyncResource
		} = require$$4__default$3["default"];
		const {
		  InvalidArgumentError,
		  RequestAbortedError,
		  SocketError
		} = requireErrors();
		const util = requireUtil$6();
		const {
		  addSignal,
		  removeSignal
		} = requireAbortSignal();
		class ConnectHandler extends AsyncResource {
		  constructor(opts, callback) {
		    if (!opts || typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    if (typeof callback !== 'function') {
		      throw new InvalidArgumentError('invalid callback');
		    }
		    const {
		      signal,
		      opaque,
		      responseHeaders
		    } = opts;
		    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
		      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');
		    }
		    super('UNDICI_CONNECT');
		    this.opaque = opaque || null;
		    this.responseHeaders = responseHeaders || null;
		    this.callback = callback;
		    this.abort = null;
		    addSignal(this, signal);
		  }
		  onConnect(abort, context) {
		    if (!this.callback) {
		      throw new RequestAbortedError();
		    }
		    this.abort = abort;
		    this.context = context;
		  }
		  onHeaders() {
		    throw new SocketError('bad connect', null);
		  }
		  onUpgrade(statusCode, rawHeaders, socket) {
		    const {
		      callback,
		      opaque,
		      context
		    } = this;
		    removeSignal(this);
		    this.callback = null;
		    let headers = rawHeaders;
		    // Indicates is an HTTP2Session
		    if (headers != null) {
		      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
		    }
		    this.runInAsyncScope(callback, null, null, {
		      statusCode,
		      headers,
		      socket,
		      opaque,
		      context
		    });
		  }
		  onError(err) {
		    const {
		      callback,
		      opaque
		    } = this;
		    removeSignal(this);
		    if (callback) {
		      this.callback = null;
		      queueMicrotask(() => {
		        this.runInAsyncScope(callback, null, err, {
		          opaque
		        });
		      });
		    }
		  }
		}
		function connect(opts, callback) {
		  if (callback === undefined) {
		    return new Promise((resolve, reject) => {
		      connect.call(this, opts, (err, data) => {
		        return err ? reject(err) : resolve(data);
		      });
		    });
		  }
		  try {
		    const connectHandler = new ConnectHandler(opts, callback);
		    this.dispatch({
		      ...opts,
		      method: 'CONNECT'
		    }, connectHandler);
		  } catch (err) {
		    if (typeof callback !== 'function') {
		      throw err;
		    }
		    const opaque = opts && opts.opaque;
		    queueMicrotask(() => callback(err, {
		      opaque
		    }));
		  }
		}
		apiConnect = connect;
		return apiConnect;
	}

	var hasRequiredApi$1;

	function requireApi$1 () {
		if (hasRequiredApi$1) return api$1;
		hasRequiredApi$1 = 1;

		api$1.request = requireApiRequest();
		api$1.stream = requireApiStream();
		api$1.pipeline = requireApiPipeline();
		api$1.upgrade = requireApiUpgrade();
		api$1.connect = requireApiConnect();
		return api$1;
	}

	var mockErrors;
	var hasRequiredMockErrors;

	function requireMockErrors () {
		if (hasRequiredMockErrors) return mockErrors;
		hasRequiredMockErrors = 1;

		const {
		  UndiciError
		} = requireErrors();
		class MockNotMatchedError extends UndiciError {
		  constructor(message) {
		    super(message);
		    Error.captureStackTrace(this, MockNotMatchedError);
		    this.name = 'MockNotMatchedError';
		    this.message = message || 'The request does not match any registered mock dispatches';
		    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';
		  }
		}
		mockErrors = {
		  MockNotMatchedError
		};
		return mockErrors;
	}

	var mockSymbols;
	var hasRequiredMockSymbols;

	function requireMockSymbols () {
		if (hasRequiredMockSymbols) return mockSymbols;
		hasRequiredMockSymbols = 1;

		mockSymbols = {
		  kAgent: Symbol('agent'),
		  kOptions: Symbol('options'),
		  kFactory: Symbol('factory'),
		  kDispatches: Symbol('dispatches'),
		  kDispatchKey: Symbol('dispatch key'),
		  kDefaultHeaders: Symbol('default headers'),
		  kDefaultTrailers: Symbol('default trailers'),
		  kContentLength: Symbol('content length'),
		  kMockAgent: Symbol('mock agent'),
		  kMockAgentSet: Symbol('mock agent set'),
		  kMockAgentGet: Symbol('mock agent get'),
		  kMockDispatch: Symbol('mock dispatch'),
		  kClose: Symbol('close'),
		  kOriginalClose: Symbol('original agent close'),
		  kOrigin: Symbol('origin'),
		  kIsMockActive: Symbol('is mock active'),
		  kNetConnect: Symbol('net connect'),
		  kGetNetConnect: Symbol('get net connect'),
		  kConnected: Symbol('connected')
		};
		return mockSymbols;
	}

	var mockUtils;
	var hasRequiredMockUtils;

	function requireMockUtils () {
		if (hasRequiredMockUtils) return mockUtils;
		hasRequiredMockUtils = 1;

		const {
		  MockNotMatchedError
		} = requireMockErrors();
		const {
		  kDispatches,
		  kMockAgent,
		  kOriginalDispatch,
		  kOrigin,
		  kGetNetConnect
		} = requireMockSymbols();
		const {
		  buildURL,
		  nop
		} = requireUtil$6();
		const {
		  STATUS_CODES
		} = require$$2__default["default"];
		const {
		  types: {
		    isPromise
		  }
		} = require$$1__default["default"];
		function matchValue(match, value) {
		  if (typeof match === 'string') {
		    return match === value;
		  }
		  if (match instanceof RegExp) {
		    return match.test(value);
		  }
		  if (typeof match === 'function') {
		    return match(value) === true;
		  }
		  return false;
		}
		function lowerCaseEntries(headers) {
		  return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
		    return [headerName.toLocaleLowerCase(), headerValue];
		  }));
		}

		/**
		 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
		 * @param {string} key
		 */
		function getHeaderByName(headers, key) {
		  if (Array.isArray(headers)) {
		    for (let i = 0; i < headers.length; i += 2) {
		      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
		        return headers[i + 1];
		      }
		    }
		    return undefined;
		  } else if (typeof headers.get === 'function') {
		    return headers.get(key);
		  } else {
		    return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
		  }
		}

		/** @param {string[]} headers */
		function buildHeadersFromArray(headers) {
		  // fetch HeadersList
		  const clone = headers.slice();
		  const entries = [];
		  for (let index = 0; index < clone.length; index += 2) {
		    entries.push([clone[index], clone[index + 1]]);
		  }
		  return Object.fromEntries(entries);
		}
		function matchHeaders(mockDispatch, headers) {
		  if (typeof mockDispatch.headers === 'function') {
		    if (Array.isArray(headers)) {
		      // fetch HeadersList
		      headers = buildHeadersFromArray(headers);
		    }
		    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {});
		  }
		  if (typeof mockDispatch.headers === 'undefined') {
		    return true;
		  }
		  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
		    return false;
		  }
		  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
		    const headerValue = getHeaderByName(headers, matchHeaderName);
		    if (!matchValue(matchHeaderValue, headerValue)) {
		      return false;
		    }
		  }
		  return true;
		}
		function safeUrl(path) {
		  if (typeof path !== 'string') {
		    return path;
		  }
		  const pathSegments = path.split('?');
		  if (pathSegments.length !== 2) {
		    return path;
		  }
		  const qp = new URLSearchParams(pathSegments.pop());
		  qp.sort();
		  return [...pathSegments, qp.toString()].join('?');
		}
		function matchKey(mockDispatch, {
		  path,
		  method,
		  body,
		  headers
		}) {
		  const pathMatch = matchValue(mockDispatch.path, path);
		  const methodMatch = matchValue(mockDispatch.method, method);
		  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true;
		  const headersMatch = matchHeaders(mockDispatch, headers);
		  return pathMatch && methodMatch && bodyMatch && headersMatch;
		}
		function getResponseData(data) {
		  if (Buffer.isBuffer(data)) {
		    return data;
		  } else if (typeof data === 'object') {
		    return JSON.stringify(data);
		  } else {
		    return data.toString();
		  }
		}
		function getMockDispatch(mockDispatches, key) {
		  const basePath = key.query ? buildURL(key.path, key.query) : key.path;
		  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath;

		  // Match path
		  let matchedMockDispatches = mockDispatches.filter(({
		    consumed
		  }) => !consumed).filter(({
		    path
		  }) => matchValue(safeUrl(path), resolvedPath));
		  if (matchedMockDispatches.length === 0) {
		    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
		  }

		  // Match method
		  matchedMockDispatches = matchedMockDispatches.filter(({
		    method
		  }) => matchValue(method, key.method));
		  if (matchedMockDispatches.length === 0) {
		    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
		  }

		  // Match body
		  matchedMockDispatches = matchedMockDispatches.filter(({
		    body
		  }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true);
		  if (matchedMockDispatches.length === 0) {
		    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
		  }

		  // Match headers
		  matchedMockDispatches = matchedMockDispatches.filter(mockDispatch => matchHeaders(mockDispatch, key.headers));
		  if (matchedMockDispatches.length === 0) {
		    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`);
		  }
		  return matchedMockDispatches[0];
		}
		function addMockDispatch(mockDispatches, key, data) {
		  const baseData = {
		    timesInvoked: 0,
		    times: 1,
		    persist: false,
		    consumed: false
		  };
		  const replyData = typeof data === 'function' ? {
		    callback: data
		  } : {
		    ...data
		  };
		  const newMockDispatch = {
		    ...baseData,
		    ...key,
		    pending: true,
		    data: {
		      error: null,
		      ...replyData
		    }
		  };
		  mockDispatches.push(newMockDispatch);
		  return newMockDispatch;
		}
		function deleteMockDispatch(mockDispatches, key) {
		  const index = mockDispatches.findIndex(dispatch => {
		    if (!dispatch.consumed) {
		      return false;
		    }
		    return matchKey(dispatch, key);
		  });
		  if (index !== -1) {
		    mockDispatches.splice(index, 1);
		  }
		}
		function buildKey(opts) {
		  const {
		    path,
		    method,
		    body,
		    headers,
		    query
		  } = opts;
		  return {
		    path,
		    method,
		    body,
		    headers,
		    query
		  };
		}
		function generateKeyValues(data) {
		  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [...keyValuePairs, Buffer.from(`${key}`), Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)], []);
		}

		/**
		 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
		 * @param {number} statusCode
		 */
		function getStatusText(statusCode) {
		  return STATUS_CODES[statusCode] || 'unknown';
		}
		async function getResponse(body) {
		  const buffers = [];
		  for await (const data of body) {
		    buffers.push(data);
		  }
		  return Buffer.concat(buffers).toString('utf8');
		}

		/**
		 * Mock dispatch function used to simulate undici dispatches
		 */
		function mockDispatch(opts, handler) {
		  // Get mock dispatch from built key
		  const key = buildKey(opts);
		  const mockDispatch = getMockDispatch(this[kDispatches], key);
		  mockDispatch.timesInvoked++;

		  // Here's where we resolve a callback if a callback is present for the dispatch data.
		  if (mockDispatch.data.callback) {
		    mockDispatch.data = {
		      ...mockDispatch.data,
		      ...mockDispatch.data.callback(opts)
		    };
		  }

		  // Parse mockDispatch data
		  const {
		    data: {
		      statusCode,
		      data,
		      headers,
		      trailers,
		      error
		    },
		    delay,
		    persist
		  } = mockDispatch;
		  const {
		    timesInvoked,
		    times
		  } = mockDispatch;

		  // If it's used up and not persistent, mark as consumed
		  mockDispatch.consumed = !persist && timesInvoked >= times;
		  mockDispatch.pending = timesInvoked < times;

		  // If specified, trigger dispatch error
		  if (error !== null) {
		    deleteMockDispatch(this[kDispatches], key);
		    handler.onError(error);
		    return true;
		  }

		  // Handle the request with a delay if necessary
		  if (typeof delay === 'number' && delay > 0) {
		    setTimeout(() => {
		      handleReply(this[kDispatches]);
		    }, delay);
		  } else {
		    handleReply(this[kDispatches]);
		  }
		  function handleReply(mockDispatches, _data = data) {
		    // fetch's HeadersList is a 1D string array
		    const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
		    const body = typeof _data === 'function' ? _data({
		      ...opts,
		      headers: optsHeaders
		    }) : _data;

		    // util.types.isPromise is likely needed for jest.
		    if (isPromise(body)) {
		      // If handleReply is asynchronous, throwing an error
		      // in the callback will reject the promise, rather than
		      // synchronously throw the error, which breaks some tests.
		      // Rather, we wait for the callback to resolve if it is a
		      // promise, and then re-run handleReply with the new body.
		      body.then(newData => handleReply(mockDispatches, newData));
		      return;
		    }
		    const responseData = getResponseData(body);
		    const responseHeaders = generateKeyValues(headers);
		    const responseTrailers = generateKeyValues(trailers);
		    handler.abort = nop;
		    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
		    handler.onData(Buffer.from(responseData));
		    handler.onComplete(responseTrailers);
		    deleteMockDispatch(mockDispatches, key);
		  }
		  function resume() {}
		  return true;
		}
		function buildMockDispatch() {
		  const agent = this[kMockAgent];
		  const origin = this[kOrigin];
		  const originalDispatch = this[kOriginalDispatch];
		  return function dispatch(opts, handler) {
		    if (agent.isMockActive) {
		      try {
		        mockDispatch.call(this, opts, handler);
		      } catch (error) {
		        if (error instanceof MockNotMatchedError) {
		          const netConnect = agent[kGetNetConnect]();
		          if (netConnect === false) {
		            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
		          }
		          if (checkNetConnect(netConnect, origin)) {
		            originalDispatch.call(this, opts, handler);
		          } else {
		            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
		          }
		        } else {
		          throw error;
		        }
		      }
		    } else {
		      originalDispatch.call(this, opts, handler);
		    }
		  };
		}
		function checkNetConnect(netConnect, origin) {
		  const url = new URL(origin);
		  if (netConnect === true) {
		    return true;
		  } else if (Array.isArray(netConnect) && netConnect.some(matcher => matchValue(matcher, url.host))) {
		    return true;
		  }
		  return false;
		}
		function buildMockOptions(opts) {
		  if (opts) {
		    const {
		      agent,
		      ...mockOptions
		    } = opts;
		    return mockOptions;
		  }
		}
		mockUtils = {
		  getResponseData,
		  getMockDispatch,
		  addMockDispatch,
		  deleteMockDispatch,
		  buildKey,
		  generateKeyValues,
		  matchValue,
		  getResponse,
		  getStatusText,
		  mockDispatch,
		  buildMockDispatch,
		  checkNetConnect,
		  buildMockOptions,
		  getHeaderByName
		};
		return mockUtils;
	}

	var mockInterceptor = {};

	var hasRequiredMockInterceptor;

	function requireMockInterceptor () {
		if (hasRequiredMockInterceptor) return mockInterceptor;
		hasRequiredMockInterceptor = 1;

		const {
		  getResponseData,
		  buildKey,
		  addMockDispatch
		} = requireMockUtils();
		const {
		  kDispatches,
		  kDispatchKey,
		  kDefaultHeaders,
		  kDefaultTrailers,
		  kContentLength,
		  kMockDispatch
		} = requireMockSymbols();
		const {
		  InvalidArgumentError
		} = requireErrors();
		const {
		  buildURL
		} = requireUtil$6();

		/**
		 * Defines the scope API for an interceptor reply
		 */
		class MockScope {
		  constructor(mockDispatch) {
		    this[kMockDispatch] = mockDispatch;
		  }

		  /**
		   * Delay a reply by a set amount in ms.
		   */
		  delay(waitInMs) {
		    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
		      throw new InvalidArgumentError('waitInMs must be a valid integer > 0');
		    }
		    this[kMockDispatch].delay = waitInMs;
		    return this;
		  }

		  /**
		   * For a defined reply, never mark as consumed.
		   */
		  persist() {
		    this[kMockDispatch].persist = true;
		    return this;
		  }

		  /**
		   * Allow one to define a reply for a set amount of matching requests.
		   */
		  times(repeatTimes) {
		    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
		      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0');
		    }
		    this[kMockDispatch].times = repeatTimes;
		    return this;
		  }
		}

		/**
		 * Defines an interceptor for a Mock
		 */
		class MockInterceptor {
		  constructor(opts, mockDispatches) {
		    if (typeof opts !== 'object') {
		      throw new InvalidArgumentError('opts must be an object');
		    }
		    if (typeof opts.path === 'undefined') {
		      throw new InvalidArgumentError('opts.path must be defined');
		    }
		    if (typeof opts.method === 'undefined') {
		      opts.method = 'GET';
		    }
		    // See https://github.com/nodejs/undici/issues/1245
		    // As per RFC 3986, clients are not supposed to send URI
		    // fragments to servers when they retrieve a document,
		    if (typeof opts.path === 'string') {
		      if (opts.query) {
		        opts.path = buildURL(opts.path, opts.query);
		      } else {
		        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
		        const parsedURL = new URL(opts.path, 'data://');
		        opts.path = parsedURL.pathname + parsedURL.search;
		      }
		    }
		    if (typeof opts.method === 'string') {
		      opts.method = opts.method.toUpperCase();
		    }
		    this[kDispatchKey] = buildKey(opts);
		    this[kDispatches] = mockDispatches;
		    this[kDefaultHeaders] = {};
		    this[kDefaultTrailers] = {};
		    this[kContentLength] = false;
		  }
		  createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
		    const responseData = getResponseData(data);
		    const contentLength = this[kContentLength] ? {
		      'content-length': responseData.length
		    } : {};
		    const headers = {
		      ...this[kDefaultHeaders],
		      ...contentLength,
		      ...responseOptions.headers
		    };
		    const trailers = {
		      ...this[kDefaultTrailers],
		      ...responseOptions.trailers
		    };
		    return {
		      statusCode,
		      data,
		      headers,
		      trailers
		    };
		  }
		  validateReplyParameters(statusCode, data, responseOptions) {
		    if (typeof statusCode === 'undefined') {
		      throw new InvalidArgumentError('statusCode must be defined');
		    }
		    if (typeof data === 'undefined') {
		      throw new InvalidArgumentError('data must be defined');
		    }
		    if (typeof responseOptions !== 'object') {
		      throw new InvalidArgumentError('responseOptions must be an object');
		    }
		  }

		  /**
		   * Mock an undici request with a defined reply.
		   */
		  reply(replyData) {
		    // Values of reply aren't available right now as they
		    // can only be available when the reply callback is invoked.
		    if (typeof replyData === 'function') {
		      // We'll first wrap the provided callback in another function,
		      // this function will properly resolve the data from the callback
		      // when invoked.
		      const wrappedDefaultsCallback = opts => {
		        // Our reply options callback contains the parameter for statusCode, data and options.
		        const resolvedData = replyData(opts);

		        // Check if it is in the right format
		        if (typeof resolvedData !== 'object') {
		          throw new InvalidArgumentError('reply options callback must return an object');
		        }
		        const {
		          statusCode,
		          data = '',
		          responseOptions = {}
		        } = resolvedData;
		        this.validateReplyParameters(statusCode, data, responseOptions);
		        // Since the values can be obtained immediately we return them
		        // from this higher order function that will be resolved later.
		        return {
		          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
		        };
		      };

		      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
		      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
		      return new MockScope(newMockDispatch);
		    }

		    // We can have either one or three parameters, if we get here,
		    // we should have 1-3 parameters. So we spread the arguments of
		    // this function to obtain the parameters, since replyData will always
		    // just be the statusCode.
		    const [statusCode, data = '', responseOptions = {}] = [...arguments];
		    this.validateReplyParameters(statusCode, data, responseOptions);

		    // Send in-already provided data like usual
		    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
		    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
		    return new MockScope(newMockDispatch);
		  }

		  /**
		   * Mock an undici request with a defined error.
		   */
		  replyWithError(error) {
		    if (typeof error === 'undefined') {
		      throw new InvalidArgumentError('error must be defined');
		    }
		    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {
		      error
		    });
		    return new MockScope(newMockDispatch);
		  }

		  /**
		   * Set default reply headers on the interceptor for subsequent replies
		   */
		  defaultReplyHeaders(headers) {
		    if (typeof headers === 'undefined') {
		      throw new InvalidArgumentError('headers must be defined');
		    }
		    this[kDefaultHeaders] = headers;
		    return this;
		  }

		  /**
		   * Set default reply trailers on the interceptor for subsequent replies
		   */
		  defaultReplyTrailers(trailers) {
		    if (typeof trailers === 'undefined') {
		      throw new InvalidArgumentError('trailers must be defined');
		    }
		    this[kDefaultTrailers] = trailers;
		    return this;
		  }

		  /**
		   * Set reply content length header for replies on the interceptor
		   */
		  replyContentLength() {
		    this[kContentLength] = true;
		    return this;
		  }
		}
		mockInterceptor.MockInterceptor = MockInterceptor;
		mockInterceptor.MockScope = MockScope;
		return mockInterceptor;
	}

	var mockClient;
	var hasRequiredMockClient;

	function requireMockClient () {
		if (hasRequiredMockClient) return mockClient;
		hasRequiredMockClient = 1;

		const {
		  promisify
		} = require$$1__default["default"];
		const Client = requireClient();
		const {
		  buildMockDispatch
		} = requireMockUtils();
		const {
		  kDispatches,
		  kMockAgent,
		  kClose,
		  kOriginalClose,
		  kOrigin,
		  kOriginalDispatch,
		  kConnected
		} = requireMockSymbols();
		const {
		  MockInterceptor
		} = requireMockInterceptor();
		const Symbols = requireSymbols$4();
		const {
		  InvalidArgumentError
		} = requireErrors();

		/**
		 * MockClient provides an API that extends the Client to influence the mockDispatches.
		 */
		class MockClient extends Client {
		  constructor(origin, opts) {
		    super(origin, opts);
		    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
		      throw new InvalidArgumentError('Argument opts.agent must implement Agent');
		    }
		    this[kMockAgent] = opts.agent;
		    this[kOrigin] = origin;
		    this[kDispatches] = [];
		    this[kConnected] = 1;
		    this[kOriginalDispatch] = this.dispatch;
		    this[kOriginalClose] = this.close.bind(this);
		    this.dispatch = buildMockDispatch.call(this);
		    this.close = this[kClose];
		  }
		  get [Symbols.kConnected]() {
		    return this[kConnected];
		  }

		  /**
		   * Sets up the base interceptor for mocking replies from undici.
		   */
		  intercept(opts) {
		    return new MockInterceptor(opts, this[kDispatches]);
		  }
		  async [kClose]() {
		    await promisify(this[kOriginalClose])();
		    this[kConnected] = 0;
		    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		  }
		}
		mockClient = MockClient;
		return mockClient;
	}

	var mockPool;
	var hasRequiredMockPool;

	function requireMockPool () {
		if (hasRequiredMockPool) return mockPool;
		hasRequiredMockPool = 1;

		const {
		  promisify
		} = require$$1__default["default"];
		const Pool = requirePool();
		const {
		  buildMockDispatch
		} = requireMockUtils();
		const {
		  kDispatches,
		  kMockAgent,
		  kClose,
		  kOriginalClose,
		  kOrigin,
		  kOriginalDispatch,
		  kConnected
		} = requireMockSymbols();
		const {
		  MockInterceptor
		} = requireMockInterceptor();
		const Symbols = requireSymbols$4();
		const {
		  InvalidArgumentError
		} = requireErrors();

		/**
		 * MockPool provides an API that extends the Pool to influence the mockDispatches.
		 */
		class MockPool extends Pool {
		  constructor(origin, opts) {
		    super(origin, opts);
		    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
		      throw new InvalidArgumentError('Argument opts.agent must implement Agent');
		    }
		    this[kMockAgent] = opts.agent;
		    this[kOrigin] = origin;
		    this[kDispatches] = [];
		    this[kConnected] = 1;
		    this[kOriginalDispatch] = this.dispatch;
		    this[kOriginalClose] = this.close.bind(this);
		    this.dispatch = buildMockDispatch.call(this);
		    this.close = this[kClose];
		  }
		  get [Symbols.kConnected]() {
		    return this[kConnected];
		  }

		  /**
		   * Sets up the base interceptor for mocking replies from undici.
		   */
		  intercept(opts) {
		    return new MockInterceptor(opts, this[kDispatches]);
		  }
		  async [kClose]() {
		    await promisify(this[kOriginalClose])();
		    this[kConnected] = 0;
		    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		  }
		}
		mockPool = MockPool;
		return mockPool;
	}

	var pluralizer;
	var hasRequiredPluralizer;

	function requirePluralizer () {
		if (hasRequiredPluralizer) return pluralizer;
		hasRequiredPluralizer = 1;

		const singulars = {
		  pronoun: 'it',
		  is: 'is',
		  was: 'was',
		  this: 'this'
		};
		const plurals = {
		  pronoun: 'they',
		  is: 'are',
		  was: 'were',
		  this: 'these'
		};
		pluralizer = class Pluralizer {
		  constructor(singular, plural) {
		    this.singular = singular;
		    this.plural = plural;
		  }
		  pluralize(count) {
		    const one = count === 1;
		    const keys = one ? singulars : plurals;
		    const noun = one ? this.singular : this.plural;
		    return {
		      ...keys,
		      count,
		      noun
		    };
		  }
		};
		return pluralizer;
	}

	var pendingInterceptorsFormatter;
	var hasRequiredPendingInterceptorsFormatter;

	function requirePendingInterceptorsFormatter () {
		if (hasRequiredPendingInterceptorsFormatter) return pendingInterceptorsFormatter;
		hasRequiredPendingInterceptorsFormatter = 1;

		const {
		  Transform
		} = stream__default["default"];
		const {
		  Console
		} = require$$1__default$4["default"];

		/**
		 * Gets the output of `console.table(…)` as a string.
		 */
		pendingInterceptorsFormatter = class PendingInterceptorsFormatter {
		  constructor({
		    disableColors
		  } = {}) {
		    this.transform = new Transform({
		      transform(chunk, _enc, cb) {
		        cb(null, chunk);
		      }
		    });
		    this.logger = new Console({
		      stdout: this.transform,
		      inspectOptions: {
		        colors: !disableColors && !process.env.CI
		      }
		    });
		  }
		  format(pendingInterceptors) {
		    const withPrettyHeaders = pendingInterceptors.map(({
		      method,
		      path,
		      data: {
		        statusCode
		      },
		      persist,
		      times,
		      timesInvoked,
		      origin
		    }) => ({
		      Method: method,
		      Origin: origin,
		      Path: path,
		      'Status code': statusCode,
		      Persistent: persist ? '✅' : '❌',
		      Invocations: timesInvoked,
		      Remaining: persist ? Infinity : times - timesInvoked
		    }));
		    this.logger.table(withPrettyHeaders);
		    return this.transform.read().toString();
		  }
		};
		return pendingInterceptorsFormatter;
	}

	var mockAgent;
	var hasRequiredMockAgent;

	function requireMockAgent () {
		if (hasRequiredMockAgent) return mockAgent;
		hasRequiredMockAgent = 1;

		const {
		  kClients
		} = requireSymbols$4();
		const Agent = requireAgent();
		const {
		  kAgent,
		  kMockAgentSet,
		  kMockAgentGet,
		  kDispatches,
		  kIsMockActive,
		  kNetConnect,
		  kGetNetConnect,
		  kOptions,
		  kFactory
		} = requireMockSymbols();
		const MockClient = requireMockClient();
		const MockPool = requireMockPool();
		const {
		  matchValue,
		  buildMockOptions
		} = requireMockUtils();
		const {
		  InvalidArgumentError,
		  UndiciError
		} = requireErrors();
		const Dispatcher = requireDispatcher();
		const Pluralizer = requirePluralizer();
		const PendingInterceptorsFormatter = requirePendingInterceptorsFormatter();
		class FakeWeakRef {
		  constructor(value) {
		    this.value = value;
		  }
		  deref() {
		    return this.value;
		  }
		}
		class MockAgent extends Dispatcher {
		  constructor(opts) {
		    super(opts);
		    this[kNetConnect] = true;
		    this[kIsMockActive] = true;

		    // Instantiate Agent and encapsulate
		    if (opts && opts.agent && typeof opts.agent.dispatch !== 'function') {
		      throw new InvalidArgumentError('Argument opts.agent must implement Agent');
		    }
		    const agent = opts && opts.agent ? opts.agent : new Agent(opts);
		    this[kAgent] = agent;
		    this[kClients] = agent[kClients];
		    this[kOptions] = buildMockOptions(opts);
		  }
		  get(origin) {
		    let dispatcher = this[kMockAgentGet](origin);
		    if (!dispatcher) {
		      dispatcher = this[kFactory](origin);
		      this[kMockAgentSet](origin, dispatcher);
		    }
		    return dispatcher;
		  }
		  dispatch(opts, handler) {
		    // Call MockAgent.get to perform additional setup before dispatching as normal
		    this.get(opts.origin);
		    return this[kAgent].dispatch(opts, handler);
		  }
		  async close() {
		    await this[kAgent].close();
		    this[kClients].clear();
		  }
		  deactivate() {
		    this[kIsMockActive] = false;
		  }
		  activate() {
		    this[kIsMockActive] = true;
		  }
		  enableNetConnect(matcher) {
		    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
		      if (Array.isArray(this[kNetConnect])) {
		        this[kNetConnect].push(matcher);
		      } else {
		        this[kNetConnect] = [matcher];
		      }
		    } else if (typeof matcher === 'undefined') {
		      this[kNetConnect] = true;
		    } else {
		      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');
		    }
		  }
		  disableNetConnect() {
		    this[kNetConnect] = false;
		  }

		  // This is required to bypass issues caused by using global symbols - see:
		  // https://github.com/nodejs/undici/issues/1447
		  get isMockActive() {
		    return this[kIsMockActive];
		  }
		  [kMockAgentSet](origin, dispatcher) {
		    this[kClients].set(origin, new FakeWeakRef(dispatcher));
		  }
		  [kFactory](origin) {
		    const mockOptions = Object.assign({
		      agent: this
		    }, this[kOptions]);
		    return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
		  }
		  [kMockAgentGet](origin) {
		    // First check if we can immediately find it
		    const ref = this[kClients].get(origin);
		    if (ref) {
		      return ref.deref();
		    }

		    // If the origin is not a string create a dummy parent pool and return to user
		    if (typeof origin !== 'string') {
		      const dispatcher = this[kFactory]('http://localhost:9999');
		      this[kMockAgentSet](origin, dispatcher);
		      return dispatcher;
		    }

		    // If we match, create a pool and assign the same dispatches
		    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
		      const nonExplicitDispatcher = nonExplicitRef.deref();
		      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
		        const dispatcher = this[kFactory](origin);
		        this[kMockAgentSet](origin, dispatcher);
		        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
		        return dispatcher;
		      }
		    }
		  }
		  [kGetNetConnect]() {
		    return this[kNetConnect];
		  }
		  pendingInterceptors() {
		    const mockAgentClients = this[kClients];
		    return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({
		      ...dispatch,
		      origin
		    }))).filter(({
		      pending
		    }) => pending);
		  }
		  assertNoPendingInterceptors({
		    pendingInterceptorsFormatter = new PendingInterceptorsFormatter()
		  } = {}) {
		    const pending = this.pendingInterceptors();
		    if (pending.length === 0) {
		      return;
		    }
		    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length);
		    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
		  }
		}
		mockAgent = MockAgent;
		return mockAgent;
	}

	var proxyAgent;
	var hasRequiredProxyAgent;

	function requireProxyAgent () {
		if (hasRequiredProxyAgent) return proxyAgent;
		hasRequiredProxyAgent = 1;

		const {
		  kProxy,
		  kClose,
		  kDestroy,
		  kInterceptors
		} = requireSymbols$4();
		const {
		  URL
		} = require$$0__default["default"];
		const Agent = requireAgent();
		const Pool = requirePool();
		const DispatcherBase = requireDispatcherBase();
		const {
		  InvalidArgumentError,
		  RequestAbortedError
		} = requireErrors();
		const buildConnector = requireConnect();
		const kAgent = Symbol('proxy agent');
		const kClient = Symbol('proxy client');
		const kProxyHeaders = Symbol('proxy headers');
		const kRequestTls = Symbol('request tls settings');
		const kProxyTls = Symbol('proxy tls settings');
		const kConnectEndpoint = Symbol('connect endpoint function');
		function defaultProtocolPort(protocol) {
		  return protocol === 'https:' ? 443 : 80;
		}
		function buildProxyOptions(opts) {
		  if (typeof opts === 'string') {
		    opts = {
		      uri: opts
		    };
		  }
		  if (!opts || !opts.uri) {
		    throw new InvalidArgumentError('Proxy opts.uri is mandatory');
		  }
		  return {
		    uri: opts.uri,
		    protocol: opts.protocol || 'https'
		  };
		}
		function defaultFactory(origin, opts) {
		  return new Pool(origin, opts);
		}
		class ProxyAgent extends DispatcherBase {
		  constructor(opts) {
		    super(opts);
		    this[kProxy] = buildProxyOptions(opts);
		    this[kAgent] = new Agent(opts);
		    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
		    if (typeof opts === 'string') {
		      opts = {
		        uri: opts
		      };
		    }
		    if (!opts || !opts.uri) {
		      throw new InvalidArgumentError('Proxy opts.uri is mandatory');
		    }
		    const {
		      clientFactory = defaultFactory
		    } = opts;
		    if (typeof clientFactory !== 'function') {
		      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.');
		    }
		    this[kRequestTls] = opts.requestTls;
		    this[kProxyTls] = opts.proxyTls;
		    this[kProxyHeaders] = opts.headers || {};
		    const resolvedUrl = new URL(opts.uri);
		    const {
		      origin,
		      port,
		      host,
		      username,
		      password
		    } = resolvedUrl;
		    if (opts.auth && opts.token) {
		      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token');
		    } else if (opts.auth) {
		      /* @deprecated in favour of opts.token */
		      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`;
		    } else if (opts.token) {
		      this[kProxyHeaders]['proxy-authorization'] = opts.token;
		    } else if (username && password) {
		      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`;
		    }
		    const connect = buildConnector({
		      ...opts.proxyTls
		    });
		    this[kConnectEndpoint] = buildConnector({
		      ...opts.requestTls
		    });
		    this[kClient] = clientFactory(resolvedUrl, {
		      connect
		    });
		    this[kAgent] = new Agent({
		      ...opts,
		      connect: async (opts, callback) => {
		        let requestedHost = opts.host;
		        if (!opts.port) {
		          requestedHost += `:${defaultProtocolPort(opts.protocol)}`;
		        }
		        try {
		          const {
		            socket,
		            statusCode
		          } = await this[kClient].connect({
		            origin,
		            port,
		            path: requestedHost,
		            signal: opts.signal,
		            headers: {
		              ...this[kProxyHeaders],
		              host
		            }
		          });
		          if (statusCode !== 200) {
		            socket.on('error', () => {}).destroy();
		            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
		          }
		          if (opts.protocol !== 'https:') {
		            callback(null, socket);
		            return;
		          }
		          let servername;
		          if (this[kRequestTls]) {
		            servername = this[kRequestTls].servername;
		          } else {
		            servername = opts.servername;
		          }
		          this[kConnectEndpoint]({
		            ...opts,
		            servername,
		            httpSocket: socket
		          }, callback);
		        } catch (err) {
		          callback(err);
		        }
		      }
		    });
		  }
		  dispatch(opts, handler) {
		    const {
		      host
		    } = new URL(opts.origin);
		    const headers = buildHeaders(opts.headers);
		    throwIfProxyAuthIsSent(headers);
		    return this[kAgent].dispatch({
		      ...opts,
		      headers: {
		        ...headers,
		        host
		      }
		    }, handler);
		  }
		  async [kClose]() {
		    await this[kAgent].close();
		    await this[kClient].close();
		  }
		  async [kDestroy]() {
		    await this[kAgent].destroy();
		    await this[kClient].destroy();
		  }
		}

		/**
		 * @param {string[] | Record<string, string>} headers
		 * @returns {Record<string, string>}
		 */
		function buildHeaders(headers) {
		  // When using undici.fetch, the headers list is stored
		  // as an array.
		  if (Array.isArray(headers)) {
		    /** @type {Record<string, string>} */
		    const headersPair = {};
		    for (let i = 0; i < headers.length; i += 2) {
		      headersPair[headers[i]] = headers[i + 1];
		    }
		    return headersPair;
		  }
		  return headers;
		}

		/**
		 * @param {Record<string, string>} headers
		 *
		 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
		 * Nevertheless, it was changed and to avoid a security vulnerability by end users
		 * this check was created.
		 * It should be removed in the next major version for performance reasons
		 */
		function throwIfProxyAuthIsSent(headers) {
		  const existProxyAuth = headers && Object.keys(headers).find(key => key.toLowerCase() === 'proxy-authorization');
		  if (existProxyAuth) {
		    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor');
		  }
		}
		proxyAgent = ProxyAgent;
		return proxyAgent;
	}

	var RetryHandler_1;
	var hasRequiredRetryHandler;

	function requireRetryHandler () {
		if (hasRequiredRetryHandler) return RetryHandler_1;
		hasRequiredRetryHandler = 1;
		const assert = require$$0__default$3["default"];
		const {
		  kRetryHandlerDefaultRetry
		} = requireSymbols$4();
		const {
		  RequestRetryError
		} = requireErrors();
		const {
		  isDisturbed,
		  parseHeaders,
		  parseRangeHeader
		} = requireUtil$6();
		function calculateRetryAfterHeader(retryAfter) {
		  const current = Date.now();
		  const diff = new Date(retryAfter).getTime() - current;
		  return diff;
		}
		class RetryHandler {
		  constructor(opts, handlers) {
		    const {
		      retryOptions,
		      ...dispatchOpts
		    } = opts;
		    const {
		      // Retry scoped
		      retry: retryFn,
		      maxRetries,
		      maxTimeout,
		      minTimeout,
		      timeoutFactor,
		      // Response scoped
		      methods,
		      errorCodes,
		      retryAfter,
		      statusCodes
		    } = retryOptions ?? {};
		    this.dispatch = handlers.dispatch;
		    this.handler = handlers.handler;
		    this.opts = dispatchOpts;
		    this.abort = null;
		    this.aborted = false;
		    this.retryOpts = {
		      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
		      retryAfter: retryAfter ?? true,
		      maxTimeout: maxTimeout ?? 30 * 1000,
		      // 30s,
		      timeout: minTimeout ?? 500,
		      // .5s
		      timeoutFactor: timeoutFactor ?? 2,
		      maxRetries: maxRetries ?? 5,
		      // What errors we should retry
		      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
		      // Indicates which errors to retry
		      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
		      // List of errors to retry
		      errorCodes: errorCodes ?? ['ECONNRESET', 'ECONNREFUSED', 'ENOTFOUND', 'ENETDOWN', 'ENETUNREACH', 'EHOSTDOWN', 'EHOSTUNREACH', 'EPIPE']
		    };
		    this.retryCount = 0;
		    this.start = 0;
		    this.end = null;
		    this.etag = null;
		    this.resume = null;

		    // Handle possible onConnect duplication
		    this.handler.onConnect(reason => {
		      this.aborted = true;
		      if (this.abort) {
		        this.abort(reason);
		      } else {
		        this.reason = reason;
		      }
		    });
		  }
		  onRequestSent() {
		    if (this.handler.onRequestSent) {
		      this.handler.onRequestSent();
		    }
		  }
		  onUpgrade(statusCode, headers, socket) {
		    if (this.handler.onUpgrade) {
		      this.handler.onUpgrade(statusCode, headers, socket);
		    }
		  }
		  onConnect(abort) {
		    if (this.aborted) {
		      abort(this.reason);
		    } else {
		      this.abort = abort;
		    }
		  }
		  onBodySent(chunk) {
		    if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
		  }
		  static [kRetryHandlerDefaultRetry](err, {
		    state,
		    opts
		  }, cb) {
		    const {
		      statusCode,
		      code,
		      headers
		    } = err;
		    const {
		      method,
		      retryOptions
		    } = opts;
		    const {
		      maxRetries,
		      timeout,
		      maxTimeout,
		      timeoutFactor,
		      statusCodes,
		      errorCodes,
		      methods
		    } = retryOptions;
		    let {
		      counter,
		      currentTimeout
		    } = state;
		    currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;

		    // Any code that is not a Undici's originated and allowed to retry
		    if (code && code !== 'UND_ERR_REQ_RETRY' && code !== 'UND_ERR_SOCKET' && !errorCodes.includes(code)) {
		      cb(err);
		      return;
		    }

		    // If a set of method are provided and the current method is not in the list
		    if (Array.isArray(methods) && !methods.includes(method)) {
		      cb(err);
		      return;
		    }

		    // If a set of status code are provided and the current status code is not in the list
		    if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
		      cb(err);
		      return;
		    }

		    // If we reached the max number of retries
		    if (counter > maxRetries) {
		      cb(err);
		      return;
		    }
		    let retryAfterHeader = headers != null && headers['retry-after'];
		    if (retryAfterHeader) {
		      retryAfterHeader = Number(retryAfterHeader);
		      retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3; // Retry-After is in seconds
		    }
		    const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
		    state.currentTimeout = retryTimeout;
		    setTimeout(() => cb(null), retryTimeout);
		  }
		  onHeaders(statusCode, rawHeaders, resume, statusMessage) {
		    const headers = parseHeaders(rawHeaders);
		    this.retryCount += 1;
		    if (statusCode >= 300) {
		      this.abort(new RequestRetryError('Request failed', statusCode, {
		        headers,
		        count: this.retryCount
		      }));
		      return false;
		    }

		    // Checkpoint for resume from where we left it
		    if (this.resume != null) {
		      this.resume = null;
		      if (statusCode !== 206) {
		        return true;
		      }
		      const contentRange = parseRangeHeader(headers['content-range']);
		      // If no content range
		      if (!contentRange) {
		        this.abort(new RequestRetryError('Content-Range mismatch', statusCode, {
		          headers,
		          count: this.retryCount
		        }));
		        return false;
		      }

		      // Let's start with a weak etag check
		      if (this.etag != null && this.etag !== headers.etag) {
		        this.abort(new RequestRetryError('ETag mismatch', statusCode, {
		          headers,
		          count: this.retryCount
		        }));
		        return false;
		      }
		      const {
		        start,
		        size,
		        end = size
		      } = contentRange;
		      assert(this.start === start, 'content-range mismatch');
		      assert(this.end == null || this.end === end, 'content-range mismatch');
		      this.resume = resume;
		      return true;
		    }
		    if (this.end == null) {
		      if (statusCode === 206) {
		        // First time we receive 206
		        const range = parseRangeHeader(headers['content-range']);
		        if (range == null) {
		          return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
		        }
		        const {
		          start,
		          size,
		          end = size
		        } = range;
		        assert(start != null && Number.isFinite(start) && this.start !== start, 'content-range mismatch');
		        assert(Number.isFinite(start));
		        assert(end != null && Number.isFinite(end) && this.end !== end, 'invalid content-length');
		        this.start = start;
		        this.end = end;
		      }

		      // We make our best to checkpoint the body for further range headers
		      if (this.end == null) {
		        const contentLength = headers['content-length'];
		        this.end = contentLength != null ? Number(contentLength) : null;
		      }
		      assert(Number.isFinite(this.start));
		      assert(this.end == null || Number.isFinite(this.end), 'invalid content-length');
		      this.resume = resume;
		      this.etag = headers.etag != null ? headers.etag : null;
		      return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
		    }
		    const err = new RequestRetryError('Request failed', statusCode, {
		      headers,
		      count: this.retryCount
		    });
		    this.abort(err);
		    return false;
		  }
		  onData(chunk) {
		    this.start += chunk.length;
		    return this.handler.onData(chunk);
		  }
		  onComplete(rawTrailers) {
		    this.retryCount = 0;
		    return this.handler.onComplete(rawTrailers);
		  }
		  onError(err) {
		    if (this.aborted || isDisturbed(this.opts.body)) {
		      return this.handler.onError(err);
		    }
		    this.retryOpts.retry(err, {
		      state: {
		        counter: this.retryCount++,
		        currentTimeout: this.retryAfter
		      },
		      opts: {
		        retryOptions: this.retryOpts,
		        ...this.opts
		      }
		    }, onRetry.bind(this));
		    function onRetry(err) {
		      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
		        return this.handler.onError(err);
		      }
		      if (this.start !== 0) {
		        this.opts = {
		          ...this.opts,
		          headers: {
		            ...this.opts.headers,
		            range: `bytes=${this.start}-${this.end ?? ''}`
		          }
		        };
		      }
		      try {
		        this.dispatch(this.opts, this);
		      } catch (err) {
		        this.handler.onError(err);
		      }
		    }
		  }
		}
		RetryHandler_1 = RetryHandler;
		return RetryHandler_1;
	}

	var global$1;
	var hasRequiredGlobal;

	function requireGlobal () {
		if (hasRequiredGlobal) return global$1;
		hasRequiredGlobal = 1;

		// We include a version number for the Dispatcher API. In case of breaking changes,
		// this version number must be increased to avoid conflicts.
		const globalDispatcher = Symbol.for('undici.globalDispatcher.1');
		const {
		  InvalidArgumentError
		} = requireErrors();
		const Agent = requireAgent();
		if (getGlobalDispatcher() === undefined) {
		  setGlobalDispatcher(new Agent());
		}
		function setGlobalDispatcher(agent) {
		  if (!agent || typeof agent.dispatch !== 'function') {
		    throw new InvalidArgumentError('Argument agent must implement Agent');
		  }
		  Object.defineProperty(globalThis, globalDispatcher, {
		    value: agent,
		    writable: true,
		    enumerable: false,
		    configurable: false
		  });
		}
		function getGlobalDispatcher() {
		  return globalThis[globalDispatcher];
		}
		global$1 = {
		  setGlobalDispatcher,
		  getGlobalDispatcher
		};
		return global$1;
	}

	var DecoratorHandler_1;
	var hasRequiredDecoratorHandler;

	function requireDecoratorHandler () {
		if (hasRequiredDecoratorHandler) return DecoratorHandler_1;
		hasRequiredDecoratorHandler = 1;

		DecoratorHandler_1 = class DecoratorHandler {
		  constructor(handler) {
		    this.handler = handler;
		  }
		  onConnect(...args) {
		    return this.handler.onConnect(...args);
		  }
		  onError(...args) {
		    return this.handler.onError(...args);
		  }
		  onUpgrade(...args) {
		    return this.handler.onUpgrade(...args);
		  }
		  onHeaders(...args) {
		    return this.handler.onHeaders(...args);
		  }
		  onData(...args) {
		    return this.handler.onData(...args);
		  }
		  onComplete(...args) {
		    return this.handler.onComplete(...args);
		  }
		  onBodySent(...args) {
		    return this.handler.onBodySent(...args);
		  }
		};
		return DecoratorHandler_1;
	}

	var headers;
	var hasRequiredHeaders;

	function requireHeaders () {
		if (hasRequiredHeaders) return headers;
		hasRequiredHeaders = 1;

		const {
		  kHeadersList,
		  kConstruct
		} = requireSymbols$4();
		const {
		  kGuard
		} = requireSymbols$3();
		const {
		  kEnumerableProperty
		} = requireUtil$6();
		const {
		  makeIterator,
		  isValidHeaderName,
		  isValidHeaderValue
		} = requireUtil$5();
		const {
		  webidl
		} = requireWebidl();
		const assert = require$$0__default$3["default"];
		const kHeadersMap = Symbol('headers map');
		const kHeadersSortedMap = Symbol('headers map sorted');

		/**
		 * @param {number} code
		 */
		function isHTTPWhiteSpaceCharCode(code) {
		  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
		 * @param {string} potentialValue
		 */
		function headerValueNormalize(potentialValue) {
		  //  To normalize a byte sequence potentialValue, remove
		  //  any leading and trailing HTTP whitespace bytes from
		  //  potentialValue.
		  let i = 0;
		  let j = potentialValue.length;
		  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
		  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
		  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
		}
		function fill(headers, object) {
		  // To fill a Headers object headers with a given object object, run these steps:

		  // 1. If object is a sequence, then for each header in object:
		  // Note: webidl conversion to array has already been done.
		  if (Array.isArray(object)) {
		    for (let i = 0; i < object.length; ++i) {
		      const header = object[i];
		      // 1. If header does not contain exactly two items, then throw a TypeError.
		      if (header.length !== 2) {
		        throw webidl.errors.exception({
		          header: 'Headers constructor',
		          message: `expected name/value pair to be length 2, found ${header.length}.`
		        });
		      }

		      // 2. Append (header’s first item, header’s second item) to headers.
		      appendHeader(headers, header[0], header[1]);
		    }
		  } else if (typeof object === 'object' && object !== null) {
		    // Note: null should throw

		    // 2. Otherwise, object is a record, then for each key → value in object,
		    //    append (key, value) to headers
		    const keys = Object.keys(object);
		    for (let i = 0; i < keys.length; ++i) {
		      appendHeader(headers, keys[i], object[keys[i]]);
		    }
		  } else {
		    throw webidl.errors.conversionFailed({
		      prefix: 'Headers constructor',
		      argument: 'Argument 1',
		      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
		    });
		  }
		}

		/**
		 * @see https://fetch.spec.whatwg.org/#concept-headers-append
		 */
		function appendHeader(headers, name, value) {
		  // 1. Normalize value.
		  value = headerValueNormalize(value);

		  // 2. If name is not a header name or value is not a
		  //    header value, then throw a TypeError.
		  if (!isValidHeaderName(name)) {
		    throw webidl.errors.invalidArgument({
		      prefix: 'Headers.append',
		      value: name,
		      type: 'header name'
		    });
		  } else if (!isValidHeaderValue(value)) {
		    throw webidl.errors.invalidArgument({
		      prefix: 'Headers.append',
		      value,
		      type: 'header value'
		    });
		  }

		  // 3. If headers’s guard is "immutable", then throw a TypeError.
		  // 4. Otherwise, if headers’s guard is "request" and name is a
		  //    forbidden header name, return.
		  // Note: undici does not implement forbidden header names
		  if (headers[kGuard] === 'immutable') {
		    throw new TypeError('immutable');
		  } else if (headers[kGuard] === 'request-no-cors') ;

		  // 6. Otherwise, if headers’s guard is "response" and name is a
		  //    forbidden response-header name, return.

		  // 7. Append (name, value) to headers’s header list.
		  return headers[kHeadersList].append(name, value);

		  // 8. If headers’s guard is "request-no-cors", then remove
		  //    privileged no-CORS request headers from headers
		}
		class HeadersList {
		  /** @type {[string, string][]|null} */
		  cookies = null;
		  constructor(init) {
		    if (init instanceof HeadersList) {
		      this[kHeadersMap] = new Map(init[kHeadersMap]);
		      this[kHeadersSortedMap] = init[kHeadersSortedMap];
		      this.cookies = init.cookies === null ? null : [...init.cookies];
		    } else {
		      this[kHeadersMap] = new Map(init);
		      this[kHeadersSortedMap] = null;
		    }
		  }

		  // https://fetch.spec.whatwg.org/#header-list-contains
		  contains(name) {
		    // A header list list contains a header name name if list
		    // contains a header whose name is a byte-case-insensitive
		    // match for name.
		    name = name.toLowerCase();
		    return this[kHeadersMap].has(name);
		  }
		  clear() {
		    this[kHeadersMap].clear();
		    this[kHeadersSortedMap] = null;
		    this.cookies = null;
		  }

		  // https://fetch.spec.whatwg.org/#concept-header-list-append
		  append(name, value) {
		    this[kHeadersSortedMap] = null;

		    // 1. If list contains name, then set name to the first such
		    //    header’s name.
		    const lowercaseName = name.toLowerCase();
		    const exists = this[kHeadersMap].get(lowercaseName);

		    // 2. Append (name, value) to list.
		    if (exists) {
		      const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';
		      this[kHeadersMap].set(lowercaseName, {
		        name: exists.name,
		        value: `${exists.value}${delimiter}${value}`
		      });
		    } else {
		      this[kHeadersMap].set(lowercaseName, {
		        name,
		        value
		      });
		    }
		    if (lowercaseName === 'set-cookie') {
		      this.cookies ??= [];
		      this.cookies.push(value);
		    }
		  }

		  // https://fetch.spec.whatwg.org/#concept-header-list-set
		  set(name, value) {
		    this[kHeadersSortedMap] = null;
		    const lowercaseName = name.toLowerCase();
		    if (lowercaseName === 'set-cookie') {
		      this.cookies = [value];
		    }

		    // 1. If list contains name, then set the value of
		    //    the first such header to value and remove the
		    //    others.
		    // 2. Otherwise, append header (name, value) to list.
		    this[kHeadersMap].set(lowercaseName, {
		      name,
		      value
		    });
		  }

		  // https://fetch.spec.whatwg.org/#concept-header-list-delete
		  delete(name) {
		    this[kHeadersSortedMap] = null;
		    name = name.toLowerCase();
		    if (name === 'set-cookie') {
		      this.cookies = null;
		    }
		    this[kHeadersMap].delete(name);
		  }

		  // https://fetch.spec.whatwg.org/#concept-header-list-get
		  get(name) {
		    const value = this[kHeadersMap].get(name.toLowerCase());

		    // 1. If list does not contain name, then return null.
		    // 2. Return the values of all headers in list whose name
		    //    is a byte-case-insensitive match for name,
		    //    separated from each other by 0x2C 0x20, in order.
		    return value === undefined ? null : value.value;
		  }
		  *[Symbol.iterator]() {
		    // use the lowercased name
		    for (const [name, {
		      value
		    }] of this[kHeadersMap]) {
		      yield [name, value];
		    }
		  }
		  get entries() {
		    const headers = {};
		    if (this[kHeadersMap].size) {
		      for (const {
		        name,
		        value
		      } of this[kHeadersMap].values()) {
		        headers[name] = value;
		      }
		    }
		    return headers;
		  }
		}

		// https://fetch.spec.whatwg.org/#headers-class
		class Headers {
		  constructor(init = undefined) {
		    if (init === kConstruct) {
		      return;
		    }
		    this[kHeadersList] = new HeadersList();

		    // The new Headers(init) constructor steps are:

		    // 1. Set this’s guard to "none".
		    this[kGuard] = 'none';

		    // 2. If init is given, then fill this with init.
		    if (init !== undefined) {
		      init = webidl.converters.HeadersInit(init);
		      fill(this, init);
		    }
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-append
		  append(name, value) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'Headers.append'
		    });
		    name = webidl.converters.ByteString(name);
		    value = webidl.converters.ByteString(value);
		    return appendHeader(this, name, value);
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-delete
		  delete(name) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Headers.delete'
		    });
		    name = webidl.converters.ByteString(name);

		    // 1. If name is not a header name, then throw a TypeError.
		    if (!isValidHeaderName(name)) {
		      throw webidl.errors.invalidArgument({
		        prefix: 'Headers.delete',
		        value: name,
		        type: 'header name'
		      });
		    }

		    // 2. If this’s guard is "immutable", then throw a TypeError.
		    // 3. Otherwise, if this’s guard is "request" and name is a
		    //    forbidden header name, return.
		    // 4. Otherwise, if this’s guard is "request-no-cors", name
		    //    is not a no-CORS-safelisted request-header name, and
		    //    name is not a privileged no-CORS request-header name,
		    //    return.
		    // 5. Otherwise, if this’s guard is "response" and name is
		    //    a forbidden response-header name, return.
		    // Note: undici does not implement forbidden header names
		    if (this[kGuard] === 'immutable') {
		      throw new TypeError('immutable');
		    } else if (this[kGuard] === 'request-no-cors') ;

		    // 6. If this’s header list does not contain name, then
		    //    return.
		    if (!this[kHeadersList].contains(name)) {
		      return;
		    }

		    // 7. Delete name from this’s header list.
		    // 8. If this’s guard is "request-no-cors", then remove
		    //    privileged no-CORS request headers from this.
		    this[kHeadersList].delete(name);
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-get
		  get(name) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Headers.get'
		    });
		    name = webidl.converters.ByteString(name);

		    // 1. If name is not a header name, then throw a TypeError.
		    if (!isValidHeaderName(name)) {
		      throw webidl.errors.invalidArgument({
		        prefix: 'Headers.get',
		        value: name,
		        type: 'header name'
		      });
		    }

		    // 2. Return the result of getting name from this’s header
		    //    list.
		    return this[kHeadersList].get(name);
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-has
		  has(name) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Headers.has'
		    });
		    name = webidl.converters.ByteString(name);

		    // 1. If name is not a header name, then throw a TypeError.
		    if (!isValidHeaderName(name)) {
		      throw webidl.errors.invalidArgument({
		        prefix: 'Headers.has',
		        value: name,
		        type: 'header name'
		      });
		    }

		    // 2. Return true if this’s header list contains name;
		    //    otherwise false.
		    return this[kHeadersList].contains(name);
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-set
		  set(name, value) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'Headers.set'
		    });
		    name = webidl.converters.ByteString(name);
		    value = webidl.converters.ByteString(value);

		    // 1. Normalize value.
		    value = headerValueNormalize(value);

		    // 2. If name is not a header name or value is not a
		    //    header value, then throw a TypeError.
		    if (!isValidHeaderName(name)) {
		      throw webidl.errors.invalidArgument({
		        prefix: 'Headers.set',
		        value: name,
		        type: 'header name'
		      });
		    } else if (!isValidHeaderValue(value)) {
		      throw webidl.errors.invalidArgument({
		        prefix: 'Headers.set',
		        value,
		        type: 'header value'
		      });
		    }

		    // 3. If this’s guard is "immutable", then throw a TypeError.
		    // 4. Otherwise, if this’s guard is "request" and name is a
		    //    forbidden header name, return.
		    // 5. Otherwise, if this’s guard is "request-no-cors" and
		    //    name/value is not a no-CORS-safelisted request-header,
		    //    return.
		    // 6. Otherwise, if this’s guard is "response" and name is a
		    //    forbidden response-header name, return.
		    // Note: undici does not implement forbidden header names
		    if (this[kGuard] === 'immutable') {
		      throw new TypeError('immutable');
		    } else if (this[kGuard] === 'request-no-cors') ;

		    // 7. Set (name, value) in this’s header list.
		    // 8. If this’s guard is "request-no-cors", then remove
		    //    privileged no-CORS request headers from this
		    this[kHeadersList].set(name, value);
		  }

		  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
		  getSetCookie() {
		    webidl.brandCheck(this, Headers);

		    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
		    // 2. Return the values of all headers in this’s header list whose name is
		    //    a byte-case-insensitive match for `Set-Cookie`, in order.

		    const list = this[kHeadersList].cookies;
		    if (list) {
		      return [...list];
		    }
		    return [];
		  }

		  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
		  get [kHeadersSortedMap]() {
		    if (this[kHeadersList][kHeadersSortedMap]) {
		      return this[kHeadersList][kHeadersSortedMap];
		    }

		    // 1. Let headers be an empty list of headers with the key being the name
		    //    and value the value.
		    const headers = [];

		    // 2. Let names be the result of convert header names to a sorted-lowercase
		    //    set with all the names of the headers in list.
		    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
		    const cookies = this[kHeadersList].cookies;

		    // 3. For each name of names:
		    for (let i = 0; i < names.length; ++i) {
		      const [name, value] = names[i];
		      // 1. If name is `set-cookie`, then:
		      if (name === 'set-cookie') {
		        // 1. Let values be a list of all values of headers in list whose name
		        //    is a byte-case-insensitive match for name, in order.

		        // 2. For each value of values:
		        // 1. Append (name, value) to headers.
		        for (let j = 0; j < cookies.length; ++j) {
		          headers.push([name, cookies[j]]);
		        }
		      } else {
		        // 2. Otherwise:

		        // 1. Let value be the result of getting name from list.

		        // 2. Assert: value is non-null.
		        assert(value !== null);

		        // 3. Append (name, value) to headers.
		        headers.push([name, value]);
		      }
		    }
		    this[kHeadersList][kHeadersSortedMap] = headers;

		    // 4. Return headers.
		    return headers;
		  }
		  keys() {
		    webidl.brandCheck(this, Headers);
		    if (this[kGuard] === 'immutable') {
		      const value = this[kHeadersSortedMap];
		      return makeIterator(() => value, 'Headers', 'key');
		    }
		    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'key');
		  }
		  values() {
		    webidl.brandCheck(this, Headers);
		    if (this[kGuard] === 'immutable') {
		      const value = this[kHeadersSortedMap];
		      return makeIterator(() => value, 'Headers', 'value');
		    }
		    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'value');
		  }
		  entries() {
		    webidl.brandCheck(this, Headers);
		    if (this[kGuard] === 'immutable') {
		      const value = this[kHeadersSortedMap];
		      return makeIterator(() => value, 'Headers', 'key+value');
		    }
		    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'key+value');
		  }

		  /**
		   * @param {(value: string, key: string, self: Headers) => void} callbackFn
		   * @param {unknown} thisArg
		   */
		  forEach(callbackFn, thisArg = globalThis) {
		    webidl.brandCheck(this, Headers);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Headers.forEach'
		    });
		    if (typeof callbackFn !== 'function') {
		      throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
		    }
		    for (const [key, value] of this) {
		      callbackFn.apply(thisArg, [value, key, this]);
		    }
		  }
		  [Symbol.for('nodejs.util.inspect.custom')]() {
		    webidl.brandCheck(this, Headers);
		    return this[kHeadersList];
		  }
		}
		Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
		Object.defineProperties(Headers.prototype, {
		  append: kEnumerableProperty,
		  delete: kEnumerableProperty,
		  get: kEnumerableProperty,
		  has: kEnumerableProperty,
		  set: kEnumerableProperty,
		  getSetCookie: kEnumerableProperty,
		  keys: kEnumerableProperty,
		  values: kEnumerableProperty,
		  entries: kEnumerableProperty,
		  forEach: kEnumerableProperty,
		  [Symbol.iterator]: {
		    enumerable: false
		  },
		  [Symbol.toStringTag]: {
		    value: 'Headers',
		    configurable: true
		  }
		});
		webidl.converters.HeadersInit = function (V) {
		  if (webidl.util.Type(V) === 'Object') {
		    if (V[Symbol.iterator]) {
		      return webidl.converters['sequence<sequence<ByteString>>'](V);
		    }
		    return webidl.converters['record<ByteString, ByteString>'](V);
		  }
		  throw webidl.errors.conversionFailed({
		    prefix: 'Headers constructor',
		    argument: 'Argument 1',
		    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
		  });
		};
		headers = {
		  fill,
		  Headers,
		  HeadersList
		};
		return headers;
	}

	var response;
	var hasRequiredResponse;

	function requireResponse () {
		if (hasRequiredResponse) return response;
		hasRequiredResponse = 1;

		const {
		  Headers,
		  HeadersList,
		  fill
		} = requireHeaders();
		const {
		  extractBody,
		  cloneBody,
		  mixinBody
		} = requireBody();
		const util = requireUtil$6();
		const {
		  kEnumerableProperty
		} = util;
		const {
		  isValidReasonPhrase,
		  isCancelled,
		  isAborted,
		  isBlobLike,
		  serializeJavascriptValueToJSONString,
		  isErrorLike,
		  isomorphicEncode
		} = requireUtil$5();
		const {
		  redirectStatusSet,
		  nullBodyStatus,
		  DOMException
		} = requireConstants$3();
		const {
		  kState,
		  kHeaders,
		  kGuard,
		  kRealm
		} = requireSymbols$3();
		const {
		  webidl
		} = requireWebidl();
		const {
		  FormData
		} = requireFormdata();
		const {
		  getGlobalOrigin
		} = requireGlobal$1();
		const {
		  URLSerializer
		} = requireDataURL();
		const {
		  kHeadersList,
		  kConstruct
		} = requireSymbols$4();
		const assert = require$$0__default$3["default"];
		const {
		  types
		} = require$$1__default["default"];
		const ReadableStream = globalThis.ReadableStream || require$$13__default["default"].ReadableStream;
		const textEncoder = new TextEncoder('utf-8');

		// https://fetch.spec.whatwg.org/#response-class
		class Response {
		  // Creates network error Response.
		  static error() {
		    // TODO
		    const relevantRealm = {
		      settingsObject: {}
		    };

		    // The static error() method steps are to return the result of creating a
		    // Response object, given a new network error, "immutable", and this’s
		    // relevant Realm.
		    const responseObject = new Response();
		    responseObject[kState] = makeNetworkError();
		    responseObject[kRealm] = relevantRealm;
		    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
		    responseObject[kHeaders][kGuard] = 'immutable';
		    responseObject[kHeaders][kRealm] = relevantRealm;
		    return responseObject;
		  }

		  // https://fetch.spec.whatwg.org/#dom-response-json
		  static json(data, init = {}) {
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Response.json'
		    });
		    if (init !== null) {
		      init = webidl.converters.ResponseInit(init);
		    }

		    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
		    const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));

		    // 2. Let body be the result of extracting bytes.
		    const body = extractBody(bytes);

		    // 3. Let responseObject be the result of creating a Response object, given a new response,
		    //    "response", and this’s relevant Realm.
		    const relevantRealm = {
		      settingsObject: {}
		    };
		    const responseObject = new Response();
		    responseObject[kRealm] = relevantRealm;
		    responseObject[kHeaders][kGuard] = 'response';
		    responseObject[kHeaders][kRealm] = relevantRealm;

		    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
		    initializeResponse(responseObject, init, {
		      body: body[0],
		      type: 'application/json'
		    });

		    // 5. Return responseObject.
		    return responseObject;
		  }

		  // Creates a redirect Response that redirects to url with status status.
		  static redirect(url, status = 302) {
		    const relevantRealm = {
		      settingsObject: {}
		    };
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Response.redirect'
		    });
		    url = webidl.converters.USVString(url);
		    status = webidl.converters['unsigned short'](status);

		    // 1. Let parsedURL be the result of parsing url with current settings
		    // object’s API base URL.
		    // 2. If parsedURL is failure, then throw a TypeError.
		    // TODO: base-URL?
		    let parsedURL;
		    try {
		      parsedURL = new URL(url, getGlobalOrigin());
		    } catch (err) {
		      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {
		        cause: err
		      });
		    }

		    // 3. If status is not a redirect status, then throw a RangeError.
		    if (!redirectStatusSet.has(status)) {
		      throw new RangeError('Invalid status code ' + status);
		    }

		    // 4. Let responseObject be the result of creating a Response object,
		    // given a new response, "immutable", and this’s relevant Realm.
		    const responseObject = new Response();
		    responseObject[kRealm] = relevantRealm;
		    responseObject[kHeaders][kGuard] = 'immutable';
		    responseObject[kHeaders][kRealm] = relevantRealm;

		    // 5. Set responseObject’s response’s status to status.
		    responseObject[kState].status = status;

		    // 6. Let value be parsedURL, serialized and isomorphic encoded.
		    const value = isomorphicEncode(URLSerializer(parsedURL));

		    // 7. Append `Location`/value to responseObject’s response’s header list.
		    responseObject[kState].headersList.append('location', value);

		    // 8. Return responseObject.
		    return responseObject;
		  }

		  // https://fetch.spec.whatwg.org/#dom-response
		  constructor(body = null, init = {}) {
		    if (body !== null) {
		      body = webidl.converters.BodyInit(body);
		    }
		    init = webidl.converters.ResponseInit(init);

		    // TODO
		    this[kRealm] = {
		      settingsObject: {}
		    };

		    // 1. Set this’s response to a new response.
		    this[kState] = makeResponse({});

		    // 2. Set this’s headers to a new Headers object with this’s relevant
		    // Realm, whose header list is this’s response’s header list and guard
		    // is "response".
		    this[kHeaders] = new Headers(kConstruct);
		    this[kHeaders][kGuard] = 'response';
		    this[kHeaders][kHeadersList] = this[kState].headersList;
		    this[kHeaders][kRealm] = this[kRealm];

		    // 3. Let bodyWithType be null.
		    let bodyWithType = null;

		    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
		    if (body != null) {
		      const [extractedBody, type] = extractBody(body);
		      bodyWithType = {
		        body: extractedBody,
		        type
		      };
		    }

		    // 5. Perform initialize a response given this, init, and bodyWithType.
		    initializeResponse(this, init, bodyWithType);
		  }

		  // Returns response’s type, e.g., "cors".
		  get type() {
		    webidl.brandCheck(this, Response);

		    // The type getter steps are to return this’s response’s type.
		    return this[kState].type;
		  }

		  // Returns response’s URL, if it has one; otherwise the empty string.
		  get url() {
		    webidl.brandCheck(this, Response);
		    const urlList = this[kState].urlList;

		    // The url getter steps are to return the empty string if this’s
		    // response’s URL is null; otherwise this’s response’s URL,
		    // serialized with exclude fragment set to true.
		    const url = urlList[urlList.length - 1] ?? null;
		    if (url === null) {
		      return '';
		    }
		    return URLSerializer(url, true);
		  }

		  // Returns whether response was obtained through a redirect.
		  get redirected() {
		    webidl.brandCheck(this, Response);

		    // The redirected getter steps are to return true if this’s response’s URL
		    // list has more than one item; otherwise false.
		    return this[kState].urlList.length > 1;
		  }

		  // Returns response’s status.
		  get status() {
		    webidl.brandCheck(this, Response);

		    // The status getter steps are to return this’s response’s status.
		    return this[kState].status;
		  }

		  // Returns whether response’s status is an ok status.
		  get ok() {
		    webidl.brandCheck(this, Response);

		    // The ok getter steps are to return true if this’s response’s status is an
		    // ok status; otherwise false.
		    return this[kState].status >= 200 && this[kState].status <= 299;
		  }

		  // Returns response’s status message.
		  get statusText() {
		    webidl.brandCheck(this, Response);

		    // The statusText getter steps are to return this’s response’s status
		    // message.
		    return this[kState].statusText;
		  }

		  // Returns response’s headers as Headers.
		  get headers() {
		    webidl.brandCheck(this, Response);

		    // The headers getter steps are to return this’s headers.
		    return this[kHeaders];
		  }
		  get body() {
		    webidl.brandCheck(this, Response);
		    return this[kState].body ? this[kState].body.stream : null;
		  }
		  get bodyUsed() {
		    webidl.brandCheck(this, Response);
		    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
		  }

		  // Returns a clone of response.
		  clone() {
		    webidl.brandCheck(this, Response);

		    // 1. If this is unusable, then throw a TypeError.
		    if (this.bodyUsed || this.body && this.body.locked) {
		      throw webidl.errors.exception({
		        header: 'Response.clone',
		        message: 'Body has already been consumed.'
		      });
		    }

		    // 2. Let clonedResponse be the result of cloning this’s response.
		    const clonedResponse = cloneResponse(this[kState]);

		    // 3. Return the result of creating a Response object, given
		    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
		    const clonedResponseObject = new Response();
		    clonedResponseObject[kState] = clonedResponse;
		    clonedResponseObject[kRealm] = this[kRealm];
		    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
		    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
		    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
		    return clonedResponseObject;
		  }
		}
		mixinBody(Response);
		Object.defineProperties(Response.prototype, {
		  type: kEnumerableProperty,
		  url: kEnumerableProperty,
		  status: kEnumerableProperty,
		  ok: kEnumerableProperty,
		  redirected: kEnumerableProperty,
		  statusText: kEnumerableProperty,
		  headers: kEnumerableProperty,
		  clone: kEnumerableProperty,
		  body: kEnumerableProperty,
		  bodyUsed: kEnumerableProperty,
		  [Symbol.toStringTag]: {
		    value: 'Response',
		    configurable: true
		  }
		});
		Object.defineProperties(Response, {
		  json: kEnumerableProperty,
		  redirect: kEnumerableProperty,
		  error: kEnumerableProperty
		});

		// https://fetch.spec.whatwg.org/#concept-response-clone
		function cloneResponse(response) {
		  // To clone a response response, run these steps:

		  // 1. If response is a filtered response, then return a new identical
		  // filtered response whose internal response is a clone of response’s
		  // internal response.
		  if (response.internalResponse) {
		    return filterResponse(cloneResponse(response.internalResponse), response.type);
		  }

		  // 2. Let newResponse be a copy of response, except for its body.
		  const newResponse = makeResponse({
		    ...response,
		    body: null
		  });

		  // 3. If response’s body is non-null, then set newResponse’s body to the
		  // result of cloning response’s body.
		  if (response.body != null) {
		    newResponse.body = cloneBody(response.body);
		  }

		  // 4. Return newResponse.
		  return newResponse;
		}
		function makeResponse(init) {
		  return {
		    aborted: false,
		    rangeRequested: false,
		    timingAllowPassed: false,
		    requestIncludesCredentials: false,
		    type: 'default',
		    status: 200,
		    timingInfo: null,
		    cacheState: '',
		    statusText: '',
		    ...init,
		    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),
		    urlList: init.urlList ? [...init.urlList] : []
		  };
		}
		function makeNetworkError(reason) {
		  const isError = isErrorLike(reason);
		  return makeResponse({
		    type: 'error',
		    status: 0,
		    error: isError ? reason : new Error(reason ? String(reason) : reason),
		    aborted: reason && reason.name === 'AbortError'
		  });
		}
		function makeFilteredResponse(response, state) {
		  state = {
		    internalResponse: response,
		    ...state
		  };
		  return new Proxy(response, {
		    get(target, p) {
		      return p in state ? state[p] : target[p];
		    },
		    set(target, p, value) {
		      assert(!(p in state));
		      target[p] = value;
		      return true;
		    }
		  });
		}

		// https://fetch.spec.whatwg.org/#concept-filtered-response
		function filterResponse(response, type) {
		  // Set response to the following filtered response with response as its
		  // internal response, depending on request’s response tainting:
		  if (type === 'basic') {
		    // A basic filtered response is a filtered response whose type is "basic"
		    // and header list excludes any headers in internal response’s header list
		    // whose name is a forbidden response-header name.

		    // Note: undici does not implement forbidden response-header names
		    return makeFilteredResponse(response, {
		      type: 'basic',
		      headersList: response.headersList
		    });
		  } else if (type === 'cors') {
		    // A CORS filtered response is a filtered response whose type is "cors"
		    // and header list excludes any headers in internal response’s header
		    // list whose name is not a CORS-safelisted response-header name, given
		    // internal response’s CORS-exposed header-name list.

		    // Note: undici does not implement CORS-safelisted response-header names
		    return makeFilteredResponse(response, {
		      type: 'cors',
		      headersList: response.headersList
		    });
		  } else if (type === 'opaque') {
		    // An opaque filtered response is a filtered response whose type is
		    // "opaque", URL list is the empty list, status is 0, status message
		    // is the empty byte sequence, header list is empty, and body is null.

		    return makeFilteredResponse(response, {
		      type: 'opaque',
		      urlList: Object.freeze([]),
		      status: 0,
		      statusText: '',
		      body: null
		    });
		  } else if (type === 'opaqueredirect') {
		    // An opaque-redirect filtered response is a filtered response whose type
		    // is "opaqueredirect", status is 0, status message is the empty byte
		    // sequence, header list is empty, and body is null.

		    return makeFilteredResponse(response, {
		      type: 'opaqueredirect',
		      status: 0,
		      statusText: '',
		      headersList: [],
		      body: null
		    });
		  } else {
		    assert(false);
		  }
		}

		// https://fetch.spec.whatwg.org/#appropriate-network-error
		function makeAppropriateNetworkError(fetchParams, err = null) {
		  // 1. Assert: fetchParams is canceled.
		  assert(isCancelled(fetchParams));

		  // 2. Return an aborted network error if fetchParams is aborted;
		  // otherwise return a network error.
		  return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), {
		    cause: err
		  })) : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), {
		    cause: err
		  }));
		}

		// https://whatpr.org/fetch/1392.html#initialize-a-response
		function initializeResponse(response, init, body) {
		  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
		  //    throw a RangeError.
		  if (init.status !== null && (init.status < 200 || init.status > 599)) {
		    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
		  }

		  // 2. If init["statusText"] does not match the reason-phrase token production,
		  //    then throw a TypeError.
		  if ('statusText' in init && init.statusText != null) {
		    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
		    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
		    if (!isValidReasonPhrase(String(init.statusText))) {
		      throw new TypeError('Invalid statusText');
		    }
		  }

		  // 3. Set response’s response’s status to init["status"].
		  if ('status' in init && init.status != null) {
		    response[kState].status = init.status;
		  }

		  // 4. Set response’s response’s status message to init["statusText"].
		  if ('statusText' in init && init.statusText != null) {
		    response[kState].statusText = init.statusText;
		  }

		  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
		  if ('headers' in init && init.headers != null) {
		    fill(response[kHeaders], init.headers);
		  }

		  // 6. If body was given, then:
		  if (body) {
		    // 1. If response's status is a null body status, then throw a TypeError.
		    if (nullBodyStatus.includes(response.status)) {
		      throw webidl.errors.exception({
		        header: 'Response constructor',
		        message: 'Invalid response status code ' + response.status
		      });
		    }

		    // 2. Set response's body to body's body.
		    response[kState].body = body.body;

		    // 3. If body's type is non-null and response's header list does not contain
		    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
		    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {
		      response[kState].headersList.append('content-type', body.type);
		    }
		  }
		}
		webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);
		webidl.converters.FormData = webidl.interfaceConverter(FormData);
		webidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);

		// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
		webidl.converters.XMLHttpRequestBodyInit = function (V) {
		  if (typeof V === 'string') {
		    return webidl.converters.USVString(V);
		  }
		  if (isBlobLike(V)) {
		    return webidl.converters.Blob(V, {
		      strict: false
		    });
		  }
		  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
		    return webidl.converters.BufferSource(V);
		  }
		  if (util.isFormDataLike(V)) {
		    return webidl.converters.FormData(V, {
		      strict: false
		    });
		  }
		  if (V instanceof URLSearchParams) {
		    return webidl.converters.URLSearchParams(V);
		  }
		  return webidl.converters.DOMString(V);
		};

		// https://fetch.spec.whatwg.org/#bodyinit
		webidl.converters.BodyInit = function (V) {
		  if (V instanceof ReadableStream) {
		    return webidl.converters.ReadableStream(V);
		  }

		  // Note: the spec doesn't include async iterables,
		  // this is an undici extension.
		  if (V?.[Symbol.asyncIterator]) {
		    return V;
		  }
		  return webidl.converters.XMLHttpRequestBodyInit(V);
		};
		webidl.converters.ResponseInit = webidl.dictionaryConverter([{
		  key: 'status',
		  converter: webidl.converters['unsigned short'],
		  defaultValue: 200
		}, {
		  key: 'statusText',
		  converter: webidl.converters.ByteString,
		  defaultValue: ''
		}, {
		  key: 'headers',
		  converter: webidl.converters.HeadersInit
		}]);
		response = {
		  makeNetworkError,
		  makeResponse,
		  makeAppropriateNetworkError,
		  filterResponse,
		  Response,
		  cloneResponse
		};
		return response;
	}

	/* globals AbortController */

	var request;
	var hasRequiredRequest;

	function requireRequest () {
		if (hasRequiredRequest) return request;
		hasRequiredRequest = 1;

		const {
		  extractBody,
		  mixinBody,
		  cloneBody
		} = requireBody();
		const {
		  Headers,
		  fill: fillHeaders,
		  HeadersList
		} = requireHeaders();
		const {
		  FinalizationRegistry
		} = requireDispatcherWeakref()();
		const util = requireUtil$6();
		const {
		  isValidHTTPToken,
		  sameOrigin,
		  normalizeMethod,
		  makePolicyContainer,
		  normalizeMethodRecord
		} = requireUtil$5();
		const {
		  forbiddenMethodsSet,
		  corsSafeListedMethodsSet,
		  referrerPolicy,
		  requestRedirect,
		  requestMode,
		  requestCredentials,
		  requestCache,
		  requestDuplex
		} = requireConstants$3();
		const {
		  kEnumerableProperty
		} = util;
		const {
		  kHeaders,
		  kSignal,
		  kState,
		  kGuard,
		  kRealm
		} = requireSymbols$3();
		const {
		  webidl
		} = requireWebidl();
		const {
		  getGlobalOrigin
		} = requireGlobal$1();
		const {
		  URLSerializer
		} = requireDataURL();
		const {
		  kHeadersList,
		  kConstruct
		} = requireSymbols$4();
		const assert = require$$0__default$3["default"];
		const {
		  getMaxListeners,
		  setMaxListeners,
		  getEventListeners,
		  defaultMaxListeners
		} = EventEmitter__default["default"];
		let TransformStream = globalThis.TransformStream;
		const kAbortController = Symbol('abortController');
		const requestFinalizer = new FinalizationRegistry(({
		  signal,
		  abort
		}) => {
		  signal.removeEventListener('abort', abort);
		});

		// https://fetch.spec.whatwg.org/#request-class
		class Request {
		  // https://fetch.spec.whatwg.org/#dom-request
		  constructor(input, init = {}) {
		    if (input === kConstruct) {
		      return;
		    }
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Request constructor'
		    });
		    input = webidl.converters.RequestInfo(input);
		    init = webidl.converters.RequestInit(init);

		    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
		    this[kRealm] = {
		      settingsObject: {
		        baseUrl: getGlobalOrigin(),
		        get origin() {
		          return this.baseUrl?.origin;
		        },
		        policyContainer: makePolicyContainer()
		      }
		    };

		    // 1. Let request be null.
		    let request = null;

		    // 2. Let fallbackMode be null.
		    let fallbackMode = null;

		    // 3. Let baseURL be this’s relevant settings object’s API base URL.
		    const baseUrl = this[kRealm].settingsObject.baseUrl;

		    // 4. Let signal be null.
		    let signal = null;

		    // 5. If input is a string, then:
		    if (typeof input === 'string') {
		      // 1. Let parsedURL be the result of parsing input with baseURL.
		      // 2. If parsedURL is failure, then throw a TypeError.
		      let parsedURL;
		      try {
		        parsedURL = new URL(input, baseUrl);
		      } catch (err) {
		        throw new TypeError('Failed to parse URL from ' + input, {
		          cause: err
		        });
		      }

		      // 3. If parsedURL includes credentials, then throw a TypeError.
		      if (parsedURL.username || parsedURL.password) {
		        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);
		      }

		      // 4. Set request to a new request whose URL is parsedURL.
		      request = makeRequest({
		        urlList: [parsedURL]
		      });

		      // 5. Set fallbackMode to "cors".
		      fallbackMode = 'cors';
		    } else {
		      // 6. Otherwise:

		      // 7. Assert: input is a Request object.
		      assert(input instanceof Request);

		      // 8. Set request to input’s request.
		      request = input[kState];

		      // 9. Set signal to input’s signal.
		      signal = input[kSignal];
		    }

		    // 7. Let origin be this’s relevant settings object’s origin.
		    const origin = this[kRealm].settingsObject.origin;

		    // 8. Let window be "client".
		    let window = 'client';

		    // 9. If request’s window is an environment settings object and its origin
		    // is same origin with origin, then set window to request’s window.
		    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {
		      window = request.window;
		    }

		    // 10. If init["window"] exists and is non-null, then throw a TypeError.
		    if (init.window != null) {
		      throw new TypeError(`'window' option '${window}' must be null`);
		    }

		    // 11. If init["window"] exists, then set window to "no-window".
		    if ('window' in init) {
		      window = 'no-window';
		    }

		    // 12. Set request to a new request with the following properties:
		    request = makeRequest({
		      // URL request’s URL.
		      // undici implementation note: this is set as the first item in request's urlList in makeRequest
		      // method request’s method.
		      method: request.method,
		      // header list A copy of request’s header list.
		      // undici implementation note: headersList is cloned in makeRequest
		      headersList: request.headersList,
		      // unsafe-request flag Set.
		      unsafeRequest: request.unsafeRequest,
		      // client This’s relevant settings object.
		      client: this[kRealm].settingsObject,
		      // window window.
		      window,
		      // priority request’s priority.
		      priority: request.priority,
		      // origin request’s origin. The propagation of the origin is only significant for navigation requests
		      // being handled by a service worker. In this scenario a request can have an origin that is different
		      // from the current client.
		      origin: request.origin,
		      // referrer request’s referrer.
		      referrer: request.referrer,
		      // referrer policy request’s referrer policy.
		      referrerPolicy: request.referrerPolicy,
		      // mode request’s mode.
		      mode: request.mode,
		      // credentials mode request’s credentials mode.
		      credentials: request.credentials,
		      // cache mode request’s cache mode.
		      cache: request.cache,
		      // redirect mode request’s redirect mode.
		      redirect: request.redirect,
		      // integrity metadata request’s integrity metadata.
		      integrity: request.integrity,
		      // keepalive request’s keepalive.
		      keepalive: request.keepalive,
		      // reload-navigation flag request’s reload-navigation flag.
		      reloadNavigation: request.reloadNavigation,
		      // history-navigation flag request’s history-navigation flag.
		      historyNavigation: request.historyNavigation,
		      // URL list A clone of request’s URL list.
		      urlList: [...request.urlList]
		    });
		    const initHasKey = Object.keys(init).length !== 0;

		    // 13. If init is not empty, then:
		    if (initHasKey) {
		      // 1. If request’s mode is "navigate", then set it to "same-origin".
		      if (request.mode === 'navigate') {
		        request.mode = 'same-origin';
		      }

		      // 2. Unset request’s reload-navigation flag.
		      request.reloadNavigation = false;

		      // 3. Unset request’s history-navigation flag.
		      request.historyNavigation = false;

		      // 4. Set request’s origin to "client".
		      request.origin = 'client';

		      // 5. Set request’s referrer to "client"
		      request.referrer = 'client';

		      // 6. Set request’s referrer policy to the empty string.
		      request.referrerPolicy = '';

		      // 7. Set request’s URL to request’s current URL.
		      request.url = request.urlList[request.urlList.length - 1];

		      // 8. Set request’s URL list to « request’s URL ».
		      request.urlList = [request.url];
		    }

		    // 14. If init["referrer"] exists, then:
		    if (init.referrer !== undefined) {
		      // 1. Let referrer be init["referrer"].
		      const referrer = init.referrer;

		      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
		      if (referrer === '') {
		        request.referrer = 'no-referrer';
		      } else {
		        // 1. Let parsedReferrer be the result of parsing referrer with
		        // baseURL.
		        // 2. If parsedReferrer is failure, then throw a TypeError.
		        let parsedReferrer;
		        try {
		          parsedReferrer = new URL(referrer, baseUrl);
		        } catch (err) {
		          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, {
		            cause: err
		          });
		        }

		        // 3. If one of the following is true
		        // - parsedReferrer’s scheme is "about" and path is the string "client"
		        // - parsedReferrer’s origin is not same origin with origin
		        // then set request’s referrer to "client".
		        if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
		          request.referrer = 'client';
		        } else {
		          // 4. Otherwise, set request’s referrer to parsedReferrer.
		          request.referrer = parsedReferrer;
		        }
		      }
		    }

		    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
		    // to it.
		    if (init.referrerPolicy !== undefined) {
		      request.referrerPolicy = init.referrerPolicy;
		    }

		    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
		    let mode;
		    if (init.mode !== undefined) {
		      mode = init.mode;
		    } else {
		      mode = fallbackMode;
		    }

		    // 17. If mode is "navigate", then throw a TypeError.
		    if (mode === 'navigate') {
		      throw webidl.errors.exception({
		        header: 'Request constructor',
		        message: 'invalid request mode navigate.'
		      });
		    }

		    // 18. If mode is non-null, set request’s mode to mode.
		    if (mode != null) {
		      request.mode = mode;
		    }

		    // 19. If init["credentials"] exists, then set request’s credentials mode
		    // to it.
		    if (init.credentials !== undefined) {
		      request.credentials = init.credentials;
		    }

		    // 18. If init["cache"] exists, then set request’s cache mode to it.
		    if (init.cache !== undefined) {
		      request.cache = init.cache;
		    }

		    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
		    // not "same-origin", then throw a TypeError.
		    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
		      throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
		    }

		    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
		    if (init.redirect !== undefined) {
		      request.redirect = init.redirect;
		    }

		    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
		    if (init.integrity != null) {
		      request.integrity = String(init.integrity);
		    }

		    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
		    if (init.keepalive !== undefined) {
		      request.keepalive = Boolean(init.keepalive);
		    }

		    // 25. If init["method"] exists, then:
		    if (init.method !== undefined) {
		      // 1. Let method be init["method"].
		      let method = init.method;

		      // 2. If method is not a method or method is a forbidden method, then
		      // throw a TypeError.
		      if (!isValidHTTPToken(method)) {
		        throw new TypeError(`'${method}' is not a valid HTTP method.`);
		      }
		      if (forbiddenMethodsSet.has(method.toUpperCase())) {
		        throw new TypeError(`'${method}' HTTP method is unsupported.`);
		      }

		      // 3. Normalize method.
		      method = normalizeMethodRecord[method] ?? normalizeMethod(method);

		      // 4. Set request’s method to method.
		      request.method = method;
		    }

		    // 26. If init["signal"] exists, then set signal to it.
		    if (init.signal !== undefined) {
		      signal = init.signal;
		    }

		    // 27. Set this’s request to request.
		    this[kState] = request;

		    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
		    // Realm.
		    // TODO: could this be simplified with AbortSignal.any
		    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
		    const ac = new AbortController();
		    this[kSignal] = ac.signal;
		    this[kSignal][kRealm] = this[kRealm];

		    // 29. If signal is not null, then make this’s signal follow signal.
		    if (signal != null) {
		      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {
		        throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
		      }
		      if (signal.aborted) {
		        ac.abort(signal.reason);
		      } else {
		        // Keep a strong ref to ac while request object
		        // is alive. This is needed to prevent AbortController
		        // from being prematurely garbage collected.
		        // See, https://github.com/nodejs/undici/issues/1926.
		        this[kAbortController] = ac;
		        const acRef = new WeakRef(ac);
		        const abort = function () {
		          const ac = acRef.deref();
		          if (ac !== undefined) {
		            ac.abort(this.reason);
		          }
		        };

		        // Third-party AbortControllers may not work with these.
		        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
		        try {
		          // If the max amount of listeners is equal to the default, increase it
		          // This is only available in node >= v19.9.0
		          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
		            setMaxListeners(100, signal);
		          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
		            setMaxListeners(100, signal);
		          }
		        } catch {}
		        util.addAbortListener(signal, abort);
		        requestFinalizer.register(ac, {
		          signal,
		          abort
		        });
		      }
		    }

		    // 30. Set this’s headers to a new Headers object with this’s relevant
		    // Realm, whose header list is request’s header list and guard is
		    // "request".
		    this[kHeaders] = new Headers(kConstruct);
		    this[kHeaders][kHeadersList] = request.headersList;
		    this[kHeaders][kGuard] = 'request';
		    this[kHeaders][kRealm] = this[kRealm];

		    // 31. If this’s request’s mode is "no-cors", then:
		    if (mode === 'no-cors') {
		      // 1. If this’s request’s method is not a CORS-safelisted method,
		      // then throw a TypeError.
		      if (!corsSafeListedMethodsSet.has(request.method)) {
		        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
		      }

		      // 2. Set this’s headers’s guard to "request-no-cors".
		      this[kHeaders][kGuard] = 'request-no-cors';
		    }

		    // 32. If init is not empty, then:
		    if (initHasKey) {
		      /** @type {HeadersList} */
		      const headersList = this[kHeaders][kHeadersList];
		      // 1. Let headers be a copy of this’s headers and its associated header
		      // list.
		      // 2. If init["headers"] exists, then set headers to init["headers"].
		      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);

		      // 3. Empty this’s headers’s header list.
		      headersList.clear();

		      // 4. If headers is a Headers object, then for each header in its header
		      // list, append header’s name/header’s value to this’s headers.
		      if (headers instanceof HeadersList) {
		        for (const [key, val] of headers) {
		          headersList.append(key, val);
		        }
		        // Note: Copy the `set-cookie` meta-data.
		        headersList.cookies = headers.cookies;
		      } else {
		        // 5. Otherwise, fill this’s headers with headers.
		        fillHeaders(this[kHeaders], headers);
		      }
		    }

		    // 33. Let inputBody be input’s request’s body if input is a Request
		    // object; otherwise null.
		    const inputBody = input instanceof Request ? input[kState].body : null;

		    // 34. If either init["body"] exists and is non-null or inputBody is
		    // non-null, and request’s method is `GET` or `HEAD`, then throw a
		    // TypeError.
		    if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {
		      throw new TypeError('Request with GET/HEAD method cannot have body.');
		    }

		    // 35. Let initBody be null.
		    let initBody = null;

		    // 36. If init["body"] exists and is non-null, then:
		    if (init.body != null) {
		      // 1. Let Content-Type be null.
		      // 2. Set initBody and Content-Type to the result of extracting
		      // init["body"], with keepalive set to request’s keepalive.
		      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
		      initBody = extractedBody;

		      // 3, If Content-Type is non-null and this’s headers’s header list does
		      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
		      // this’s headers.
		      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {
		        this[kHeaders].append('content-type', contentType);
		      }
		    }

		    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
		    // inputBody.
		    const inputOrInitBody = initBody ?? inputBody;

		    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
		    // null, then:
		    if (inputOrInitBody != null && inputOrInitBody.source == null) {
		      // 1. If initBody is non-null and init["duplex"] does not exist,
		      //    then throw a TypeError.
		      if (initBody != null && init.duplex == null) {
		        throw new TypeError('RequestInit: duplex option is required when sending a body.');
		      }

		      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
		      // then throw a TypeError.
		      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
		        throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
		      }

		      // 3. Set this’s request’s use-CORS-preflight flag.
		      request.useCORSPreflightFlag = true;
		    }

		    // 39. Let finalBody be inputOrInitBody.
		    let finalBody = inputOrInitBody;

		    // 40. If initBody is null and inputBody is non-null, then:
		    if (initBody == null && inputBody != null) {
		      // 1. If input is unusable, then throw a TypeError.
		      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
		        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');
		      }

		      // 2. Set finalBody to the result of creating a proxy for inputBody.
		      if (!TransformStream) {
		        TransformStream = require$$13__default["default"].TransformStream;
		      }

		      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
		      const identityTransform = new TransformStream();
		      inputBody.stream.pipeThrough(identityTransform);
		      finalBody = {
		        source: inputBody.source,
		        length: inputBody.length,
		        stream: identityTransform.readable
		      };
		    }

		    // 41. Set this’s request’s body to finalBody.
		    this[kState].body = finalBody;
		  }

		  // Returns request’s HTTP method, which is "GET" by default.
		  get method() {
		    webidl.brandCheck(this, Request);

		    // The method getter steps are to return this’s request’s method.
		    return this[kState].method;
		  }

		  // Returns the URL of request as a string.
		  get url() {
		    webidl.brandCheck(this, Request);

		    // The url getter steps are to return this’s request’s URL, serialized.
		    return URLSerializer(this[kState].url);
		  }

		  // Returns a Headers object consisting of the headers associated with request.
		  // Note that headers added in the network layer by the user agent will not
		  // be accounted for in this object, e.g., the "Host" header.
		  get headers() {
		    webidl.brandCheck(this, Request);

		    // The headers getter steps are to return this’s headers.
		    return this[kHeaders];
		  }

		  // Returns the kind of resource requested by request, e.g., "document"
		  // or "script".
		  get destination() {
		    webidl.brandCheck(this, Request);

		    // The destination getter are to return this’s request’s destination.
		    return this[kState].destination;
		  }

		  // Returns the referrer of request. Its value can be a same-origin URL if
		  // explicitly set in init, the empty string to indicate no referrer, and
		  // "about:client" when defaulting to the global’s default. This is used
		  // during fetching to determine the value of the `Referer` header of the
		  // request being made.
		  get referrer() {
		    webidl.brandCheck(this, Request);

		    // 1. If this’s request’s referrer is "no-referrer", then return the
		    // empty string.
		    if (this[kState].referrer === 'no-referrer') {
		      return '';
		    }

		    // 2. If this’s request’s referrer is "client", then return
		    // "about:client".
		    if (this[kState].referrer === 'client') {
		      return 'about:client';
		    }

		    // Return this’s request’s referrer, serialized.
		    return this[kState].referrer.toString();
		  }

		  // Returns the referrer policy associated with request.
		  // This is used during fetching to compute the value of the request’s
		  // referrer.
		  get referrerPolicy() {
		    webidl.brandCheck(this, Request);

		    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
		    return this[kState].referrerPolicy;
		  }

		  // Returns the mode associated with request, which is a string indicating
		  // whether the request will use CORS, or will be restricted to same-origin
		  // URLs.
		  get mode() {
		    webidl.brandCheck(this, Request);

		    // The mode getter steps are to return this’s request’s mode.
		    return this[kState].mode;
		  }

		  // Returns the credentials mode associated with request,
		  // which is a string indicating whether credentials will be sent with the
		  // request always, never, or only when sent to a same-origin URL.
		  get credentials() {
		    // The credentials getter steps are to return this’s request’s credentials mode.
		    return this[kState].credentials;
		  }

		  // Returns the cache mode associated with request,
		  // which is a string indicating how the request will
		  // interact with the browser’s cache when fetching.
		  get cache() {
		    webidl.brandCheck(this, Request);

		    // The cache getter steps are to return this’s request’s cache mode.
		    return this[kState].cache;
		  }

		  // Returns the redirect mode associated with request,
		  // which is a string indicating how redirects for the
		  // request will be handled during fetching. A request
		  // will follow redirects by default.
		  get redirect() {
		    webidl.brandCheck(this, Request);

		    // The redirect getter steps are to return this’s request’s redirect mode.
		    return this[kState].redirect;
		  }

		  // Returns request’s subresource integrity metadata, which is a
		  // cryptographic hash of the resource being fetched. Its value
		  // consists of multiple hashes separated by whitespace. [SRI]
		  get integrity() {
		    webidl.brandCheck(this, Request);

		    // The integrity getter steps are to return this’s request’s integrity
		    // metadata.
		    return this[kState].integrity;
		  }

		  // Returns a boolean indicating whether or not request can outlive the
		  // global in which it was created.
		  get keepalive() {
		    webidl.brandCheck(this, Request);

		    // The keepalive getter steps are to return this’s request’s keepalive.
		    return this[kState].keepalive;
		  }

		  // Returns a boolean indicating whether or not request is for a reload
		  // navigation.
		  get isReloadNavigation() {
		    webidl.brandCheck(this, Request);

		    // The isReloadNavigation getter steps are to return true if this’s
		    // request’s reload-navigation flag is set; otherwise false.
		    return this[kState].reloadNavigation;
		  }

		  // Returns a boolean indicating whether or not request is for a history
		  // navigation (a.k.a. back-foward navigation).
		  get isHistoryNavigation() {
		    webidl.brandCheck(this, Request);

		    // The isHistoryNavigation getter steps are to return true if this’s request’s
		    // history-navigation flag is set; otherwise false.
		    return this[kState].historyNavigation;
		  }

		  // Returns the signal associated with request, which is an AbortSignal
		  // object indicating whether or not request has been aborted, and its
		  // abort event handler.
		  get signal() {
		    webidl.brandCheck(this, Request);

		    // The signal getter steps are to return this’s signal.
		    return this[kSignal];
		  }
		  get body() {
		    webidl.brandCheck(this, Request);
		    return this[kState].body ? this[kState].body.stream : null;
		  }
		  get bodyUsed() {
		    webidl.brandCheck(this, Request);
		    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
		  }
		  get duplex() {
		    webidl.brandCheck(this, Request);
		    return 'half';
		  }

		  // Returns a clone of request.
		  clone() {
		    webidl.brandCheck(this, Request);

		    // 1. If this is unusable, then throw a TypeError.
		    if (this.bodyUsed || this.body?.locked) {
		      throw new TypeError('unusable');
		    }

		    // 2. Let clonedRequest be the result of cloning this’s request.
		    const clonedRequest = cloneRequest(this[kState]);

		    // 3. Let clonedRequestObject be the result of creating a Request object,
		    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
		    const clonedRequestObject = new Request(kConstruct);
		    clonedRequestObject[kState] = clonedRequest;
		    clonedRequestObject[kRealm] = this[kRealm];
		    clonedRequestObject[kHeaders] = new Headers(kConstruct);
		    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
		    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
		    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];

		    // 4. Make clonedRequestObject’s signal follow this’s signal.
		    const ac = new AbortController();
		    if (this.signal.aborted) {
		      ac.abort(this.signal.reason);
		    } else {
		      util.addAbortListener(this.signal, () => {
		        ac.abort(this.signal.reason);
		      });
		    }
		    clonedRequestObject[kSignal] = ac.signal;

		    // 4. Return clonedRequestObject.
		    return clonedRequestObject;
		  }
		}
		mixinBody(Request);
		function makeRequest(init) {
		  // https://fetch.spec.whatwg.org/#requests
		  const request = {
		    method: 'GET',
		    localURLsOnly: false,
		    unsafeRequest: false,
		    body: null,
		    client: null,
		    reservedClient: null,
		    replacesClientId: '',
		    window: 'client',
		    keepalive: false,
		    serviceWorkers: 'all',
		    initiator: '',
		    destination: '',
		    priority: null,
		    origin: 'client',
		    policyContainer: 'client',
		    referrer: 'client',
		    referrerPolicy: '',
		    mode: 'no-cors',
		    useCORSPreflightFlag: false,
		    credentials: 'same-origin',
		    useCredentials: false,
		    cache: 'default',
		    redirect: 'follow',
		    integrity: '',
		    cryptoGraphicsNonceMetadata: '',
		    parserMetadata: '',
		    reloadNavigation: false,
		    historyNavigation: false,
		    userActivation: false,
		    taintedOrigin: false,
		    redirectCount: 0,
		    responseTainting: 'basic',
		    preventNoCacheCacheControlHeaderModification: false,
		    done: false,
		    timingAllowFailed: false,
		    ...init,
		    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
		  };
		  request.url = request.urlList[0];
		  return request;
		}

		// https://fetch.spec.whatwg.org/#concept-request-clone
		function cloneRequest(request) {
		  // To clone a request request, run these steps:

		  // 1. Let newRequest be a copy of request, except for its body.
		  const newRequest = makeRequest({
		    ...request,
		    body: null
		  });

		  // 2. If request’s body is non-null, set newRequest’s body to the
		  // result of cloning request’s body.
		  if (request.body != null) {
		    newRequest.body = cloneBody(request.body);
		  }

		  // 3. Return newRequest.
		  return newRequest;
		}
		Object.defineProperties(Request.prototype, {
		  method: kEnumerableProperty,
		  url: kEnumerableProperty,
		  headers: kEnumerableProperty,
		  redirect: kEnumerableProperty,
		  clone: kEnumerableProperty,
		  signal: kEnumerableProperty,
		  duplex: kEnumerableProperty,
		  destination: kEnumerableProperty,
		  body: kEnumerableProperty,
		  bodyUsed: kEnumerableProperty,
		  isHistoryNavigation: kEnumerableProperty,
		  isReloadNavigation: kEnumerableProperty,
		  keepalive: kEnumerableProperty,
		  integrity: kEnumerableProperty,
		  cache: kEnumerableProperty,
		  credentials: kEnumerableProperty,
		  attribute: kEnumerableProperty,
		  referrerPolicy: kEnumerableProperty,
		  referrer: kEnumerableProperty,
		  mode: kEnumerableProperty,
		  [Symbol.toStringTag]: {
		    value: 'Request',
		    configurable: true
		  }
		});
		webidl.converters.Request = webidl.interfaceConverter(Request);

		// https://fetch.spec.whatwg.org/#requestinfo
		webidl.converters.RequestInfo = function (V) {
		  if (typeof V === 'string') {
		    return webidl.converters.USVString(V);
		  }
		  if (V instanceof Request) {
		    return webidl.converters.Request(V);
		  }
		  return webidl.converters.USVString(V);
		};
		webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);

		// https://fetch.spec.whatwg.org/#requestinit
		webidl.converters.RequestInit = webidl.dictionaryConverter([{
		  key: 'method',
		  converter: webidl.converters.ByteString
		}, {
		  key: 'headers',
		  converter: webidl.converters.HeadersInit
		}, {
		  key: 'body',
		  converter: webidl.nullableConverter(webidl.converters.BodyInit)
		}, {
		  key: 'referrer',
		  converter: webidl.converters.USVString
		}, {
		  key: 'referrerPolicy',
		  converter: webidl.converters.DOMString,
		  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
		  allowedValues: referrerPolicy
		}, {
		  key: 'mode',
		  converter: webidl.converters.DOMString,
		  // https://fetch.spec.whatwg.org/#concept-request-mode
		  allowedValues: requestMode
		}, {
		  key: 'credentials',
		  converter: webidl.converters.DOMString,
		  // https://fetch.spec.whatwg.org/#requestcredentials
		  allowedValues: requestCredentials
		}, {
		  key: 'cache',
		  converter: webidl.converters.DOMString,
		  // https://fetch.spec.whatwg.org/#requestcache
		  allowedValues: requestCache
		}, {
		  key: 'redirect',
		  converter: webidl.converters.DOMString,
		  // https://fetch.spec.whatwg.org/#requestredirect
		  allowedValues: requestRedirect
		}, {
		  key: 'integrity',
		  converter: webidl.converters.DOMString
		}, {
		  key: 'keepalive',
		  converter: webidl.converters.boolean
		}, {
		  key: 'signal',
		  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, {
		    strict: false
		  }))
		}, {
		  key: 'window',
		  converter: webidl.converters.any
		}, {
		  key: 'duplex',
		  converter: webidl.converters.DOMString,
		  allowedValues: requestDuplex
		}]);
		request = {
		  Request,
		  makeRequest
		};
		return request;
	}

	var fetch_1;
	var hasRequiredFetch;

	function requireFetch () {
		if (hasRequiredFetch) return fetch_1;
		hasRequiredFetch = 1;

		const {
		  Response,
		  makeNetworkError,
		  makeAppropriateNetworkError,
		  filterResponse,
		  makeResponse
		} = requireResponse();
		const {
		  Headers
		} = requireHeaders();
		const {
		  Request,
		  makeRequest
		} = requireRequest();
		const zlib = zlib__default["default"];
		const {
		  bytesMatch,
		  makePolicyContainer,
		  clonePolicyContainer,
		  requestBadPort,
		  TAOCheck,
		  appendRequestOriginHeader,
		  responseLocationURL,
		  requestCurrentURL,
		  setRequestReferrerPolicyOnRedirect,
		  tryUpgradeRequestToAPotentiallyTrustworthyURL,
		  createOpaqueTimingInfo,
		  appendFetchMetadata,
		  corsCheck,
		  crossOriginResourcePolicyCheck,
		  determineRequestsReferrer,
		  coarsenedSharedCurrentTime,
		  createDeferredPromise,
		  isBlobLike,
		  sameOrigin,
		  isCancelled,
		  isAborted,
		  isErrorLike,
		  fullyReadBody,
		  readableStreamClose,
		  isomorphicEncode,
		  urlIsLocal,
		  urlIsHttpHttpsScheme,
		  urlHasHttpsScheme
		} = requireUtil$5();
		const {
		  kState,
		  kHeaders,
		  kGuard,
		  kRealm
		} = requireSymbols$3();
		const assert = require$$0__default$3["default"];
		const {
		  safelyExtractBody
		} = requireBody();
		const {
		  redirectStatusSet,
		  nullBodyStatus,
		  safeMethodsSet,
		  requestBodyHeader,
		  subresourceSet,
		  DOMException
		} = requireConstants$3();
		const {
		  kHeadersList
		} = requireSymbols$4();
		const EE = EventEmitter__default["default"];
		const {
		  Readable,
		  pipeline
		} = stream__default["default"];
		const {
		  addAbortListener,
		  isErrored,
		  isReadable,
		  nodeMajor,
		  nodeMinor
		} = requireUtil$6();
		const {
		  dataURLProcessor,
		  serializeAMimeType
		} = requireDataURL();
		const {
		  TransformStream
		} = require$$13__default["default"];
		const {
		  getGlobalDispatcher
		} = requireGlobal();
		const {
		  webidl
		} = requireWebidl();
		const {
		  STATUS_CODES
		} = require$$2__default["default"];
		const GET_OR_HEAD = ['GET', 'HEAD'];

		/** @type {import('buffer').resolveObjectURL} */
		let resolveObjectURL;
		let ReadableStream = globalThis.ReadableStream;
		class Fetch extends EE {
		  constructor(dispatcher) {
		    super();
		    this.dispatcher = dispatcher;
		    this.connection = null;
		    this.dump = false;
		    this.state = 'ongoing';
		    // 2 terminated listeners get added per request,
		    // but only 1 gets removed. If there are 20 redirects,
		    // 21 listeners will be added.
		    // See https://github.com/nodejs/undici/issues/1711
		    // TODO (fix): Find and fix root cause for leaked listener.
		    this.setMaxListeners(21);
		  }
		  terminate(reason) {
		    if (this.state !== 'ongoing') {
		      return;
		    }
		    this.state = 'terminated';
		    this.connection?.destroy(reason);
		    this.emit('terminated', reason);
		  }

		  // https://fetch.spec.whatwg.org/#fetch-controller-abort
		  abort(error) {
		    if (this.state !== 'ongoing') {
		      return;
		    }

		    // 1. Set controller’s state to "aborted".
		    this.state = 'aborted';

		    // 2. Let fallbackError be an "AbortError" DOMException.
		    // 3. Set error to fallbackError if it is not given.
		    if (!error) {
		      error = new DOMException('The operation was aborted.', 'AbortError');
		    }

		    // 4. Let serializedError be StructuredSerialize(error).
		    //    If that threw an exception, catch it, and let
		    //    serializedError be StructuredSerialize(fallbackError).

		    // 5. Set controller’s serialized abort reason to serializedError.
		    this.serializedAbortReason = error;
		    this.connection?.destroy(error);
		    this.emit('terminated', error);
		  }
		}

		// https://fetch.spec.whatwg.org/#fetch-method
		function fetch(input, init = {}) {
		  webidl.argumentLengthCheck(arguments, 1, {
		    header: 'globalThis.fetch'
		  });

		  // 1. Let p be a new promise.
		  const p = createDeferredPromise();

		  // 2. Let requestObject be the result of invoking the initial value of
		  // Request as constructor with input and init as arguments. If this throws
		  // an exception, reject p with it and return p.
		  let requestObject;
		  try {
		    requestObject = new Request(input, init);
		  } catch (e) {
		    p.reject(e);
		    return p.promise;
		  }

		  // 3. Let request be requestObject’s request.
		  const request = requestObject[kState];

		  // 4. If requestObject’s signal’s aborted flag is set, then:
		  if (requestObject.signal.aborted) {
		    // 1. Abort the fetch() call with p, request, null, and
		    //    requestObject’s signal’s abort reason.
		    abortFetch(p, request, null, requestObject.signal.reason);

		    // 2. Return p.
		    return p.promise;
		  }

		  // 5. Let globalObject be request’s client’s global object.
		  const globalObject = request.client.globalObject;

		  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
		  // request’s service-workers mode to "none".
		  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
		    request.serviceWorkers = 'none';
		  }

		  // 7. Let responseObject be null.
		  let responseObject = null;

		  // 8. Let relevantRealm be this’s relevant Realm.
		  const relevantRealm = null;

		  // 9. Let locallyAborted be false.
		  let locallyAborted = false;

		  // 10. Let controller be null.
		  let controller = null;

		  // 11. Add the following abort steps to requestObject’s signal:
		  addAbortListener(requestObject.signal, () => {
		    // 1. Set locallyAborted to true.
		    locallyAborted = true;

		    // 2. Assert: controller is non-null.
		    assert(controller != null);

		    // 3. Abort controller with requestObject’s signal’s abort reason.
		    controller.abort(requestObject.signal.reason);

		    // 4. Abort the fetch() call with p, request, responseObject,
		    //    and requestObject’s signal’s abort reason.
		    abortFetch(p, request, responseObject, requestObject.signal.reason);
		  });

		  // 12. Let handleFetchDone given response response be to finalize and
		  // report timing with response, globalObject, and "fetch".
		  const handleFetchDone = response => finalizeAndReportTiming(response, 'fetch');

		  // 13. Set controller to the result of calling fetch given request,
		  // with processResponseEndOfBody set to handleFetchDone, and processResponse
		  // given response being these substeps:

		  const processResponse = response => {
		    // 1. If locallyAborted is true, terminate these substeps.
		    if (locallyAborted) {
		      return Promise.resolve();
		    }

		    // 2. If response’s aborted flag is set, then:
		    if (response.aborted) {
		      // 1. Let deserializedError be the result of deserialize a serialized
		      //    abort reason given controller’s serialized abort reason and
		      //    relevantRealm.

		      // 2. Abort the fetch() call with p, request, responseObject, and
		      //    deserializedError.

		      abortFetch(p, request, responseObject, controller.serializedAbortReason);
		      return Promise.resolve();
		    }

		    // 3. If response is a network error, then reject p with a TypeError
		    // and terminate these substeps.
		    if (response.type === 'error') {
		      p.reject(Object.assign(new TypeError('fetch failed'), {
		        cause: response.error
		      }));
		      return Promise.resolve();
		    }

		    // 4. Set responseObject to the result of creating a Response object,
		    // given response, "immutable", and relevantRealm.
		    responseObject = new Response();
		    responseObject[kState] = response;
		    responseObject[kRealm] = relevantRealm;
		    responseObject[kHeaders][kHeadersList] = response.headersList;
		    responseObject[kHeaders][kGuard] = 'immutable';
		    responseObject[kHeaders][kRealm] = relevantRealm;

		    // 5. Resolve p with responseObject.
		    p.resolve(responseObject);
		  };
		  controller = fetching({
		    request,
		    processResponseEndOfBody: handleFetchDone,
		    processResponse,
		    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
		  });

		  // 14. Return p.
		  return p.promise;
		}

		// https://fetch.spec.whatwg.org/#finalize-and-report-timing
		function finalizeAndReportTiming(response, initiatorType = 'other') {
		  // 1. If response is an aborted network error, then return.
		  if (response.type === 'error' && response.aborted) {
		    return;
		  }

		  // 2. If response’s URL list is null or empty, then return.
		  if (!response.urlList?.length) {
		    return;
		  }

		  // 3. Let originalURL be response’s URL list[0].
		  const originalURL = response.urlList[0];

		  // 4. Let timingInfo be response’s timing info.
		  let timingInfo = response.timingInfo;

		  // 5. Let cacheState be response’s cache state.
		  let cacheState = response.cacheState;

		  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
		  if (!urlIsHttpHttpsScheme(originalURL)) {
		    return;
		  }

		  // 7. If timingInfo is null, then return.
		  if (timingInfo === null) {
		    return;
		  }

		  // 8. If response’s timing allow passed flag is not set, then:
		  if (!response.timingAllowPassed) {
		    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
		    timingInfo = createOpaqueTimingInfo({
		      startTime: timingInfo.startTime
		    });

		    //  2. Set cacheState to the empty string.
		    cacheState = '';
		  }

		  // 9. Set timingInfo’s end time to the coarsened shared current time
		  // given global’s relevant settings object’s cross-origin isolated
		  // capability.
		  // TODO: given global’s relevant settings object’s cross-origin isolated
		  // capability?
		  timingInfo.endTime = coarsenedSharedCurrentTime();

		  // 10. Set response’s timing info to timingInfo.
		  response.timingInfo = timingInfo;

		  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
		  // global, and cacheState.
		  markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
		}

		// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
		function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState) {
		  if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
		    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState);
		  }
		}

		// https://fetch.spec.whatwg.org/#abort-fetch
		function abortFetch(p, request, responseObject, error) {
		  // Note: AbortSignal.reason was added in node v17.2.0
		  // which would give us an undefined error to reject with.
		  // Remove this once node v16 is no longer supported.
		  if (!error) {
		    error = new DOMException('The operation was aborted.', 'AbortError');
		  }

		  // 1. Reject promise with error.
		  p.reject(error);

		  // 2. If request’s body is not null and is readable, then cancel request’s
		  // body with error.
		  if (request.body != null && isReadable(request.body?.stream)) {
		    request.body.stream.cancel(error).catch(err => {
		      if (err.code === 'ERR_INVALID_STATE') {
		        // Node bug?
		        return;
		      }
		      throw err;
		    });
		  }

		  // 3. If responseObject is null, then return.
		  if (responseObject == null) {
		    return;
		  }

		  // 4. Let response be responseObject’s response.
		  const response = responseObject[kState];

		  // 5. If response’s body is not null and is readable, then error response’s
		  // body with error.
		  if (response.body != null && isReadable(response.body?.stream)) {
		    response.body.stream.cancel(error).catch(err => {
		      if (err.code === 'ERR_INVALID_STATE') {
		        // Node bug?
		        return;
		      }
		      throw err;
		    });
		  }
		}

		// https://fetch.spec.whatwg.org/#fetching
		function fetching({
		  request,
		  processRequestBodyChunkLength,
		  processRequestEndOfBody,
		  processResponse,
		  processResponseEndOfBody,
		  processResponseConsumeBody,
		  useParallelQueue = false,
		  dispatcher // undici
		}) {
		  // 1. Let taskDestination be null.
		  let taskDestination = null;

		  // 2. Let crossOriginIsolatedCapability be false.
		  let crossOriginIsolatedCapability = false;

		  // 3. If request’s client is non-null, then:
		  if (request.client != null) {
		    // 1. Set taskDestination to request’s client’s global object.
		    taskDestination = request.client.globalObject;

		    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
		    // isolated capability.
		    crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
		  }

		  // 4. If useParallelQueue is true, then set taskDestination to the result of
		  // starting a new parallel queue.
		  // TODO

		  // 5. Let timingInfo be a new fetch timing info whose start time and
		  // post-redirect start time are the coarsened shared current time given
		  // crossOriginIsolatedCapability.
		  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
		  const timingInfo = createOpaqueTimingInfo({
		    startTime: currenTime
		  });

		  // 6. Let fetchParams be a new fetch params whose
		  // request is request,
		  // timing info is timingInfo,
		  // process request body chunk length is processRequestBodyChunkLength,
		  // process request end-of-body is processRequestEndOfBody,
		  // process response is processResponse,
		  // process response consume body is processResponseConsumeBody,
		  // process response end-of-body is processResponseEndOfBody,
		  // task destination is taskDestination,
		  // and cross-origin isolated capability is crossOriginIsolatedCapability.
		  const fetchParams = {
		    controller: new Fetch(dispatcher),
		    request,
		    timingInfo,
		    processRequestBodyChunkLength,
		    processRequestEndOfBody,
		    processResponse,
		    processResponseConsumeBody,
		    processResponseEndOfBody,
		    taskDestination,
		    crossOriginIsolatedCapability
		  };

		  // 7. If request’s body is a byte sequence, then set request’s body to
		  //    request’s body as a body.
		  // NOTE: Since fetching is only called from fetch, body should already be
		  // extracted.
		  assert(!request.body || request.body.stream);

		  // 8. If request’s window is "client", then set request’s window to request’s
		  // client, if request’s client’s global object is a Window object; otherwise
		  // "no-window".
		  if (request.window === 'client') {
		    // TODO: What if request.client is null?
		    request.window = request.client?.globalObject?.constructor?.name === 'Window' ? request.client : 'no-window';
		  }

		  // 9. If request’s origin is "client", then set request’s origin to request’s
		  // client’s origin.
		  if (request.origin === 'client') {
		    // TODO: What if request.client is null?
		    request.origin = request.client?.origin;
		  }

		  // 10. If all of the following conditions are true:
		  // TODO

		  // 11. If request’s policy container is "client", then:
		  if (request.policyContainer === 'client') {
		    // 1. If request’s client is non-null, then set request’s policy
		    // container to a clone of request’s client’s policy container. [HTML]
		    if (request.client != null) {
		      request.policyContainer = clonePolicyContainer(request.client.policyContainer);
		    } else {
		      // 2. Otherwise, set request’s policy container to a new policy
		      // container.
		      request.policyContainer = makePolicyContainer();
		    }
		  }

		  // 12. If request’s header list does not contain `Accept`, then:
		  if (!request.headersList.contains('accept')) {
		    // 1. Let value be `*/*`.
		    const value = '*/*';

		    // 2. A user agent should set value to the first matching statement, if
		    // any, switching on request’s destination:
		    // "document"
		    // "frame"
		    // "iframe"
		    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
		    // "image"
		    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
		    // "style"
		    // `text/css,*/*;q=0.1`
		    // TODO

		    // 3. Append `Accept`/value to request’s header list.
		    request.headersList.append('accept', value);
		  }

		  // 13. If request’s header list does not contain `Accept-Language`, then
		  // user agents should append `Accept-Language`/an appropriate value to
		  // request’s header list.
		  if (!request.headersList.contains('accept-language')) {
		    request.headersList.append('accept-language', '*');
		  }

		  // 14. If request’s priority is null, then use request’s initiator and
		  // destination appropriately in setting request’s priority to a
		  // user-agent-defined object.
		  if (request.priority === null) ;

		  // 15. If request is a subresource request, then:
		  if (subresourceSet.has(request.destination)) ;

		  // 16. Run main fetch given fetchParams.
		  mainFetch(fetchParams).catch(err => {
		    fetchParams.controller.terminate(err);
		  });

		  // 17. Return fetchParam's controller
		  return fetchParams.controller;
		}

		// https://fetch.spec.whatwg.org/#concept-main-fetch
		async function mainFetch(fetchParams, recursive = false) {
		  // 1. Let request be fetchParams’s request.
		  const request = fetchParams.request;

		  // 2. Let response be null.
		  let response = null;

		  // 3. If request’s local-URLs-only flag is set and request’s current URL is
		  // not local, then set response to a network error.
		  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
		    response = makeNetworkError('local URLs only');
		  }

		  // 4. Run report Content Security Policy violations for request.
		  // TODO

		  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
		  tryUpgradeRequestToAPotentiallyTrustworthyURL(request);

		  // 6. If should request be blocked due to a bad port, should fetching request
		  // be blocked as mixed content, or should request be blocked by Content
		  // Security Policy returns blocked, then set response to a network error.
		  if (requestBadPort(request) === 'blocked') {
		    response = makeNetworkError('bad port');
		  }
		  // TODO: should fetching request be blocked as mixed content?
		  // TODO: should request be blocked by Content Security Policy?

		  // 7. If request’s referrer policy is the empty string, then set request’s
		  // referrer policy to request’s policy container’s referrer policy.
		  if (request.referrerPolicy === '') {
		    request.referrerPolicy = request.policyContainer.referrerPolicy;
		  }

		  // 8. If request’s referrer is not "no-referrer", then set request’s
		  // referrer to the result of invoking determine request’s referrer.
		  if (request.referrer !== 'no-referrer') {
		    request.referrer = determineRequestsReferrer(request);
		  }

		  // 9. Set request’s current URL’s scheme to "https" if all of the following
		  // conditions are true:
		  // - request’s current URL’s scheme is "http"
		  // - request’s current URL’s host is a domain
		  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
		  //   Matching results in either a superdomain match with an asserted
		  //   includeSubDomains directive or a congruent match (with or without an
		  //   asserted includeSubDomains directive). [HSTS]
		  // TODO

		  // 10. If recursive is false, then run the remaining steps in parallel.
		  // TODO

		  // 11. If response is null, then set response to the result of running
		  // the steps corresponding to the first matching statement:
		  if (response === null) {
		    response = await (async () => {
		      const currentURL = requestCurrentURL(request);
		      if (
		      // - request’s current URL’s origin is same origin with request’s origin,
		      //   and request’s response tainting is "basic"
		      sameOrigin(currentURL, request.url) && request.responseTainting === 'basic' ||
		      // request’s current URL’s scheme is "data"
		      currentURL.protocol === 'data:' ||
		      // - request’s mode is "navigate" or "websocket"
		      request.mode === 'navigate' || request.mode === 'websocket') {
		        // 1. Set request’s response tainting to "basic".
		        request.responseTainting = 'basic';

		        // 2. Return the result of running scheme fetch given fetchParams.
		        return await schemeFetch(fetchParams);
		      }

		      // request’s mode is "same-origin"
		      if (request.mode === 'same-origin') {
		        // 1. Return a network error.
		        return makeNetworkError('request mode cannot be "same-origin"');
		      }

		      // request’s mode is "no-cors"
		      if (request.mode === 'no-cors') {
		        // 1. If request’s redirect mode is not "follow", then return a network
		        // error.
		        if (request.redirect !== 'follow') {
		          return makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
		        }

		        // 2. Set request’s response tainting to "opaque".
		        request.responseTainting = 'opaque';

		        // 3. Return the result of running scheme fetch given fetchParams.
		        return await schemeFetch(fetchParams);
		      }

		      // request’s current URL’s scheme is not an HTTP(S) scheme
		      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
		        // Return a network error.
		        return makeNetworkError('URL scheme must be a HTTP(S) scheme');
		      }

		      // - request’s use-CORS-preflight flag is set
		      // - request’s unsafe-request flag is set and either request’s method is
		      //   not a CORS-safelisted method or CORS-unsafe request-header names with
		      //   request’s header list is not empty
		      //    1. Set request’s response tainting to "cors".
		      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
		      //    given fetchParams and true.
		      //    3. If corsWithPreflightResponse is a network error, then clear cache
		      //    entries using request.
		      //    4. Return corsWithPreflightResponse.
		      // TODO

		      // Otherwise
		      //    1. Set request’s response tainting to "cors".
		      request.responseTainting = 'cors';

		      //    2. Return the result of running HTTP fetch given fetchParams.
		      return await httpFetch(fetchParams);
		    })();
		  }

		  // 12. If recursive is true, then return response.
		  if (recursive) {
		    return response;
		  }

		  // 13. If response is not a network error and response is not a filtered
		  // response, then:
		  if (response.status !== 0 && !response.internalResponse) {
		    // If request’s response tainting is "cors", then:
		    if (request.responseTainting === 'cors') ;

		    // Set response to the following filtered response with response as its
		    // internal response, depending on request’s response tainting:
		    if (request.responseTainting === 'basic') {
		      response = filterResponse(response, 'basic');
		    } else if (request.responseTainting === 'cors') {
		      response = filterResponse(response, 'cors');
		    } else if (request.responseTainting === 'opaque') {
		      response = filterResponse(response, 'opaque');
		    } else {
		      assert(false);
		    }
		  }

		  // 14. Let internalResponse be response, if response is a network error,
		  // and response’s internal response otherwise.
		  let internalResponse = response.status === 0 ? response : response.internalResponse;

		  // 15. If internalResponse’s URL list is empty, then set it to a clone of
		  // request’s URL list.
		  if (internalResponse.urlList.length === 0) {
		    internalResponse.urlList.push(...request.urlList);
		  }

		  // 16. If request’s timing allow failed flag is unset, then set
		  // internalResponse’s timing allow passed flag.
		  if (!request.timingAllowFailed) {
		    response.timingAllowPassed = true;
		  }

		  // 17. If response is not a network error and any of the following returns
		  // blocked
		  // - should internalResponse to request be blocked as mixed content
		  // - should internalResponse to request be blocked by Content Security Policy
		  // - should internalResponse to request be blocked due to its MIME type
		  // - should internalResponse to request be blocked due to nosniff
		  // TODO

		  // 18. If response’s type is "opaque", internalResponse’s status is 206,
		  // internalResponse’s range-requested flag is set, and request’s header
		  // list does not contain `Range`, then set response and internalResponse
		  // to a network error.
		  if (response.type === 'opaque' && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains('range')) {
		    response = internalResponse = makeNetworkError();
		  }

		  // 19. If response is not a network error and either request’s method is
		  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
		  // set internalResponse’s body to null and disregard any enqueuing toward
		  // it (if any).
		  if (response.status !== 0 && (request.method === 'HEAD' || request.method === 'CONNECT' || nullBodyStatus.includes(internalResponse.status))) {
		    internalResponse.body = null;
		    fetchParams.controller.dump = true;
		  }

		  // 20. If request’s integrity metadata is not the empty string, then:
		  if (request.integrity) {
		    // 1. Let processBodyError be this step: run fetch finale given fetchParams
		    // and a network error.
		    const processBodyError = reason => fetchFinale(fetchParams, makeNetworkError(reason));

		    // 2. If request’s response tainting is "opaque", or response’s body is null,
		    // then run processBodyError and abort these steps.
		    if (request.responseTainting === 'opaque' || response.body == null) {
		      processBodyError(response.error);
		      return;
		    }

		    // 3. Let processBody given bytes be these steps:
		    const processBody = bytes => {
		      // 1. If bytes do not match request’s integrity metadata,
		      // then run processBodyError and abort these steps. [SRI]
		      if (!bytesMatch(bytes, request.integrity)) {
		        processBodyError('integrity mismatch');
		        return;
		      }

		      // 2. Set response’s body to bytes as a body.
		      response.body = safelyExtractBody(bytes)[0];

		      // 3. Run fetch finale given fetchParams and response.
		      fetchFinale(fetchParams, response);
		    };

		    // 4. Fully read response’s body given processBody and processBodyError.
		    await fullyReadBody(response.body, processBody, processBodyError);
		  } else {
		    // 21. Otherwise, run fetch finale given fetchParams and response.
		    fetchFinale(fetchParams, response);
		  }
		}

		// https://fetch.spec.whatwg.org/#concept-scheme-fetch
		// given a fetch params fetchParams
		function schemeFetch(fetchParams) {
		  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
		  // cancelled state, we do not want this condition to trigger *unless* there have been
		  // no redirects. See https://github.com/nodejs/undici/issues/1776
		  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
		  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
		    return Promise.resolve(makeAppropriateNetworkError(fetchParams));
		  }

		  // 2. Let request be fetchParams’s request.
		  const {
		    request
		  } = fetchParams;
		  const {
		    protocol: scheme
		  } = requestCurrentURL(request);

		  // 3. Switch on request’s current URL’s scheme and run the associated steps:
		  switch (scheme) {
		    case 'about:':
		      {
		        // If request’s current URL’s path is the string "blank", then return a new response
		        // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
		        // and body is the empty byte sequence as a body.

		        // Otherwise, return a network error.
		        return Promise.resolve(makeNetworkError('about scheme is not supported'));
		      }
		    case 'blob:':
		      {
		        if (!resolveObjectURL) {
		          resolveObjectURL = require$$0__default$4["default"].resolveObjectURL;
		        }

		        // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
		        const blobURLEntry = requestCurrentURL(request);

		        // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
		        // Buffer.resolveObjectURL does not ignore URL queries.
		        if (blobURLEntry.search.length !== 0) {
		          return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'));
		        }
		        const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());

		        // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
		        //    object is not a Blob object, then return a network error.
		        if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
		          return Promise.resolve(makeNetworkError('invalid method'));
		        }

		        // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
		        const bodyWithType = safelyExtractBody(blobURLEntryObject);

		        // 4. Let body be bodyWithType’s body.
		        const body = bodyWithType[0];

		        // 5. Let length be body’s length, serialized and isomorphic encoded.
		        const length = isomorphicEncode(`${body.length}`);

		        // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
		        const type = bodyWithType[1] ?? '';

		        // 7. Return a new response whose status message is `OK`, header list is
		        //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
		        const response = makeResponse({
		          statusText: 'OK',
		          headersList: [['content-length', {
		            name: 'Content-Length',
		            value: length
		          }], ['content-type', {
		            name: 'Content-Type',
		            value: type
		          }]]
		        });
		        response.body = body;
		        return Promise.resolve(response);
		      }
		    case 'data:':
		      {
		        // 1. Let dataURLStruct be the result of running the
		        //    data: URL processor on request’s current URL.
		        const currentURL = requestCurrentURL(request);
		        const dataURLStruct = dataURLProcessor(currentURL);

		        // 2. If dataURLStruct is failure, then return a
		        //    network error.
		        if (dataURLStruct === 'failure') {
		          return Promise.resolve(makeNetworkError('failed to fetch the data URL'));
		        }

		        // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
		        const mimeType = serializeAMimeType(dataURLStruct.mimeType);

		        // 4. Return a response whose status message is `OK`,
		        //    header list is « (`Content-Type`, mimeType) »,
		        //    and body is dataURLStruct’s body as a body.
		        return Promise.resolve(makeResponse({
		          statusText: 'OK',
		          headersList: [['content-type', {
		            name: 'Content-Type',
		            value: mimeType
		          }]],
		          body: safelyExtractBody(dataURLStruct.body)[0]
		        }));
		      }
		    case 'file:':
		      {
		        // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
		        // When in doubt, return a network error.
		        return Promise.resolve(makeNetworkError('not implemented... yet...'));
		      }
		    case 'http:':
		    case 'https:':
		      {
		        // Return the result of running HTTP fetch given fetchParams.

		        return httpFetch(fetchParams).catch(err => makeNetworkError(err));
		      }
		    default:
		      {
		        return Promise.resolve(makeNetworkError('unknown scheme'));
		      }
		  }
		}

		// https://fetch.spec.whatwg.org/#finalize-response
		function finalizeResponse(fetchParams, response) {
		  // 1. Set fetchParams’s request’s done flag.
		  fetchParams.request.done = true;

		  // 2, If fetchParams’s process response done is not null, then queue a fetch
		  // task to run fetchParams’s process response done given response, with
		  // fetchParams’s task destination.
		  if (fetchParams.processResponseDone != null) {
		    queueMicrotask(() => fetchParams.processResponseDone(response));
		  }
		}

		// https://fetch.spec.whatwg.org/#fetch-finale
		function fetchFinale(fetchParams, response) {
		  // 1. If response is a network error, then:
		  if (response.type === 'error') {
		    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
		    response.urlList = [fetchParams.request.urlList[0]];

		    // 2. Set response’s timing info to the result of creating an opaque timing
		    // info for fetchParams’s timing info.
		    response.timingInfo = createOpaqueTimingInfo({
		      startTime: fetchParams.timingInfo.startTime
		    });
		  }

		  // 2. Let processResponseEndOfBody be the following steps:
		  const processResponseEndOfBody = () => {
		    // 1. Set fetchParams’s request’s done flag.
		    fetchParams.request.done = true;

		    // If fetchParams’s process response end-of-body is not null,
		    // then queue a fetch task to run fetchParams’s process response
		    // end-of-body given response with fetchParams’s task destination.
		    if (fetchParams.processResponseEndOfBody != null) {
		      queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
		    }
		  };

		  // 3. If fetchParams’s process response is non-null, then queue a fetch task
		  // to run fetchParams’s process response given response, with fetchParams’s
		  // task destination.
		  if (fetchParams.processResponse != null) {
		    queueMicrotask(() => fetchParams.processResponse(response));
		  }

		  // 4. If response’s body is null, then run processResponseEndOfBody.
		  if (response.body == null) {
		    processResponseEndOfBody();
		  } else {
		    // 5. Otherwise:

		    // 1. Let transformStream be a new a TransformStream.

		    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
		    // enqueues chunk in transformStream.
		    const identityTransformAlgorithm = (chunk, controller) => {
		      controller.enqueue(chunk);
		    };

		    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
		    // and flushAlgorithm set to processResponseEndOfBody.
		    const transformStream = new TransformStream({
		      start() {},
		      transform: identityTransformAlgorithm,
		      flush: processResponseEndOfBody
		    }, {
		      size() {
		        return 1;
		      }
		    }, {
		      size() {
		        return 1;
		      }
		    });

		    // 4. Set response’s body to the result of piping response’s body through transformStream.
		    response.body = {
		      stream: response.body.stream.pipeThrough(transformStream)
		    };
		  }

		  // 6. If fetchParams’s process response consume body is non-null, then:
		  if (fetchParams.processResponseConsumeBody != null) {
		    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
		    // process response consume body given response and nullOrBytes.
		    const processBody = nullOrBytes => fetchParams.processResponseConsumeBody(response, nullOrBytes);

		    // 2. Let processBodyError be this step: run fetchParams’s process
		    // response consume body given response and failure.
		    const processBodyError = failure => fetchParams.processResponseConsumeBody(response, failure);

		    // 3. If response’s body is null, then queue a fetch task to run processBody
		    // given null, with fetchParams’s task destination.
		    if (response.body == null) {
		      queueMicrotask(() => processBody(null));
		    } else {
		      // 4. Otherwise, fully read response’s body given processBody, processBodyError,
		      // and fetchParams’s task destination.
		      return fullyReadBody(response.body, processBody, processBodyError);
		    }
		    return Promise.resolve();
		  }
		}

		// https://fetch.spec.whatwg.org/#http-fetch
		async function httpFetch(fetchParams) {
		  // 1. Let request be fetchParams’s request.
		  const request = fetchParams.request;

		  // 2. Let response be null.
		  let response = null;

		  // 3. Let actualResponse be null.
		  let actualResponse = null;

		  // 4. Let timingInfo be fetchParams’s timing info.
		  const timingInfo = fetchParams.timingInfo;

		  // 5. If request’s service-workers mode is "all", then:
		  if (request.serviceWorkers === 'all') ;

		  // 6. If response is null, then:
		  if (response === null) {
		    // 1. If makeCORSPreflight is true and one of these conditions is true:
		    // TODO

		    // 2. If request’s redirect mode is "follow", then set request’s
		    // service-workers mode to "none".
		    if (request.redirect === 'follow') {
		      request.serviceWorkers = 'none';
		    }

		    // 3. Set response and actualResponse to the result of running
		    // HTTP-network-or-cache fetch given fetchParams.
		    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);

		    // 4. If request’s response tainting is "cors" and a CORS check
		    // for request and response returns failure, then return a network error.
		    if (request.responseTainting === 'cors' && corsCheck(request, response) === 'failure') {
		      return makeNetworkError('cors failure');
		    }

		    // 5. If the TAO check for request and response returns failure, then set
		    // request’s timing allow failed flag.
		    if (TAOCheck(request, response) === 'failure') {
		      request.timingAllowFailed = true;
		    }
		  }

		  // 7. If either request’s response tainting or response’s type
		  // is "opaque", and the cross-origin resource policy check with
		  // request’s origin, request’s client, request’s destination,
		  // and actualResponse returns blocked, then return a network error.
		  if ((request.responseTainting === 'opaque' || response.type === 'opaque') && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === 'blocked') {
		    return makeNetworkError('blocked');
		  }

		  // 8. If actualResponse’s status is a redirect status, then:
		  if (redirectStatusSet.has(actualResponse.status)) {
		    // 1. If actualResponse’s status is not 303, request’s body is not null,
		    // and the connection uses HTTP/2, then user agents may, and are even
		    // encouraged to, transmit an RST_STREAM frame.
		    // See, https://github.com/whatwg/fetch/issues/1288
		    if (request.redirect !== 'manual') {
		      fetchParams.controller.connection.destroy();
		    }

		    // 2. Switch on request’s redirect mode:
		    if (request.redirect === 'error') {
		      // Set response to a network error.
		      response = makeNetworkError('unexpected redirect');
		    } else if (request.redirect === 'manual') {
		      // Set response to an opaque-redirect filtered response whose internal
		      // response is actualResponse.
		      // NOTE(spec): On the web this would return an `opaqueredirect` response,
		      // but that doesn't make sense server side.
		      // See https://github.com/nodejs/undici/issues/1193.
		      response = actualResponse;
		    } else if (request.redirect === 'follow') {
		      // Set response to the result of running HTTP-redirect fetch given
		      // fetchParams and response.
		      response = await httpRedirectFetch(fetchParams, response);
		    } else {
		      assert(false);
		    }
		  }

		  // 9. Set response’s timing info to timingInfo.
		  response.timingInfo = timingInfo;

		  // 10. Return response.
		  return response;
		}

		// https://fetch.spec.whatwg.org/#http-redirect-fetch
		function httpRedirectFetch(fetchParams, response) {
		  // 1. Let request be fetchParams’s request.
		  const request = fetchParams.request;

		  // 2. Let actualResponse be response, if response is not a filtered response,
		  // and response’s internal response otherwise.
		  const actualResponse = response.internalResponse ? response.internalResponse : response;

		  // 3. Let locationURL be actualResponse’s location URL given request’s current
		  // URL’s fragment.
		  let locationURL;
		  try {
		    locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);

		    // 4. If locationURL is null, then return response.
		    if (locationURL == null) {
		      return response;
		    }
		  } catch (err) {
		    // 5. If locationURL is failure, then return a network error.
		    return Promise.resolve(makeNetworkError(err));
		  }

		  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
		  // error.
		  if (!urlIsHttpHttpsScheme(locationURL)) {
		    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'));
		  }

		  // 7. If request’s redirect count is 20, then return a network error.
		  if (request.redirectCount === 20) {
		    return Promise.resolve(makeNetworkError('redirect count exceeded'));
		  }

		  // 8. Increase request’s redirect count by 1.
		  request.redirectCount += 1;

		  // 9. If request’s mode is "cors", locationURL includes credentials, and
		  // request’s origin is not same origin with locationURL’s origin, then return
		  //  a network error.
		  if (request.mode === 'cors' && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
		    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
		  }

		  // 10. If request’s response tainting is "cors" and locationURL includes
		  // credentials, then return a network error.
		  if (request.responseTainting === 'cors' && (locationURL.username || locationURL.password)) {
		    return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode "cors"'));
		  }

		  // 11. If actualResponse’s status is not 303, request’s body is non-null,
		  // and request’s body’s source is null, then return a network error.
		  if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
		    return Promise.resolve(makeNetworkError());
		  }

		  // 12. If one of the following is true
		  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
		  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
		  if ([301, 302].includes(actualResponse.status) && request.method === 'POST' || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
		    // then:
		    // 1. Set request’s method to `GET` and request’s body to null.
		    request.method = 'GET';
		    request.body = null;

		    // 2. For each headerName of request-body-header name, delete headerName from
		    // request’s header list.
		    for (const headerName of requestBodyHeader) {
		      request.headersList.delete(headerName);
		    }
		  }

		  // 13. If request’s current URL’s origin is not same origin with locationURL’s
		  //     origin, then for each headerName of CORS non-wildcard request-header name,
		  //     delete headerName from request’s header list.
		  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
		    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
		    request.headersList.delete('authorization');

		    // https://fetch.spec.whatwg.org/#authentication-entries
		    request.headersList.delete('proxy-authorization', true);

		    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
		    request.headersList.delete('cookie');
		    request.headersList.delete('host');
		  }

		  // 14. If request’s body is non-null, then set request’s body to the first return
		  // value of safely extracting request’s body’s source.
		  if (request.body != null) {
		    assert(request.body.source != null);
		    request.body = safelyExtractBody(request.body.source)[0];
		  }

		  // 15. Let timingInfo be fetchParams’s timing info.
		  const timingInfo = fetchParams.timingInfo;

		  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
		  // coarsened shared current time given fetchParams’s cross-origin isolated
		  // capability.
		  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);

		  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
		  //  redirect start time to timingInfo’s start time.
		  if (timingInfo.redirectStartTime === 0) {
		    timingInfo.redirectStartTime = timingInfo.startTime;
		  }

		  // 18. Append locationURL to request’s URL list.
		  request.urlList.push(locationURL);

		  // 19. Invoke set request’s referrer policy on redirect on request and
		  // actualResponse.
		  setRequestReferrerPolicyOnRedirect(request, actualResponse);

		  // 20. Return the result of running main fetch given fetchParams and true.
		  return mainFetch(fetchParams, true);
		}

		// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
		async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		  // 1. Let request be fetchParams’s request.
		  const request = fetchParams.request;

		  // 2. Let httpFetchParams be null.
		  let httpFetchParams = null;

		  // 3. Let httpRequest be null.
		  let httpRequest = null;

		  // 4. Let response be null.
		  let response = null;

		  // 8. Run these steps, but abort when the ongoing fetch is terminated:

		  //    1. If request’s window is "no-window" and request’s redirect mode is
		  //    "error", then set httpFetchParams to fetchParams and httpRequest to
		  //    request.
		  if (request.window === 'no-window' && request.redirect === 'error') {
		    httpFetchParams = fetchParams;
		    httpRequest = request;
		  } else {
		    // Otherwise:

		    // 1. Set httpRequest to a clone of request.
		    httpRequest = makeRequest(request);

		    // 2. Set httpFetchParams to a copy of fetchParams.
		    httpFetchParams = {
		      ...fetchParams
		    };

		    // 3. Set httpFetchParams’s request to httpRequest.
		    httpFetchParams.request = httpRequest;
		  }

		  //    3. Let includeCredentials be true if one of
		  const includeCredentials = request.credentials === 'include' || request.credentials === 'same-origin' && request.responseTainting === 'basic';

		  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
		  //    body is non-null; otherwise null.
		  const contentLength = httpRequest.body ? httpRequest.body.length : null;

		  //    5. Let contentLengthHeaderValue be null.
		  let contentLengthHeaderValue = null;

		  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
		  //    `PUT`, then set contentLengthHeaderValue to `0`.
		  if (httpRequest.body == null && ['POST', 'PUT'].includes(httpRequest.method)) {
		    contentLengthHeaderValue = '0';
		  }

		  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
		  //    contentLength, serialized and isomorphic encoded.
		  if (contentLength != null) {
		    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
		  }

		  //    8. If contentLengthHeaderValue is non-null, then append
		  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
		  //    list.
		  if (contentLengthHeaderValue != null) {
		    httpRequest.headersList.append('content-length', contentLengthHeaderValue);
		  }

		  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
		  //    contentLengthHeaderValue) to httpRequest’s header list.

		  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
		  //    then:
		  if (contentLength != null && httpRequest.keepalive) ;

		  //    11. If httpRequest’s referrer is a URL, then append
		  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
		  //     to httpRequest’s header list.
		  if (httpRequest.referrer instanceof URL) {
		    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href));
		  }

		  //    12. Append a request `Origin` header for httpRequest.
		  appendRequestOriginHeader(httpRequest);

		  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
		  appendFetchMetadata(httpRequest);

		  //    14. If httpRequest’s header list does not contain `User-Agent`, then
		  //    user agents should append `User-Agent`/default `User-Agent` value to
		  //    httpRequest’s header list.
		  if (!httpRequest.headersList.contains('user-agent')) {
		    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node');
		  }

		  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
		  //    list contains `If-Modified-Since`, `If-None-Match`,
		  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
		  //    httpRequest’s cache mode to "no-store".
		  if (httpRequest.cache === 'default' && (httpRequest.headersList.contains('if-modified-since') || httpRequest.headersList.contains('if-none-match') || httpRequest.headersList.contains('if-unmodified-since') || httpRequest.headersList.contains('if-match') || httpRequest.headersList.contains('if-range'))) {
		    httpRequest.cache = 'no-store';
		  }

		  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
		  //    no-cache cache-control header modification flag is unset, and
		  //    httpRequest’s header list does not contain `Cache-Control`, then append
		  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
		  if (httpRequest.cache === 'no-cache' && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains('cache-control')) {
		    httpRequest.headersList.append('cache-control', 'max-age=0');
		  }

		  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
		  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
		    // 1. If httpRequest’s header list does not contain `Pragma`, then append
		    // `Pragma`/`no-cache` to httpRequest’s header list.
		    if (!httpRequest.headersList.contains('pragma')) {
		      httpRequest.headersList.append('pragma', 'no-cache');
		    }

		    // 2. If httpRequest’s header list does not contain `Cache-Control`,
		    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
		    if (!httpRequest.headersList.contains('cache-control')) {
		      httpRequest.headersList.append('cache-control', 'no-cache');
		    }
		  }

		  //    18. If httpRequest’s header list contains `Range`, then append
		  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
		  if (httpRequest.headersList.contains('range')) {
		    httpRequest.headersList.append('accept-encoding', 'identity');
		  }

		  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
		  //    header if httpRequest’s header list contains that header’s name.
		  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
		  if (!httpRequest.headersList.contains('accept-encoding')) {
		    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
		      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate');
		    } else {
		      httpRequest.headersList.append('accept-encoding', 'gzip, deflate');
		    }
		  }
		  httpRequest.headersList.delete('host');

		  //    21. If there’s a proxy-authentication entry, use it as appropriate.
		  //    TODO: proxy-authentication

		  //    22. Set httpCache to the result of determining the HTTP cache
		  //    partition, given httpRequest.
		  //    TODO: cache

		  //    23. If httpCache is null, then set httpRequest’s cache mode to
		  //    "no-store".
		  {
		    httpRequest.cache = 'no-store';
		  }

		  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
		  //    then:
		  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') ;

		  // 9. If aborted, then return the appropriate network error for fetchParams.
		  // TODO

		  // 10. If response is null, then:
		  if (response == null) {
		    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
		    // network error.
		    if (httpRequest.mode === 'only-if-cached') {
		      return makeNetworkError('only if cached');
		    }

		    // 2. Let forwardResponse be the result of running HTTP-network fetch
		    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
		    const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);

		    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
		    // in the range 200 to 399, inclusive, invalidate appropriate stored
		    // responses in httpCache, as per the "Invalidation" chapter of HTTP
		    // Caching, and set storedResponse to null. [HTTP-CACHING]
		    if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) ;

		    // 5. If response is null, then:
		    if (response == null) {
		      // 1. Set response to forwardResponse.
		      response = forwardResponse;

		      // 2. Store httpRequest and forwardResponse in httpCache, as per the
		      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
		      // TODO: cache
		    }
		  }

		  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
		  response.urlList = [...httpRequest.urlList];

		  // 12. If httpRequest’s header list contains `Range`, then set response’s
		  // range-requested flag.
		  if (httpRequest.headersList.contains('range')) {
		    response.rangeRequested = true;
		  }

		  // 13. Set response’s request-includes-credentials to includeCredentials.
		  response.requestIncludesCredentials = includeCredentials;

		  // 14. If response’s status is 401, httpRequest’s response tainting is not
		  // "cors", includeCredentials is true, and request’s window is an environment
		  // settings object, then:
		  // TODO

		  // 15. If response’s status is 407, then:
		  if (response.status === 407) {
		    // 1. If request’s window is "no-window", then return a network error.
		    if (request.window === 'no-window') {
		      return makeNetworkError();
		    }

		    // 2. ???

		    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
		    if (isCancelled(fetchParams)) {
		      return makeAppropriateNetworkError(fetchParams);
		    }

		    // 4. Prompt the end user as appropriate in request’s window and store
		    // the result as a proxy-authentication entry. [HTTP-AUTH]
		    // TODO: Invoke some kind of callback?

		    // 5. Set response to the result of running HTTP-network-or-cache fetch given
		    // fetchParams.
		    // TODO
		    return makeNetworkError('proxy authentication required');
		  }

		  // 16. If all of the following are true
		  if (
		  // response’s status is 421
		  response.status === 421 &&
		  // isNewConnectionFetch is false
		  !isNewConnectionFetch && (
		  // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
		  request.body == null || request.body.source != null)) {
		    // then:

		    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
		    if (isCancelled(fetchParams)) {
		      return makeAppropriateNetworkError(fetchParams);
		    }

		    // 2. Set response to the result of running HTTP-network-or-cache
		    // fetch given fetchParams, isAuthenticationFetch, and true.

		    // TODO (spec): The spec doesn't specify this but we need to cancel
		    // the active response before we can start a new one.
		    // https://github.com/whatwg/fetch/issues/1293
		    fetchParams.controller.connection.destroy();
		    response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
		  }

		  // 18. Return response.
		  return response;
		}

		// https://fetch.spec.whatwg.org/#http-network-fetch
		async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
		  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		  fetchParams.controller.connection = {
		    abort: null,
		    destroyed: false,
		    destroy(err) {
		      if (!this.destroyed) {
		        this.destroyed = true;
		        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'));
		      }
		    }
		  };

		  // 1. Let request be fetchParams’s request.
		  const request = fetchParams.request;

		  // 2. Let response be null.
		  let response = null;

		  // 3. Let timingInfo be fetchParams’s timing info.
		  const timingInfo = fetchParams.timingInfo;

		  // 5. If httpCache is null, then set request’s cache mode to "no-store".
		  {
		    request.cache = 'no-store';
		  }

		  // 8. Switch on request’s mode:
		  if (request.mode === 'websocket') ;

		  // 9. Run these steps, but abort when the ongoing fetch is terminated:

		  //    1. If connection is failure, then return a network error.

		  //    2. Set timingInfo’s final connection timing info to the result of
		  //    calling clamp and coarsen connection timing info with connection’s
		  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
		  //    cross-origin isolated capability.

		  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
		  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
		  //    `chunked`) to request’s header list.

		  //    4. Set timingInfo’s final network-request start time to the coarsened
		  //    shared current time given fetchParams’s cross-origin isolated
		  //    capability.

		  //    5. Set response to the result of making an HTTP request over connection
		  //    using request with the following caveats:

		  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
		  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

		  //        - If request’s body is non-null, and request’s body’s source is null,
		  //        then the user agent may have a buffer of up to 64 kibibytes and store
		  //        a part of request’s body in that buffer. If the user agent reads from
		  //        request’s body beyond that buffer’s size and the user agent needs to
		  //        resend request, then instead return a network error.

		  //        - Set timingInfo’s final network-response start time to the coarsened
		  //        shared current time given fetchParams’s cross-origin isolated capability,
		  //        immediately after the user agent’s HTTP parser receives the first byte
		  //        of the response (e.g., frame header bytes for HTTP/2 or response status
		  //        line for HTTP/1.x).

		  //        - Wait until all the headers are transmitted.

		  //        - Any responses whose status is in the range 100 to 199, inclusive,
		  //        and is not 101, are to be ignored, except for the purposes of setting
		  //        timingInfo’s final network-response start time above.

		  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
		  //    response is transferred via HTTP/1.0 or older, then return a network
		  //    error.

		  //    - If the HTTP request results in a TLS client certificate dialog, then:

		  //        1. If request’s window is an environment settings object, make the
		  //        dialog available in request’s window.

		  //        2. Otherwise, return a network error.

		  // To transmit request’s body body, run these steps:
		  let requestBody = null;
		  // 1. If body is null and fetchParams’s process request end-of-body is
		  // non-null, then queue a fetch task given fetchParams’s process request
		  // end-of-body and fetchParams’s task destination.
		  if (request.body == null && fetchParams.processRequestEndOfBody) {
		    queueMicrotask(() => fetchParams.processRequestEndOfBody());
		  } else if (request.body != null) {
		    // 2. Otherwise, if body is non-null:

		    //    1. Let processBodyChunk given bytes be these steps:
		    const processBodyChunk = async function* (bytes) {
		      // 1. If the ongoing fetch is terminated, then abort these steps.
		      if (isCancelled(fetchParams)) {
		        return;
		      }

		      // 2. Run this step in parallel: transmit bytes.
		      yield bytes;

		      // 3. If fetchParams’s process request body is non-null, then run
		      // fetchParams’s process request body given bytes’s length.
		      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
		    };

		    // 2. Let processEndOfBody be these steps:
		    const processEndOfBody = () => {
		      // 1. If fetchParams is canceled, then abort these steps.
		      if (isCancelled(fetchParams)) {
		        return;
		      }

		      // 2. If fetchParams’s process request end-of-body is non-null,
		      // then run fetchParams’s process request end-of-body.
		      if (fetchParams.processRequestEndOfBody) {
		        fetchParams.processRequestEndOfBody();
		      }
		    };

		    // 3. Let processBodyError given e be these steps:
		    const processBodyError = e => {
		      // 1. If fetchParams is canceled, then abort these steps.
		      if (isCancelled(fetchParams)) {
		        return;
		      }

		      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
		      if (e.name === 'AbortError') {
		        fetchParams.controller.abort();
		      } else {
		        fetchParams.controller.terminate(e);
		      }
		    };

		    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
		    // processBodyError, and fetchParams’s task destination.
		    requestBody = async function* () {
		      try {
		        for await (const bytes of request.body.stream) {
		          yield* processBodyChunk(bytes);
		        }
		        processEndOfBody();
		      } catch (err) {
		        processBodyError(err);
		      }
		    }();
		  }
		  try {
		    // socket is only provided for websockets
		    const {
		      body,
		      status,
		      statusText,
		      headersList,
		      socket
		    } = await dispatch({
		      body: requestBody
		    });
		    if (socket) {
		      response = makeResponse({
		        status,
		        statusText,
		        headersList,
		        socket
		      });
		    } else {
		      const iterator = body[Symbol.asyncIterator]();
		      fetchParams.controller.next = () => iterator.next();
		      response = makeResponse({
		        status,
		        statusText,
		        headersList
		      });
		    }
		  } catch (err) {
		    // 10. If aborted, then:
		    if (err.name === 'AbortError') {
		      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
		      fetchParams.controller.connection.destroy();

		      // 2. Return the appropriate network error for fetchParams.
		      return makeAppropriateNetworkError(fetchParams, err);
		    }
		    return makeNetworkError(err);
		  }

		  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
		  // if it is suspended.
		  const pullAlgorithm = () => {
		    fetchParams.controller.resume();
		  };

		  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
		  // controller with reason, given reason.
		  const cancelAlgorithm = reason => {
		    fetchParams.controller.abort(reason);
		  };

		  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
		  // the user agent.
		  // TODO

		  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
		  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
		  // TODO

		  // 15. Let stream be a new ReadableStream.
		  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
		  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
		  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
		  if (!ReadableStream) {
		    ReadableStream = require$$13__default["default"].ReadableStream;
		  }
		  const stream = new ReadableStream({
		    async start(controller) {
		      fetchParams.controller.controller = controller;
		    },
		    async pull(controller) {
		      await pullAlgorithm();
		    },
		    async cancel(reason) {
		      await cancelAlgorithm(reason);
		    }
		  }, {
		    highWaterMark: 0,
		    size() {
		      return 1;
		    }
		  });

		  // 17. Run these steps, but abort when the ongoing fetch is terminated:

		  //    1. Set response’s body to a new body whose stream is stream.
		  response.body = {
		    stream
		  };

		  //    2. If response is not a network error and request’s cache mode is
		  //    not "no-store", then update response in httpCache for request.
		  //    TODO

		  //    3. If includeCredentials is true and the user agent is not configured
		  //    to block cookies for request (see section 7 of [COOKIES]), then run the
		  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
		  //    the value of each header whose name is a byte-case-insensitive match for
		  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
		  //    TODO

		  // 18. If aborted, then:
		  // TODO

		  // 19. Run these steps in parallel:

		  //    1. Run these steps, but abort when fetchParams is canceled:
		  fetchParams.controller.on('terminated', onAborted);
		  fetchParams.controller.resume = async () => {
		    // 1. While true
		    while (true) {
		      // 1-3. See onData...

		      // 4. Set bytes to the result of handling content codings given
		      // codings and bytes.
		      let bytes;
		      let isFailure;
		      try {
		        const {
		          done,
		          value
		        } = await fetchParams.controller.next();
		        if (isAborted(fetchParams)) {
		          break;
		        }
		        bytes = done ? undefined : value;
		      } catch (err) {
		        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
		          // zlib doesn't like empty streams.
		          bytes = undefined;
		        } else {
		          bytes = err;

		          // err may be propagated from the result of calling readablestream.cancel,
		          // which might not be an error. https://github.com/nodejs/undici/issues/2009
		          isFailure = true;
		        }
		      }
		      if (bytes === undefined) {
		        // 2. Otherwise, if the bytes transmission for response’s message
		        // body is done normally and stream is readable, then close
		        // stream, finalize response for fetchParams and response, and
		        // abort these in-parallel steps.
		        readableStreamClose(fetchParams.controller.controller);
		        finalizeResponse(fetchParams, response);
		        return;
		      }

		      // 5. Increase timingInfo’s decoded body size by bytes’s length.
		      timingInfo.decodedBodySize += bytes?.byteLength ?? 0;

		      // 6. If bytes is failure, then terminate fetchParams’s controller.
		      if (isFailure) {
		        fetchParams.controller.terminate(bytes);
		        return;
		      }

		      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
		      // into stream.
		      fetchParams.controller.controller.enqueue(new Uint8Array(bytes));

		      // 8. If stream is errored, then terminate the ongoing fetch.
		      if (isErrored(stream)) {
		        fetchParams.controller.terminate();
		        return;
		      }

		      // 9. If stream doesn’t need more data ask the user agent to suspend
		      // the ongoing fetch.
		      if (!fetchParams.controller.controller.desiredSize) {
		        return;
		      }
		    }
		  };

		  //    2. If aborted, then:
		  function onAborted(reason) {
		    // 2. If fetchParams is aborted, then:
		    if (isAborted(fetchParams)) {
		      // 1. Set response’s aborted flag.
		      response.aborted = true;

		      // 2. If stream is readable, then error stream with the result of
		      //    deserialize a serialized abort reason given fetchParams’s
		      //    controller’s serialized abort reason and an
		      //    implementation-defined realm.
		      if (isReadable(stream)) {
		        fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
		      }
		    } else {
		      // 3. Otherwise, if stream is readable, error stream with a TypeError.
		      if (isReadable(stream)) {
		        fetchParams.controller.controller.error(new TypeError('terminated', {
		          cause: isErrorLike(reason) ? reason : undefined
		        }));
		      }
		    }

		    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
		    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
		    fetchParams.controller.connection.destroy();
		  }

		  // 20. Return response.
		  return response;
		  async function dispatch({
		    body
		  }) {
		    const url = requestCurrentURL(request);
		    /** @type {import('../..').Agent} */
		    const agent = fetchParams.controller.dispatcher;
		    return new Promise((resolve, reject) => agent.dispatch({
		      path: url.pathname + url.search,
		      origin: url.origin,
		      method: request.method,
		      body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
		      headers: request.headersList.entries,
		      maxRedirections: 0,
		      upgrade: request.mode === 'websocket' ? 'websocket' : undefined
		    }, {
		      body: null,
		      abort: null,
		      onConnect(abort) {
		        // TODO (fix): Do we need connection here?
		        const {
		          connection
		        } = fetchParams.controller;
		        if (connection.destroyed) {
		          abort(new DOMException('The operation was aborted.', 'AbortError'));
		        } else {
		          fetchParams.controller.on('terminated', abort);
		          this.abort = connection.abort = abort;
		        }
		      },
		      onHeaders(status, headersList, resume, statusText) {
		        if (status < 200) {
		          return;
		        }
		        let codings = [];
		        let location = '';
		        const headers = new Headers();

		        // For H2, the headers are a plain JS object
		        // We distinguish between them and iterate accordingly
		        if (Array.isArray(headersList)) {
		          for (let n = 0; n < headersList.length; n += 2) {
		            const key = headersList[n + 0].toString('latin1');
		            const val = headersList[n + 1].toString('latin1');
		            if (key.toLowerCase() === 'content-encoding') {
		              // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
		              // "All content-coding values are case-insensitive..."
		              codings = val.toLowerCase().split(',').map(x => x.trim());
		            } else if (key.toLowerCase() === 'location') {
		              location = val;
		            }
		            headers[kHeadersList].append(key, val);
		          }
		        } else {
		          const keys = Object.keys(headersList);
		          for (const key of keys) {
		            const val = headersList[key];
		            if (key.toLowerCase() === 'content-encoding') {
		              // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
		              // "All content-coding values are case-insensitive..."
		              codings = val.toLowerCase().split(',').map(x => x.trim()).reverse();
		            } else if (key.toLowerCase() === 'location') {
		              location = val;
		            }
		            headers[kHeadersList].append(key, val);
		          }
		        }
		        this.body = new Readable({
		          read: resume
		        });
		        const decoders = [];
		        const willFollow = request.redirect === 'follow' && location && redirectStatusSet.has(status);

		        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
		        if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
		          for (const coding of codings) {
		            // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
		            if (coding === 'x-gzip' || coding === 'gzip') {
		              decoders.push(zlib.createGunzip({
		                // Be less strict when decoding compressed responses, since sometimes
		                // servers send slightly invalid responses that are still accepted
		                // by common browsers.
		                // Always using Z_SYNC_FLUSH is what cURL does.
		                flush: zlib.constants.Z_SYNC_FLUSH,
		                finishFlush: zlib.constants.Z_SYNC_FLUSH
		              }));
		            } else if (coding === 'deflate') {
		              decoders.push(zlib.createInflate());
		            } else if (coding === 'br') {
		              decoders.push(zlib.createBrotliDecompress());
		            } else {
		              decoders.length = 0;
		              break;
		            }
		          }
		        }
		        resolve({
		          status,
		          statusText,
		          headersList: headers[kHeadersList],
		          body: decoders.length ? pipeline(this.body, ...decoders, () => {}) : this.body.on('error', () => {})
		        });
		        return true;
		      },
		      onData(chunk) {
		        if (fetchParams.controller.dump) {
		          return;
		        }

		        // 1. If one or more bytes have been transmitted from response’s
		        // message body, then:

		        //  1. Let bytes be the transmitted bytes.
		        const bytes = chunk;

		        //  2. Let codings be the result of extracting header list values
		        //  given `Content-Encoding` and response’s header list.
		        //  See pullAlgorithm.

		        //  3. Increase timingInfo’s encoded body size by bytes’s length.
		        timingInfo.encodedBodySize += bytes.byteLength;

		        //  4. See pullAlgorithm...

		        return this.body.push(bytes);
		      },
		      onComplete() {
		        if (this.abort) {
		          fetchParams.controller.off('terminated', this.abort);
		        }
		        fetchParams.controller.ended = true;
		        this.body.push(null);
		      },
		      onError(error) {
		        if (this.abort) {
		          fetchParams.controller.off('terminated', this.abort);
		        }
		        this.body?.destroy(error);
		        fetchParams.controller.terminate(error);
		        reject(error);
		      },
		      onUpgrade(status, headersList, socket) {
		        if (status !== 101) {
		          return;
		        }
		        const headers = new Headers();
		        for (let n = 0; n < headersList.length; n += 2) {
		          const key = headersList[n + 0].toString('latin1');
		          const val = headersList[n + 1].toString('latin1');
		          headers[kHeadersList].append(key, val);
		        }
		        resolve({
		          status,
		          statusText: STATUS_CODES[status],
		          headersList: headers[kHeadersList],
		          socket
		        });
		        return true;
		      }
		    }));
		  }
		}
		fetch_1 = {
		  fetch,
		  Fetch,
		  fetching,
		  finalizeAndReportTiming
		};
		return fetch_1;
	}

	var symbols$2;
	var hasRequiredSymbols$2;

	function requireSymbols$2 () {
		if (hasRequiredSymbols$2) return symbols$2;
		hasRequiredSymbols$2 = 1;

		symbols$2 = {
		  kState: Symbol('FileReader state'),
		  kResult: Symbol('FileReader result'),
		  kError: Symbol('FileReader error'),
		  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
		  kEvents: Symbol('FileReader events'),
		  kAborted: Symbol('FileReader aborted')
		};
		return symbols$2;
	}

	var progressevent;
	var hasRequiredProgressevent;

	function requireProgressevent () {
		if (hasRequiredProgressevent) return progressevent;
		hasRequiredProgressevent = 1;

		const {
		  webidl
		} = requireWebidl();
		const kState = Symbol('ProgressEvent state');

		/**
		 * @see https://xhr.spec.whatwg.org/#progressevent
		 */
		class ProgressEvent extends Event {
		  constructor(type, eventInitDict = {}) {
		    type = webidl.converters.DOMString(type);
		    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
		    super(type, eventInitDict);
		    this[kState] = {
		      lengthComputable: eventInitDict.lengthComputable,
		      loaded: eventInitDict.loaded,
		      total: eventInitDict.total
		    };
		  }
		  get lengthComputable() {
		    webidl.brandCheck(this, ProgressEvent);
		    return this[kState].lengthComputable;
		  }
		  get loaded() {
		    webidl.brandCheck(this, ProgressEvent);
		    return this[kState].loaded;
		  }
		  get total() {
		    webidl.brandCheck(this, ProgressEvent);
		    return this[kState].total;
		  }
		}
		webidl.converters.ProgressEventInit = webidl.dictionaryConverter([{
		  key: 'lengthComputable',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'loaded',
		  converter: webidl.converters['unsigned long long'],
		  defaultValue: 0
		}, {
		  key: 'total',
		  converter: webidl.converters['unsigned long long'],
		  defaultValue: 0
		}, {
		  key: 'bubbles',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'cancelable',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'composed',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}]);
		progressevent = {
		  ProgressEvent
		};
		return progressevent;
	}

	var encoding;
	var hasRequiredEncoding;

	function requireEncoding () {
		if (hasRequiredEncoding) return encoding;
		hasRequiredEncoding = 1;

		/**
		 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
		 * @param {string|undefined} label
		 */
		function getEncoding(label) {
		  if (!label) {
		    return 'failure';
		  }

		  // 1. Remove any leading and trailing ASCII whitespace from label.
		  // 2. If label is an ASCII case-insensitive match for any of the
		  //    labels listed in the table below, then return the
		  //    corresponding encoding; otherwise return failure.
		  switch (label.trim().toLowerCase()) {
		    case 'unicode-1-1-utf-8':
		    case 'unicode11utf8':
		    case 'unicode20utf8':
		    case 'utf-8':
		    case 'utf8':
		    case 'x-unicode20utf8':
		      return 'UTF-8';
		    case '866':
		    case 'cp866':
		    case 'csibm866':
		    case 'ibm866':
		      return 'IBM866';
		    case 'csisolatin2':
		    case 'iso-8859-2':
		    case 'iso-ir-101':
		    case 'iso8859-2':
		    case 'iso88592':
		    case 'iso_8859-2':
		    case 'iso_8859-2:1987':
		    case 'l2':
		    case 'latin2':
		      return 'ISO-8859-2';
		    case 'csisolatin3':
		    case 'iso-8859-3':
		    case 'iso-ir-109':
		    case 'iso8859-3':
		    case 'iso88593':
		    case 'iso_8859-3':
		    case 'iso_8859-3:1988':
		    case 'l3':
		    case 'latin3':
		      return 'ISO-8859-3';
		    case 'csisolatin4':
		    case 'iso-8859-4':
		    case 'iso-ir-110':
		    case 'iso8859-4':
		    case 'iso88594':
		    case 'iso_8859-4':
		    case 'iso_8859-4:1988':
		    case 'l4':
		    case 'latin4':
		      return 'ISO-8859-4';
		    case 'csisolatincyrillic':
		    case 'cyrillic':
		    case 'iso-8859-5':
		    case 'iso-ir-144':
		    case 'iso8859-5':
		    case 'iso88595':
		    case 'iso_8859-5':
		    case 'iso_8859-5:1988':
		      return 'ISO-8859-5';
		    case 'arabic':
		    case 'asmo-708':
		    case 'csiso88596e':
		    case 'csiso88596i':
		    case 'csisolatinarabic':
		    case 'ecma-114':
		    case 'iso-8859-6':
		    case 'iso-8859-6-e':
		    case 'iso-8859-6-i':
		    case 'iso-ir-127':
		    case 'iso8859-6':
		    case 'iso88596':
		    case 'iso_8859-6':
		    case 'iso_8859-6:1987':
		      return 'ISO-8859-6';
		    case 'csisolatingreek':
		    case 'ecma-118':
		    case 'elot_928':
		    case 'greek':
		    case 'greek8':
		    case 'iso-8859-7':
		    case 'iso-ir-126':
		    case 'iso8859-7':
		    case 'iso88597':
		    case 'iso_8859-7':
		    case 'iso_8859-7:1987':
		    case 'sun_eu_greek':
		      return 'ISO-8859-7';
		    case 'csiso88598e':
		    case 'csisolatinhebrew':
		    case 'hebrew':
		    case 'iso-8859-8':
		    case 'iso-8859-8-e':
		    case 'iso-ir-138':
		    case 'iso8859-8':
		    case 'iso88598':
		    case 'iso_8859-8':
		    case 'iso_8859-8:1988':
		    case 'visual':
		      return 'ISO-8859-8';
		    case 'csiso88598i':
		    case 'iso-8859-8-i':
		    case 'logical':
		      return 'ISO-8859-8-I';
		    case 'csisolatin6':
		    case 'iso-8859-10':
		    case 'iso-ir-157':
		    case 'iso8859-10':
		    case 'iso885910':
		    case 'l6':
		    case 'latin6':
		      return 'ISO-8859-10';
		    case 'iso-8859-13':
		    case 'iso8859-13':
		    case 'iso885913':
		      return 'ISO-8859-13';
		    case 'iso-8859-14':
		    case 'iso8859-14':
		    case 'iso885914':
		      return 'ISO-8859-14';
		    case 'csisolatin9':
		    case 'iso-8859-15':
		    case 'iso8859-15':
		    case 'iso885915':
		    case 'iso_8859-15':
		    case 'l9':
		      return 'ISO-8859-15';
		    case 'iso-8859-16':
		      return 'ISO-8859-16';
		    case 'cskoi8r':
		    case 'koi':
		    case 'koi8':
		    case 'koi8-r':
		    case 'koi8_r':
		      return 'KOI8-R';
		    case 'koi8-ru':
		    case 'koi8-u':
		      return 'KOI8-U';
		    case 'csmacintosh':
		    case 'mac':
		    case 'macintosh':
		    case 'x-mac-roman':
		      return 'macintosh';
		    case 'iso-8859-11':
		    case 'iso8859-11':
		    case 'iso885911':
		    case 'tis-620':
		    case 'windows-874':
		      return 'windows-874';
		    case 'cp1250':
		    case 'windows-1250':
		    case 'x-cp1250':
		      return 'windows-1250';
		    case 'cp1251':
		    case 'windows-1251':
		    case 'x-cp1251':
		      return 'windows-1251';
		    case 'ansi_x3.4-1968':
		    case 'ascii':
		    case 'cp1252':
		    case 'cp819':
		    case 'csisolatin1':
		    case 'ibm819':
		    case 'iso-8859-1':
		    case 'iso-ir-100':
		    case 'iso8859-1':
		    case 'iso88591':
		    case 'iso_8859-1':
		    case 'iso_8859-1:1987':
		    case 'l1':
		    case 'latin1':
		    case 'us-ascii':
		    case 'windows-1252':
		    case 'x-cp1252':
		      return 'windows-1252';
		    case 'cp1253':
		    case 'windows-1253':
		    case 'x-cp1253':
		      return 'windows-1253';
		    case 'cp1254':
		    case 'csisolatin5':
		    case 'iso-8859-9':
		    case 'iso-ir-148':
		    case 'iso8859-9':
		    case 'iso88599':
		    case 'iso_8859-9':
		    case 'iso_8859-9:1989':
		    case 'l5':
		    case 'latin5':
		    case 'windows-1254':
		    case 'x-cp1254':
		      return 'windows-1254';
		    case 'cp1255':
		    case 'windows-1255':
		    case 'x-cp1255':
		      return 'windows-1255';
		    case 'cp1256':
		    case 'windows-1256':
		    case 'x-cp1256':
		      return 'windows-1256';
		    case 'cp1257':
		    case 'windows-1257':
		    case 'x-cp1257':
		      return 'windows-1257';
		    case 'cp1258':
		    case 'windows-1258':
		    case 'x-cp1258':
		      return 'windows-1258';
		    case 'x-mac-cyrillic':
		    case 'x-mac-ukrainian':
		      return 'x-mac-cyrillic';
		    case 'chinese':
		    case 'csgb2312':
		    case 'csiso58gb231280':
		    case 'gb2312':
		    case 'gb_2312':
		    case 'gb_2312-80':
		    case 'gbk':
		    case 'iso-ir-58':
		    case 'x-gbk':
		      return 'GBK';
		    case 'gb18030':
		      return 'gb18030';
		    case 'big5':
		    case 'big5-hkscs':
		    case 'cn-big5':
		    case 'csbig5':
		    case 'x-x-big5':
		      return 'Big5';
		    case 'cseucpkdfmtjapanese':
		    case 'euc-jp':
		    case 'x-euc-jp':
		      return 'EUC-JP';
		    case 'csiso2022jp':
		    case 'iso-2022-jp':
		      return 'ISO-2022-JP';
		    case 'csshiftjis':
		    case 'ms932':
		    case 'ms_kanji':
		    case 'shift-jis':
		    case 'shift_jis':
		    case 'sjis':
		    case 'windows-31j':
		    case 'x-sjis':
		      return 'Shift_JIS';
		    case 'cseuckr':
		    case 'csksc56011987':
		    case 'euc-kr':
		    case 'iso-ir-149':
		    case 'korean':
		    case 'ks_c_5601-1987':
		    case 'ks_c_5601-1989':
		    case 'ksc5601':
		    case 'ksc_5601':
		    case 'windows-949':
		      return 'EUC-KR';
		    case 'csiso2022kr':
		    case 'hz-gb-2312':
		    case 'iso-2022-cn':
		    case 'iso-2022-cn-ext':
		    case 'iso-2022-kr':
		    case 'replacement':
		      return 'replacement';
		    case 'unicodefffe':
		    case 'utf-16be':
		      return 'UTF-16BE';
		    case 'csunicode':
		    case 'iso-10646-ucs-2':
		    case 'ucs-2':
		    case 'unicode':
		    case 'unicodefeff':
		    case 'utf-16':
		    case 'utf-16le':
		      return 'UTF-16LE';
		    case 'x-user-defined':
		      return 'x-user-defined';
		    default:
		      return 'failure';
		  }
		}
		encoding = {
		  getEncoding
		};
		return encoding;
	}

	var util$3;
	var hasRequiredUtil$3;

	function requireUtil$3 () {
		if (hasRequiredUtil$3) return util$3;
		hasRequiredUtil$3 = 1;

		const {
		  kState,
		  kError,
		  kResult,
		  kAborted,
		  kLastProgressEventFired
		} = requireSymbols$2();
		const {
		  ProgressEvent
		} = requireProgressevent();
		const {
		  getEncoding
		} = requireEncoding();
		const {
		  DOMException
		} = requireConstants$3();
		const {
		  serializeAMimeType,
		  parseMIMEType
		} = requireDataURL();
		const {
		  types
		} = require$$1__default["default"];
		const {
		  StringDecoder
		} = require$$6__default$1["default"];
		const {
		  btoa
		} = require$$0__default$4["default"];

		/** @type {PropertyDescriptor} */
		const staticPropertyDescriptors = {
		  enumerable: true,
		  writable: false,
		  configurable: false
		};

		/**
		 * @see https://w3c.github.io/FileAPI/#readOperation
		 * @param {import('./filereader').FileReader} fr
		 * @param {import('buffer').Blob} blob
		 * @param {string} type
		 * @param {string?} encodingName
		 */
		function readOperation(fr, blob, type, encodingName) {
		  // 1. If fr’s state is "loading", throw an InvalidStateError
		  //    DOMException.
		  if (fr[kState] === 'loading') {
		    throw new DOMException('Invalid state', 'InvalidStateError');
		  }

		  // 2. Set fr’s state to "loading".
		  fr[kState] = 'loading';

		  // 3. Set fr’s result to null.
		  fr[kResult] = null;

		  // 4. Set fr’s error to null.
		  fr[kError] = null;

		  // 5. Let stream be the result of calling get stream on blob.
		  /** @type {import('stream/web').ReadableStream} */
		  const stream = blob.stream();

		  // 6. Let reader be the result of getting a reader from stream.
		  const reader = stream.getReader();

		  // 7. Let bytes be an empty byte sequence.
		  /** @type {Uint8Array[]} */
		  const bytes = [];

		  // 8. Let chunkPromise be the result of reading a chunk from
		  //    stream with reader.
		  let chunkPromise = reader.read();

		  // 9. Let isFirstChunk be true.
		  let isFirstChunk = true

		  // 10. In parallel, while true:
		  // Note: "In parallel" just means non-blocking
		  // Note 2: readOperation itself cannot be async as double
		  // reading the body would then reject the promise, instead
		  // of throwing an error.
		  ;
		  (async () => {
		    while (!fr[kAborted]) {
		      // 1. Wait for chunkPromise to be fulfilled or rejected.
		      try {
		        const {
		          done,
		          value
		        } = await chunkPromise;

		        // 2. If chunkPromise is fulfilled, and isFirstChunk is
		        //    true, queue a task to fire a progress event called
		        //    loadstart at fr.
		        if (isFirstChunk && !fr[kAborted]) {
		          queueMicrotask(() => {
		            fireAProgressEvent('loadstart', fr);
		          });
		        }

		        // 3. Set isFirstChunk to false.
		        isFirstChunk = false;

		        // 4. If chunkPromise is fulfilled with an object whose
		        //    done property is false and whose value property is
		        //    a Uint8Array object, run these steps:
		        if (!done && types.isUint8Array(value)) {
		          // 1. Let bs be the byte sequence represented by the
		          //    Uint8Array object.

		          // 2. Append bs to bytes.
		          bytes.push(value);

		          // 3. If roughly 50ms have passed since these steps
		          //    were last invoked, queue a task to fire a
		          //    progress event called progress at fr.
		          if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
		            fr[kLastProgressEventFired] = Date.now();
		            queueMicrotask(() => {
		              fireAProgressEvent('progress', fr);
		            });
		          }

		          // 4. Set chunkPromise to the result of reading a
		          //    chunk from stream with reader.
		          chunkPromise = reader.read();
		        } else if (done) {
		          // 5. Otherwise, if chunkPromise is fulfilled with an
		          //    object whose done property is true, queue a task
		          //    to run the following steps and abort this algorithm:
		          queueMicrotask(() => {
		            // 1. Set fr’s state to "done".
		            fr[kState] = 'done';

		            // 2. Let result be the result of package data given
		            //    bytes, type, blob’s type, and encodingName.
		            try {
		              const result = packageData(bytes, type, blob.type, encodingName);

		              // 4. Else:

		              if (fr[kAborted]) {
		                return;
		              }

		              // 1. Set fr’s result to result.
		              fr[kResult] = result;

		              // 2. Fire a progress event called load at the fr.
		              fireAProgressEvent('load', fr);
		            } catch (error) {
		              // 3. If package data threw an exception error:

		              // 1. Set fr’s error to error.
		              fr[kError] = error;

		              // 2. Fire a progress event called error at fr.
		              fireAProgressEvent('error', fr);
		            }

		            // 5. If fr’s state is not "loading", fire a progress
		            //    event called loadend at the fr.
		            if (fr[kState] !== 'loading') {
		              fireAProgressEvent('loadend', fr);
		            }
		          });
		          break;
		        }
		      } catch (error) {
		        if (fr[kAborted]) {
		          return;
		        }

		        // 6. Otherwise, if chunkPromise is rejected with an
		        //    error error, queue a task to run the following
		        //    steps and abort this algorithm:
		        queueMicrotask(() => {
		          // 1. Set fr’s state to "done".
		          fr[kState] = 'done';

		          // 2. Set fr’s error to error.
		          fr[kError] = error;

		          // 3. Fire a progress event called error at fr.
		          fireAProgressEvent('error', fr);

		          // 4. If fr’s state is not "loading", fire a progress
		          //    event called loadend at fr.
		          if (fr[kState] !== 'loading') {
		            fireAProgressEvent('loadend', fr);
		          }
		        });
		        break;
		      }
		    }
		  })();
		}

		/**
		 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
		 * @see https://dom.spec.whatwg.org/#concept-event-fire
		 * @param {string} e The name of the event
		 * @param {import('./filereader').FileReader} reader
		 */
		function fireAProgressEvent(e, reader) {
		  // The progress event e does not bubble. e.bubbles must be false
		  // The progress event e is NOT cancelable. e.cancelable must be false
		  const event = new ProgressEvent(e, {
		    bubbles: false,
		    cancelable: false
		  });
		  reader.dispatchEvent(event);
		}

		/**
		 * @see https://w3c.github.io/FileAPI/#blob-package-data
		 * @param {Uint8Array[]} bytes
		 * @param {string} type
		 * @param {string?} mimeType
		 * @param {string?} encodingName
		 */
		function packageData(bytes, type, mimeType, encodingName) {
		  // 1. A Blob has an associated package data algorithm, given
		  //    bytes, a type, a optional mimeType, and a optional
		  //    encodingName, which switches on type and runs the
		  //    associated steps:

		  switch (type) {
		    case 'DataURL':
		      {
		        // 1. Return bytes as a DataURL [RFC2397] subject to
		        //    the considerations below:
		        //  * Use mimeType as part of the Data URL if it is
		        //    available in keeping with the Data URL
		        //    specification [RFC2397].
		        //  * If mimeType is not available return a Data URL
		        //    without a media-type. [RFC2397].

		        // https://datatracker.ietf.org/doc/html/rfc2397#section-3
		        // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
		        // mediatype  := [ type "/" subtype ] *( ";" parameter )
		        // data       := *urlchar
		        // parameter  := attribute "=" value
		        let dataURL = 'data:';
		        const parsed = parseMIMEType(mimeType || 'application/octet-stream');
		        if (parsed !== 'failure') {
		          dataURL += serializeAMimeType(parsed);
		        }
		        dataURL += ';base64,';
		        const decoder = new StringDecoder('latin1');
		        for (const chunk of bytes) {
		          dataURL += btoa(decoder.write(chunk));
		        }
		        dataURL += btoa(decoder.end());
		        return dataURL;
		      }
		    case 'Text':
		      {
		        // 1. Let encoding be failure
		        let encoding = 'failure';

		        // 2. If the encodingName is present, set encoding to the
		        //    result of getting an encoding from encodingName.
		        if (encodingName) {
		          encoding = getEncoding(encodingName);
		        }

		        // 3. If encoding is failure, and mimeType is present:
		        if (encoding === 'failure' && mimeType) {
		          // 1. Let type be the result of parse a MIME type
		          //    given mimeType.
		          const type = parseMIMEType(mimeType);

		          // 2. If type is not failure, set encoding to the result
		          //    of getting an encoding from type’s parameters["charset"].
		          if (type !== 'failure') {
		            encoding = getEncoding(type.parameters.get('charset'));
		          }
		        }

		        // 4. If encoding is failure, then set encoding to UTF-8.
		        if (encoding === 'failure') {
		          encoding = 'UTF-8';
		        }

		        // 5. Decode bytes using fallback encoding encoding, and
		        //    return the result.
		        return decode(bytes, encoding);
		      }
		    case 'ArrayBuffer':
		      {
		        // Return a new ArrayBuffer whose contents are bytes.
		        const sequence = combineByteSequences(bytes);
		        return sequence.buffer;
		      }
		    case 'BinaryString':
		      {
		        // Return bytes as a binary string, in which every byte
		        //  is represented by a code unit of equal value [0..255].
		        let binaryString = '';
		        const decoder = new StringDecoder('latin1');
		        for (const chunk of bytes) {
		          binaryString += decoder.write(chunk);
		        }
		        binaryString += decoder.end();
		        return binaryString;
		      }
		  }
		}

		/**
		 * @see https://encoding.spec.whatwg.org/#decode
		 * @param {Uint8Array[]} ioQueue
		 * @param {string} encoding
		 */
		function decode(ioQueue, encoding) {
		  const bytes = combineByteSequences(ioQueue);

		  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
		  const BOMEncoding = BOMSniffing(bytes);
		  let slice = 0;

		  // 2. If BOMEncoding is non-null:
		  if (BOMEncoding !== null) {
		    // 1. Set encoding to BOMEncoding.
		    encoding = BOMEncoding;

		    // 2. Read three bytes from ioQueue, if BOMEncoding is
		    //    UTF-8; otherwise read two bytes.
		    //    (Do nothing with those bytes.)
		    slice = BOMEncoding === 'UTF-8' ? 3 : 2;
		  }

		  // 3. Process a queue with an instance of encoding’s
		  //    decoder, ioQueue, output, and "replacement".

		  // 4. Return output.

		  const sliced = bytes.slice(slice);
		  return new TextDecoder(encoding).decode(sliced);
		}

		/**
		 * @see https://encoding.spec.whatwg.org/#bom-sniff
		 * @param {Uint8Array} ioQueue
		 */
		function BOMSniffing(ioQueue) {
		  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
		  //    converted to a byte sequence.
		  const [a, b, c] = ioQueue;

		  // 2. For each of the rows in the table below, starting with
		  //    the first one and going down, if BOM starts with the
		  //    bytes given in the first column, then return the
		  //    encoding given in the cell in the second column of that
		  //    row. Otherwise, return null.
		  if (a === 0xEF && b === 0xBB && c === 0xBF) {
		    return 'UTF-8';
		  } else if (a === 0xFE && b === 0xFF) {
		    return 'UTF-16BE';
		  } else if (a === 0xFF && b === 0xFE) {
		    return 'UTF-16LE';
		  }
		  return null;
		}

		/**
		 * @param {Uint8Array[]} sequences
		 */
		function combineByteSequences(sequences) {
		  const size = sequences.reduce((a, b) => {
		    return a + b.byteLength;
		  }, 0);
		  let offset = 0;
		  return sequences.reduce((a, b) => {
		    a.set(b, offset);
		    offset += b.byteLength;
		    return a;
		  }, new Uint8Array(size));
		}
		util$3 = {
		  staticPropertyDescriptors,
		  readOperation,
		  fireAProgressEvent
		};
		return util$3;
	}

	var filereader;
	var hasRequiredFilereader;

	function requireFilereader () {
		if (hasRequiredFilereader) return filereader;
		hasRequiredFilereader = 1;

		const {
		  staticPropertyDescriptors,
		  readOperation,
		  fireAProgressEvent
		} = requireUtil$3();
		const {
		  kState,
		  kError,
		  kResult,
		  kEvents,
		  kAborted
		} = requireSymbols$2();
		const {
		  webidl
		} = requireWebidl();
		const {
		  kEnumerableProperty
		} = requireUtil$6();
		class FileReader extends EventTarget {
		  constructor() {
		    super();
		    this[kState] = 'empty';
		    this[kResult] = null;
		    this[kError] = null;
		    this[kEvents] = {
		      loadend: null,
		      error: null,
		      abort: null,
		      load: null,
		      progress: null,
		      loadstart: null
		    };
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
		   * @param {import('buffer').Blob} blob
		   */
		  readAsArrayBuffer(blob) {
		    webidl.brandCheck(this, FileReader);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FileReader.readAsArrayBuffer'
		    });
		    blob = webidl.converters.Blob(blob, {
		      strict: false
		    });

		    // The readAsArrayBuffer(blob) method, when invoked,
		    // must initiate a read operation for blob with ArrayBuffer.
		    readOperation(this, blob, 'ArrayBuffer');
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
		   * @param {import('buffer').Blob} blob
		   */
		  readAsBinaryString(blob) {
		    webidl.brandCheck(this, FileReader);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FileReader.readAsBinaryString'
		    });
		    blob = webidl.converters.Blob(blob, {
		      strict: false
		    });

		    // The readAsBinaryString(blob) method, when invoked,
		    // must initiate a read operation for blob with BinaryString.
		    readOperation(this, blob, 'BinaryString');
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#readAsDataText
		   * @param {import('buffer').Blob} blob
		   * @param {string?} encoding
		   */
		  readAsText(blob, encoding = undefined) {
		    webidl.brandCheck(this, FileReader);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FileReader.readAsText'
		    });
		    blob = webidl.converters.Blob(blob, {
		      strict: false
		    });
		    if (encoding !== undefined) {
		      encoding = webidl.converters.DOMString(encoding);
		    }

		    // The readAsText(blob, encoding) method, when invoked,
		    // must initiate a read operation for blob with Text and encoding.
		    readOperation(this, blob, 'Text', encoding);
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
		   * @param {import('buffer').Blob} blob
		   */
		  readAsDataURL(blob) {
		    webidl.brandCheck(this, FileReader);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'FileReader.readAsDataURL'
		    });
		    blob = webidl.converters.Blob(blob, {
		      strict: false
		    });

		    // The readAsDataURL(blob) method, when invoked, must
		    // initiate a read operation for blob with DataURL.
		    readOperation(this, blob, 'DataURL');
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dfn-abort
		   */
		  abort() {
		    // 1. If this's state is "empty" or if this's state is
		    //    "done" set this's result to null and terminate
		    //    this algorithm.
		    if (this[kState] === 'empty' || this[kState] === 'done') {
		      this[kResult] = null;
		      return;
		    }

		    // 2. If this's state is "loading" set this's state to
		    //    "done" and set this's result to null.
		    if (this[kState] === 'loading') {
		      this[kState] = 'done';
		      this[kResult] = null;
		    }

		    // 3. If there are any tasks from this on the file reading
		    //    task source in an affiliated task queue, then remove
		    //    those tasks from that task queue.
		    this[kAborted] = true;

		    // 4. Terminate the algorithm for the read method being processed.
		    // TODO

		    // 5. Fire a progress event called abort at this.
		    fireAProgressEvent('abort', this);

		    // 6. If this's state is not "loading", fire a progress
		    //    event called loadend at this.
		    if (this[kState] !== 'loading') {
		      fireAProgressEvent('loadend', this);
		    }
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
		   */
		  get readyState() {
		    webidl.brandCheck(this, FileReader);
		    switch (this[kState]) {
		      case 'empty':
		        return this.EMPTY;
		      case 'loading':
		        return this.LOADING;
		      case 'done':
		        return this.DONE;
		    }
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
		   */
		  get result() {
		    webidl.brandCheck(this, FileReader);

		    // The result attribute’s getter, when invoked, must return
		    // this's result.
		    return this[kResult];
		  }

		  /**
		   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
		   */
		  get error() {
		    webidl.brandCheck(this, FileReader);

		    // The error attribute’s getter, when invoked, must return
		    // this's error.
		    return this[kError];
		  }
		  get onloadend() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].loadend;
		  }
		  set onloadend(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].loadend) {
		      this.removeEventListener('loadend', this[kEvents].loadend);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].loadend = fn;
		      this.addEventListener('loadend', fn);
		    } else {
		      this[kEvents].loadend = null;
		    }
		  }
		  get onerror() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].error;
		  }
		  set onerror(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].error) {
		      this.removeEventListener('error', this[kEvents].error);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].error = fn;
		      this.addEventListener('error', fn);
		    } else {
		      this[kEvents].error = null;
		    }
		  }
		  get onloadstart() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].loadstart;
		  }
		  set onloadstart(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].loadstart) {
		      this.removeEventListener('loadstart', this[kEvents].loadstart);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].loadstart = fn;
		      this.addEventListener('loadstart', fn);
		    } else {
		      this[kEvents].loadstart = null;
		    }
		  }
		  get onprogress() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].progress;
		  }
		  set onprogress(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].progress) {
		      this.removeEventListener('progress', this[kEvents].progress);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].progress = fn;
		      this.addEventListener('progress', fn);
		    } else {
		      this[kEvents].progress = null;
		    }
		  }
		  get onload() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].load;
		  }
		  set onload(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].load) {
		      this.removeEventListener('load', this[kEvents].load);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].load = fn;
		      this.addEventListener('load', fn);
		    } else {
		      this[kEvents].load = null;
		    }
		  }
		  get onabort() {
		    webidl.brandCheck(this, FileReader);
		    return this[kEvents].abort;
		  }
		  set onabort(fn) {
		    webidl.brandCheck(this, FileReader);
		    if (this[kEvents].abort) {
		      this.removeEventListener('abort', this[kEvents].abort);
		    }
		    if (typeof fn === 'function') {
		      this[kEvents].abort = fn;
		      this.addEventListener('abort', fn);
		    } else {
		      this[kEvents].abort = null;
		    }
		  }
		}

		// https://w3c.github.io/FileAPI/#dom-filereader-empty
		FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
		// https://w3c.github.io/FileAPI/#dom-filereader-loading
		FileReader.LOADING = FileReader.prototype.LOADING = 1;
		// https://w3c.github.io/FileAPI/#dom-filereader-done
		FileReader.DONE = FileReader.prototype.DONE = 2;
		Object.defineProperties(FileReader.prototype, {
		  EMPTY: staticPropertyDescriptors,
		  LOADING: staticPropertyDescriptors,
		  DONE: staticPropertyDescriptors,
		  readAsArrayBuffer: kEnumerableProperty,
		  readAsBinaryString: kEnumerableProperty,
		  readAsText: kEnumerableProperty,
		  readAsDataURL: kEnumerableProperty,
		  abort: kEnumerableProperty,
		  readyState: kEnumerableProperty,
		  result: kEnumerableProperty,
		  error: kEnumerableProperty,
		  onloadstart: kEnumerableProperty,
		  onprogress: kEnumerableProperty,
		  onload: kEnumerableProperty,
		  onabort: kEnumerableProperty,
		  onerror: kEnumerableProperty,
		  onloadend: kEnumerableProperty,
		  [Symbol.toStringTag]: {
		    value: 'FileReader',
		    writable: false,
		    enumerable: false,
		    configurable: true
		  }
		});
		Object.defineProperties(FileReader, {
		  EMPTY: staticPropertyDescriptors,
		  LOADING: staticPropertyDescriptors,
		  DONE: staticPropertyDescriptors
		});
		filereader = {
		  FileReader
		};
		return filereader;
	}

	var symbols$1;
	var hasRequiredSymbols$1;

	function requireSymbols$1 () {
		if (hasRequiredSymbols$1) return symbols$1;
		hasRequiredSymbols$1 = 1;

		symbols$1 = {
		  kConstruct: requireSymbols$4().kConstruct
		};
		return symbols$1;
	}

	var util$2;
	var hasRequiredUtil$2;

	function requireUtil$2 () {
		if (hasRequiredUtil$2) return util$2;
		hasRequiredUtil$2 = 1;

		const assert = require$$0__default$3["default"];
		const {
		  URLSerializer
		} = requireDataURL();
		const {
		  isValidHeaderName
		} = requireUtil$5();

		/**
		 * @see https://url.spec.whatwg.org/#concept-url-equals
		 * @param {URL} A
		 * @param {URL} B
		 * @param {boolean | undefined} excludeFragment
		 * @returns {boolean}
		 */
		function urlEquals(A, B, excludeFragment = false) {
		  const serializedA = URLSerializer(A, excludeFragment);
		  const serializedB = URLSerializer(B, excludeFragment);
		  return serializedA === serializedB;
		}

		/**
		 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
		 * @param {string} header
		 */
		function fieldValues(header) {
		  assert(header !== null);
		  const values = [];
		  for (let value of header.split(',')) {
		    value = value.trim();
		    if (!value.length) {
		      continue;
		    } else if (!isValidHeaderName(value)) {
		      continue;
		    }
		    values.push(value);
		  }
		  return values;
		}
		util$2 = {
		  urlEquals,
		  fieldValues
		};
		return util$2;
	}

	var cache;
	var hasRequiredCache;

	function requireCache () {
		if (hasRequiredCache) return cache;
		hasRequiredCache = 1;

		const {
		  kConstruct
		} = requireSymbols$1();
		const {
		  urlEquals,
		  fieldValues: getFieldValues
		} = requireUtil$2();
		const {
		  kEnumerableProperty,
		  isDisturbed
		} = requireUtil$6();
		const {
		  kHeadersList
		} = requireSymbols$4();
		const {
		  webidl
		} = requireWebidl();
		const {
		  Response,
		  cloneResponse
		} = requireResponse();
		const {
		  Request
		} = requireRequest();
		const {
		  kState,
		  kHeaders,
		  kGuard,
		  kRealm
		} = requireSymbols$3();
		const {
		  fetching
		} = requireFetch();
		const {
		  urlIsHttpHttpsScheme,
		  createDeferredPromise,
		  readAllBytes
		} = requireUtil$5();
		const assert = require$$0__default$3["default"];
		const {
		  getGlobalDispatcher
		} = requireGlobal();

		/**
		 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
		 * @typedef {Object} CacheBatchOperation
		 * @property {'delete' | 'put'} type
		 * @property {any} request
		 * @property {any} response
		 * @property {import('../../types/cache').CacheQueryOptions} options
		 */

		/**
		 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
		 * @typedef {[any, any][]} requestResponseList
		 */

		class Cache {
		  /**
		   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		   * @type {requestResponseList}
		   */
		  #relevantRequestResponseList;
		  constructor() {
		    if (arguments[0] !== kConstruct) {
		      webidl.illegalConstructor();
		    }
		    this.#relevantRequestResponseList = arguments[1];
		  }
		  async match(request, options = {}) {
		    webidl.brandCheck(this, Cache);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Cache.match'
		    });
		    request = webidl.converters.RequestInfo(request);
		    options = webidl.converters.CacheQueryOptions(options);
		    const p = await this.matchAll(request, options);
		    if (p.length === 0) {
		      return;
		    }
		    return p[0];
		  }
		  async matchAll(request = undefined, options = {}) {
		    webidl.brandCheck(this, Cache);
		    if (request !== undefined) request = webidl.converters.RequestInfo(request);
		    options = webidl.converters.CacheQueryOptions(options);

		    // 1.
		    let r = null;

		    // 2.
		    if (request !== undefined) {
		      if (request instanceof Request) {
		        // 2.1.1
		        r = request[kState];

		        // 2.1.2
		        if (r.method !== 'GET' && !options.ignoreMethod) {
		          return [];
		        }
		      } else if (typeof request === 'string') {
		        // 2.2.1
		        r = new Request(request)[kState];
		      }
		    }

		    // 5.
		    // 5.1
		    const responses = [];

		    // 5.2
		    if (request === undefined) {
		      // 5.2.1
		      for (const requestResponse of this.#relevantRequestResponseList) {
		        responses.push(requestResponse[1]);
		      }
		    } else {
		      // 5.3
		      // 5.3.1
		      const requestResponses = this.#queryCache(r, options);

		      // 5.3.2
		      for (const requestResponse of requestResponses) {
		        responses.push(requestResponse[1]);
		      }
		    }

		    // 5.4
		    // We don't implement CORs so we don't need to loop over the responses, yay!

		    // 5.5.1
		    const responseList = [];

		    // 5.5.2
		    for (const response of responses) {
		      // 5.5.2.1
		      const responseObject = new Response(response.body?.source ?? null);
		      const body = responseObject[kState].body;
		      responseObject[kState] = response;
		      responseObject[kState].body = body;
		      responseObject[kHeaders][kHeadersList] = response.headersList;
		      responseObject[kHeaders][kGuard] = 'immutable';
		      responseList.push(responseObject);
		    }

		    // 6.
		    return Object.freeze(responseList);
		  }
		  async add(request) {
		    webidl.brandCheck(this, Cache);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Cache.add'
		    });
		    request = webidl.converters.RequestInfo(request);

		    // 1.
		    const requests = [request];

		    // 2.
		    const responseArrayPromise = this.addAll(requests);

		    // 3.
		    return await responseArrayPromise;
		  }
		  async addAll(requests) {
		    webidl.brandCheck(this, Cache);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Cache.addAll'
		    });
		    requests = webidl.converters['sequence<RequestInfo>'](requests);

		    // 1.
		    const responsePromises = [];

		    // 2.
		    const requestList = [];

		    // 3.
		    for (const request of requests) {
		      if (typeof request === 'string') {
		        continue;
		      }

		      // 3.1
		      const r = request[kState];

		      // 3.2
		      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
		        throw webidl.errors.exception({
		          header: 'Cache.addAll',
		          message: 'Expected http/s scheme when method is not GET.'
		        });
		      }
		    }

		    // 4.
		    /** @type {ReturnType<typeof fetching>[]} */
		    const fetchControllers = [];

		    // 5.
		    for (const request of requests) {
		      // 5.1
		      const r = new Request(request)[kState];

		      // 5.2
		      if (!urlIsHttpHttpsScheme(r.url)) {
		        throw webidl.errors.exception({
		          header: 'Cache.addAll',
		          message: 'Expected http/s scheme.'
		        });
		      }

		      // 5.4
		      r.initiator = 'fetch';
		      r.destination = 'subresource';

		      // 5.5
		      requestList.push(r);

		      // 5.6
		      const responsePromise = createDeferredPromise();

		      // 5.7
		      fetchControllers.push(fetching({
		        request: r,
		        dispatcher: getGlobalDispatcher(),
		        processResponse(response) {
		          // 1.
		          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
		            responsePromise.reject(webidl.errors.exception({
		              header: 'Cache.addAll',
		              message: 'Received an invalid status code or the request failed.'
		            }));
		          } else if (response.headersList.contains('vary')) {
		            // 2.
		            // 2.1
		            const fieldValues = getFieldValues(response.headersList.get('vary'));

		            // 2.2
		            for (const fieldValue of fieldValues) {
		              // 2.2.1
		              if (fieldValue === '*') {
		                responsePromise.reject(webidl.errors.exception({
		                  header: 'Cache.addAll',
		                  message: 'invalid vary field value'
		                }));
		                for (const controller of fetchControllers) {
		                  controller.abort();
		                }
		                return;
		              }
		            }
		          }
		        },
		        processResponseEndOfBody(response) {
		          // 1.
		          if (response.aborted) {
		            responsePromise.reject(new DOMException('aborted', 'AbortError'));
		            return;
		          }

		          // 2.
		          responsePromise.resolve(response);
		        }
		      }));

		      // 5.8
		      responsePromises.push(responsePromise.promise);
		    }

		    // 6.
		    const p = Promise.all(responsePromises);

		    // 7.
		    const responses = await p;

		    // 7.1
		    const operations = [];

		    // 7.2
		    let index = 0;

		    // 7.3
		    for (const response of responses) {
		      // 7.3.1
		      /** @type {CacheBatchOperation} */
		      const operation = {
		        type: 'put',
		        // 7.3.2
		        request: requestList[index],
		        // 7.3.3
		        response // 7.3.4
		      };
		      operations.push(operation); // 7.3.5

		      index++; // 7.3.6
		    }

		    // 7.5
		    const cacheJobPromise = createDeferredPromise();

		    // 7.6.1
		    let errorData = null;

		    // 7.6.2
		    try {
		      this.#batchCacheOperations(operations);
		    } catch (e) {
		      errorData = e;
		    }

		    // 7.6.3
		    queueMicrotask(() => {
		      // 7.6.3.1
		      if (errorData === null) {
		        cacheJobPromise.resolve(undefined);
		      } else {
		        // 7.6.3.2
		        cacheJobPromise.reject(errorData);
		      }
		    });

		    // 7.7
		    return cacheJobPromise.promise;
		  }
		  async put(request, response) {
		    webidl.brandCheck(this, Cache);
		    webidl.argumentLengthCheck(arguments, 2, {
		      header: 'Cache.put'
		    });
		    request = webidl.converters.RequestInfo(request);
		    response = webidl.converters.Response(response);

		    // 1.
		    let innerRequest = null;

		    // 2.
		    if (request instanceof Request) {
		      innerRequest = request[kState];
		    } else {
		      // 3.
		      innerRequest = new Request(request)[kState];
		    }

		    // 4.
		    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
		      throw webidl.errors.exception({
		        header: 'Cache.put',
		        message: 'Expected an http/s scheme when method is not GET'
		      });
		    }

		    // 5.
		    const innerResponse = response[kState];

		    // 6.
		    if (innerResponse.status === 206) {
		      throw webidl.errors.exception({
		        header: 'Cache.put',
		        message: 'Got 206 status'
		      });
		    }

		    // 7.
		    if (innerResponse.headersList.contains('vary')) {
		      // 7.1.
		      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'));

		      // 7.2.
		      for (const fieldValue of fieldValues) {
		        // 7.2.1
		        if (fieldValue === '*') {
		          throw webidl.errors.exception({
		            header: 'Cache.put',
		            message: 'Got * vary field value'
		          });
		        }
		      }
		    }

		    // 8.
		    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
		      throw webidl.errors.exception({
		        header: 'Cache.put',
		        message: 'Response body is locked or disturbed'
		      });
		    }

		    // 9.
		    const clonedResponse = cloneResponse(innerResponse);

		    // 10.
		    const bodyReadPromise = createDeferredPromise();

		    // 11.
		    if (innerResponse.body != null) {
		      // 11.1
		      const stream = innerResponse.body.stream;

		      // 11.2
		      const reader = stream.getReader();

		      // 11.3
		      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
		    } else {
		      bodyReadPromise.resolve(undefined);
		    }

		    // 12.
		    /** @type {CacheBatchOperation[]} */
		    const operations = [];

		    // 13.
		    /** @type {CacheBatchOperation} */
		    const operation = {
		      type: 'put',
		      // 14.
		      request: innerRequest,
		      // 15.
		      response: clonedResponse // 16.
		    };

		    // 17.
		    operations.push(operation);

		    // 19.
		    const bytes = await bodyReadPromise.promise;
		    if (clonedResponse.body != null) {
		      clonedResponse.body.source = bytes;
		    }

		    // 19.1
		    const cacheJobPromise = createDeferredPromise();

		    // 19.2.1
		    let errorData = null;

		    // 19.2.2
		    try {
		      this.#batchCacheOperations(operations);
		    } catch (e) {
		      errorData = e;
		    }

		    // 19.2.3
		    queueMicrotask(() => {
		      // 19.2.3.1
		      if (errorData === null) {
		        cacheJobPromise.resolve();
		      } else {
		        // 19.2.3.2
		        cacheJobPromise.reject(errorData);
		      }
		    });
		    return cacheJobPromise.promise;
		  }
		  async delete(request, options = {}) {
		    webidl.brandCheck(this, Cache);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'Cache.delete'
		    });
		    request = webidl.converters.RequestInfo(request);
		    options = webidl.converters.CacheQueryOptions(options);

		    /**
		     * @type {Request}
		     */
		    let r = null;
		    if (request instanceof Request) {
		      r = request[kState];
		      if (r.method !== 'GET' && !options.ignoreMethod) {
		        return false;
		      }
		    } else {
		      assert(typeof request === 'string');
		      r = new Request(request)[kState];
		    }

		    /** @type {CacheBatchOperation[]} */
		    const operations = [];

		    /** @type {CacheBatchOperation} */
		    const operation = {
		      type: 'delete',
		      request: r,
		      options
		    };
		    operations.push(operation);
		    const cacheJobPromise = createDeferredPromise();
		    let errorData = null;
		    let requestResponses;
		    try {
		      requestResponses = this.#batchCacheOperations(operations);
		    } catch (e) {
		      errorData = e;
		    }
		    queueMicrotask(() => {
		      if (errorData === null) {
		        cacheJobPromise.resolve(!!requestResponses?.length);
		      } else {
		        cacheJobPromise.reject(errorData);
		      }
		    });
		    return cacheJobPromise.promise;
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		   * @param {any} request
		   * @param {import('../../types/cache').CacheQueryOptions} options
		   * @returns {readonly Request[]}
		   */
		  async keys(request = undefined, options = {}) {
		    webidl.brandCheck(this, Cache);
		    if (request !== undefined) request = webidl.converters.RequestInfo(request);
		    options = webidl.converters.CacheQueryOptions(options);

		    // 1.
		    let r = null;

		    // 2.
		    if (request !== undefined) {
		      // 2.1
		      if (request instanceof Request) {
		        // 2.1.1
		        r = request[kState];

		        // 2.1.2
		        if (r.method !== 'GET' && !options.ignoreMethod) {
		          return [];
		        }
		      } else if (typeof request === 'string') {
		        // 2.2
		        r = new Request(request)[kState];
		      }
		    }

		    // 4.
		    const promise = createDeferredPromise();

		    // 5.
		    // 5.1
		    const requests = [];

		    // 5.2
		    if (request === undefined) {
		      // 5.2.1
		      for (const requestResponse of this.#relevantRequestResponseList) {
		        // 5.2.1.1
		        requests.push(requestResponse[0]);
		      }
		    } else {
		      // 5.3
		      // 5.3.1
		      const requestResponses = this.#queryCache(r, options);

		      // 5.3.2
		      for (const requestResponse of requestResponses) {
		        // 5.3.2.1
		        requests.push(requestResponse[0]);
		      }
		    }

		    // 5.4
		    queueMicrotask(() => {
		      // 5.4.1
		      const requestList = [];

		      // 5.4.2
		      for (const request of requests) {
		        const requestObject = new Request('https://a');
		        requestObject[kState] = request;
		        requestObject[kHeaders][kHeadersList] = request.headersList;
		        requestObject[kHeaders][kGuard] = 'immutable';
		        requestObject[kRealm] = request.client;

		        // 5.4.2.1
		        requestList.push(requestObject);
		      }

		      // 5.4.3
		      promise.resolve(Object.freeze(requestList));
		    });
		    return promise.promise;
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		   * @param {CacheBatchOperation[]} operations
		   * @returns {requestResponseList}
		   */
		  #batchCacheOperations(operations) {
		    // 1.
		    const cache = this.#relevantRequestResponseList;

		    // 2.
		    const backupCache = [...cache];

		    // 3.
		    const addedItems = [];

		    // 4.1
		    const resultList = [];
		    try {
		      // 4.2
		      for (const operation of operations) {
		        // 4.2.1
		        if (operation.type !== 'delete' && operation.type !== 'put') {
		          throw webidl.errors.exception({
		            header: 'Cache.#batchCacheOperations',
		            message: 'operation type does not match "delete" or "put"'
		          });
		        }

		        // 4.2.2
		        if (operation.type === 'delete' && operation.response != null) {
		          throw webidl.errors.exception({
		            header: 'Cache.#batchCacheOperations',
		            message: 'delete operation should not have an associated response'
		          });
		        }

		        // 4.2.3
		        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
		          throw new DOMException('???', 'InvalidStateError');
		        }

		        // 4.2.4
		        let requestResponses;

		        // 4.2.5
		        if (operation.type === 'delete') {
		          // 4.2.5.1
		          requestResponses = this.#queryCache(operation.request, operation.options);

		          // TODO: the spec is wrong, this is needed to pass WPTs
		          if (requestResponses.length === 0) {
		            return [];
		          }

		          // 4.2.5.2
		          for (const requestResponse of requestResponses) {
		            const idx = cache.indexOf(requestResponse);
		            assert(idx !== -1);

		            // 4.2.5.2.1
		            cache.splice(idx, 1);
		          }
		        } else if (operation.type === 'put') {
		          // 4.2.6
		          // 4.2.6.1
		          if (operation.response == null) {
		            throw webidl.errors.exception({
		              header: 'Cache.#batchCacheOperations',
		              message: 'put operation should have an associated response'
		            });
		          }

		          // 4.2.6.2
		          const r = operation.request;

		          // 4.2.6.3
		          if (!urlIsHttpHttpsScheme(r.url)) {
		            throw webidl.errors.exception({
		              header: 'Cache.#batchCacheOperations',
		              message: 'expected http or https scheme'
		            });
		          }

		          // 4.2.6.4
		          if (r.method !== 'GET') {
		            throw webidl.errors.exception({
		              header: 'Cache.#batchCacheOperations',
		              message: 'not get method'
		            });
		          }

		          // 4.2.6.5
		          if (operation.options != null) {
		            throw webidl.errors.exception({
		              header: 'Cache.#batchCacheOperations',
		              message: 'options must not be defined'
		            });
		          }

		          // 4.2.6.6
		          requestResponses = this.#queryCache(operation.request);

		          // 4.2.6.7
		          for (const requestResponse of requestResponses) {
		            const idx = cache.indexOf(requestResponse);
		            assert(idx !== -1);

		            // 4.2.6.7.1
		            cache.splice(idx, 1);
		          }

		          // 4.2.6.8
		          cache.push([operation.request, operation.response]);

		          // 4.2.6.10
		          addedItems.push([operation.request, operation.response]);
		        }

		        // 4.2.7
		        resultList.push([operation.request, operation.response]);
		      }

		      // 4.3
		      return resultList;
		    } catch (e) {
		      // 5.
		      // 5.1
		      this.#relevantRequestResponseList.length = 0;

		      // 5.2
		      this.#relevantRequestResponseList = backupCache;

		      // 5.3
		      throw e;
		    }
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#query-cache
		   * @param {any} requestQuery
		   * @param {import('../../types/cache').CacheQueryOptions} options
		   * @param {requestResponseList} targetStorage
		   * @returns {requestResponseList}
		   */
		  #queryCache(requestQuery, options, targetStorage) {
		    /** @type {requestResponseList} */
		    const resultList = [];
		    const storage = targetStorage ?? this.#relevantRequestResponseList;
		    for (const requestResponse of storage) {
		      const [cachedRequest, cachedResponse] = requestResponse;
		      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
		        resultList.push(requestResponse);
		      }
		    }
		    return resultList;
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		   * @param {any} requestQuery
		   * @param {any} request
		   * @param {any | null} response
		   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
		   * @returns {boolean}
		   */
		  #requestMatchesCachedItem(requestQuery, request, response = null, options) {
		    // if (options?.ignoreMethod === false && request.method === 'GET') {
		    //   return false
		    // }

		    const queryURL = new URL(requestQuery.url);
		    const cachedURL = new URL(request.url);
		    if (options?.ignoreSearch) {
		      cachedURL.search = '';
		      queryURL.search = '';
		    }
		    if (!urlEquals(queryURL, cachedURL, true)) {
		      return false;
		    }
		    if (response == null || options?.ignoreVary || !response.headersList.contains('vary')) {
		      return true;
		    }
		    const fieldValues = getFieldValues(response.headersList.get('vary'));
		    for (const fieldValue of fieldValues) {
		      if (fieldValue === '*') {
		        return false;
		      }
		      const requestValue = request.headersList.get(fieldValue);
		      const queryValue = requestQuery.headersList.get(fieldValue);

		      // If one has the header and the other doesn't, or one has
		      // a different value than the other, return false
		      if (requestValue !== queryValue) {
		        return false;
		      }
		    }
		    return true;
		  }
		}
		Object.defineProperties(Cache.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'Cache',
		    configurable: true
		  },
		  match: kEnumerableProperty,
		  matchAll: kEnumerableProperty,
		  add: kEnumerableProperty,
		  addAll: kEnumerableProperty,
		  put: kEnumerableProperty,
		  delete: kEnumerableProperty,
		  keys: kEnumerableProperty
		});
		const cacheQueryOptionConverters = [{
		  key: 'ignoreSearch',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'ignoreMethod',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'ignoreVary',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}];
		webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
		webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([...cacheQueryOptionConverters, {
		  key: 'cacheName',
		  converter: webidl.converters.DOMString
		}]);
		webidl.converters.Response = webidl.interfaceConverter(Response);
		webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(webidl.converters.RequestInfo);
		cache = {
		  Cache
		};
		return cache;
	}

	var cachestorage;
	var hasRequiredCachestorage;

	function requireCachestorage () {
		if (hasRequiredCachestorage) return cachestorage;
		hasRequiredCachestorage = 1;

		const {
		  kConstruct
		} = requireSymbols$1();
		const {
		  Cache
		} = requireCache();
		const {
		  webidl
		} = requireWebidl();
		const {
		  kEnumerableProperty
		} = requireUtil$6();
		class CacheStorage {
		  /**
		   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		   * @type {Map<string, import('./cache').requestResponseList}
		   */
		  #caches = new Map();
		  constructor() {
		    if (arguments[0] !== kConstruct) {
		      webidl.illegalConstructor();
		    }
		  }
		  async match(request, options = {}) {
		    webidl.brandCheck(this, CacheStorage);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'CacheStorage.match'
		    });
		    request = webidl.converters.RequestInfo(request);
		    options = webidl.converters.MultiCacheQueryOptions(options);

		    // 1.
		    if (options.cacheName != null) {
		      // 1.1.1.1
		      if (this.#caches.has(options.cacheName)) {
		        // 1.1.1.1.1
		        const cacheList = this.#caches.get(options.cacheName);
		        const cache = new Cache(kConstruct, cacheList);
		        return await cache.match(request, options);
		      }
		    } else {
		      // 2.
		      // 2.2
		      for (const cacheList of this.#caches.values()) {
		        const cache = new Cache(kConstruct, cacheList);

		        // 2.2.1.2
		        const response = await cache.match(request, options);
		        if (response !== undefined) {
		          return response;
		        }
		      }
		    }
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		   * @param {string} cacheName
		   * @returns {Promise<boolean>}
		   */
		  async has(cacheName) {
		    webidl.brandCheck(this, CacheStorage);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'CacheStorage.has'
		    });
		    cacheName = webidl.converters.DOMString(cacheName);

		    // 2.1.1
		    // 2.2
		    return this.#caches.has(cacheName);
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		   * @param {string} cacheName
		   * @returns {Promise<Cache>}
		   */
		  async open(cacheName) {
		    webidl.brandCheck(this, CacheStorage);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'CacheStorage.open'
		    });
		    cacheName = webidl.converters.DOMString(cacheName);

		    // 2.1
		    if (this.#caches.has(cacheName)) {
		      // await caches.open('v1') !== await caches.open('v1')

		      // 2.1.1
		      const cache = this.#caches.get(cacheName);

		      // 2.1.1.1
		      return new Cache(kConstruct, cache);
		    }

		    // 2.2
		    const cache = [];

		    // 2.3
		    this.#caches.set(cacheName, cache);

		    // 2.4
		    return new Cache(kConstruct, cache);
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		   * @param {string} cacheName
		   * @returns {Promise<boolean>}
		   */
		  async delete(cacheName) {
		    webidl.brandCheck(this, CacheStorage);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'CacheStorage.delete'
		    });
		    cacheName = webidl.converters.DOMString(cacheName);
		    return this.#caches.delete(cacheName);
		  }

		  /**
		   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		   * @returns {string[]}
		   */
		  async keys() {
		    webidl.brandCheck(this, CacheStorage);

		    // 2.1
		    const keys = this.#caches.keys();

		    // 2.2
		    return [...keys];
		  }
		}
		Object.defineProperties(CacheStorage.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'CacheStorage',
		    configurable: true
		  },
		  match: kEnumerableProperty,
		  has: kEnumerableProperty,
		  open: kEnumerableProperty,
		  delete: kEnumerableProperty,
		  keys: kEnumerableProperty
		});
		cachestorage = {
		  CacheStorage
		};
		return cachestorage;
	}

	var constants$1;
	var hasRequiredConstants$1;

	function requireConstants$1 () {
		if (hasRequiredConstants$1) return constants$1;
		hasRequiredConstants$1 = 1;

		// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
		const maxAttributeValueSize = 1024;

		// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
		const maxNameValuePairSize = 4096;
		constants$1 = {
		  maxAttributeValueSize,
		  maxNameValuePairSize
		};
		return constants$1;
	}

	var util$1;
	var hasRequiredUtil$1;

	function requireUtil$1 () {
		if (hasRequiredUtil$1) return util$1;
		hasRequiredUtil$1 = 1;

		const assert = require$$0__default$3["default"];
		const {
		  kHeadersList
		} = requireSymbols$4();
		function isCTLExcludingHtab(value) {
		  if (value.length === 0) {
		    return false;
		  }
		  for (const char of value) {
		    const code = char.charCodeAt(0);
		    if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) {
		      return false;
		    }
		  }
		}

		/**
		 CHAR           = <any US-ASCII character (octets 0 - 127)>
		 token          = 1*<any CHAR except CTLs or separators>
		 separators     = "(" | ")" | "<" | ">" | "@"
		                | "," | ";" | ":" | "\" | <">
		                | "/" | "[" | "]" | "?" | "="
		                | "{" | "}" | SP | HT
		 * @param {string} name
		 */
		function validateCookieName(name) {
		  for (const char of name) {
		    const code = char.charCodeAt(0);
		    if (code <= 0x20 || code > 0x7F || char === '(' || char === ')' || char === '>' || char === '<' || char === '@' || char === ',' || char === ';' || char === ':' || char === '\\' || char === '"' || char === '/' || char === '[' || char === ']' || char === '?' || char === '=' || char === '{' || char === '}') {
		      throw new Error('Invalid cookie name');
		    }
		  }
		}

		/**
		 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
		 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
		                       ; US-ASCII characters excluding CTLs,
		                       ; whitespace DQUOTE, comma, semicolon,
		                       ; and backslash
		 * @param {string} value
		 */
		function validateCookieValue(value) {
		  for (const char of value) {
		    const code = char.charCodeAt(0);
		    if (code < 0x21 ||
		    // exclude CTLs (0-31)
		    code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii
		    ) {
		      throw new Error('Invalid header value');
		    }
		  }
		}

		/**
		 * path-value        = <any CHAR except CTLs or ";">
		 * @param {string} path
		 */
		function validateCookiePath(path) {
		  for (const char of path) {
		    const code = char.charCodeAt(0);
		    if (code < 0x21 || char === ';') {
		      throw new Error('Invalid cookie path');
		    }
		  }
		}

		/**
		 * I have no idea why these values aren't allowed to be honest,
		 * but Deno tests these. - Khafra
		 * @param {string} domain
		 */
		function validateCookieDomain(domain) {
		  if (domain.startsWith('-') || domain.endsWith('.') || domain.endsWith('-')) {
		    throw new Error('Invalid cookie domain');
		  }
		}

		/**
		 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
		 * @param {number|Date} date
		  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
		  ; fixed length/zone/capitalization subset of the format
		  ; see Section 3.3 of [RFC5322]

		  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
		              / %x54.75.65 ; "Tue", case-sensitive
		              / %x57.65.64 ; "Wed", case-sensitive
		              / %x54.68.75 ; "Thu", case-sensitive
		              / %x46.72.69 ; "Fri", case-sensitive
		              / %x53.61.74 ; "Sat", case-sensitive
		              / %x53.75.6E ; "Sun", case-sensitive
		  date1        = day SP month SP year
		                  ; e.g., 02 Jun 1982

		  day          = 2DIGIT
		  month        = %x4A.61.6E ; "Jan", case-sensitive
		              / %x46.65.62 ; "Feb", case-sensitive
		              / %x4D.61.72 ; "Mar", case-sensitive
		              / %x41.70.72 ; "Apr", case-sensitive
		              / %x4D.61.79 ; "May", case-sensitive
		              / %x4A.75.6E ; "Jun", case-sensitive
		              / %x4A.75.6C ; "Jul", case-sensitive
		              / %x41.75.67 ; "Aug", case-sensitive
		              / %x53.65.70 ; "Sep", case-sensitive
		              / %x4F.63.74 ; "Oct", case-sensitive
		              / %x4E.6F.76 ; "Nov", case-sensitive
		              / %x44.65.63 ; "Dec", case-sensitive
		  year         = 4DIGIT

		  GMT          = %x47.4D.54 ; "GMT", case-sensitive

		  time-of-day  = hour ":" minute ":" second
		              ; 00:00:00 - 23:59:60 (leap second)

		  hour         = 2DIGIT
		  minute       = 2DIGIT
		  second       = 2DIGIT
		 */
		function toIMFDate(date) {
		  if (typeof date === 'number') {
		    date = new Date(date);
		  }
		  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
		  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
		  const dayName = days[date.getUTCDay()];
		  const day = date.getUTCDate().toString().padStart(2, '0');
		  const month = months[date.getUTCMonth()];
		  const year = date.getUTCFullYear();
		  const hour = date.getUTCHours().toString().padStart(2, '0');
		  const minute = date.getUTCMinutes().toString().padStart(2, '0');
		  const second = date.getUTCSeconds().toString().padStart(2, '0');
		  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
		}

		/**
		 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
		                       ; In practice, both expires-av and max-age-av
		                       ; are limited to dates representable by the
		                       ; user agent.
		 * @param {number} maxAge
		 */
		function validateCookieMaxAge(maxAge) {
		  if (maxAge < 0) {
		    throw new Error('Invalid cookie max-age');
		  }
		}

		/**
		 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
		 * @param {import('./index').Cookie} cookie
		 */
		function stringify(cookie) {
		  if (cookie.name.length === 0) {
		    return null;
		  }
		  validateCookieName(cookie.name);
		  validateCookieValue(cookie.value);
		  const out = [`${cookie.name}=${cookie.value}`];

		  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
		  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
		  if (cookie.name.startsWith('__Secure-')) {
		    cookie.secure = true;
		  }
		  if (cookie.name.startsWith('__Host-')) {
		    cookie.secure = true;
		    cookie.domain = null;
		    cookie.path = '/';
		  }
		  if (cookie.secure) {
		    out.push('Secure');
		  }
		  if (cookie.httpOnly) {
		    out.push('HttpOnly');
		  }
		  if (typeof cookie.maxAge === 'number') {
		    validateCookieMaxAge(cookie.maxAge);
		    out.push(`Max-Age=${cookie.maxAge}`);
		  }
		  if (cookie.domain) {
		    validateCookieDomain(cookie.domain);
		    out.push(`Domain=${cookie.domain}`);
		  }
		  if (cookie.path) {
		    validateCookiePath(cookie.path);
		    out.push(`Path=${cookie.path}`);
		  }
		  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
		    out.push(`Expires=${toIMFDate(cookie.expires)}`);
		  }
		  if (cookie.sameSite) {
		    out.push(`SameSite=${cookie.sameSite}`);
		  }
		  for (const part of cookie.unparsed) {
		    if (!part.includes('=')) {
		      throw new Error('Invalid unparsed');
		    }
		    const [key, ...value] = part.split('=');
		    out.push(`${key.trim()}=${value.join('=')}`);
		  }
		  return out.join('; ');
		}
		let kHeadersListNode;
		function getHeadersList(headers) {
		  if (headers[kHeadersList]) {
		    return headers[kHeadersList];
		  }
		  if (!kHeadersListNode) {
		    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(symbol => symbol.description === 'headers list');
		    assert(kHeadersListNode, 'Headers cannot be parsed');
		  }
		  const headersList = headers[kHeadersListNode];
		  assert(headersList);
		  return headersList;
		}
		util$1 = {
		  isCTLExcludingHtab,
		  stringify,
		  getHeadersList
		};
		return util$1;
	}

	var parse;
	var hasRequiredParse;

	function requireParse () {
		if (hasRequiredParse) return parse;
		hasRequiredParse = 1;

		const {
		  maxNameValuePairSize,
		  maxAttributeValueSize
		} = requireConstants$1();
		const {
		  isCTLExcludingHtab
		} = requireUtil$1();
		const {
		  collectASequenceOfCodePointsFast
		} = requireDataURL();
		const assert = require$$0__default$3["default"];

		/**
		 * @description Parses the field-value attributes of a set-cookie header string.
		 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
		 * @param {string} header
		 * @returns if the header is invalid, null will be returned
		 */
		function parseSetCookie(header) {
		  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
		  //    character (CTL characters excluding HTAB): Abort these steps and
		  //    ignore the set-cookie-string entirely.
		  if (isCTLExcludingHtab(header)) {
		    return null;
		  }
		  let nameValuePair = '';
		  let unparsedAttributes = '';
		  let name = '';
		  let value = '';

		  // 2. If the set-cookie-string contains a %x3B (";") character:
		  if (header.includes(';')) {
		    // 1. The name-value-pair string consists of the characters up to,
		    //    but not including, the first %x3B (";"), and the unparsed-
		    //    attributes consist of the remainder of the set-cookie-string
		    //    (including the %x3B (";") in question).
		    const position = {
		      position: 0
		    };
		    nameValuePair = collectASequenceOfCodePointsFast(';', header, position);
		    unparsedAttributes = header.slice(position.position);
		  } else {
		    // Otherwise:

		    // 1. The name-value-pair string consists of all the characters
		    //    contained in the set-cookie-string, and the unparsed-
		    //    attributes is the empty string.
		    nameValuePair = header;
		  }

		  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
		  //    the name string is empty, and the value string is the value of
		  //    name-value-pair.
		  if (!nameValuePair.includes('=')) {
		    value = nameValuePair;
		  } else {
		    //    Otherwise, the name string consists of the characters up to, but
		    //    not including, the first %x3D ("=") character, and the (possibly
		    //    empty) value string consists of the characters after the first
		    //    %x3D ("=") character.
		    const position = {
		      position: 0
		    };
		    name = collectASequenceOfCodePointsFast('=', nameValuePair, position);
		    value = nameValuePair.slice(position.position + 1);
		  }

		  // 4. Remove any leading or trailing WSP characters from the name
		  //    string and the value string.
		  name = name.trim();
		  value = value.trim();

		  // 5. If the sum of the lengths of the name string and the value string
		  //    is more than 4096 octets, abort these steps and ignore the set-
		  //    cookie-string entirely.
		  if (name.length + value.length > maxNameValuePairSize) {
		    return null;
		  }

		  // 6. The cookie-name is the name string, and the cookie-value is the
		  //    value string.
		  return {
		    name,
		    value,
		    ...parseUnparsedAttributes(unparsedAttributes)
		  };
		}

		/**
		 * Parses the remaining attributes of a set-cookie header
		 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
		 * @param {string} unparsedAttributes
		 * @param {[Object.<string, unknown>]={}} cookieAttributeList
		 */
		function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
		  // 1. If the unparsed-attributes string is empty, skip the rest of
		  //    these steps.
		  if (unparsedAttributes.length === 0) {
		    return cookieAttributeList;
		  }

		  // 2. Discard the first character of the unparsed-attributes (which
		  //    will be a %x3B (";") character).
		  assert(unparsedAttributes[0] === ';');
		  unparsedAttributes = unparsedAttributes.slice(1);
		  let cookieAv = '';

		  // 3. If the remaining unparsed-attributes contains a %x3B (";")
		  //    character:
		  if (unparsedAttributes.includes(';')) {
		    // 1. Consume the characters of the unparsed-attributes up to, but
		    //    not including, the first %x3B (";") character.
		    cookieAv = collectASequenceOfCodePointsFast(';', unparsedAttributes, {
		      position: 0
		    });
		    unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		  } else {
		    // Otherwise:

		    // 1. Consume the remainder of the unparsed-attributes.
		    cookieAv = unparsedAttributes;
		    unparsedAttributes = '';
		  }

		  // Let the cookie-av string be the characters consumed in this step.

		  let attributeName = '';
		  let attributeValue = '';

		  // 4. If the cookie-av string contains a %x3D ("=") character:
		  if (cookieAv.includes('=')) {
		    // 1. The (possibly empty) attribute-name string consists of the
		    //    characters up to, but not including, the first %x3D ("=")
		    //    character, and the (possibly empty) attribute-value string
		    //    consists of the characters after the first %x3D ("=")
		    //    character.
		    const position = {
		      position: 0
		    };
		    attributeName = collectASequenceOfCodePointsFast('=', cookieAv, position);
		    attributeValue = cookieAv.slice(position.position + 1);
		  } else {
		    // Otherwise:

		    // 1. The attribute-name string consists of the entire cookie-av
		    //    string, and the attribute-value string is empty.
		    attributeName = cookieAv;
		  }

		  // 5. Remove any leading or trailing WSP characters from the attribute-
		  //    name string and the attribute-value string.
		  attributeName = attributeName.trim();
		  attributeValue = attributeValue.trim();

		  // 6. If the attribute-value is longer than 1024 octets, ignore the
		  //    cookie-av string and return to Step 1 of this algorithm.
		  if (attributeValue.length > maxAttributeValueSize) {
		    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		  }

		  // 7. Process the attribute-name and attribute-value according to the
		  //    requirements in the following subsections.  (Notice that
		  //    attributes with unrecognized attribute-names are ignored.)
		  const attributeNameLowercase = attributeName.toLowerCase();

		  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
		  // If the attribute-name case-insensitively matches the string
		  // "Expires", the user agent MUST process the cookie-av as follows.
		  if (attributeNameLowercase === 'expires') {
		    // 1. Let the expiry-time be the result of parsing the attribute-value
		    //    as cookie-date (see Section 5.1.1).
		    const expiryTime = new Date(attributeValue);

		    // 2. If the attribute-value failed to parse as a cookie date, ignore
		    //    the cookie-av.

		    cookieAttributeList.expires = expiryTime;
		  } else if (attributeNameLowercase === 'max-age') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
		    // If the attribute-name case-insensitively matches the string "Max-
		    // Age", the user agent MUST process the cookie-av as follows.

		    // 1. If the first character of the attribute-value is not a DIGIT or a
		    //    "-" character, ignore the cookie-av.
		    const charCode = attributeValue.charCodeAt(0);
		    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
		      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		    }

		    // 2. If the remainder of attribute-value contains a non-DIGIT
		    //    character, ignore the cookie-av.
		    if (!/^\d+$/.test(attributeValue)) {
		      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		    }

		    // 3. Let delta-seconds be the attribute-value converted to an integer.
		    const deltaSeconds = Number(attributeValue);

		    // 4. Let cookie-age-limit be the maximum age of the cookie (which
		    //    SHOULD be 400 days or less, see Section 4.1.2.2).

		    // 5. Set delta-seconds to the smaller of its present value and cookie-
		    //    age-limit.
		    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

		    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
		    //    time be the earliest representable date and time.  Otherwise, let
		    //    the expiry-time be the current date and time plus delta-seconds
		    //    seconds.
		    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

		    // 7. Append an attribute to the cookie-attribute-list with an
		    //    attribute-name of Max-Age and an attribute-value of expiry-time.
		    cookieAttributeList.maxAge = deltaSeconds;
		  } else if (attributeNameLowercase === 'domain') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
		    // If the attribute-name case-insensitively matches the string "Domain",
		    // the user agent MUST process the cookie-av as follows.

		    // 1. Let cookie-domain be the attribute-value.
		    let cookieDomain = attributeValue;

		    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
		    //    cookie-domain without its leading %x2E (".").
		    if (cookieDomain[0] === '.') {
		      cookieDomain = cookieDomain.slice(1);
		    }

		    // 3. Convert the cookie-domain to lower case.
		    cookieDomain = cookieDomain.toLowerCase();

		    // 4. Append an attribute to the cookie-attribute-list with an
		    //    attribute-name of Domain and an attribute-value of cookie-domain.
		    cookieAttributeList.domain = cookieDomain;
		  } else if (attributeNameLowercase === 'path') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
		    // If the attribute-name case-insensitively matches the string "Path",
		    // the user agent MUST process the cookie-av as follows.

		    // 1. If the attribute-value is empty or if the first character of the
		    //    attribute-value is not %x2F ("/"):
		    let cookiePath = '';
		    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
		      // 1. Let cookie-path be the default-path.
		      cookiePath = '/';
		    } else {
		      // Otherwise:

		      // 1. Let cookie-path be the attribute-value.
		      cookiePath = attributeValue;
		    }

		    // 2. Append an attribute to the cookie-attribute-list with an
		    //    attribute-name of Path and an attribute-value of cookie-path.
		    cookieAttributeList.path = cookiePath;
		  } else if (attributeNameLowercase === 'secure') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
		    // If the attribute-name case-insensitively matches the string "Secure",
		    // the user agent MUST append an attribute to the cookie-attribute-list
		    // with an attribute-name of Secure and an empty attribute-value.

		    cookieAttributeList.secure = true;
		  } else if (attributeNameLowercase === 'httponly') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
		    // If the attribute-name case-insensitively matches the string
		    // "HttpOnly", the user agent MUST append an attribute to the cookie-
		    // attribute-list with an attribute-name of HttpOnly and an empty
		    // attribute-value.

		    cookieAttributeList.httpOnly = true;
		  } else if (attributeNameLowercase === 'samesite') {
		    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
		    // If the attribute-name case-insensitively matches the string
		    // "SameSite", the user agent MUST process the cookie-av as follows:

		    // 1. Let enforcement be "Default".
		    let enforcement = 'Default';
		    const attributeValueLowercase = attributeValue.toLowerCase();
		    // 2. If cookie-av's attribute-value is a case-insensitive match for
		    //    "None", set enforcement to "None".
		    if (attributeValueLowercase.includes('none')) {
		      enforcement = 'None';
		    }

		    // 3. If cookie-av's attribute-value is a case-insensitive match for
		    //    "Strict", set enforcement to "Strict".
		    if (attributeValueLowercase.includes('strict')) {
		      enforcement = 'Strict';
		    }

		    // 4. If cookie-av's attribute-value is a case-insensitive match for
		    //    "Lax", set enforcement to "Lax".
		    if (attributeValueLowercase.includes('lax')) {
		      enforcement = 'Lax';
		    }

		    // 5. Append an attribute to the cookie-attribute-list with an
		    //    attribute-name of "SameSite" and an attribute-value of
		    //    enforcement.
		    cookieAttributeList.sameSite = enforcement;
		  } else {
		    cookieAttributeList.unparsed ??= [];
		    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		  }

		  // 8. Return to Step 1 of this algorithm.
		  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		}
		parse = {
		  parseSetCookie,
		  parseUnparsedAttributes
		};
		return parse;
	}

	var cookies;
	var hasRequiredCookies;

	function requireCookies () {
		if (hasRequiredCookies) return cookies;
		hasRequiredCookies = 1;

		const {
		  parseSetCookie
		} = requireParse();
		const {
		  stringify,
		  getHeadersList
		} = requireUtil$1();
		const {
		  webidl
		} = requireWebidl();
		const {
		  Headers
		} = requireHeaders();

		/**
		 * @typedef {Object} Cookie
		 * @property {string} name
		 * @property {string} value
		 * @property {Date|number|undefined} expires
		 * @property {number|undefined} maxAge
		 * @property {string|undefined} domain
		 * @property {string|undefined} path
		 * @property {boolean|undefined} secure
		 * @property {boolean|undefined} httpOnly
		 * @property {'Strict'|'Lax'|'None'} sameSite
		 * @property {string[]} unparsed
		 */

		/**
		 * @param {Headers} headers
		 * @returns {Record<string, string>}
		 */
		function getCookies(headers) {
		  webidl.argumentLengthCheck(arguments, 1, {
		    header: 'getCookies'
		  });
		  webidl.brandCheck(headers, Headers, {
		    strict: false
		  });
		  const cookie = headers.get('cookie');
		  const out = {};
		  if (!cookie) {
		    return out;
		  }
		  for (const piece of cookie.split(';')) {
		    const [name, ...value] = piece.split('=');
		    out[name.trim()] = value.join('=');
		  }
		  return out;
		}

		/**
		 * @param {Headers} headers
		 * @param {string} name
		 * @param {{ path?: string, domain?: string }|undefined} attributes
		 * @returns {void}
		 */
		function deleteCookie(headers, name, attributes) {
		  webidl.argumentLengthCheck(arguments, 2, {
		    header: 'deleteCookie'
		  });
		  webidl.brandCheck(headers, Headers, {
		    strict: false
		  });
		  name = webidl.converters.DOMString(name);
		  attributes = webidl.converters.DeleteCookieAttributes(attributes);

		  // Matches behavior of
		  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
		  setCookie(headers, {
		    name,
		    value: '',
		    expires: new Date(0),
		    ...attributes
		  });
		}

		/**
		 * @param {Headers} headers
		 * @returns {Cookie[]}
		 */
		function getSetCookies(headers) {
		  webidl.argumentLengthCheck(arguments, 1, {
		    header: 'getSetCookies'
		  });
		  webidl.brandCheck(headers, Headers, {
		    strict: false
		  });
		  const cookies = getHeadersList(headers).cookies;
		  if (!cookies) {
		    return [];
		  }

		  // In older versions of undici, cookies is a list of name:value.
		  return cookies.map(pair => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
		}

		/**
		 * @param {Headers} headers
		 * @param {Cookie} cookie
		 * @returns {void}
		 */
		function setCookie(headers, cookie) {
		  webidl.argumentLengthCheck(arguments, 2, {
		    header: 'setCookie'
		  });
		  webidl.brandCheck(headers, Headers, {
		    strict: false
		  });
		  cookie = webidl.converters.Cookie(cookie);
		  const str = stringify(cookie);
		  if (str) {
		    headers.append('Set-Cookie', stringify(cookie));
		  }
		}
		webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([{
		  converter: webidl.nullableConverter(webidl.converters.DOMString),
		  key: 'path',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters.DOMString),
		  key: 'domain',
		  defaultValue: null
		}]);
		webidl.converters.Cookie = webidl.dictionaryConverter([{
		  converter: webidl.converters.DOMString,
		  key: 'name'
		}, {
		  converter: webidl.converters.DOMString,
		  key: 'value'
		}, {
		  converter: webidl.nullableConverter(value => {
		    if (typeof value === 'number') {
		      return webidl.converters['unsigned long long'](value);
		    }
		    return new Date(value);
		  }),
		  key: 'expires',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters['long long']),
		  key: 'maxAge',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters.DOMString),
		  key: 'domain',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters.DOMString),
		  key: 'path',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters.boolean),
		  key: 'secure',
		  defaultValue: null
		}, {
		  converter: webidl.nullableConverter(webidl.converters.boolean),
		  key: 'httpOnly',
		  defaultValue: null
		}, {
		  converter: webidl.converters.USVString,
		  key: 'sameSite',
		  allowedValues: ['Strict', 'Lax', 'None']
		}, {
		  converter: webidl.sequenceConverter(webidl.converters.DOMString),
		  key: 'unparsed',
		  defaultValue: []
		}]);
		cookies = {
		  getCookies,
		  deleteCookie,
		  getSetCookies,
		  setCookie
		};
		return cookies;
	}

	var constants;
	var hasRequiredConstants;

	function requireConstants () {
		if (hasRequiredConstants) return constants;
		hasRequiredConstants = 1;

		// This is a Globally Unique Identifier unique used
		// to validate that the endpoint accepts websocket
		// connections.
		// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
		const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';

		/** @type {PropertyDescriptor} */
		const staticPropertyDescriptors = {
		  enumerable: true,
		  writable: false,
		  configurable: false
		};
		const states = {
		  CONNECTING: 0,
		  OPEN: 1,
		  CLOSING: 2,
		  CLOSED: 3
		};
		const opcodes = {
		  CONTINUATION: 0x0,
		  TEXT: 0x1,
		  BINARY: 0x2,
		  CLOSE: 0x8,
		  PING: 0x9,
		  PONG: 0xA
		};
		const maxUnsigned16Bit = 2 ** 16 - 1; // 65535

		const parserStates = {
		  INFO: 0,
		  PAYLOADLENGTH_16: 2,
		  PAYLOADLENGTH_64: 3,
		  READ_DATA: 4
		};
		const emptyBuffer = Buffer.allocUnsafe(0);
		constants = {
		  uid,
		  staticPropertyDescriptors,
		  states,
		  opcodes,
		  maxUnsigned16Bit,
		  parserStates,
		  emptyBuffer
		};
		return constants;
	}

	var symbols;
	var hasRequiredSymbols;

	function requireSymbols () {
		if (hasRequiredSymbols) return symbols;
		hasRequiredSymbols = 1;

		symbols = {
		  kWebSocketURL: Symbol('url'),
		  kReadyState: Symbol('ready state'),
		  kController: Symbol('controller'),
		  kResponse: Symbol('response'),
		  kBinaryType: Symbol('binary type'),
		  kSentClose: Symbol('sent close'),
		  kReceivedClose: Symbol('received close'),
		  kByteParser: Symbol('byte parser')
		};
		return symbols;
	}

	var events;
	var hasRequiredEvents;

	function requireEvents () {
		if (hasRequiredEvents) return events;
		hasRequiredEvents = 1;

		const {
		  webidl
		} = requireWebidl();
		const {
		  kEnumerableProperty
		} = requireUtil$6();
		const {
		  MessagePort
		} = require$$0__default$7["default"];

		/**
		 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
		 */
		class MessageEvent extends Event {
		  #eventInit;
		  constructor(type, eventInitDict = {}) {
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'MessageEvent constructor'
		    });
		    type = webidl.converters.DOMString(type);
		    eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
		    super(type, eventInitDict);
		    this.#eventInit = eventInitDict;
		  }
		  get data() {
		    webidl.brandCheck(this, MessageEvent);
		    return this.#eventInit.data;
		  }
		  get origin() {
		    webidl.brandCheck(this, MessageEvent);
		    return this.#eventInit.origin;
		  }
		  get lastEventId() {
		    webidl.brandCheck(this, MessageEvent);
		    return this.#eventInit.lastEventId;
		  }
		  get source() {
		    webidl.brandCheck(this, MessageEvent);
		    return this.#eventInit.source;
		  }
		  get ports() {
		    webidl.brandCheck(this, MessageEvent);
		    if (!Object.isFrozen(this.#eventInit.ports)) {
		      Object.freeze(this.#eventInit.ports);
		    }
		    return this.#eventInit.ports;
		  }
		  initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = '', lastEventId = '', source = null, ports = []) {
		    webidl.brandCheck(this, MessageEvent);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'MessageEvent.initMessageEvent'
		    });
		    return new MessageEvent(type, {
		      bubbles,
		      cancelable,
		      data,
		      origin,
		      lastEventId,
		      source,
		      ports
		    });
		  }
		}

		/**
		 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
		 */
		class CloseEvent extends Event {
		  #eventInit;
		  constructor(type, eventInitDict = {}) {
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'CloseEvent constructor'
		    });
		    type = webidl.converters.DOMString(type);
		    eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
		    super(type, eventInitDict);
		    this.#eventInit = eventInitDict;
		  }
		  get wasClean() {
		    webidl.brandCheck(this, CloseEvent);
		    return this.#eventInit.wasClean;
		  }
		  get code() {
		    webidl.brandCheck(this, CloseEvent);
		    return this.#eventInit.code;
		  }
		  get reason() {
		    webidl.brandCheck(this, CloseEvent);
		    return this.#eventInit.reason;
		  }
		}

		// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
		class ErrorEvent extends Event {
		  #eventInit;
		  constructor(type, eventInitDict) {
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'ErrorEvent constructor'
		    });
		    super(type, eventInitDict);
		    type = webidl.converters.DOMString(type);
		    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
		    this.#eventInit = eventInitDict;
		  }
		  get message() {
		    webidl.brandCheck(this, ErrorEvent);
		    return this.#eventInit.message;
		  }
		  get filename() {
		    webidl.brandCheck(this, ErrorEvent);
		    return this.#eventInit.filename;
		  }
		  get lineno() {
		    webidl.brandCheck(this, ErrorEvent);
		    return this.#eventInit.lineno;
		  }
		  get colno() {
		    webidl.brandCheck(this, ErrorEvent);
		    return this.#eventInit.colno;
		  }
		  get error() {
		    webidl.brandCheck(this, ErrorEvent);
		    return this.#eventInit.error;
		  }
		}
		Object.defineProperties(MessageEvent.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'MessageEvent',
		    configurable: true
		  },
		  data: kEnumerableProperty,
		  origin: kEnumerableProperty,
		  lastEventId: kEnumerableProperty,
		  source: kEnumerableProperty,
		  ports: kEnumerableProperty,
		  initMessageEvent: kEnumerableProperty
		});
		Object.defineProperties(CloseEvent.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'CloseEvent',
		    configurable: true
		  },
		  reason: kEnumerableProperty,
		  code: kEnumerableProperty,
		  wasClean: kEnumerableProperty
		});
		Object.defineProperties(ErrorEvent.prototype, {
		  [Symbol.toStringTag]: {
		    value: 'ErrorEvent',
		    configurable: true
		  },
		  message: kEnumerableProperty,
		  filename: kEnumerableProperty,
		  lineno: kEnumerableProperty,
		  colno: kEnumerableProperty,
		  error: kEnumerableProperty
		});
		webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
		webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(webidl.converters.MessagePort);
		const eventInit = [{
		  key: 'bubbles',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'cancelable',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'composed',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}];
		webidl.converters.MessageEventInit = webidl.dictionaryConverter([...eventInit, {
		  key: 'data',
		  converter: webidl.converters.any,
		  defaultValue: null
		}, {
		  key: 'origin',
		  converter: webidl.converters.USVString,
		  defaultValue: ''
		}, {
		  key: 'lastEventId',
		  converter: webidl.converters.DOMString,
		  defaultValue: ''
		}, {
		  key: 'source',
		  // Node doesn't implement WindowProxy or ServiceWorker, so the only
		  // valid value for source is a MessagePort.
		  converter: webidl.nullableConverter(webidl.converters.MessagePort),
		  defaultValue: null
		}, {
		  key: 'ports',
		  converter: webidl.converters['sequence<MessagePort>'],
		  get defaultValue() {
		    return [];
		  }
		}]);
		webidl.converters.CloseEventInit = webidl.dictionaryConverter([...eventInit, {
		  key: 'wasClean',
		  converter: webidl.converters.boolean,
		  defaultValue: false
		}, {
		  key: 'code',
		  converter: webidl.converters['unsigned short'],
		  defaultValue: 0
		}, {
		  key: 'reason',
		  converter: webidl.converters.USVString,
		  defaultValue: ''
		}]);
		webidl.converters.ErrorEventInit = webidl.dictionaryConverter([...eventInit, {
		  key: 'message',
		  converter: webidl.converters.DOMString,
		  defaultValue: ''
		}, {
		  key: 'filename',
		  converter: webidl.converters.USVString,
		  defaultValue: ''
		}, {
		  key: 'lineno',
		  converter: webidl.converters['unsigned long'],
		  defaultValue: 0
		}, {
		  key: 'colno',
		  converter: webidl.converters['unsigned long'],
		  defaultValue: 0
		}, {
		  key: 'error',
		  converter: webidl.converters.any
		}]);
		events = {
		  MessageEvent,
		  CloseEvent,
		  ErrorEvent
		};
		return events;
	}

	var util;
	var hasRequiredUtil;

	function requireUtil () {
		if (hasRequiredUtil) return util;
		hasRequiredUtil = 1;

		const {
		  kReadyState,
		  kController,
		  kResponse,
		  kBinaryType,
		  kWebSocketURL
		} = requireSymbols();
		const {
		  states,
		  opcodes
		} = requireConstants();
		const {
		  MessageEvent,
		  ErrorEvent
		} = requireEvents();

		/* globals Blob */

		/**
		 * @param {import('./websocket').WebSocket} ws
		 */
		function isEstablished(ws) {
		  // If the server's response is validated as provided for above, it is
		  // said that _The WebSocket Connection is Established_ and that the
		  // WebSocket Connection is in the OPEN state.
		  return ws[kReadyState] === states.OPEN;
		}

		/**
		 * @param {import('./websocket').WebSocket} ws
		 */
		function isClosing(ws) {
		  // Upon either sending or receiving a Close control frame, it is said
		  // that _The WebSocket Closing Handshake is Started_ and that the
		  // WebSocket connection is in the CLOSING state.
		  return ws[kReadyState] === states.CLOSING;
		}

		/**
		 * @param {import('./websocket').WebSocket} ws
		 */
		function isClosed(ws) {
		  return ws[kReadyState] === states.CLOSED;
		}

		/**
		 * @see https://dom.spec.whatwg.org/#concept-event-fire
		 * @param {string} e
		 * @param {EventTarget} target
		 * @param {EventInit | undefined} eventInitDict
		 */
		function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
		  // 1. If eventConstructor is not given, then let eventConstructor be Event.

		  // 2. Let event be the result of creating an event given eventConstructor,
		  //    in the relevant realm of target.
		  // 3. Initialize event’s type attribute to e.
		  const event = new eventConstructor(e, eventInitDict); // eslint-disable-line new-cap

		  // 4. Initialize any other IDL attributes of event as described in the
		  //    invocation of this algorithm.

		  // 5. Return the result of dispatching event at target, with legacy target
		  //    override flag set if set.
		  target.dispatchEvent(event);
		}

		/**
		 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		 * @param {import('./websocket').WebSocket} ws
		 * @param {number} type Opcode
		 * @param {Buffer} data application data
		 */
		function websocketMessageReceived(ws, type, data) {
		  // 1. If ready state is not OPEN (1), then return.
		  if (ws[kReadyState] !== states.OPEN) {
		    return;
		  }

		  // 2. Let dataForEvent be determined by switching on type and binary type:
		  let dataForEvent;
		  if (type === opcodes.TEXT) {
		    // -> type indicates that the data is Text
		    //      a new DOMString containing data
		    try {
		      dataForEvent = new TextDecoder('utf-8', {
		        fatal: true
		      }).decode(data);
		    } catch {
		      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.');
		      return;
		    }
		  } else if (type === opcodes.BINARY) {
		    if (ws[kBinaryType] === 'blob') {
		      // -> type indicates that the data is Binary and binary type is "blob"
		      //      a new Blob object, created in the relevant Realm of the WebSocket
		      //      object, that represents data as its raw data
		      dataForEvent = new Blob([data]);
		    } else {
		      // -> type indicates that the data is Binary and binary type is "arraybuffer"
		      //      a new ArrayBuffer object, created in the relevant Realm of the
		      //      WebSocket object, whose contents are data
		      dataForEvent = new Uint8Array(data).buffer;
		    }
		  }

		  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
		  //    with the origin attribute initialized to the serialization of the WebSocket
		  //    object’s url's origin, and the data attribute initialized to dataForEvent.
		  fireEvent('message', ws, MessageEvent, {
		    origin: ws[kWebSocketURL].origin,
		    data: dataForEvent
		  });
		}

		/**
		 * @see https://datatracker.ietf.org/doc/html/rfc6455
		 * @see https://datatracker.ietf.org/doc/html/rfc2616
		 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
		 * @param {string} protocol
		 */
		function isValidSubprotocol(protocol) {
		  // If present, this value indicates one
		  // or more comma-separated subprotocol the client wishes to speak,
		  // ordered by preference.  The elements that comprise this value
		  // MUST be non-empty strings with characters in the range U+0021 to
		  // U+007E not including separator characters as defined in
		  // [RFC2616] and MUST all be unique strings.
		  if (protocol.length === 0) {
		    return false;
		  }
		  for (const char of protocol) {
		    const code = char.charCodeAt(0);
		    if (code < 0x21 || code > 0x7E || char === '(' || char === ')' || char === '<' || char === '>' || char === '@' || char === ',' || char === ';' || char === ':' || char === '\\' || char === '"' || char === '/' || char === '[' || char === ']' || char === '?' || char === '=' || char === '{' || char === '}' || code === 32 ||
		    // SP
		    code === 9 // HT
		    ) {
		      return false;
		    }
		  }
		  return true;
		}

		/**
		 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
		 * @param {number} code
		 */
		function isValidStatusCode(code) {
		  if (code >= 1000 && code < 1015) {
		    return code !== 1004 &&
		    // reserved
		    code !== 1005 &&
		    // "MUST NOT be set as a status code"
		    code !== 1006 // "MUST NOT be set as a status code"
		    ;
		  }
		  return code >= 3000 && code <= 4999;
		}

		/**
		 * @param {import('./websocket').WebSocket} ws
		 * @param {string|undefined} reason
		 */
		function failWebsocketConnection(ws, reason) {
		  const {
		    [kController]: controller,
		    [kResponse]: response
		  } = ws;
		  controller.abort();
		  if (response?.socket && !response.socket.destroyed) {
		    response.socket.destroy();
		  }
		  if (reason) {
		    fireEvent('error', ws, ErrorEvent, {
		      error: new Error(reason)
		    });
		  }
		}
		util = {
		  isEstablished,
		  isClosing,
		  isClosed,
		  fireEvent,
		  isValidSubprotocol,
		  isValidStatusCode,
		  failWebsocketConnection,
		  websocketMessageReceived
		};
		return util;
	}

	var connection;
	var hasRequiredConnection;

	function requireConnection () {
		if (hasRequiredConnection) return connection;
		hasRequiredConnection = 1;

		const diagnosticsChannel = require$$0__default$8["default"];
		const {
		  uid,
		  states
		} = requireConstants();
		const {
		  kReadyState,
		  kSentClose,
		  kByteParser,
		  kReceivedClose
		} = requireSymbols();
		const {
		  fireEvent,
		  failWebsocketConnection
		} = requireUtil();
		const {
		  CloseEvent
		} = requireEvents();
		const {
		  makeRequest
		} = requireRequest();
		const {
		  fetching
		} = requireFetch();
		const {
		  Headers
		} = requireHeaders();
		const {
		  getGlobalDispatcher
		} = requireGlobal();
		const {
		  kHeadersList
		} = requireSymbols$4();
		const channels = {};
		channels.open = diagnosticsChannel.channel('undici:websocket:open');
		channels.close = diagnosticsChannel.channel('undici:websocket:close');
		channels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error');

		/** @type {import('crypto')} */
		let crypto;
		try {
		  crypto = require('crypto');
		} catch {}

		/**
		 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
		 * @param {URL} url
		 * @param {string|string[]} protocols
		 * @param {import('./websocket').WebSocket} ws
		 * @param {(response: any) => void} onEstablish
		 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
		 */
		function establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
		  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
		  //    scheme is "ws", and to "https" otherwise.
		  const requestURL = url;
		  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:';

		  // 2. Let request be a new request, whose URL is requestURL, client is client,
		  //    service-workers mode is "none", referrer is "no-referrer", mode is
		  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
		  //    and redirect mode is "error".
		  const request = makeRequest({
		    urlList: [requestURL],
		    serviceWorkers: 'none',
		    referrer: 'no-referrer',
		    mode: 'websocket',
		    credentials: 'include',
		    cache: 'no-store',
		    redirect: 'error'
		  });

		  // Note: undici extension, allow setting custom headers.
		  if (options.headers) {
		    const headersList = new Headers(options.headers)[kHeadersList];
		    request.headersList = headersList;
		  }

		  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
		  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
		  // Note: both of these are handled by undici currently.
		  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

		  // 5. Let keyValue be a nonce consisting of a randomly selected
		  //    16-byte value that has been forgiving-base64-encoded and
		  //    isomorphic encoded.
		  const keyValue = crypto.randomBytes(16).toString('base64');

		  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
		  //    header list.
		  request.headersList.append('sec-websocket-key', keyValue);

		  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
		  //    header list.
		  request.headersList.append('sec-websocket-version', '13');

		  // 8. For each protocol in protocols, combine
		  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
		  //    list.
		  for (const protocol of protocols) {
		    request.headersList.append('sec-websocket-protocol', protocol);
		  }

		  // 9. Let permessageDeflate be a user-agent defined
		  //    "permessage-deflate" extension header value.
		  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
		  // TODO: enable once permessage-deflate is supported
		  const permessageDeflate = ''; // 'permessage-deflate; 15'

		  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
		  //     request’s header list.
		  // request.headersList.append('sec-websocket-extensions', permessageDeflate)

		  // 11. Fetch request with useParallelQueue set to true, and
		  //     processResponse given response being these steps:
		  const controller = fetching({
		    request,
		    useParallelQueue: true,
		    dispatcher: options.dispatcher ?? getGlobalDispatcher(),
		    processResponse(response) {
		      // 1. If response is a network error or its status is not 101,
		      //    fail the WebSocket connection.
		      if (response.type === 'error' || response.status !== 101) {
		        failWebsocketConnection(ws, 'Received network error or non-101 status code.');
		        return;
		      }

		      // 2. If protocols is not the empty list and extracting header
		      //    list values given `Sec-WebSocket-Protocol` and response’s
		      //    header list results in null, failure, or the empty byte
		      //    sequence, then fail the WebSocket connection.
		      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
		        failWebsocketConnection(ws, 'Server did not respond with sent protocols.');
		        return;
		      }

		      // 3. Follow the requirements stated step 2 to step 6, inclusive,
		      //    of the last set of steps in section 4.1 of The WebSocket
		      //    Protocol to validate response. This either results in fail
		      //    the WebSocket connection or the WebSocket connection is
		      //    established.

		      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
		      //    header field contains a value that is not an ASCII case-
		      //    insensitive match for the value "websocket", the client MUST
		      //    _Fail the WebSocket Connection_.
		      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
		        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
		        return;
		      }

		      // 3. If the response lacks a |Connection| header field or the
		      //    |Connection| header field doesn't contain a token that is an
		      //    ASCII case-insensitive match for the value "Upgrade", the client
		      //    MUST _Fail the WebSocket Connection_.
		      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
		        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
		        return;
		      }

		      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
		      //    the |Sec-WebSocket-Accept| contains a value other than the
		      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
		      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
		      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
		      //    trailing whitespace, the client MUST _Fail the WebSocket
		      //    Connection_.
		      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept');
		      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64');
		      if (secWSAccept !== digest) {
		        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.');
		        return;
		      }

		      // 5. If the response includes a |Sec-WebSocket-Extensions| header
		      //    field and this header field indicates the use of an extension
		      //    that was not present in the client's handshake (the server has
		      //    indicated an extension not requested by the client), the client
		      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
		      //    header field to determine which extensions are requested is
		      //    discussed in Section 9.1.)
		      const secExtension = response.headersList.get('Sec-WebSocket-Extensions');
		      if (secExtension !== null && secExtension !== permessageDeflate) {
		        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.');
		        return;
		      }

		      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
		      //    and this header field indicates the use of a subprotocol that was
		      //    not present in the client's handshake (the server has indicated a
		      //    subprotocol not requested by the client), the client MUST _Fail
		      //    the WebSocket Connection_.
		      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol');
		      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {
		        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.');
		        return;
		      }
		      response.socket.on('data', onSocketData);
		      response.socket.on('close', onSocketClose);
		      response.socket.on('error', onSocketError);
		      if (channels.open.hasSubscribers) {
		        channels.open.publish({
		          address: response.socket.address(),
		          protocol: secProtocol,
		          extensions: secExtension
		        });
		      }
		      onEstablish(response);
		    }
		  });
		  return controller;
		}

		/**
		 * @param {Buffer} chunk
		 */
		function onSocketData(chunk) {
		  if (!this.ws[kByteParser].write(chunk)) {
		    this.pause();
		  }
		}

		/**
		 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
		 */
		function onSocketClose() {
		  const {
		    ws
		  } = this;

		  // If the TCP connection was closed after the
		  // WebSocket closing handshake was completed, the WebSocket connection
		  // is said to have been closed _cleanly_.
		  const wasClean = ws[kSentClose] && ws[kReceivedClose];
		  let code = 1005;
		  let reason = '';
		  const result = ws[kByteParser].closingInfo;
		  if (result) {
		    code = result.code ?? 1005;
		    reason = result.reason;
		  } else if (!ws[kSentClose]) {
		    // If _The WebSocket
		    // Connection is Closed_ and no Close control frame was received by the
		    // endpoint (such as could occur if the underlying transport connection
		    // is lost), _The WebSocket Connection Close Code_ is considered to be
		    // 1006.
		    code = 1006;
		  }

		  // 1. Change the ready state to CLOSED (3).
		  ws[kReadyState] = states.CLOSED;

		  // 2. If the user agent was required to fail the WebSocket
		  //    connection, or if the WebSocket connection was closed
		  //    after being flagged as full, fire an event named error
		  //    at the WebSocket object.
		  // TODO

		  // 3. Fire an event named close at the WebSocket object,
		  //    using CloseEvent, with the wasClean attribute
		  //    initialized to true if the connection closed cleanly
		  //    and false otherwise, the code attribute initialized to
		  //    the WebSocket connection close code, and the reason
		  //    attribute initialized to the result of applying UTF-8
		  //    decode without BOM to the WebSocket connection close
		  //    reason.
		  fireEvent('close', ws, CloseEvent, {
		    wasClean,
		    code,
		    reason
		  });
		  if (channels.close.hasSubscribers) {
		    channels.close.publish({
		      websocket: ws,
		      code,
		      reason
		    });
		  }
		}
		function onSocketError(error) {
		  const {
		    ws
		  } = this;
		  ws[kReadyState] = states.CLOSING;
		  if (channels.socketError.hasSubscribers) {
		    channels.socketError.publish(error);
		  }
		  this.destroy();
		}
		connection = {
		  establishWebSocketConnection
		};
		return connection;
	}

	var frame$1;
	var hasRequiredFrame;

	function requireFrame () {
		if (hasRequiredFrame) return frame$1;
		hasRequiredFrame = 1;

		const {
		  maxUnsigned16Bit
		} = requireConstants();

		/** @type {import('crypto')} */
		let crypto;
		try {
		  crypto = require('crypto');
		} catch {}
		class WebsocketFrameSend {
		  /**
		   * @param {Buffer|undefined} data
		   */
		  constructor(data) {
		    this.frameData = data;
		    this.maskKey = crypto.randomBytes(4);
		  }
		  createFrame(opcode) {
		    const bodyLength = this.frameData?.byteLength ?? 0;

		    /** @type {number} */
		    let payloadLength = bodyLength; // 0-125
		    let offset = 6;
		    if (bodyLength > maxUnsigned16Bit) {
		      offset += 8; // payload length is next 8 bytes
		      payloadLength = 127;
		    } else if (bodyLength > 125) {
		      offset += 2; // payload length is next 2 bytes
		      payloadLength = 126;
		    }
		    const buffer = Buffer.allocUnsafe(bodyLength + offset);

		    // Clear first 2 bytes, everything else is overwritten
		    buffer[0] = buffer[1] = 0;
		    buffer[0] |= 0x80; // FIN
		    buffer[0] = (buffer[0] & 0xF0) + opcode; // opcode

		    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
		    buffer[offset - 4] = this.maskKey[0];
		    buffer[offset - 3] = this.maskKey[1];
		    buffer[offset - 2] = this.maskKey[2];
		    buffer[offset - 1] = this.maskKey[3];
		    buffer[1] = payloadLength;
		    if (payloadLength === 126) {
		      buffer.writeUInt16BE(bodyLength, 2);
		    } else if (payloadLength === 127) {
		      // Clear extended payload length
		      buffer[2] = buffer[3] = 0;
		      buffer.writeUIntBE(bodyLength, 4, 6);
		    }
		    buffer[1] |= 0x80; // MASK

		    // mask body
		    for (let i = 0; i < bodyLength; i++) {
		      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
		    }
		    return buffer;
		  }
		}
		frame$1 = {
		  WebsocketFrameSend
		};
		return frame$1;
	}

	var receiver;
	var hasRequiredReceiver;

	function requireReceiver () {
		if (hasRequiredReceiver) return receiver;
		hasRequiredReceiver = 1;

		const {
		  Writable
		} = stream__default["default"];
		const diagnosticsChannel = require$$0__default$8["default"];
		const {
		  parserStates,
		  opcodes,
		  states,
		  emptyBuffer
		} = requireConstants();
		const {
		  kReadyState,
		  kSentClose,
		  kResponse,
		  kReceivedClose
		} = requireSymbols();
		const {
		  isValidStatusCode,
		  failWebsocketConnection,
		  websocketMessageReceived
		} = requireUtil();
		const {
		  WebsocketFrameSend
		} = requireFrame();

		// This code was influenced by ws released under the MIT license.
		// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
		// Copyright (c) 2013 Arnout Kazemier and contributors
		// Copyright (c) 2016 Luigi Pinca and contributors

		const channels = {};
		channels.ping = diagnosticsChannel.channel('undici:websocket:ping');
		channels.pong = diagnosticsChannel.channel('undici:websocket:pong');
		class ByteParser extends Writable {
		  #buffers = [];
		  #byteOffset = 0;
		  #state = parserStates.INFO;
		  #info = {};
		  #fragments = [];
		  constructor(ws) {
		    super();
		    this.ws = ws;
		  }

		  /**
		   * @param {Buffer} chunk
		   * @param {() => void} callback
		   */
		  _write(chunk, _, callback) {
		    this.#buffers.push(chunk);
		    this.#byteOffset += chunk.length;
		    this.run(callback);
		  }

		  /**
		   * Runs whenever a new chunk is received.
		   * Callback is called whenever there are no more chunks buffering,
		   * or not enough bytes are buffered to parse.
		   */
		  run(callback) {
		    while (true) {
		      if (this.#state === parserStates.INFO) {
		        // If there aren't enough bytes to parse the payload length, etc.
		        if (this.#byteOffset < 2) {
		          return callback();
		        }
		        const buffer = this.consume(2);
		        this.#info.fin = (buffer[0] & 0x80) !== 0;
		        this.#info.opcode = buffer[0] & 0x0F;

		        // If we receive a fragmented message, we use the type of the first
		        // frame to parse the full message as binary/text, when it's terminated
		        this.#info.originalOpcode ??= this.#info.opcode;
		        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
		        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
		          // Only text and binary frames can be fragmented
		          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.');
		          return;
		        }
		        const payloadLength = buffer[1] & 0x7F;
		        if (payloadLength <= 125) {
		          this.#info.payloadLength = payloadLength;
		          this.#state = parserStates.READ_DATA;
		        } else if (payloadLength === 126) {
		          this.#state = parserStates.PAYLOADLENGTH_16;
		        } else if (payloadLength === 127) {
		          this.#state = parserStates.PAYLOADLENGTH_64;
		        }
		        if (this.#info.fragmented && payloadLength > 125) {
		          // A fragmented frame can't be fragmented itself
		          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.');
		          return;
		        } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
		          // Control frames can have a payload length of 125 bytes MAX
		          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.');
		          return;
		        } else if (this.#info.opcode === opcodes.CLOSE) {
		          if (payloadLength === 1) {
		            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.');
		            return;
		          }
		          const body = this.consume(payloadLength);
		          this.#info.closeInfo = this.parseCloseBody(false, body);
		          if (!this.ws[kSentClose]) {
		            // If an endpoint receives a Close frame and did not previously send a
		            // Close frame, the endpoint MUST send a Close frame in response.  (When
		            // sending a Close frame in response, the endpoint typically echos the
		            // status code it received.)
		            const body = Buffer.allocUnsafe(2);
		            body.writeUInt16BE(this.#info.closeInfo.code, 0);
		            const closeFrame = new WebsocketFrameSend(body);
		            this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), err => {
		              if (!err) {
		                this.ws[kSentClose] = true;
		              }
		            });
		          }

		          // Upon either sending or receiving a Close control frame, it is said
		          // that _The WebSocket Closing Handshake is Started_ and that the
		          // WebSocket connection is in the CLOSING state.
		          this.ws[kReadyState] = states.CLOSING;
		          this.ws[kReceivedClose] = true;
		          this.end();
		          return;
		        } else if (this.#info.opcode === opcodes.PING) {
		          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
		          // response, unless it already received a Close frame.
		          // A Pong frame sent in response to a Ping frame must have identical
		          // "Application data"

		          const body = this.consume(payloadLength);
		          if (!this.ws[kReceivedClose]) {
		            const frame = new WebsocketFrameSend(body);
		            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
		            if (channels.ping.hasSubscribers) {
		              channels.ping.publish({
		                payload: body
		              });
		            }
		          }
		          this.#state = parserStates.INFO;
		          if (this.#byteOffset > 0) {
		            continue;
		          } else {
		            callback();
		            return;
		          }
		        } else if (this.#info.opcode === opcodes.PONG) {
		          // A Pong frame MAY be sent unsolicited.  This serves as a
		          // unidirectional heartbeat.  A response to an unsolicited Pong frame is
		          // not expected.

		          const body = this.consume(payloadLength);
		          if (channels.pong.hasSubscribers) {
		            channels.pong.publish({
		              payload: body
		            });
		          }
		          if (this.#byteOffset > 0) {
		            continue;
		          } else {
		            callback();
		            return;
		          }
		        }
		      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
		        if (this.#byteOffset < 2) {
		          return callback();
		        }
		        const buffer = this.consume(2);
		        this.#info.payloadLength = buffer.readUInt16BE(0);
		        this.#state = parserStates.READ_DATA;
		      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
		        if (this.#byteOffset < 8) {
		          return callback();
		        }
		        const buffer = this.consume(8);
		        const upper = buffer.readUInt32BE(0);

		        // 2^31 is the maxinimum bytes an arraybuffer can contain
		        // on 32-bit systems. Although, on 64-bit systems, this is
		        // 2^53-1 bytes.
		        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
		        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
		        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
		        if (upper > 2 ** 31 - 1) {
		          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.');
		          return;
		        }
		        const lower = buffer.readUInt32BE(4);
		        this.#info.payloadLength = (upper << 8) + lower;
		        this.#state = parserStates.READ_DATA;
		      } else if (this.#state === parserStates.READ_DATA) {
		        if (this.#byteOffset < this.#info.payloadLength) {
		          // If there is still more data in this chunk that needs to be read
		          return callback();
		        } else if (this.#byteOffset >= this.#info.payloadLength) {
		          // If the server sent multiple frames in a single chunk

		          const body = this.consume(this.#info.payloadLength);
		          this.#fragments.push(body);

		          // If the frame is unfragmented, or a fragmented frame was terminated,
		          // a message was received
		          if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
		            const fullMessage = Buffer.concat(this.#fragments);
		            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
		            this.#info = {};
		            this.#fragments.length = 0;
		          }
		          this.#state = parserStates.INFO;
		        }
		      }
		      if (this.#byteOffset > 0) {
		        continue;
		      } else {
		        callback();
		        break;
		      }
		    }
		  }

		  /**
		   * Take n bytes from the buffered Buffers
		   * @param {number} n
		   * @returns {Buffer|null}
		   */
		  consume(n) {
		    if (n > this.#byteOffset) {
		      return null;
		    } else if (n === 0) {
		      return emptyBuffer;
		    }
		    if (this.#buffers[0].length === n) {
		      this.#byteOffset -= this.#buffers[0].length;
		      return this.#buffers.shift();
		    }
		    const buffer = Buffer.allocUnsafe(n);
		    let offset = 0;
		    while (offset !== n) {
		      const next = this.#buffers[0];
		      const {
		        length
		      } = next;
		      if (length + offset === n) {
		        buffer.set(this.#buffers.shift(), offset);
		        break;
		      } else if (length + offset > n) {
		        buffer.set(next.subarray(0, n - offset), offset);
		        this.#buffers[0] = next.subarray(n - offset);
		        break;
		      } else {
		        buffer.set(this.#buffers.shift(), offset);
		        offset += next.length;
		      }
		    }
		    this.#byteOffset -= n;
		    return buffer;
		  }
		  parseCloseBody(onlyCode, data) {
		    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
		    /** @type {number|undefined} */
		    let code;
		    if (data.length >= 2) {
		      // _The WebSocket Connection Close Code_ is
		      // defined as the status code (Section 7.4) contained in the first Close
		      // control frame received by the application
		      code = data.readUInt16BE(0);
		    }
		    if (onlyCode) {
		      if (!isValidStatusCode(code)) {
		        return null;
		      }
		      return {
		        code
		      };
		    }

		    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
		    /** @type {Buffer} */
		    let reason = data.subarray(2);

		    // Remove BOM
		    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
		      reason = reason.subarray(3);
		    }
		    if (code !== undefined && !isValidStatusCode(code)) {
		      return null;
		    }
		    try {
		      // TODO: optimize this
		      reason = new TextDecoder('utf-8', {
		        fatal: true
		      }).decode(reason);
		    } catch {
		      return null;
		    }
		    return {
		      code,
		      reason
		    };
		  }
		  get closingInfo() {
		    return this.#info.closeInfo;
		  }
		}
		receiver = {
		  ByteParser
		};
		return receiver;
	}

	var websocket;
	var hasRequiredWebsocket;

	function requireWebsocket () {
		if (hasRequiredWebsocket) return websocket;
		hasRequiredWebsocket = 1;

		const {
		  webidl
		} = requireWebidl();
		const {
		  DOMException
		} = requireConstants$3();
		const {
		  URLSerializer
		} = requireDataURL();
		const {
		  getGlobalOrigin
		} = requireGlobal$1();
		const {
		  staticPropertyDescriptors,
		  states,
		  opcodes,
		  emptyBuffer
		} = requireConstants();
		const {
		  kWebSocketURL,
		  kReadyState,
		  kController,
		  kBinaryType,
		  kResponse,
		  kSentClose,
		  kByteParser
		} = requireSymbols();
		const {
		  isEstablished,
		  isClosing,
		  isValidSubprotocol,
		  failWebsocketConnection,
		  fireEvent
		} = requireUtil();
		const {
		  establishWebSocketConnection
		} = requireConnection();
		const {
		  WebsocketFrameSend
		} = requireFrame();
		const {
		  ByteParser
		} = requireReceiver();
		const {
		  kEnumerableProperty,
		  isBlobLike
		} = requireUtil$6();
		const {
		  getGlobalDispatcher
		} = requireGlobal();
		const {
		  types
		} = require$$1__default["default"];
		let experimentalWarned = false;

		// https://websockets.spec.whatwg.org/#interface-definition
		class WebSocket extends EventTarget {
		  #events = {
		    open: null,
		    error: null,
		    close: null,
		    message: null
		  };
		  #bufferedAmount = 0;
		  #protocol = '';
		  #extensions = '';

		  /**
		   * @param {string} url
		   * @param {string|string[]} protocols
		   */
		  constructor(url, protocols = []) {
		    super();
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'WebSocket constructor'
		    });
		    if (!experimentalWarned) {
		      experimentalWarned = true;
		      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
		        code: 'UNDICI-WS'
		      });
		    }
		    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols);
		    url = webidl.converters.USVString(url);
		    protocols = options.protocols;

		    // 1. Let baseURL be this's relevant settings object's API base URL.
		    const baseURL = getGlobalOrigin();

		    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
		    let urlRecord;
		    try {
		      urlRecord = new URL(url, baseURL);
		    } catch (e) {
		      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
		      throw new DOMException(e, 'SyntaxError');
		    }

		    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
		    if (urlRecord.protocol === 'http:') {
		      urlRecord.protocol = 'ws:';
		    } else if (urlRecord.protocol === 'https:') {
		      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
		      urlRecord.protocol = 'wss:';
		    }

		    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
		    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
		      throw new DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, 'SyntaxError');
		    }

		    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
		    //    DOMException.
		    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
		      throw new DOMException('Got fragment', 'SyntaxError');
		    }

		    // 8. If protocols is a string, set protocols to a sequence consisting
		    //    of just that string.
		    if (typeof protocols === 'string') {
		      protocols = [protocols];
		    }

		    // 9. If any of the values in protocols occur more than once or otherwise
		    //    fail to match the requirements for elements that comprise the value
		    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
		    //    protocol, then throw a "SyntaxError" DOMException.
		    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
		      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
		    }
		    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
		      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
		    }

		    // 10. Set this's url to urlRecord.
		    this[kWebSocketURL] = new URL(urlRecord.href);

		    // 11. Let client be this's relevant settings object.

		    // 12. Run this step in parallel:

		    //    1. Establish a WebSocket connection given urlRecord, protocols,
		    //       and client.
		    this[kController] = establishWebSocketConnection(urlRecord, protocols, this, response => this.#onConnectionEstablished(response), options);

		    // Each WebSocket object has an associated ready state, which is a
		    // number representing the state of the connection. Initially it must
		    // be CONNECTING (0).
		    this[kReadyState] = WebSocket.CONNECTING;

		    // The extensions attribute must initially return the empty string.

		    // The protocol attribute must initially return the empty string.

		    // Each WebSocket object has an associated binary type, which is a
		    // BinaryType. Initially it must be "blob".
		    this[kBinaryType] = 'blob';
		  }

		  /**
		   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
		   * @param {number|undefined} code
		   * @param {string|undefined} reason
		   */
		  close(code = undefined, reason = undefined) {
		    webidl.brandCheck(this, WebSocket);
		    if (code !== undefined) {
		      code = webidl.converters['unsigned short'](code, {
		        clamp: true
		      });
		    }
		    if (reason !== undefined) {
		      reason = webidl.converters.USVString(reason);
		    }

		    // 1. If code is present, but is neither an integer equal to 1000 nor an
		    //    integer in the range 3000 to 4999, inclusive, throw an
		    //    "InvalidAccessError" DOMException.
		    if (code !== undefined) {
		      if (code !== 1000 && (code < 3000 || code > 4999)) {
		        throw new DOMException('invalid code', 'InvalidAccessError');
		      }
		    }
		    let reasonByteLength = 0;

		    // 2. If reason is present, then run these substeps:
		    if (reason !== undefined) {
		      // 1. Let reasonBytes be the result of encoding reason.
		      // 2. If reasonBytes is longer than 123 bytes, then throw a
		      //    "SyntaxError" DOMException.
		      reasonByteLength = Buffer.byteLength(reason);
		      if (reasonByteLength > 123) {
		        throw new DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, 'SyntaxError');
		      }
		    }

		    // 3. Run the first matching steps from the following list:
		    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) ; else if (!isEstablished(this)) {
		      // If the WebSocket connection is not yet established
		      // Fail the WebSocket connection and set this's ready state
		      // to CLOSING (2).
		      failWebsocketConnection(this, 'Connection was closed before it was established.');
		      this[kReadyState] = WebSocket.CLOSING;
		    } else if (!isClosing(this)) {
		      // If the WebSocket closing handshake has not yet been started
		      // Start the WebSocket closing handshake and set this's ready
		      // state to CLOSING (2).
		      // - If neither code nor reason is present, the WebSocket Close
		      //   message must not have a body.
		      // - If code is present, then the status code to use in the
		      //   WebSocket Close message must be the integer given by code.
		      // - If reason is also present, then reasonBytes must be
		      //   provided in the Close message after the status code.

		      const frame = new WebsocketFrameSend();

		      // If neither code nor reason is present, the WebSocket Close
		      // message must not have a body.

		      // If code is present, then the status code to use in the
		      // WebSocket Close message must be the integer given by code.
		      if (code !== undefined && reason === undefined) {
		        frame.frameData = Buffer.allocUnsafe(2);
		        frame.frameData.writeUInt16BE(code, 0);
		      } else if (code !== undefined && reason !== undefined) {
		        // If reason is also present, then reasonBytes must be
		        // provided in the Close message after the status code.
		        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
		        frame.frameData.writeUInt16BE(code, 0);
		        // the body MAY contain UTF-8-encoded data with value /reason/
		        frame.frameData.write(reason, 2, 'utf-8');
		      } else {
		        frame.frameData = emptyBuffer;
		      }

		      /** @type {import('stream').Duplex} */
		      const socket = this[kResponse].socket;
		      socket.write(frame.createFrame(opcodes.CLOSE), err => {
		        if (!err) {
		          this[kSentClose] = true;
		        }
		      });

		      // Upon either sending or receiving a Close control frame, it is said
		      // that _The WebSocket Closing Handshake is Started_ and that the
		      // WebSocket connection is in the CLOSING state.
		      this[kReadyState] = states.CLOSING;
		    } else {
		      // Otherwise
		      // Set this's ready state to CLOSING (2).
		      this[kReadyState] = WebSocket.CLOSING;
		    }
		  }

		  /**
		   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
		   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		   */
		  send(data) {
		    webidl.brandCheck(this, WebSocket);
		    webidl.argumentLengthCheck(arguments, 1, {
		      header: 'WebSocket.send'
		    });
		    data = webidl.converters.WebSocketSendData(data);

		    // 1. If this's ready state is CONNECTING, then throw an
		    //    "InvalidStateError" DOMException.
		    if (this[kReadyState] === WebSocket.CONNECTING) {
		      throw new DOMException('Sent before connected.', 'InvalidStateError');
		    }

		    // 2. Run the appropriate set of steps from the following list:
		    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
		    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

		    if (!isEstablished(this) || isClosing(this)) {
		      return;
		    }

		    /** @type {import('stream').Duplex} */
		    const socket = this[kResponse].socket;

		    // If data is a string
		    if (typeof data === 'string') {
		      // If the WebSocket connection is established and the WebSocket
		      // closing handshake has not yet started, then the user agent
		      // must send a WebSocket Message comprised of the data argument
		      // using a text frame opcode; if the data cannot be sent, e.g.
		      // because it would need to be buffered but the buffer is full,
		      // the user agent must flag the WebSocket as full and then close
		      // the WebSocket connection. Any invocation of this method with a
		      // string argument that does not throw an exception must increase
		      // the bufferedAmount attribute by the number of bytes needed to
		      // express the argument as UTF-8.

		      const value = Buffer.from(data);
		      const frame = new WebsocketFrameSend(value);
		      const buffer = frame.createFrame(opcodes.TEXT);
		      this.#bufferedAmount += value.byteLength;
		      socket.write(buffer, () => {
		        this.#bufferedAmount -= value.byteLength;
		      });
		    } else if (types.isArrayBuffer(data)) {
		      // If the WebSocket connection is established, and the WebSocket
		      // closing handshake has not yet started, then the user agent must
		      // send a WebSocket Message comprised of data using a binary frame
		      // opcode; if the data cannot be sent, e.g. because it would need
		      // to be buffered but the buffer is full, the user agent must flag
		      // the WebSocket as full and then close the WebSocket connection.
		      // The data to be sent is the data stored in the buffer described
		      // by the ArrayBuffer object. Any invocation of this method with an
		      // ArrayBuffer argument that does not throw an exception must
		      // increase the bufferedAmount attribute by the length of the
		      // ArrayBuffer in bytes.

		      const value = Buffer.from(data);
		      const frame = new WebsocketFrameSend(value);
		      const buffer = frame.createFrame(opcodes.BINARY);
		      this.#bufferedAmount += value.byteLength;
		      socket.write(buffer, () => {
		        this.#bufferedAmount -= value.byteLength;
		      });
		    } else if (ArrayBuffer.isView(data)) {
		      // If the WebSocket connection is established, and the WebSocket
		      // closing handshake has not yet started, then the user agent must
		      // send a WebSocket Message comprised of data using a binary frame
		      // opcode; if the data cannot be sent, e.g. because it would need to
		      // be buffered but the buffer is full, the user agent must flag the
		      // WebSocket as full and then close the WebSocket connection. The
		      // data to be sent is the data stored in the section of the buffer
		      // described by the ArrayBuffer object that data references. Any
		      // invocation of this method with this kind of argument that does
		      // not throw an exception must increase the bufferedAmount attribute
		      // by the length of data’s buffer in bytes.

		      const ab = Buffer.from(data, data.byteOffset, data.byteLength);
		      const frame = new WebsocketFrameSend(ab);
		      const buffer = frame.createFrame(opcodes.BINARY);
		      this.#bufferedAmount += ab.byteLength;
		      socket.write(buffer, () => {
		        this.#bufferedAmount -= ab.byteLength;
		      });
		    } else if (isBlobLike(data)) {
		      // If the WebSocket connection is established, and the WebSocket
		      // closing handshake has not yet started, then the user agent must
		      // send a WebSocket Message comprised of data using a binary frame
		      // opcode; if the data cannot be sent, e.g. because it would need to
		      // be buffered but the buffer is full, the user agent must flag the
		      // WebSocket as full and then close the WebSocket connection. The data
		      // to be sent is the raw data represented by the Blob object. Any
		      // invocation of this method with a Blob argument that does not throw
		      // an exception must increase the bufferedAmount attribute by the size
		      // of the Blob object’s raw data, in bytes.

		      const frame = new WebsocketFrameSend();
		      data.arrayBuffer().then(ab => {
		        const value = Buffer.from(ab);
		        frame.frameData = value;
		        const buffer = frame.createFrame(opcodes.BINARY);
		        this.#bufferedAmount += value.byteLength;
		        socket.write(buffer, () => {
		          this.#bufferedAmount -= value.byteLength;
		        });
		      });
		    }
		  }
		  get readyState() {
		    webidl.brandCheck(this, WebSocket);

		    // The readyState getter steps are to return this's ready state.
		    return this[kReadyState];
		  }
		  get bufferedAmount() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#bufferedAmount;
		  }
		  get url() {
		    webidl.brandCheck(this, WebSocket);

		    // The url getter steps are to return this's url, serialized.
		    return URLSerializer(this[kWebSocketURL]);
		  }
		  get extensions() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#extensions;
		  }
		  get protocol() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#protocol;
		  }
		  get onopen() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#events.open;
		  }
		  set onopen(fn) {
		    webidl.brandCheck(this, WebSocket);
		    if (this.#events.open) {
		      this.removeEventListener('open', this.#events.open);
		    }
		    if (typeof fn === 'function') {
		      this.#events.open = fn;
		      this.addEventListener('open', fn);
		    } else {
		      this.#events.open = null;
		    }
		  }
		  get onerror() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#events.error;
		  }
		  set onerror(fn) {
		    webidl.brandCheck(this, WebSocket);
		    if (this.#events.error) {
		      this.removeEventListener('error', this.#events.error);
		    }
		    if (typeof fn === 'function') {
		      this.#events.error = fn;
		      this.addEventListener('error', fn);
		    } else {
		      this.#events.error = null;
		    }
		  }
		  get onclose() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#events.close;
		  }
		  set onclose(fn) {
		    webidl.brandCheck(this, WebSocket);
		    if (this.#events.close) {
		      this.removeEventListener('close', this.#events.close);
		    }
		    if (typeof fn === 'function') {
		      this.#events.close = fn;
		      this.addEventListener('close', fn);
		    } else {
		      this.#events.close = null;
		    }
		  }
		  get onmessage() {
		    webidl.brandCheck(this, WebSocket);
		    return this.#events.message;
		  }
		  set onmessage(fn) {
		    webidl.brandCheck(this, WebSocket);
		    if (this.#events.message) {
		      this.removeEventListener('message', this.#events.message);
		    }
		    if (typeof fn === 'function') {
		      this.#events.message = fn;
		      this.addEventListener('message', fn);
		    } else {
		      this.#events.message = null;
		    }
		  }
		  get binaryType() {
		    webidl.brandCheck(this, WebSocket);
		    return this[kBinaryType];
		  }
		  set binaryType(type) {
		    webidl.brandCheck(this, WebSocket);
		    if (type !== 'blob' && type !== 'arraybuffer') {
		      this[kBinaryType] = 'blob';
		    } else {
		      this[kBinaryType] = type;
		    }
		  }

		  /**
		   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		   */
		  #onConnectionEstablished(response) {
		    // processResponse is called when the "response’s header list has been received and initialized."
		    // once this happens, the connection is open
		    this[kResponse] = response;
		    const parser = new ByteParser(this);
		    parser.on('drain', function onParserDrain() {
		      this.ws[kResponse].socket.resume();
		    });
		    response.socket.ws = this;
		    this[kByteParser] = parser;

		    // 1. Change the ready state to OPEN (1).
		    this[kReadyState] = states.OPEN;

		    // 2. Change the extensions attribute’s value to the extensions in use, if
		    //    it is not the null value.
		    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
		    const extensions = response.headersList.get('sec-websocket-extensions');
		    if (extensions !== null) {
		      this.#extensions = extensions;
		    }

		    // 3. Change the protocol attribute’s value to the subprotocol in use, if
		    //    it is not the null value.
		    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
		    const protocol = response.headersList.get('sec-websocket-protocol');
		    if (protocol !== null) {
		      this.#protocol = protocol;
		    }

		    // 4. Fire an event named open at the WebSocket object.
		    fireEvent('open', this);
		  }
		}

		// https://websockets.spec.whatwg.org/#dom-websocket-connecting
		WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
		// https://websockets.spec.whatwg.org/#dom-websocket-open
		WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
		// https://websockets.spec.whatwg.org/#dom-websocket-closing
		WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
		// https://websockets.spec.whatwg.org/#dom-websocket-closed
		WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
		Object.defineProperties(WebSocket.prototype, {
		  CONNECTING: staticPropertyDescriptors,
		  OPEN: staticPropertyDescriptors,
		  CLOSING: staticPropertyDescriptors,
		  CLOSED: staticPropertyDescriptors,
		  url: kEnumerableProperty,
		  readyState: kEnumerableProperty,
		  bufferedAmount: kEnumerableProperty,
		  onopen: kEnumerableProperty,
		  onerror: kEnumerableProperty,
		  onclose: kEnumerableProperty,
		  close: kEnumerableProperty,
		  onmessage: kEnumerableProperty,
		  binaryType: kEnumerableProperty,
		  send: kEnumerableProperty,
		  extensions: kEnumerableProperty,
		  protocol: kEnumerableProperty,
		  [Symbol.toStringTag]: {
		    value: 'WebSocket',
		    writable: false,
		    enumerable: false,
		    configurable: true
		  }
		});
		Object.defineProperties(WebSocket, {
		  CONNECTING: staticPropertyDescriptors,
		  OPEN: staticPropertyDescriptors,
		  CLOSING: staticPropertyDescriptors,
		  CLOSED: staticPropertyDescriptors
		});
		webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(webidl.converters.DOMString);
		webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
		  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
		    return webidl.converters['sequence<DOMString>'](V);
		  }
		  return webidl.converters.DOMString(V);
		};

		// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
		webidl.converters.WebSocketInit = webidl.dictionaryConverter([{
		  key: 'protocols',
		  converter: webidl.converters['DOMString or sequence<DOMString>'],
		  get defaultValue() {
		    return [];
		  }
		}, {
		  key: 'dispatcher',
		  converter: V => V,
		  get defaultValue() {
		    return getGlobalDispatcher();
		  }
		}, {
		  key: 'headers',
		  converter: webidl.nullableConverter(webidl.converters.HeadersInit)
		}]);
		webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
		  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
		    return webidl.converters.WebSocketInit(V);
		  }
		  return {
		    protocols: webidl.converters['DOMString or sequence<DOMString>'](V)
		  };
		};
		webidl.converters.WebSocketSendData = function (V) {
		  if (webidl.util.Type(V) === 'Object') {
		    if (isBlobLike(V)) {
		      return webidl.converters.Blob(V, {
		        strict: false
		      });
		    }
		    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
		      return webidl.converters.BufferSource(V);
		    }
		  }
		  return webidl.converters.USVString(V);
		};
		websocket = {
		  WebSocket
		};
		return websocket;
	}

	var hasRequiredUndici;

	function requireUndici () {
		if (hasRequiredUndici) return undici;
		hasRequiredUndici = 1;

		const Client = requireClient();
		const Dispatcher = requireDispatcher();
		const errors = requireErrors();
		const Pool = requirePool();
		const BalancedPool = requireBalancedPool();
		const Agent = requireAgent();
		const util = requireUtil$6();
		const {
		  InvalidArgumentError
		} = errors;
		const api = requireApi$1();
		const buildConnector = requireConnect();
		const MockClient = requireMockClient();
		const MockAgent = requireMockAgent();
		const MockPool = requireMockPool();
		const mockErrors = requireMockErrors();
		const ProxyAgent = requireProxyAgent();
		const RetryHandler = requireRetryHandler();
		const {
		  getGlobalDispatcher,
		  setGlobalDispatcher
		} = requireGlobal();
		const DecoratorHandler = requireDecoratorHandler();
		const RedirectHandler = requireRedirectHandler();
		const createRedirectInterceptor = requireRedirectInterceptor();
		let hasCrypto;
		try {
		  require('crypto');
		  hasCrypto = true;
		} catch {
		  hasCrypto = false;
		}
		Object.assign(Dispatcher.prototype, api);
		undici.Dispatcher = Dispatcher;
		undici.Client = Client;
		undici.Pool = Pool;
		undici.BalancedPool = BalancedPool;
		undici.Agent = Agent;
		undici.ProxyAgent = ProxyAgent;
		undici.RetryHandler = RetryHandler;
		undici.DecoratorHandler = DecoratorHandler;
		undici.RedirectHandler = RedirectHandler;
		undici.createRedirectInterceptor = createRedirectInterceptor;
		undici.buildConnector = buildConnector;
		undici.errors = errors;
		function makeDispatcher(fn) {
		  return (url, opts, handler) => {
		    if (typeof opts === 'function') {
		      handler = opts;
		      opts = null;
		    }
		    if (!url || typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL)) {
		      throw new InvalidArgumentError('invalid url');
		    }
		    if (opts != null && typeof opts !== 'object') {
		      throw new InvalidArgumentError('invalid opts');
		    }
		    if (opts && opts.path != null) {
		      if (typeof opts.path !== 'string') {
		        throw new InvalidArgumentError('invalid opts.path');
		      }
		      let path = opts.path;
		      if (!opts.path.startsWith('/')) {
		        path = `/${path}`;
		      }
		      url = new URL(util.parseOrigin(url).origin + path);
		    } else {
		      if (!opts) {
		        opts = typeof url === 'object' ? url : {};
		      }
		      url = util.parseURL(url);
		    }
		    const {
		      agent,
		      dispatcher = getGlobalDispatcher()
		    } = opts;
		    if (agent) {
		      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?');
		    }
		    return fn.call(dispatcher, {
		      ...opts,
		      origin: url.origin,
		      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
		      method: opts.method || (opts.body ? 'PUT' : 'GET')
		    }, handler);
		  };
		}
		undici.setGlobalDispatcher = setGlobalDispatcher;
		undici.getGlobalDispatcher = getGlobalDispatcher;
		if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
		  let fetchImpl = null;
		  undici.fetch = async function fetch(resource) {
		    if (!fetchImpl) {
		      fetchImpl = requireFetch().fetch;
		    }
		    try {
		      return await fetchImpl(...arguments);
		    } catch (err) {
		      if (typeof err === 'object') {
		        Error.captureStackTrace(err, this);
		      }
		      throw err;
		    }
		  };
		  undici.Headers = requireHeaders().Headers;
		  undici.Response = requireResponse().Response;
		  undici.Request = requireRequest().Request;
		  undici.FormData = requireFormdata().FormData;
		  undici.File = requireFile().File;
		  undici.FileReader = requireFilereader().FileReader;
		  const {
		    setGlobalOrigin,
		    getGlobalOrigin
		  } = requireGlobal$1();
		  undici.setGlobalOrigin = setGlobalOrigin;
		  undici.getGlobalOrigin = getGlobalOrigin;
		  const {
		    CacheStorage
		  } = requireCachestorage();
		  const {
		    kConstruct
		  } = requireSymbols$1();

		  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
		  // in an older version of Node, it doesn't have any use without fetch.
		  undici.caches = new CacheStorage(kConstruct);
		}
		if (util.nodeMajor >= 16) {
		  const {
		    deleteCookie,
		    getCookies,
		    getSetCookies,
		    setCookie
		  } = requireCookies();
		  undici.deleteCookie = deleteCookie;
		  undici.getCookies = getCookies;
		  undici.getSetCookies = getSetCookies;
		  undici.setCookie = setCookie;
		  const {
		    parseMIMEType,
		    serializeAMimeType
		  } = requireDataURL();
		  undici.parseMIMEType = parseMIMEType;
		  undici.serializeAMimeType = serializeAMimeType;
		}
		if (util.nodeMajor >= 18 && hasCrypto) {
		  const {
		    WebSocket
		  } = requireWebsocket();
		  undici.WebSocket = WebSocket;
		}
		undici.request = makeDispatcher(api.request);
		undici.stream = makeDispatcher(api.stream);
		undici.pipeline = makeDispatcher(api.pipeline);
		undici.connect = makeDispatcher(api.connect);
		undici.upgrade = makeDispatcher(api.upgrade);
		undici.MockClient = MockClient;
		undici.MockPool = MockPool;
		undici.MockAgent = MockAgent;
		undici.mockErrors = mockErrors;
		return undici;
	}

	var npmNode;
	var hasRequiredNpmNode;

	function requireNpmNode () {
		if (hasRequiredNpmNode) return npmNode;
		hasRequiredNpmNode = 1;

		const undici = requireUndici();
		const realFetch = undici.fetch;
		const crypto = require$$1__default$5["default"];
		const util = require$$1__default["default"];
		const TextEncoder = util.TextEncoder;
		const TextDecoder = util.TextDecoder;
		if (!commonjsGlobal.fetch) {
		  commonjsGlobal.fetch = function (url, options) {
		    if (/^\/\//.test(url)) {
		      url = "https:" + url;
		    }
		    return realFetch.call(this, url, options);
		  };
		  commonjsGlobal.Response = undici.Response;
		  commonjsGlobal.Headers = undici.Headers;
		  commonjsGlobal.Request = undici.Request;
		}
		if (!commonjsGlobal.TextDecoder) {
		  commonjsGlobal.TextDecoder = TextDecoder;
		}
		if (!commonjsGlobal.TextEncoder) {
		  commonjsGlobal.TextEncoder = TextEncoder;
		}
		npmNode = {
		  Buffer: Buffer,
		  Crypto: crypto.webcrypto
		};
		return npmNode;
	}

	var npmNodeExports = requireNpmNode();

	const MAX_TAG_BYTES = 4096;
	const MIN_BINARY_SIZE = 80;
	class DataItem {
	  binary;
	  _id;
	  constructor(binary) {
	    this.binary = binary;
	  }
	  static isDataItem(obj) {
	    return obj.binary !== undefined;
	  }
	  get signatureType() {
	    const signatureTypeVal = byteArrayToLong(this.binary.subarray(0, 2));
	    if (SignatureConfig?.[signatureTypeVal] !== undefined) {
	      return signatureTypeVal;
	    }
	    throw new Error('Unknown signature type: ' + signatureTypeVal);
	  }
	  async isValid() {
	    return DataItem.verify(this.binary);
	  }
	  get id() {
	    return (async () => {
	      return base64url$1.encode(await this.rawId);
	    })();
	  }
	  set id(id) {
	    this._id = base64url$1.toBuffer(id);
	  }
	  get rawId() {
	    return (async () => {
	      return require$$0$5.Buffer.from(await npmNodeExports.Crypto.subtle.digest('SHA-256', this.rawSignature));
	    })();
	    // return createHash('sha256').update(this.rawSignature).digest();
	  }
	  set rawId(id) {
	    this._id = id;
	  }
	  get rawSignature() {
	    return this.binary.subarray(2, 2 + this.signatureLength);
	  }
	  get signature() {
	    return base64url$1.encode(this.rawSignature);
	  }
	  set rawOwner(pubkey) {
	    if (pubkey.byteLength != this.ownerLength) throw new Error(`Expected raw owner (pubkey) to be ${this.ownerLength} bytes, got ${pubkey.byteLength} bytes.`);
	    this.binary.set(pubkey, 2 + this.signatureLength);
	  }
	  get rawOwner() {
	    return this.binary.subarray(2 + this.signatureLength, 2 + this.signatureLength + this.ownerLength);
	  }
	  get signatureLength() {
	    return SIG_CONFIG[this.signatureType].sigLength;
	  }
	  get owner() {
	    return base64url$1.encode(this.rawOwner);
	  }
	  get ownerLength() {
	    return SIG_CONFIG[this.signatureType].pubLength;
	  }
	  get rawTarget() {
	    const targetStart = this.getTargetStart();
	    const isPresent = this.binary[targetStart] == 1;
	    return isPresent ? this.binary.subarray(targetStart + 1, targetStart + 33) : require$$0$5.Buffer.alloc(0);
	  }
	  get target() {
	    return base64url$1.encode(this.rawTarget);
	  }
	  get rawAnchor() {
	    const anchorStart = this.getAnchorStart();
	    const isPresent = this.binary[anchorStart] == 1;
	    return isPresent ? this.binary.subarray(anchorStart + 1, anchorStart + 33) : require$$0$5.Buffer.alloc(0);
	  }
	  get anchor() {
	    return this.rawAnchor.toString();
	  }
	  get rawTags() {
	    const tagsStart = this.getTagsStart();
	    const tagsSize = byteArrayToLong(this.binary.subarray(tagsStart + 8, tagsStart + 16));
	    return this.binary.subarray(tagsStart + 16, tagsStart + 16 + tagsSize);
	  }
	  get tags() {
	    const tagsStart = this.getTagsStart();
	    const tagsCount = byteArrayToLong(this.binary.subarray(tagsStart, tagsStart + 8));
	    if (tagsCount == 0) {
	      return [];
	    }
	    const tagsSize = byteArrayToLong(this.binary.subarray(tagsStart + 8, tagsStart + 16));
	    return deserializeTags(require$$0$5.Buffer.from(this.binary.subarray(tagsStart + 16, tagsStart + 16 + tagsSize)));
	  }
	  get tagsB64Url() {
	    const _tags = this.tags;
	    return _tags.map(t => ({
	      name: base64url$1.encode(t.name),
	      value: base64url$1.encode(t.value)
	    }));
	  }
	  getStartOfData() {
	    const tagsStart = this.getTagsStart();
	    const numberOfTagBytesArray = this.binary.subarray(tagsStart + 8, tagsStart + 16);
	    const numberOfTagBytes = byteArrayToLong(numberOfTagBytesArray);
	    return tagsStart + 16 + numberOfTagBytes;
	  }
	  get rawData() {
	    const tagsStart = this.getTagsStart();
	    const numberOfTagBytesArray = this.binary.subarray(tagsStart + 8, tagsStart + 16);
	    const numberOfTagBytes = byteArrayToLong(numberOfTagBytesArray);
	    const dataStart = tagsStart + 16 + numberOfTagBytes;
	    return this.binary.subarray(dataStart, this.binary.length);
	  }
	  get data() {
	    return base64url$1.encode(this.rawData);
	  }
	  /**
	   * UNSAFE!!
	   * DO NOT MUTATE THE BINARY ARRAY. THIS WILL CAUSE UNDEFINED BEHAVIOUR.
	   */
	  getRaw() {
	    return this.binary;
	  }
	  async sign(signer) {
	    this._id = await sign$1(this, signer);
	    return this.rawId;
	  }
	  async setSignature(signature) {
	    this.binary.set(signature, 2);
	    this._id = require$$0$5.Buffer.from(await getCryptoDriver().hash(signature));
	  }
	  isSigned() {
	    return (this._id?.length ?? 0) > 0;
	  }
	  /**
	   * Returns a JSON representation of a DataItem
	   */
	  // eslint-disable-next-line @typescript-eslint/naming-convention
	  toJSON() {
	    return {
	      signature: this.signature,
	      owner: this.owner,
	      target: this.target,
	      tags: this.tags.map(t => ({
	        name: base64url$1.encode(t.name),
	        value: base64url$1.encode(t.value)
	      })),
	      data: this.data
	    };
	  }
	  /**
	   * Verifies a `Buffer` and checks it fits the format of a DataItem
	   *
	   * A binary is valid iff:
	   * - the tags are encoded correctly
	   */
	  static async verify(buffer) {
	    if (buffer.byteLength < MIN_BINARY_SIZE) {
	      return false;
	    }
	    const item = new DataItem(buffer);
	    const sigType = item.signatureType;
	    const tagsStart = item.getTagsStart();
	    const numberOfTags = byteArrayToLong(buffer.subarray(tagsStart, tagsStart + 8));
	    const numberOfTagBytesArray = buffer.subarray(tagsStart + 8, tagsStart + 16);
	    const numberOfTagBytes = byteArrayToLong(numberOfTagBytesArray);
	    if (numberOfTagBytes > MAX_TAG_BYTES) return false;
	    if (numberOfTags > 0) {
	      try {
	        const tags = deserializeTags(require$$0$5.Buffer.from(buffer.subarray(tagsStart + 16, tagsStart + 16 + numberOfTagBytes)));
	        if (tags.length !== numberOfTags) {
	          return false;
	        }
	      } catch (e) {
	        return false;
	      }
	    }
	    // eslint-disable-next-line @typescript-eslint/naming-convention
	    const Signer = indexToType[sigType];
	    const signatureData = await getSignatureData(item);
	    return await Signer.verify(item.rawOwner, signatureData, item.rawSignature);
	  }
	  async getSignatureData() {
	    return getSignatureData(this);
	  }
	  /**
	   * Returns the start byte of the tags section (number of tags)
	   *
	   * @private
	   */
	  getTagsStart() {
	    const targetStart = this.getTargetStart();
	    const targetPresent = this.binary[targetStart] == 1;
	    let tagsStart = targetStart + (targetPresent ? 33 : 1);
	    const anchorPresent = this.binary[tagsStart] == 1;
	    tagsStart += anchorPresent ? 33 : 1;
	    return tagsStart;
	  }
	  /**
	   * Returns the start byte of the tags section (number of tags)
	   *
	   * @private
	   */
	  getTargetStart() {
	    return 2 + this.signatureLength + this.ownerLength;
	  }
	  /**
	   * Returns the start byte of the tags section (number of tags)
	   *
	   * @private
	   */
	  getAnchorStart() {
	    let anchorStart = this.getTargetStart() + 1;
	    const targetPresent = this.binary[this.getTargetStart()] == 1;
	    anchorStart += targetPresent ? 32 : 0;
	    return anchorStart;
	  }
	}

	function createData(data, signer, opts) {
	  // TODO: Add asserts
	  // Parse all values to a buffer and
	  const _owner = signer.publicKey;
	  const _target = opts?.target ? base64url$1.toBuffer(opts.target) : null;
	  const target_length = 1 + (_target?.byteLength ?? 0);
	  const _anchor = opts?.anchor ? Buffer.from(opts.anchor) : null;
	  const anchor_length = 1 + (_anchor?.byteLength ?? 0);
	  const _tags = (opts?.tags?.length ?? 0) > 0 ? serializeTags(opts.tags) : null;
	  const tags_length = 16 + (_tags ? _tags.byteLength : 0);
	  const _data = typeof data === 'string' ? Buffer.from(data) : Buffer.from(data);
	  const data_length = _data.byteLength;
	  // See [https://github.com/joshbenaron/arweave-standards/blob/ans104/ans/ANS-104.md#13-dataitem-format]
	  const length = 2 + signer.signatureLength + signer.ownerLength + target_length + anchor_length + tags_length + data_length;
	  // Create array with set length
	  const bytes = Buffer.alloc(length);
	  bytes.set(shortTo2ByteArray(signer.signatureType), 0);
	  // Push bytes for `signature`
	  bytes.set(new Uint8Array(signer.signatureLength).fill(0), 2);
	  // // Push bytes for `id`
	  // bytes.set(EMPTY_ARRAY, 32);
	  // Push bytes for `owner`
	  if (_owner.byteLength !== signer.ownerLength) throw new Error(`Owner must be ${signer.ownerLength} bytes, but was incorrectly ${_owner.byteLength}`);
	  bytes.set(_owner, 2 + signer.signatureLength);
	  const position = 2 + signer.signatureLength + signer.ownerLength;
	  // Push `presence byte` and push `target` if present
	  // 64 + OWNER_LENGTH
	  bytes[position] = _target ? 1 : 0;
	  if (_target) {
	    if (_target.byteLength !== 32) throw new Error(`Target must be 32 bytes but was incorrectly ${_target.byteLength}`);
	    bytes.set(_target, position + 1);
	  }
	  // Push `presence byte` and push `anchor` if present
	  // 64 + OWNER_LENGTH
	  const anchor_start = position + target_length;
	  let tags_start = anchor_start + 1;
	  bytes[anchor_start] = _anchor ? 1 : 0;
	  if (_anchor) {
	    tags_start += _anchor.byteLength;
	    if (_anchor.byteLength !== 32) throw new Error('Anchor must be 32 bytes');
	    bytes.set(_anchor, anchor_start + 1);
	  }
	  bytes.set(longTo8ByteArray(opts?.tags?.length ?? 0), tags_start);
	  const bytesCount = longTo8ByteArray(_tags?.byteLength ?? 0);
	  bytes.set(bytesCount, tags_start + 8);
	  if (_tags) {
	    bytes.set(_tags, tags_start + 16);
	  }
	  const data_start = tags_start + tags_length;
	  bytes.set(_data, data_start);
	  return new DataItem(bytes);
	}

	var common = {};

	var ar$1 = {};

	var bignumber$1 = {exports: {}};

	var bignumber = bignumber$1.exports;

	var hasRequiredBignumber;

	function requireBignumber () {
		if (hasRequiredBignumber) return bignumber$1.exports;
		hasRequiredBignumber = 1;
		(function (module) {
			(function (globalObject) {

			  /*
			   *      bignumber.js v9.1.2
			   *      A JavaScript library for arbitrary-precision arithmetic.
			   *      https://github.com/MikeMcl/bignumber.js
			   *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
			   *      MIT Licensed.
			   *
			   *      BigNumber.prototype methods     |  BigNumber methods
			   *                                      |
			   *      absoluteValue            abs    |  clone
			   *      comparedTo                      |  config               set
			   *      decimalPlaces            dp     |      DECIMAL_PLACES
			   *      dividedBy                div    |      ROUNDING_MODE
			   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
			   *      exponentiatedBy          pow    |      RANGE
			   *      integerValue                    |      CRYPTO
			   *      isEqualTo                eq     |      MODULO_MODE
			   *      isFinite                        |      POW_PRECISION
			   *      isGreaterThan            gt     |      FORMAT
			   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
			   *      isInteger                       |  isBigNumber
			   *      isLessThan               lt     |  maximum              max
			   *      isLessThanOrEqualTo      lte    |  minimum              min
			   *      isNaN                           |  random
			   *      isNegative                      |  sum
			   *      isPositive                      |
			   *      isZero                          |
			   *      minus                           |
			   *      modulo                   mod    |
			   *      multipliedBy             times  |
			   *      negated                         |
			   *      plus                            |
			   *      precision                sd     |
			   *      shiftedBy                       |
			   *      squareRoot               sqrt   |
			   *      toExponential                   |
			   *      toFixed                         |
			   *      toFormat                        |
			   *      toFraction                      |
			   *      toJSON                          |
			   *      toNumber                        |
			   *      toPrecision                     |
			   *      toString                        |
			   *      valueOf                         |
			   *
			   */
			  var BigNumber,
			    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
			    mathceil = Math.ceil,
			    mathfloor = Math.floor,
			    bignumberError = '[BigNumber Error] ',
			    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
			    BASE = 1e14,
			    LOG_BASE = 14,
			    MAX_SAFE_INTEGER = 0x1fffffffffffff,
			    // 2^53 - 1
			    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
			    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
			    SQRT_BASE = 1e7,
			    // EDITABLE
			    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
			    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
			    MAX = 1E9; // 0 to MAX_INT32

			  /*
			   * Create and return a BigNumber constructor.
			   */
			  function clone(configObject) {
			    var div,
			      convertBase,
			      parseNumeric,
			      P = BigNumber.prototype = {
			        constructor: BigNumber,
			        toString: null,
			        valueOf: null
			      },
			      ONE = new BigNumber(1),
			      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------

			      // The default values below must be integers within the inclusive ranges stated.
			      // The values can also be changed at run-time using BigNumber.set.

			      // The maximum number of decimal places for operations involving division.
			      DECIMAL_PLACES = 20,
			      // 0 to MAX

			      // The rounding mode used when rounding to the above decimal places, and when using
			      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
			      // UP         0 Away from zero.
			      // DOWN       1 Towards zero.
			      // CEIL       2 Towards +Infinity.
			      // FLOOR      3 Towards -Infinity.
			      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
			      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
			      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
			      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
			      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
			      ROUNDING_MODE = 4,
			      // 0 to 8

			      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

			      // The exponent value at and beneath which toString returns exponential notation.
			      // Number type: -7
			      TO_EXP_NEG = -7,
			      // 0 to -MAX

			      // The exponent value at and above which toString returns exponential notation.
			      // Number type: 21
			      TO_EXP_POS = 21,
			      // 0 to MAX

			      // RANGE : [MIN_EXP, MAX_EXP]

			      // The minimum exponent value, beneath which underflow to zero occurs.
			      // Number type: -324  (5e-324)
			      MIN_EXP = -1e7,
			      // -1 to -MAX

			      // The maximum exponent value, above which overflow to Infinity occurs.
			      // Number type:  308  (1.7976931348623157e+308)
			      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
			      MAX_EXP = 1e7,
			      // 1 to MAX

			      // Whether to use cryptographically-secure random number generation, if available.
			      CRYPTO = false,
			      // true or false

			      // The modulo mode used when calculating the modulus: a mod n.
			      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
			      // The remainder (r) is calculated as: r = a - n * q.
			      //
			      // UP        0 The remainder is positive if the dividend is negative, else is negative.
			      // DOWN      1 The remainder has the same sign as the dividend.
			      //             This modulo mode is commonly known as 'truncated division' and is
			      //             equivalent to (a % n) in JavaScript.
			      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
			      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
			      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
			      //             The remainder is always positive.
			      //
			      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
			      // modes are commonly used for the modulus operation.
			      // Although the other rounding modes can also be used, they may not give useful results.
			      MODULO_MODE = 1,
			      // 0 to 9

			      // The maximum number of significant digits of the result of the exponentiatedBy operation.
			      // If POW_PRECISION is 0, there will be unlimited significant digits.
			      POW_PRECISION = 0,
			      // 0 to MAX

			      // The format specification used by the BigNumber.prototype.toFormat method.
			      FORMAT = {
			        prefix: '',
			        groupSize: 3,
			        secondaryGroupSize: 0,
			        groupSeparator: ',',
			        decimalSeparator: '.',
			        fractionGroupSize: 0,
			        fractionGroupSeparator: '\xA0',
			        // non-breaking space
			        suffix: ''
			      },
			      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
			      // '-', '.', whitespace, or repeated character.
			      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
			      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
			      alphabetHasNormalDecimalDigits = true;

			    //------------------------------------------------------------------------------------------

			    // CONSTRUCTOR

			    /*
			     * The BigNumber constructor and exported function.
			     * Create and return a new instance of a BigNumber object.
			     *
			     * v {number|string|BigNumber} A numeric value.
			     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
			     */
			    function BigNumber(v, b) {
			      var alphabet,
			        c,
			        caseChanged,
			        e,
			        i,
			        isNum,
			        len,
			        str,
			        x = this;

			      // Enable constructor call without `new`.
			      if (!(x instanceof BigNumber)) return new BigNumber(v, b);
			      if (b == null) {
			        if (v && v._isBigNumber === true) {
			          x.s = v.s;
			          if (!v.c || v.e > MAX_EXP) {
			            x.c = x.e = null;
			          } else if (v.e < MIN_EXP) {
			            x.c = [x.e = 0];
			          } else {
			            x.e = v.e;
			            x.c = v.c.slice();
			          }
			          return;
			        }
			        if ((isNum = typeof v == 'number') && v * 0 == 0) {
			          // Use `1 / n` to handle minus zero also.
			          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

			          // Fast path for integers, where n < 2147483648 (2**31).
			          if (v === ~~v) {
			            for (e = 0, i = v; i >= 10; i /= 10, e++);
			            if (e > MAX_EXP) {
			              x.c = x.e = null;
			            } else {
			              x.e = e;
			              x.c = [v];
			            }
			            return;
			          }
			          str = String(v);
			        } else {
			          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
			          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
			        }

			        // Decimal point?
			        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

			        // Exponential form?
			        if ((i = str.search(/e/i)) > 0) {
			          // Determine exponent.
			          if (e < 0) e = i;
			          e += +str.slice(i + 1);
			          str = str.substring(0, i);
			        } else if (e < 0) {
			          // Integer.
			          e = str.length;
			        }
			      } else {
			        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
			        intCheck(b, 2, ALPHABET.length, 'Base');

			        // Allow exponential notation to be used with base 10 argument, while
			        // also rounding to DECIMAL_PLACES as with other bases.
			        if (b == 10 && alphabetHasNormalDecimalDigits) {
			          x = new BigNumber(v);
			          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
			        }
			        str = String(v);
			        if (isNum = typeof v == 'number') {
			          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
			          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
			          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

			          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
			          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
			            throw Error(tooManyDigits + v);
			          }
			        } else {
			          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
			        }
			        alphabet = ALPHABET.slice(0, b);
			        e = i = 0;

			        // Check that str is a valid base b number.
			        // Don't use RegExp, so alphabet can contain special characters.
			        for (len = str.length; i < len; i++) {
			          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
			            if (c == '.') {
			              // If '.' is not the first character and it has not be found before.
			              if (i > e) {
			                e = len;
			                continue;
			              }
			            } else if (!caseChanged) {
			              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
			              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
			                caseChanged = true;
			                i = -1;
			                e = 0;
			                continue;
			              }
			            }
			            return parseNumeric(x, String(v), isNum, b);
			          }
			        }

			        // Prevent later check for length on converted number.
			        isNum = false;
			        str = convertBase(str, b, 10, x.s);

			        // Decimal point?
			        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
			      }

			      // Determine leading zeros.
			      for (i = 0; str.charCodeAt(i) === 48; i++);

			      // Determine trailing zeros.
			      for (len = str.length; str.charCodeAt(--len) === 48;);
			      if (str = str.slice(i, ++len)) {
			        len -= i;

			        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
			        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
			          throw Error(tooManyDigits + x.s * v);
			        }

			        // Overflow?
			        if ((e = e - i - 1) > MAX_EXP) {
			          // Infinity.
			          x.c = x.e = null;

			          // Underflow?
			        } else if (e < MIN_EXP) {
			          // Zero.
			          x.c = [x.e = 0];
			        } else {
			          x.e = e;
			          x.c = [];

			          // Transform base

			          // e is the base 10 exponent.
			          // i is where to slice str to get the first element of the coefficient array.
			          i = (e + 1) % LOG_BASE;
			          if (e < 0) i += LOG_BASE; // i < 1

			          if (i < len) {
			            if (i) x.c.push(+str.slice(0, i));
			            for (len -= LOG_BASE; i < len;) {
			              x.c.push(+str.slice(i, i += LOG_BASE));
			            }
			            i = LOG_BASE - (str = str.slice(i)).length;
			          } else {
			            i -= len;
			          }
			          for (; i--; str += '0');
			          x.c.push(+str);
			        }
			      } else {
			        // Zero.
			        x.c = [x.e = 0];
			      }
			    }

			    // CONSTRUCTOR PROPERTIES

			    BigNumber.clone = clone;
			    BigNumber.ROUND_UP = 0;
			    BigNumber.ROUND_DOWN = 1;
			    BigNumber.ROUND_CEIL = 2;
			    BigNumber.ROUND_FLOOR = 3;
			    BigNumber.ROUND_HALF_UP = 4;
			    BigNumber.ROUND_HALF_DOWN = 5;
			    BigNumber.ROUND_HALF_EVEN = 6;
			    BigNumber.ROUND_HALF_CEIL = 7;
			    BigNumber.ROUND_HALF_FLOOR = 8;
			    BigNumber.EUCLID = 9;

			    /*
			     * Configure infrequently-changing library-wide settings.
			     *
			     * Accept an object with the following optional properties (if the value of a property is
			     * a number, it must be an integer within the inclusive range stated):
			     *
			     *   DECIMAL_PLACES   {number}           0 to MAX
			     *   ROUNDING_MODE    {number}           0 to 8
			     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
			     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
			     *   CRYPTO           {boolean}          true or false
			     *   MODULO_MODE      {number}           0 to 9
			     *   POW_PRECISION       {number}           0 to MAX
			     *   ALPHABET         {string}           A string of two or more unique characters which does
			     *                                       not contain '.'.
			     *   FORMAT           {object}           An object with some of the following properties:
			     *     prefix                 {string}
			     *     groupSize              {number}
			     *     secondaryGroupSize     {number}
			     *     groupSeparator         {string}
			     *     decimalSeparator       {string}
			     *     fractionGroupSize      {number}
			     *     fractionGroupSeparator {string}
			     *     suffix                 {string}
			     *
			     * (The values assigned to the above FORMAT object properties are not checked for validity.)
			     *
			     * E.g.
			     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
			     *
			     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
			     *
			     * Return an object with the properties current values.
			     */
			    BigNumber.config = BigNumber.set = function (obj) {
			      var p, v;
			      if (obj != null) {
			        if (typeof obj == 'object') {
			          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
			          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
			          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
			            v = obj[p];
			            intCheck(v, 0, MAX, p);
			            DECIMAL_PLACES = v;
			          }

			          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
			          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
			          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
			            v = obj[p];
			            intCheck(v, 0, 8, p);
			            ROUNDING_MODE = v;
			          }

			          // EXPONENTIAL_AT {number|number[]}
			          // Integer, -MAX to MAX inclusive or
			          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
			          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
			          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
			            v = obj[p];
			            if (v && v.pop) {
			              intCheck(v[0], -MAX, 0, p);
			              intCheck(v[1], 0, MAX, p);
			              TO_EXP_NEG = v[0];
			              TO_EXP_POS = v[1];
			            } else {
			              intCheck(v, -MAX, MAX, p);
			              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
			            }
			          }

			          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
			          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
			          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
			          if (obj.hasOwnProperty(p = 'RANGE')) {
			            v = obj[p];
			            if (v && v.pop) {
			              intCheck(v[0], -MAX, -1, p);
			              intCheck(v[1], 1, MAX, p);
			              MIN_EXP = v[0];
			              MAX_EXP = v[1];
			            } else {
			              intCheck(v, -MAX, MAX, p);
			              if (v) {
			                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
			              } else {
			                throw Error(bignumberError + p + ' cannot be zero: ' + v);
			              }
			            }
			          }

			          // CRYPTO {boolean} true or false.
			          // '[BigNumber Error] CRYPTO not true or false: {v}'
			          // '[BigNumber Error] crypto unavailable'
			          if (obj.hasOwnProperty(p = 'CRYPTO')) {
			            v = obj[p];
			            if (v === !!v) {
			              if (v) {
			                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
			                  CRYPTO = v;
			                } else {
			                  CRYPTO = !v;
			                  throw Error(bignumberError + 'crypto unavailable');
			                }
			              } else {
			                CRYPTO = v;
			              }
			            } else {
			              throw Error(bignumberError + p + ' not true or false: ' + v);
			            }
			          }

			          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
			          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
			          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
			            v = obj[p];
			            intCheck(v, 0, 9, p);
			            MODULO_MODE = v;
			          }

			          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
			          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
			          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
			            v = obj[p];
			            intCheck(v, 0, MAX, p);
			            POW_PRECISION = v;
			          }

			          // FORMAT {object}
			          // '[BigNumber Error] FORMAT not an object: {v}'
			          if (obj.hasOwnProperty(p = 'FORMAT')) {
			            v = obj[p];
			            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
			          }

			          // ALPHABET {string}
			          // '[BigNumber Error] ALPHABET invalid: {v}'
			          if (obj.hasOwnProperty(p = 'ALPHABET')) {
			            v = obj[p];

			            // Disallow if less than two characters,
			            // or if it contains '+', '-', '.', whitespace, or a repeated character.
			            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
			              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
			              ALPHABET = v;
			            } else {
			              throw Error(bignumberError + p + ' invalid: ' + v);
			            }
			          }
			        } else {
			          // '[BigNumber Error] Object expected: {v}'
			          throw Error(bignumberError + 'Object expected: ' + obj);
			        }
			      }
			      return {
			        DECIMAL_PLACES: DECIMAL_PLACES,
			        ROUNDING_MODE: ROUNDING_MODE,
			        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
			        RANGE: [MIN_EXP, MAX_EXP],
			        CRYPTO: CRYPTO,
			        MODULO_MODE: MODULO_MODE,
			        POW_PRECISION: POW_PRECISION,
			        FORMAT: FORMAT,
			        ALPHABET: ALPHABET
			      };
			    };

			    /*
			     * Return true if v is a BigNumber instance, otherwise return false.
			     *
			     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
			     *
			     * v {any}
			     *
			     * '[BigNumber Error] Invalid BigNumber: {v}'
			     */
			    BigNumber.isBigNumber = function (v) {
			      if (!v || v._isBigNumber !== true) return false;
			      if (!BigNumber.DEBUG) return true;
			      var i,
			        n,
			        c = v.c,
			        e = v.e,
			        s = v.s;
			      out: if ({}.toString.call(c) == '[object Array]') {
			        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
			          // If the first element is zero, the BigNumber value must be zero.
			          if (c[0] === 0) {
			            if (e === 0 && c.length === 1) return true;
			            break out;
			          }

			          // Calculate number of digits that c[0] should have, based on the exponent.
			          i = (e + 1) % LOG_BASE;
			          if (i < 1) i += LOG_BASE;

			          // Calculate number of digits of c[0].
			          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
			          if (String(c[0]).length == i) {
			            for (i = 0; i < c.length; i++) {
			              n = c[i];
			              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
			            }

			            // Last element cannot be zero, unless it is the only element.
			            if (n !== 0) return true;
			          }
			        }

			        // Infinity/NaN
			      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
			        return true;
			      }
			      throw Error(bignumberError + 'Invalid BigNumber: ' + v);
			    };

			    /*
			     * Return a new BigNumber whose value is the maximum of the arguments.
			     *
			     * arguments {number|string|BigNumber}
			     */
			    BigNumber.maximum = BigNumber.max = function () {
			      return maxOrMin(arguments, -1);
			    };

			    /*
			     * Return a new BigNumber whose value is the minimum of the arguments.
			     *
			     * arguments {number|string|BigNumber}
			     */
			    BigNumber.minimum = BigNumber.min = function () {
			      return maxOrMin(arguments, 1);
			    };

			    /*
			     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
			     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
			     * zeros are produced).
			     *
			     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
			     * '[BigNumber Error] crypto unavailable'
			     */
			    BigNumber.random = function () {
			      var pow2_53 = 0x20000000000000;

			      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
			      // Check if Math.random() produces more than 32 bits of randomness.
			      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
			      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
			      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
			        return mathfloor(Math.random() * pow2_53);
			      } : function () {
			        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
			      };
			      return function (dp) {
			        var a,
			          b,
			          e,
			          k,
			          v,
			          i = 0,
			          c = [],
			          rand = new BigNumber(ONE);
			        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);
			        k = mathceil(dp / LOG_BASE);
			        if (CRYPTO) {
			          // Browsers supporting crypto.getRandomValues.
			          if (crypto.getRandomValues) {
			            a = crypto.getRandomValues(new Uint32Array(k *= 2));
			            for (; i < k;) {
			              // 53 bits:
			              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
			              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
			              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
			              //                                     11111 11111111 11111111
			              // 0x20000 is 2^21.
			              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

			              // Rejection sampling:
			              // 0 <= v < 9007199254740992
			              // Probability that v >= 9e15, is
			              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
			              if (v >= 9e15) {
			                b = crypto.getRandomValues(new Uint32Array(2));
			                a[i] = b[0];
			                a[i + 1] = b[1];
			              } else {
			                // 0 <= v <= 8999999999999999
			                // 0 <= (v % 1e14) <= 99999999999999
			                c.push(v % 1e14);
			                i += 2;
			              }
			            }
			            i = k / 2;

			            // Node.js supporting crypto.randomBytes.
			          } else if (crypto.randomBytes) {
			            // buffer
			            a = crypto.randomBytes(k *= 7);
			            for (; i < k;) {
			              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
			              // 0x100000000 is 2^32, 0x1000000 is 2^24
			              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
			              // 0 <= v < 9007199254740992
			              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
			              if (v >= 9e15) {
			                crypto.randomBytes(7).copy(a, i);
			              } else {
			                // 0 <= (v % 1e14) <= 99999999999999
			                c.push(v % 1e14);
			                i += 7;
			              }
			            }
			            i = k / 7;
			          } else {
			            CRYPTO = false;
			            throw Error(bignumberError + 'crypto unavailable');
			          }
			        }

			        // Use Math.random.
			        if (!CRYPTO) {
			          for (; i < k;) {
			            v = random53bitInt();
			            if (v < 9e15) c[i++] = v % 1e14;
			          }
			        }
			        k = c[--i];
			        dp %= LOG_BASE;

			        // Convert trailing digits to zeros according to dp.
			        if (k && dp) {
			          v = POWS_TEN[LOG_BASE - dp];
			          c[i] = mathfloor(k / v) * v;
			        }

			        // Remove trailing elements which are zero.
			        for (; c[i] === 0; c.pop(), i--);

			        // Zero?
			        if (i < 0) {
			          c = [e = 0];
			        } else {
			          // Remove leading elements which are zero and adjust exponent accordingly.
			          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

			          // Count the digits of the first element of c to determine leading zeros, and...
			          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

			          // adjust the exponent accordingly.
			          if (i < LOG_BASE) e -= LOG_BASE - i;
			        }
			        rand.e = e;
			        rand.c = c;
			        return rand;
			      };
			    }();

			    /*
			     * Return a BigNumber whose value is the sum of the arguments.
			     *
			     * arguments {number|string|BigNumber}
			     */
			    BigNumber.sum = function () {
			      var i = 1,
			        args = arguments,
			        sum = new BigNumber(args[0]);
			      for (; i < args.length;) sum = sum.plus(args[i++]);
			      return sum;
			    };

			    // PRIVATE FUNCTIONS

			    // Called by BigNumber and BigNumber.prototype.toString.
			    convertBase = function () {
			      var decimal = '0123456789';

			      /*
			       * Convert string of baseIn to an array of numbers of baseOut.
			       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
			       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
			       */
			      function toBaseOut(str, baseIn, baseOut, alphabet) {
			        var j,
			          arr = [0],
			          arrL,
			          i = 0,
			          len = str.length;
			        for (; i < len;) {
			          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
			          arr[0] += alphabet.indexOf(str.charAt(i++));
			          for (j = 0; j < arr.length; j++) {
			            if (arr[j] > baseOut - 1) {
			              if (arr[j + 1] == null) arr[j + 1] = 0;
			              arr[j + 1] += arr[j] / baseOut | 0;
			              arr[j] %= baseOut;
			            }
			          }
			        }
			        return arr.reverse();
			      }

			      // Convert a numeric string of baseIn to a numeric string of baseOut.
			      // If the caller is toString, we are converting from base 10 to baseOut.
			      // If the caller is BigNumber, we are converting from baseIn to base 10.
			      return function (str, baseIn, baseOut, sign, callerIsToString) {
			        var alphabet,
			          d,
			          e,
			          k,
			          r,
			          x,
			          xc,
			          y,
			          i = str.indexOf('.'),
			          dp = DECIMAL_PLACES,
			          rm = ROUNDING_MODE;

			        // Non-integer.
			        if (i >= 0) {
			          k = POW_PRECISION;

			          // Unlimited precision.
			          POW_PRECISION = 0;
			          str = str.replace('.', '');
			          y = new BigNumber(baseIn);
			          x = y.pow(str.length - i);
			          POW_PRECISION = k;

			          // Convert str as if an integer, then restore the fraction part by dividing the
			          // result by its base raised to a power.

			          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
			          y.e = y.c.length;
			        }

			        // Convert the number as integer.

			        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));

			        // xc now represents str as an integer and converted to baseOut. e is the exponent.
			        e = k = xc.length;

			        // Remove trailing zeros.
			        for (; xc[--k] == 0; xc.pop());

			        // Zero?
			        if (!xc[0]) return alphabet.charAt(0);

			        // Does str represent an integer? If so, no need for the division.
			        if (i < 0) {
			          --e;
			        } else {
			          x.c = xc;
			          x.e = e;

			          // The sign is needed for correct rounding.
			          x.s = sign;
			          x = div(x, y, dp, rm, baseOut);
			          xc = x.c;
			          r = x.r;
			          e = x.e;
			        }

			        // xc now represents str converted to baseOut.

			        // THe index of the rounding digit.
			        d = e + dp + 1;

			        // The rounding digit: the digit to the right of the digit that may be rounded up.
			        i = xc[d];

			        // Look at the rounding digits and mode to determine whether to round up.

			        k = baseOut / 2;
			        r = r || d < 0 || xc[d + 1] != null;
			        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

			        // If the index of the rounding digit is not greater than zero, or xc represents
			        // zero, then the result of the base conversion is zero or, if rounding up, a value
			        // such as 0.00001.
			        if (d < 1 || !xc[0]) {
			          // 1^-dp or 0
			          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
			        } else {
			          // Truncate xc to the required number of decimal places.
			          xc.length = d;

			          // Round up?
			          if (r) {
			            // Rounding up may mean the previous digit has to be rounded up and so on.
			            for (--baseOut; ++xc[--d] > baseOut;) {
			              xc[d] = 0;
			              if (!d) {
			                ++e;
			                xc = [1].concat(xc);
			              }
			            }
			          }

			          // Determine trailing zeros.
			          for (k = xc.length; !xc[--k];);

			          // E.g. [4, 11, 15] becomes 4bf.
			          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

			          // Add leading zeros, decimal point and trailing zeros as required.
			          str = toFixedPoint(str, e, alphabet.charAt(0));
			        }

			        // The caller will add the sign.
			        return str;
			      };
			    }();

			    // Perform division in the specified base. Called by div and convertBase.
			    div = function () {
			      // Assume non-zero x and k.
			      function multiply(x, k, base) {
			        var m,
			          temp,
			          xlo,
			          xhi,
			          carry = 0,
			          i = x.length,
			          klo = k % SQRT_BASE,
			          khi = k / SQRT_BASE | 0;
			        for (x = x.slice(); i--;) {
			          xlo = x[i] % SQRT_BASE;
			          xhi = x[i] / SQRT_BASE | 0;
			          m = khi * xlo + xhi * klo;
			          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
			          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
			          x[i] = temp % base;
			        }
			        if (carry) x = [carry].concat(x);
			        return x;
			      }
			      function compare(a, b, aL, bL) {
			        var i, cmp;
			        if (aL != bL) {
			          cmp = aL > bL ? 1 : -1;
			        } else {
			          for (i = cmp = 0; i < aL; i++) {
			            if (a[i] != b[i]) {
			              cmp = a[i] > b[i] ? 1 : -1;
			              break;
			            }
			          }
			        }
			        return cmp;
			      }
			      function subtract(a, b, aL, base) {
			        var i = 0;

			        // Subtract b from a.
			        for (; aL--;) {
			          a[aL] -= i;
			          i = a[aL] < b[aL] ? 1 : 0;
			          a[aL] = i * base + a[aL] - b[aL];
			        }

			        // Remove leading zeros.
			        for (; !a[0] && a.length > 1; a.splice(0, 1));
			      }

			      // x: dividend, y: divisor.
			      return function (x, y, dp, rm, base) {
			        var cmp,
			          e,
			          i,
			          more,
			          n,
			          prod,
			          prodL,
			          q,
			          qc,
			          rem,
			          remL,
			          rem0,
			          xi,
			          xL,
			          yc0,
			          yL,
			          yz,
			          s = x.s == y.s ? 1 : -1,
			          xc = x.c,
			          yc = y.c;

			        // Either NaN, Infinity or 0?
			        if (!xc || !xc[0] || !yc || !yc[0]) {
			          return new BigNumber(
			          // Return NaN if either NaN, or both Infinity or 0.
			          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :
			          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
			          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
			        }
			        q = new BigNumber(s);
			        qc = q.c = [];
			        e = x.e - y.e;
			        s = dp + e + 1;
			        if (!base) {
			          base = BASE;
			          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
			          s = s / LOG_BASE | 0;
			        }

			        // Result exponent may be one less then the current value of e.
			        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
			        for (i = 0; yc[i] == (xc[i] || 0); i++);
			        if (yc[i] > (xc[i] || 0)) e--;
			        if (s < 0) {
			          qc.push(1);
			          more = true;
			        } else {
			          xL = xc.length;
			          yL = yc.length;
			          i = 0;
			          s += 2;

			          // Normalise xc and yc so highest order digit of yc is >= base / 2.

			          n = mathfloor(base / (yc[0] + 1));

			          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
			          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
			          if (n > 1) {
			            yc = multiply(yc, n, base);
			            xc = multiply(xc, n, base);
			            yL = yc.length;
			            xL = xc.length;
			          }
			          xi = yL;
			          rem = xc.slice(0, yL);
			          remL = rem.length;

			          // Add zeros to make remainder as long as divisor.
			          for (; remL < yL; rem[remL++] = 0);
			          yz = yc.slice();
			          yz = [0].concat(yz);
			          yc0 = yc[0];
			          if (yc[1] >= base / 2) yc0++;
			          // Not necessary, but to prevent trial digit n > base, when using base 3.
			          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

			          do {
			            n = 0;

			            // Compare divisor and remainder.
			            cmp = compare(yc, rem, yL, remL);

			            // If divisor < remainder.
			            if (cmp < 0) {
			              // Calculate trial digit, n.

			              rem0 = rem[0];
			              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

			              // n is how many times the divisor goes into the current remainder.
			              n = mathfloor(rem0 / yc0);

			              //  Algorithm:
			              //  product = divisor multiplied by trial digit (n).
			              //  Compare product and remainder.
			              //  If product is greater than remainder:
			              //    Subtract divisor from product, decrement trial digit.
			              //  Subtract product from remainder.
			              //  If product was less than remainder at the last compare:
			              //    Compare new remainder and divisor.
			              //    If remainder is greater than divisor:
			              //      Subtract divisor from remainder, increment trial digit.

			              if (n > 1) {
			                // n may be > base only when base is 3.
			                if (n >= base) n = base - 1;

			                // product = divisor * trial digit.
			                prod = multiply(yc, n, base);
			                prodL = prod.length;
			                remL = rem.length;

			                // Compare product and remainder.
			                // If product > remainder then trial digit n too high.
			                // n is 1 too high about 5% of the time, and is not known to have
			                // ever been more than 1 too high.
			                while (compare(prod, rem, prodL, remL) == 1) {
			                  n--;

			                  // Subtract divisor from product.
			                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
			                  prodL = prod.length;
			                  cmp = 1;
			                }
			              } else {
			                // n is 0 or 1, cmp is -1.
			                // If n is 0, there is no need to compare yc and rem again below,
			                // so change cmp to 1 to avoid it.
			                // If n is 1, leave cmp as -1, so yc and rem are compared again.
			                if (n == 0) {
			                  // divisor < remainder, so n must be at least 1.
			                  cmp = n = 1;
			                }

			                // product = divisor
			                prod = yc.slice();
			                prodL = prod.length;
			              }
			              if (prodL < remL) prod = [0].concat(prod);

			              // Subtract product from remainder.
			              subtract(rem, prod, remL, base);
			              remL = rem.length;

			              // If product was < remainder.
			              if (cmp == -1) {
			                // Compare divisor and new remainder.
			                // If divisor < new remainder, subtract divisor from remainder.
			                // Trial digit n too low.
			                // n is 1 too low about 5% of the time, and very rarely 2 too low.
			                while (compare(yc, rem, yL, remL) < 1) {
			                  n++;

			                  // Subtract divisor from remainder.
			                  subtract(rem, yL < remL ? yz : yc, remL, base);
			                  remL = rem.length;
			                }
			              }
			            } else if (cmp === 0) {
			              n++;
			              rem = [0];
			            } // else cmp === 1 and n will be 0

			            // Add the next digit, n, to the result array.
			            qc[i++] = n;

			            // Update the remainder.
			            if (rem[0]) {
			              rem[remL++] = xc[xi] || 0;
			            } else {
			              rem = [xc[xi]];
			              remL = 1;
			            }
			          } while ((xi++ < xL || rem[0] != null) && s--);
			          more = rem[0] != null;

			          // Leading zero?
			          if (!qc[0]) qc.splice(0, 1);
			        }
			        if (base == BASE) {
			          // To calculate q.e, first get the number of digits of qc[0].
			          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
			          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

			          // Caller is convertBase.
			        } else {
			          q.e = e;
			          q.r = +more;
			        }
			        return q;
			      };
			    }();

			    /*
			     * Return a string representing the value of BigNumber n in fixed-point or exponential
			     * notation rounded to the specified decimal places or significant digits.
			     *
			     * n: a BigNumber.
			     * i: the index of the last digit required (i.e. the digit that may be rounded up).
			     * rm: the rounding mode.
			     * id: 1 (toExponential) or 2 (toPrecision).
			     */
			    function format(n, i, rm, id) {
			      var c0, e, ne, len, str;
			      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
			      if (!n.c) return n.toString();
			      c0 = n.c[0];
			      ne = n.e;
			      if (i == null) {
			        str = coeffToString(n.c);
			        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
			      } else {
			        n = round(new BigNumber(n), i, rm);

			        // n.e may have changed if the value was rounded up.
			        e = n.e;
			        str = coeffToString(n.c);
			        len = str.length;

			        // toPrecision returns exponential notation if the number of significant digits
			        // specified is less than the number of digits necessary to represent the integer
			        // part of the value in fixed-point notation.

			        // Exponential notation.
			        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
			          // Append zeros?
			          for (; len < i; str += '0', len++);
			          str = toExponential(str, e);

			          // Fixed-point notation.
			        } else {
			          i -= ne;
			          str = toFixedPoint(str, e, '0');

			          // Append zeros?
			          if (e + 1 > len) {
			            if (--i > 0) for (str += '.'; i--; str += '0');
			          } else {
			            i += e - len;
			            if (i > 0) {
			              if (e + 1 == len) str += '.';
			              for (; i--; str += '0');
			            }
			          }
			        }
			      }
			      return n.s < 0 && c0 ? '-' + str : str;
			    }

			    // Handle BigNumber.max and BigNumber.min.
			    // If any number is NaN, return NaN.
			    function maxOrMin(args, n) {
			      var k,
			        y,
			        i = 1,
			        x = new BigNumber(args[0]);
			      for (; i < args.length; i++) {
			        y = new BigNumber(args[i]);
			        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
			          x = y;
			        }
			      }
			      return x;
			    }

			    /*
			     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
			     * Called by minus, plus and times.
			     */
			    function normalise(n, c, e) {
			      var i = 1,
			        j = c.length;

			      // Remove trailing zeros.
			      for (; !c[--j]; c.pop());

			      // Calculate the base 10 exponent. First get the number of digits of c[0].
			      for (j = c[0]; j >= 10; j /= 10, i++);

			      // Overflow?
			      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
			        // Infinity.
			        n.c = n.e = null;

			        // Underflow?
			      } else if (e < MIN_EXP) {
			        // Zero.
			        n.c = [n.e = 0];
			      } else {
			        n.e = e;
			        n.c = c;
			      }
			      return n;
			    }

			    // Handle values that fail the validity test in BigNumber.
			    parseNumeric = function () {
			      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
			        dotAfter = /^([^.]+)\.$/,
			        dotBefore = /^\.([^.]+)$/,
			        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
			        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
			      return function (x, str, isNum, b) {
			        var base,
			          s = isNum ? str : str.replace(whitespaceOrPlus, '');

			        // No exception on ±Infinity or NaN.
			        if (isInfinityOrNaN.test(s)) {
			          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
			        } else {
			          if (!isNum) {
			            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
			            s = s.replace(basePrefix, function (m, p1, p2) {
			              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
			              return !b || b == base ? p1 : m;
			            });
			            if (b) {
			              base = b;

			              // E.g. '1.' to '1', '.1' to '0.1'
			              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
			            }
			            if (str != s) return new BigNumber(s, base);
			          }

			          // '[BigNumber Error] Not a number: {n}'
			          // '[BigNumber Error] Not a base {b} number: {n}'
			          if (BigNumber.DEBUG) {
			            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
			          }

			          // NaN
			          x.s = null;
			        }
			        x.c = x.e = null;
			      };
			    }();

			    /*
			     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
			     * If r is truthy, it is known that there are more digits after the rounding digit.
			     */
			    function round(x, sd, rm, r) {
			      var d,
			        i,
			        j,
			        k,
			        n,
			        ni,
			        rd,
			        xc = x.c,
			        pows10 = POWS_TEN;

			      // if x is not Infinity or NaN...
			      if (xc) {
			        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
			        // n is a base 1e14 number, the value of the element of array x.c containing rd.
			        // ni is the index of n within x.c.
			        // d is the number of digits of n.
			        // i is the index of rd within n including leading zeros.
			        // j is the actual index of rd within n (if < 0, rd is a leading zero).
			        out: {
			          // Get the number of digits of the first element of xc.
			          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
			          i = sd - d;

			          // If the rounding digit is in the first element of xc...
			          if (i < 0) {
			            i += LOG_BASE;
			            j = sd;
			            n = xc[ni = 0];

			            // Get the rounding digit at index j of n.
			            rd = mathfloor(n / pows10[d - j - 1] % 10);
			          } else {
			            ni = mathceil((i + 1) / LOG_BASE);
			            if (ni >= xc.length) {
			              if (r) {
			                // Needed by sqrt.
			                for (; xc.length <= ni; xc.push(0));
			                n = rd = 0;
			                d = 1;
			                i %= LOG_BASE;
			                j = i - LOG_BASE + 1;
			              } else {
			                break out;
			              }
			            } else {
			              n = k = xc[ni];

			              // Get the number of digits of n.
			              for (d = 1; k >= 10; k /= 10, d++);

			              // Get the index of rd within n.
			              i %= LOG_BASE;

			              // Get the index of rd within n, adjusted for leading zeros.
			              // The number of leading zeros of n is given by LOG_BASE - d.
			              j = i - LOG_BASE + d;

			              // Get the rounding digit at index j of n.
			              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
			            }
			          }
			          r = r || sd < 0 ||
			          // Are there any non-zero digits after the rounding digit?
			          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
			          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
			          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
			          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&
			          // Check whether the digit to the left of the rounding digit is odd.
			          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
			          if (sd < 1 || !xc[0]) {
			            xc.length = 0;
			            if (r) {
			              // Convert sd to decimal places.
			              sd -= x.e + 1;

			              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
			              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
			              x.e = -sd || 0;
			            } else {
			              // Zero.
			              xc[0] = x.e = 0;
			            }
			            return x;
			          }

			          // Remove excess digits.
			          if (i == 0) {
			            xc.length = ni;
			            k = 1;
			            ni--;
			          } else {
			            xc.length = ni + 1;
			            k = pows10[LOG_BASE - i];

			            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
			            // j > 0 means i > number of leading zeros of n.
			            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
			          }

			          // Round up?
			          if (r) {
			            for (;;) {
			              // If the digit to be rounded up is in the first element of xc...
			              if (ni == 0) {
			                // i will be the length of xc[0] before k is added.
			                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
			                j = xc[0] += k;
			                for (k = 1; j >= 10; j /= 10, k++);

			                // if i != k the length has increased.
			                if (i != k) {
			                  x.e++;
			                  if (xc[0] == BASE) xc[0] = 1;
			                }
			                break;
			              } else {
			                xc[ni] += k;
			                if (xc[ni] != BASE) break;
			                xc[ni--] = 0;
			                k = 1;
			              }
			            }
			          }

			          // Remove trailing zeros.
			          for (i = xc.length; xc[--i] === 0; xc.pop());
			        }

			        // Overflow? Infinity.
			        if (x.e > MAX_EXP) {
			          x.c = x.e = null;

			          // Underflow? Zero.
			        } else if (x.e < MIN_EXP) {
			          x.c = [x.e = 0];
			        }
			      }
			      return x;
			    }
			    function valueOf(n) {
			      var str,
			        e = n.e;
			      if (e === null) return n.toString();
			      str = coeffToString(n.c);
			      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
			      return n.s < 0 ? '-' + str : str;
			    }

			    // PROTOTYPE/INSTANCE METHODS

			    /*
			     * Return a new BigNumber whose value is the absolute value of this BigNumber.
			     */
			    P.absoluteValue = P.abs = function () {
			      var x = new BigNumber(this);
			      if (x.s < 0) x.s = 1;
			      return x;
			    };

			    /*
			     * Return
			     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
			     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
			     *   0 if they have the same value,
			     *   or null if the value of either is NaN.
			     */
			    P.comparedTo = function (y, b) {
			      return compare(this, new BigNumber(y, b));
			    };

			    /*
			     * If dp is undefined or null or true or false, return the number of decimal places of the
			     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
			     *
			     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
			     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
			     * ROUNDING_MODE if rm is omitted.
			     *
			     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
			     */
			    P.decimalPlaces = P.dp = function (dp, rm) {
			      var c,
			        n,
			        v,
			        x = this;
			      if (dp != null) {
			        intCheck(dp, 0, MAX);
			        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
			        return round(new BigNumber(x), dp + x.e + 1, rm);
			      }
			      if (!(c = x.c)) return null;
			      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

			      // Subtract the number of trailing zeros of the last number.
			      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
			      if (n < 0) n = 0;
			      return n;
			    };

			    /*
			     *  n / 0 = I
			     *  n / N = N
			     *  n / I = 0
			     *  0 / n = 0
			     *  0 / 0 = N
			     *  0 / N = N
			     *  0 / I = 0
			     *  N / n = N
			     *  N / 0 = N
			     *  N / N = N
			     *  N / I = N
			     *  I / n = I
			     *  I / 0 = I
			     *  I / N = N
			     *  I / I = N
			     *
			     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
			     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
			     */
			    P.dividedBy = P.div = function (y, b) {
			      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
			    };

			    /*
			     * Return a new BigNumber whose value is the integer part of dividing the value of this
			     * BigNumber by the value of BigNumber(y, b).
			     */
			    P.dividedToIntegerBy = P.idiv = function (y, b) {
			      return div(this, new BigNumber(y, b), 0, 1);
			    };

			    /*
			     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
			     *
			     * If m is present, return the result modulo m.
			     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
			     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
			     *
			     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
			     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
			     *
			     * n {number|string|BigNumber} The exponent. An integer.
			     * [m] {number|string|BigNumber} The modulus.
			     *
			     * '[BigNumber Error] Exponent not an integer: {n}'
			     */
			    P.exponentiatedBy = P.pow = function (n, m) {
			      var half,
			        isModExp,
			        i,
			        k,
			        more,
			        nIsBig,
			        nIsNeg,
			        nIsOdd,
			        y,
			        x = this;
			      n = new BigNumber(n);

			      // Allow NaN and ±Infinity, but not other non-integers.
			      if (n.c && !n.isInteger()) {
			        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
			      }
			      if (m != null) m = new BigNumber(m);

			      // Exponent of MAX_SAFE_INTEGER is 15.
			      nIsBig = n.e > 14;

			      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
			      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
			        // The sign of the result of pow when x is negative depends on the evenness of n.
			        // If +n overflows to ±Infinity, the evenness of n would be not be known.
			        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
			        return m ? y.mod(m) : y;
			      }
			      nIsNeg = n.s < 0;
			      if (m) {
			        // x % m returns NaN if abs(m) is zero, or m is NaN.
			        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
			        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
			        if (isModExp) x = x.mod(m);

			        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
			        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
			      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
			      // [1, 240000000]
			      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
			      // [80000000000000]  [99999750000000]
			      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
			        // If x is negative and n is odd, k = -0, else k = 0.
			        k = x.s < 0 && isOdd(n) ? -0 : 0;

			        // If x >= 1, k = ±Infinity.
			        if (x.e > -1) k = 1 / k;

			        // If n is negative return ±0, else return ±Infinity.
			        return new BigNumber(nIsNeg ? 1 / k : k);
			      } else if (POW_PRECISION) {
			        // Truncating each coefficient array to a length of k after each multiplication
			        // equates to truncating significant digits to POW_PRECISION + [28, 41],
			        // i.e. there will be a minimum of 28 guard digits retained.
			        k = mathceil(POW_PRECISION / LOG_BASE + 2);
			      }
			      if (nIsBig) {
			        half = new BigNumber(0.5);
			        if (nIsNeg) n.s = 1;
			        nIsOdd = isOdd(n);
			      } else {
			        i = Math.abs(+valueOf(n));
			        nIsOdd = i % 2;
			      }
			      y = new BigNumber(ONE);

			      // Performs 54 loop iterations for n of 9007199254740991.
			      for (;;) {
			        if (nIsOdd) {
			          y = y.times(x);
			          if (!y.c) break;
			          if (k) {
			            if (y.c.length > k) y.c.length = k;
			          } else if (isModExp) {
			            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
			          }
			        }
			        if (i) {
			          i = mathfloor(i / 2);
			          if (i === 0) break;
			          nIsOdd = i % 2;
			        } else {
			          n = n.times(half);
			          round(n, n.e + 1, 1);
			          if (n.e > 14) {
			            nIsOdd = isOdd(n);
			          } else {
			            i = +valueOf(n);
			            if (i === 0) break;
			            nIsOdd = i % 2;
			          }
			        }
			        x = x.times(x);
			        if (k) {
			          if (x.c && x.c.length > k) x.c.length = k;
			        } else if (isModExp) {
			          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
			        }
			      }
			      if (isModExp) return y;
			      if (nIsNeg) y = ONE.div(y);
			      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
			    };

			    /*
			     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
			     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
			     *
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
			     */
			    P.integerValue = function (rm) {
			      var n = new BigNumber(this);
			      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
			      return round(n, n.e + 1, rm);
			    };

			    /*
			     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
			     * otherwise return false.
			     */
			    P.isEqualTo = P.eq = function (y, b) {
			      return compare(this, new BigNumber(y, b)) === 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is a finite number, otherwise return false.
			     */
			    P.isFinite = function () {
			      return !!this.c;
			    };

			    /*
			     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
			     * otherwise return false.
			     */
			    P.isGreaterThan = P.gt = function (y, b) {
			      return compare(this, new BigNumber(y, b)) > 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is greater than or equal to the value of
			     * BigNumber(y, b), otherwise return false.
			     */
			    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
			      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is an integer, otherwise return false.
			     */
			    P.isInteger = function () {
			      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
			    };

			    /*
			     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
			     * otherwise return false.
			     */
			    P.isLessThan = P.lt = function (y, b) {
			      return compare(this, new BigNumber(y, b)) < 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is less than or equal to the value of
			     * BigNumber(y, b), otherwise return false.
			     */
			    P.isLessThanOrEqualTo = P.lte = function (y, b) {
			      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is NaN, otherwise return false.
			     */
			    P.isNaN = function () {
			      return !this.s;
			    };

			    /*
			     * Return true if the value of this BigNumber is negative, otherwise return false.
			     */
			    P.isNegative = function () {
			      return this.s < 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is positive, otherwise return false.
			     */
			    P.isPositive = function () {
			      return this.s > 0;
			    };

			    /*
			     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
			     */
			    P.isZero = function () {
			      return !!this.c && this.c[0] == 0;
			    };

			    /*
			     *  n - 0 = n
			     *  n - N = N
			     *  n - I = -I
			     *  0 - n = -n
			     *  0 - 0 = 0
			     *  0 - N = N
			     *  0 - I = -I
			     *  N - n = N
			     *  N - 0 = N
			     *  N - N = N
			     *  N - I = N
			     *  I - n = I
			     *  I - 0 = I
			     *  I - N = N
			     *  I - I = N
			     *
			     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
			     * BigNumber(y, b).
			     */
			    P.minus = function (y, b) {
			      var i,
			        j,
			        t,
			        xLTy,
			        x = this,
			        a = x.s;
			      y = new BigNumber(y, b);
			      b = y.s;

			      // Either NaN?
			      if (!a || !b) return new BigNumber(NaN);

			      // Signs differ?
			      if (a != b) {
			        y.s = -b;
			        return x.plus(y);
			      }
			      var xe = x.e / LOG_BASE,
			        ye = y.e / LOG_BASE,
			        xc = x.c,
			        yc = y.c;
			      if (!xe || !ye) {
			        // Either Infinity?
			        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

			        // Either zero?
			        if (!xc[0] || !yc[0]) {
			          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
			          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :
			          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
			          ROUNDING_MODE == 3 ? -0 : 0);
			        }
			      }
			      xe = bitFloor(xe);
			      ye = bitFloor(ye);
			      xc = xc.slice();

			      // Determine which is the bigger number.
			      if (a = xe - ye) {
			        if (xLTy = a < 0) {
			          a = -a;
			          t = xc;
			        } else {
			          ye = xe;
			          t = yc;
			        }
			        t.reverse();

			        // Prepend zeros to equalise exponents.
			        for (b = a; b--; t.push(0));
			        t.reverse();
			      } else {
			        // Exponents equal. Check digit by digit.
			        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
			        for (a = b = 0; b < j; b++) {
			          if (xc[b] != yc[b]) {
			            xLTy = xc[b] < yc[b];
			            break;
			          }
			        }
			      }

			      // x < y? Point xc to the array of the bigger number.
			      if (xLTy) {
			        t = xc;
			        xc = yc;
			        yc = t;
			        y.s = -y.s;
			      }
			      b = (j = yc.length) - (i = xc.length);

			      // Append zeros to xc if shorter.
			      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
			      if (b > 0) for (; b--; xc[i++] = 0);
			      b = BASE - 1;

			      // Subtract yc from xc.
			      for (; j > a;) {
			        if (xc[--j] < yc[j]) {
			          for (i = j; i && !xc[--i]; xc[i] = b);
			          --xc[i];
			          xc[j] += BASE;
			        }
			        xc[j] -= yc[j];
			      }

			      // Remove leading zeros and adjust exponent accordingly.
			      for (; xc[0] == 0; xc.splice(0, 1), --ye);

			      // Zero?
			      if (!xc[0]) {
			        // Following IEEE 754 (2008) 6.3,
			        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
			        y.s = ROUNDING_MODE == 3 ? -1 : 1;
			        y.c = [y.e = 0];
			        return y;
			      }

			      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
			      // for finite x and y.
			      return normalise(y, xc, ye);
			    };

			    /*
			     *   n % 0 =  N
			     *   n % N =  N
			     *   n % I =  n
			     *   0 % n =  0
			     *  -0 % n = -0
			     *   0 % 0 =  N
			     *   0 % N =  N
			     *   0 % I =  0
			     *   N % n =  N
			     *   N % 0 =  N
			     *   N % N =  N
			     *   N % I =  N
			     *   I % n =  N
			     *   I % 0 =  N
			     *   I % N =  N
			     *   I % I =  N
			     *
			     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
			     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
			     */
			    P.modulo = P.mod = function (y, b) {
			      var q,
			        s,
			        x = this;
			      y = new BigNumber(y, b);

			      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
			      if (!x.c || !y.s || y.c && !y.c[0]) {
			        return new BigNumber(NaN);

			        // Return x if y is Infinity or x is zero.
			      } else if (!y.c || x.c && !x.c[0]) {
			        return new BigNumber(x);
			      }
			      if (MODULO_MODE == 9) {
			        // Euclidian division: q = sign(y) * floor(x / abs(y))
			        // r = x - qy    where  0 <= r < abs(y)
			        s = y.s;
			        y.s = 1;
			        q = div(x, y, 0, 3);
			        y.s = s;
			        q.s *= s;
			      } else {
			        q = div(x, y, 0, MODULO_MODE);
			      }
			      y = x.minus(q.times(y));

			      // To match JavaScript %, ensure sign of zero is sign of dividend.
			      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
			      return y;
			    };

			    /*
			     *  n * 0 = 0
			     *  n * N = N
			     *  n * I = I
			     *  0 * n = 0
			     *  0 * 0 = 0
			     *  0 * N = N
			     *  0 * I = N
			     *  N * n = N
			     *  N * 0 = N
			     *  N * N = N
			     *  N * I = N
			     *  I * n = I
			     *  I * 0 = N
			     *  I * N = N
			     *  I * I = I
			     *
			     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
			     * of BigNumber(y, b).
			     */
			    P.multipliedBy = P.times = function (y, b) {
			      var c,
			        e,
			        i,
			        j,
			        k,
			        m,
			        xcL,
			        xlo,
			        xhi,
			        ycL,
			        ylo,
			        yhi,
			        zc,
			        base,
			        sqrtBase,
			        x = this,
			        xc = x.c,
			        yc = (y = new BigNumber(y, b)).c;

			      // Either NaN, ±Infinity or ±0?
			      if (!xc || !yc || !xc[0] || !yc[0]) {
			        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
			        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
			          y.c = y.e = y.s = null;
			        } else {
			          y.s *= x.s;

			          // Return ±Infinity if either is ±Infinity.
			          if (!xc || !yc) {
			            y.c = y.e = null;

			            // Return ±0 if either is ±0.
			          } else {
			            y.c = [0];
			            y.e = 0;
			          }
			        }
			        return y;
			      }
			      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
			      y.s *= x.s;
			      xcL = xc.length;
			      ycL = yc.length;

			      // Ensure xc points to longer array and xcL to its length.
			      if (xcL < ycL) {
			        zc = xc;
			        xc = yc;
			        yc = zc;
			        i = xcL;
			        xcL = ycL;
			        ycL = i;
			      }

			      // Initialise the result array with zeros.
			      for (i = xcL + ycL, zc = []; i--; zc.push(0));
			      base = BASE;
			      sqrtBase = SQRT_BASE;
			      for (i = ycL; --i >= 0;) {
			        c = 0;
			        ylo = yc[i] % sqrtBase;
			        yhi = yc[i] / sqrtBase | 0;
			        for (k = xcL, j = i + k; j > i;) {
			          xlo = xc[--k] % sqrtBase;
			          xhi = xc[k] / sqrtBase | 0;
			          m = yhi * xlo + xhi * ylo;
			          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
			          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
			          zc[j--] = xlo % base;
			        }
			        zc[j] = c;
			      }
			      if (c) {
			        ++e;
			      } else {
			        zc.splice(0, 1);
			      }
			      return normalise(y, zc, e);
			    };

			    /*
			     * Return a new BigNumber whose value is the value of this BigNumber negated,
			     * i.e. multiplied by -1.
			     */
			    P.negated = function () {
			      var x = new BigNumber(this);
			      x.s = -x.s || null;
			      return x;
			    };

			    /*
			     *  n + 0 = n
			     *  n + N = N
			     *  n + I = I
			     *  0 + n = n
			     *  0 + 0 = 0
			     *  0 + N = N
			     *  0 + I = I
			     *  N + n = N
			     *  N + 0 = N
			     *  N + N = N
			     *  N + I = N
			     *  I + n = I
			     *  I + 0 = I
			     *  I + N = N
			     *  I + I = I
			     *
			     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
			     * BigNumber(y, b).
			     */
			    P.plus = function (y, b) {
			      var t,
			        x = this,
			        a = x.s;
			      y = new BigNumber(y, b);
			      b = y.s;

			      // Either NaN?
			      if (!a || !b) return new BigNumber(NaN);

			      // Signs differ?
			      if (a != b) {
			        y.s = -b;
			        return x.minus(y);
			      }
			      var xe = x.e / LOG_BASE,
			        ye = y.e / LOG_BASE,
			        xc = x.c,
			        yc = y.c;
			      if (!xe || !ye) {
			        // Return ±Infinity if either ±Infinity.
			        if (!xc || !yc) return new BigNumber(a / 0);

			        // Either zero?
			        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
			        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
			      }
			      xe = bitFloor(xe);
			      ye = bitFloor(ye);
			      xc = xc.slice();

			      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
			      if (a = xe - ye) {
			        if (a > 0) {
			          ye = xe;
			          t = yc;
			        } else {
			          a = -a;
			          t = xc;
			        }
			        t.reverse();
			        for (; a--; t.push(0));
			        t.reverse();
			      }
			      a = xc.length;
			      b = yc.length;

			      // Point xc to the longer array, and b to the shorter length.
			      if (a - b < 0) {
			        t = yc;
			        yc = xc;
			        xc = t;
			        b = a;
			      }

			      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
			      for (a = 0; b;) {
			        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
			        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
			      }
			      if (a) {
			        xc = [a].concat(xc);
			        ++ye;
			      }

			      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
			      // ye = MAX_EXP + 1 possible
			      return normalise(y, xc, ye);
			    };

			    /*
			     * If sd is undefined or null or true or false, return the number of significant digits of
			     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
			     * If sd is true include integer-part trailing zeros in the count.
			     *
			     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
			     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
			     * ROUNDING_MODE if rm is omitted.
			     *
			     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
			     *                     boolean: whether to count integer-part trailing zeros: true or false.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
			     */
			    P.precision = P.sd = function (sd, rm) {
			      var c,
			        n,
			        v,
			        x = this;
			      if (sd != null && sd !== !!sd) {
			        intCheck(sd, 1, MAX);
			        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
			        return round(new BigNumber(x), sd, rm);
			      }
			      if (!(c = x.c)) return null;
			      v = c.length - 1;
			      n = v * LOG_BASE + 1;
			      if (v = c[v]) {
			        // Subtract the number of trailing zeros of the last element.
			        for (; v % 10 == 0; v /= 10, n--);

			        // Add the number of digits of the first element.
			        for (v = c[0]; v >= 10; v /= 10, n++);
			      }
			      if (sd && x.e + 1 > n) n = x.e + 1;
			      return n;
			    };

			    /*
			     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
			     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
			     *
			     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
			     */
			    P.shiftedBy = function (k) {
			      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
			      return this.times('1e' + k);
			    };

			    /*
			     *  sqrt(-n) =  N
			     *  sqrt(N) =  N
			     *  sqrt(-I) =  N
			     *  sqrt(I) =  I
			     *  sqrt(0) =  0
			     *  sqrt(-0) = -0
			     *
			     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
			     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
			     */
			    P.squareRoot = P.sqrt = function () {
			      var m,
			        n,
			        r,
			        rep,
			        t,
			        x = this,
			        c = x.c,
			        s = x.s,
			        e = x.e,
			        dp = DECIMAL_PLACES + 4,
			        half = new BigNumber('0.5');

			      // Negative/NaN/Infinity/zero?
			      if (s !== 1 || !c || !c[0]) {
			        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
			      }

			      // Initial estimate.
			      s = Math.sqrt(+valueOf(x));

			      // Math.sqrt underflow/overflow?
			      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
			      if (s == 0 || s == 1 / 0) {
			        n = coeffToString(c);
			        if ((n.length + e) % 2 == 0) n += '0';
			        s = Math.sqrt(+n);
			        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
			        if (s == 1 / 0) {
			          n = '5e' + e;
			        } else {
			          n = s.toExponential();
			          n = n.slice(0, n.indexOf('e') + 1) + e;
			        }
			        r = new BigNumber(n);
			      } else {
			        r = new BigNumber(s + '');
			      }

			      // Check for zero.
			      // r could be zero if MIN_EXP is changed after the this value was created.
			      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
			      // coeffToString to throw.
			      if (r.c[0]) {
			        e = r.e;
			        s = e + dp;
			        if (s < 3) s = 0;

			        // Newton-Raphson iteration.
			        for (;;) {
			          t = r;
			          r = half.times(t.plus(div(x, t, dp, 1)));
			          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
			            // The exponent of r may here be one less than the final result exponent,
			            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
			            // are indexed correctly.
			            if (r.e < e) --s;
			            n = n.slice(s - 3, s + 1);

			            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
			            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
			            // iteration.
			            if (n == '9999' || !rep && n == '4999') {
			              // On the first iteration only, check to see if rounding up gives the
			              // exact result as the nines may infinitely repeat.
			              if (!rep) {
			                round(t, t.e + DECIMAL_PLACES + 2, 0);
			                if (t.times(t).eq(x)) {
			                  r = t;
			                  break;
			                }
			              }
			              dp += 4;
			              s += 4;
			              rep = 1;
			            } else {
			              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
			              // result. If not, then there are further digits and m will be truthy.
			              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
			                // Truncate to the first rounding digit.
			                round(r, r.e + DECIMAL_PLACES + 2, 1);
			                m = !r.times(r).eq(x);
			              }
			              break;
			            }
			          }
			        }
			      }
			      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
			    };

			    /*
			     * Return a string representing the value of this BigNumber in exponential notation and
			     * rounded using ROUNDING_MODE to dp fixed decimal places.
			     *
			     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
			     */
			    P.toExponential = function (dp, rm) {
			      if (dp != null) {
			        intCheck(dp, 0, MAX);
			        dp++;
			      }
			      return format(this, dp, rm, 1);
			    };

			    /*
			     * Return a string representing the value of this BigNumber in fixed-point notation rounding
			     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
			     *
			     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
			     * but e.g. (-0.00001).toFixed(0) is '-0'.
			     *
			     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
			     */
			    P.toFixed = function (dp, rm) {
			      if (dp != null) {
			        intCheck(dp, 0, MAX);
			        dp = dp + this.e + 1;
			      }
			      return format(this, dp, rm);
			    };

			    /*
			     * Return a string representing the value of this BigNumber in fixed-point notation rounded
			     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
			     * of the format or FORMAT object (see BigNumber.set).
			     *
			     * The formatting object may contain some or all of the properties shown below.
			     *
			     * FORMAT = {
			     *   prefix: '',
			     *   groupSize: 3,
			     *   secondaryGroupSize: 0,
			     *   groupSeparator: ',',
			     *   decimalSeparator: '.',
			     *   fractionGroupSize: 0,
			     *   fractionGroupSeparator: '\xA0',      // non-breaking space
			     *   suffix: ''
			     * };
			     *
			     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     * [format] {object} Formatting options. See FORMAT pbject above.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
			     * '[BigNumber Error] Argument not an object: {format}'
			     */
			    P.toFormat = function (dp, rm, format) {
			      var str,
			        x = this;
			      if (format == null) {
			        if (dp != null && rm && typeof rm == 'object') {
			          format = rm;
			          rm = null;
			        } else if (dp && typeof dp == 'object') {
			          format = dp;
			          dp = rm = null;
			        } else {
			          format = FORMAT;
			        }
			      } else if (typeof format != 'object') {
			        throw Error(bignumberError + 'Argument not an object: ' + format);
			      }
			      str = x.toFixed(dp, rm);
			      if (x.c) {
			        var i,
			          arr = str.split('.'),
			          g1 = +format.groupSize,
			          g2 = +format.secondaryGroupSize,
			          groupSeparator = format.groupSeparator || '',
			          intPart = arr[0],
			          fractionPart = arr[1],
			          isNeg = x.s < 0,
			          intDigits = isNeg ? intPart.slice(1) : intPart,
			          len = intDigits.length;
			        if (g2) {
			          i = g1;
			          g1 = g2;
			          g2 = i;
			          len -= i;
			        }
			        if (g1 > 0 && len > 0) {
			          i = len % g1 || g1;
			          intPart = intDigits.substr(0, i);
			          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
			          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
			          if (isNeg) intPart = '-' + intPart;
			        }
			        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
			      }
			      return (format.prefix || '') + str + (format.suffix || '');
			    };

			    /*
			     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
			     * fraction with an integer numerator and an integer denominator.
			     * The denominator will be a positive non-zero value less than or equal to the specified
			     * maximum denominator. If a maximum denominator is not specified, the denominator will be
			     * the lowest value necessary to represent the number exactly.
			     *
			     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
			     *
			     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
			     */
			    P.toFraction = function (md) {
			      var d,
			        d0,
			        d1,
			        d2,
			        e,
			        exp,
			        n,
			        n0,
			        n1,
			        q,
			        r,
			        s,
			        x = this,
			        xc = x.c;
			      if (md != null) {
			        n = new BigNumber(md);

			        // Throw if md is less than one or is not an integer, unless it is Infinity.
			        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
			          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
			        }
			      }
			      if (!xc) return new BigNumber(x);
			      d = new BigNumber(ONE);
			      n1 = d0 = new BigNumber(ONE);
			      d1 = n0 = new BigNumber(ONE);
			      s = coeffToString(xc);

			      // Determine initial denominator.
			      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
			      e = d.e = s.length - x.e - 1;
			      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
			      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
			      exp = MAX_EXP;
			      MAX_EXP = 1 / 0;
			      n = new BigNumber(s);

			      // n0 = d1 = 0
			      n0.c[0] = 0;
			      for (;;) {
			        q = div(n, d, 0, 1);
			        d2 = d0.plus(q.times(d1));
			        if (d2.comparedTo(md) == 1) break;
			        d0 = d1;
			        d1 = d2;
			        n1 = n0.plus(q.times(d2 = n1));
			        n0 = d2;
			        d = n.minus(q.times(d2 = d));
			        n = d2;
			      }
			      d2 = div(md.minus(d0), d1, 0, 1);
			      n0 = n0.plus(d2.times(n1));
			      d0 = d0.plus(d2.times(d1));
			      n0.s = n1.s = x.s;
			      e = e * 2;

			      // Determine which fraction is closer to x, n0/d0 or n1/d1
			      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
			      MAX_EXP = exp;
			      return r;
			    };

			    /*
			     * Return the value of this BigNumber converted to a number primitive.
			     */
			    P.toNumber = function () {
			      return +valueOf(this);
			    };

			    /*
			     * Return a string representing the value of this BigNumber rounded to sd significant digits
			     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
			     * necessary to represent the integer part of the value in fixed-point notation, then use
			     * exponential notation.
			     *
			     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
			     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
			     *
			     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
			     */
			    P.toPrecision = function (sd, rm) {
			      if (sd != null) intCheck(sd, 1, MAX);
			      return format(this, sd, rm, 2);
			    };

			    /*
			     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
			     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
			     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
			     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
			     * TO_EXP_NEG, return exponential notation.
			     *
			     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
			     *
			     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
			     */
			    P.toString = function (b) {
			      var str,
			        n = this,
			        s = n.s,
			        e = n.e;

			      // Infinity or NaN?
			      if (e === null) {
			        if (s) {
			          str = 'Infinity';
			          if (s < 0) str = '-' + str;
			        } else {
			          str = 'NaN';
			        }
			      } else {
			        if (b == null) {
			          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
			        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
			          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
			          str = toFixedPoint(coeffToString(n.c), n.e, '0');
			        } else {
			          intCheck(b, 2, ALPHABET.length, 'Base');
			          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
			        }
			        if (s < 0 && n.c[0]) str = '-' + str;
			      }
			      return str;
			    };

			    /*
			     * Return as toString, but do not accept a base argument, and include the minus sign for
			     * negative zero.
			     */
			    P.valueOf = P.toJSON = function () {
			      return valueOf(this);
			    };
			    P._isBigNumber = true;
			    if (configObject != null) BigNumber.set(configObject);
			    return BigNumber;
			  }

			  // PRIVATE HELPER FUNCTIONS

			  // These functions don't need access to variables,
			  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.

			  function bitFloor(n) {
			    var i = n | 0;
			    return n > 0 || n === i ? i : i - 1;
			  }

			  // Return a coefficient array as a string of base 10 digits.
			  function coeffToString(a) {
			    var s,
			      z,
			      i = 1,
			      j = a.length,
			      r = a[0] + '';
			    for (; i < j;) {
			      s = a[i++] + '';
			      z = LOG_BASE - s.length;
			      for (; z--; s = '0' + s);
			      r += s;
			    }

			    // Determine trailing zeros.
			    for (j = r.length; r.charCodeAt(--j) === 48;);
			    return r.slice(0, j + 1 || 1);
			  }

			  // Compare the value of BigNumbers x and y.
			  function compare(x, y) {
			    var a,
			      b,
			      xc = x.c,
			      yc = y.c,
			      i = x.s,
			      j = y.s,
			      k = x.e,
			      l = y.e;

			    // Either NaN?
			    if (!i || !j) return null;
			    a = xc && !xc[0];
			    b = yc && !yc[0];

			    // Either zero?
			    if (a || b) return a ? b ? 0 : -j : i;

			    // Signs differ?
			    if (i != j) return i;
			    a = i < 0;
			    b = k == l;

			    // Either Infinity?
			    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

			    // Compare exponents.
			    if (!b) return k > l ^ a ? 1 : -1;
			    j = (k = xc.length) < (l = yc.length) ? k : l;

			    // Compare digit by digit.
			    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

			    // Compare lengths.
			    return k == l ? 0 : k > l ^ a ? 1 : -1;
			  }

			  /*
			   * Check that n is a primitive number, an integer, and in range, otherwise throw.
			   */
			  function intCheck(n, min, max, name) {
			    if (n < min || n > max || n !== mathfloor(n)) {
			      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
			    }
			  }

			  // Assumes finite n.
			  function isOdd(n) {
			    var k = n.c.length - 1;
			    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
			  }
			  function toExponential(str, e) {
			    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
			  }
			  function toFixedPoint(str, e, z) {
			    var len, zs;

			    // Negative exponent?
			    if (e < 0) {
			      // Prepend zeros.
			      for (zs = z + '.'; ++e; zs += z);
			      str = zs + str;

			      // Positive exponent
			    } else {
			      len = str.length;

			      // Append zeros.
			      if (++e > len) {
			        for (zs = z, e -= len; --e; zs += z);
			        str += zs;
			      } else if (e < len) {
			        str = str.slice(0, e) + '.' + str.slice(e);
			      }
			    }
			    return str;
			  }

			  // EXPORT

			  BigNumber = clone();
			  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

			  // AMD.
			  if (module.exports) {
			    module.exports = BigNumber;

			    // Browser.
			  } else {
			    if (!globalObject) {
			      globalObject = typeof self != 'undefined' && self ? self : window;
			    }
			    globalObject.BigNumber = BigNumber;
			  }
			})(bignumber); 
		} (bignumber$1));
		return bignumber$1.exports;
	}

	var hasRequiredAr;

	function requireAr () {
		if (hasRequiredAr) return ar$1;
		hasRequiredAr = 1;

		Object.defineProperty(ar$1, "__esModule", {
		  value: true
		});
		const bignumber_js_1 = requireBignumber();
		class Ar {
		  /**
		   * Method to take a string value and return a bignumber object.
		   *
		   * @protected
		   * @type {Function}
		   * @memberof Arweave
		   */
		  BigNum;
		  constructor() {
		    // Configure and assign the constructor function for the bignumber library.
		    this.BigNum = (value, decimals) => {
		      let instance = bignumber_js_1.BigNumber.clone({
		        DECIMAL_PLACES: decimals
		      });
		      return new instance(value);
		    };
		  }
		  winstonToAr(winstonString, {
		    formatted = false,
		    decimals = 12,
		    trim = true
		  } = {}) {
		    let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);
		    return formatted ? number.toFormat(decimals) : number.toFixed(decimals);
		  }
		  arToWinston(arString, {
		    formatted = false
		  } = {}) {
		    let number = this.stringToBigNum(arString).shiftedBy(12);
		    return formatted ? number.toFormat() : number.toFixed(0);
		  }
		  compare(winstonStringA, winstonStringB) {
		    let a = this.stringToBigNum(winstonStringA);
		    let b = this.stringToBigNum(winstonStringB);
		    return a.comparedTo(b);
		  }
		  isEqual(winstonStringA, winstonStringB) {
		    return this.compare(winstonStringA, winstonStringB) === 0;
		  }
		  isLessThan(winstonStringA, winstonStringB) {
		    let a = this.stringToBigNum(winstonStringA);
		    let b = this.stringToBigNum(winstonStringB);
		    return a.isLessThan(b);
		  }
		  isGreaterThan(winstonStringA, winstonStringB) {
		    let a = this.stringToBigNum(winstonStringA);
		    let b = this.stringToBigNum(winstonStringB);
		    return a.isGreaterThan(b);
		  }
		  add(winstonStringA, winstonStringB) {
		    let a = this.stringToBigNum(winstonStringA);
		    this.stringToBigNum(winstonStringB);
		    return a.plus(winstonStringB).toFixed(0);
		  }
		  sub(winstonStringA, winstonStringB) {
		    let a = this.stringToBigNum(winstonStringA);
		    this.stringToBigNum(winstonStringB);
		    return a.minus(winstonStringB).toFixed(0);
		  }
		  stringToBigNum(stringValue, decimalPlaces = 12) {
		    return this.BigNum(stringValue, decimalPlaces);
		  }
		}
		ar$1.default = Ar;
		return ar$1;
	}

	var api = {};

	var hasRequiredApi;

	function requireApi () {
		if (hasRequiredApi) return api;
		hasRequiredApi = 1;

		Object.defineProperty(api, "__esModule", {
		  value: true
		});
		class Api {
		  METHOD_GET = "GET";
		  METHOD_POST = "POST";
		  config;
		  constructor(config) {
		    this.applyConfig(config);
		  }
		  applyConfig(config) {
		    this.config = this.mergeDefaults(config);
		  }
		  getConfig() {
		    return this.config;
		  }
		  mergeDefaults(config) {
		    const protocol = config.protocol || "http";
		    const port = config.port || (protocol === "https" ? 443 : 80);
		    return {
		      host: config.host || "127.0.0.1",
		      protocol,
		      port,
		      timeout: config.timeout || 20000,
		      logging: config.logging || false,
		      logger: config.logger || console.log,
		      network: config.network
		    };
		  }
		  async get(endpoint, config) {
		    return await this.request(endpoint, {
		      ...config,
		      method: this.METHOD_GET
		    });
		  }
		  async post(endpoint, body, config) {
		    const headers = new Headers(config?.headers || {});
		    if (!headers.get("content-type")?.includes("application/json")) {
		      headers.append("content-type", "application/json");
		    }
		    headers.append("accept", "application/json, text/plain, */*");
		    return await this.request(endpoint, {
		      ...config,
		      method: this.METHOD_POST,
		      body: typeof body !== "string" ? JSON.stringify(body) : body,
		      headers
		    });
		  }
		  async request(endpoint, init) {
		    const headers = new Headers(init?.headers || {});
		    const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;
		    /* responseType is purely for backwards compatibility with external apps */
		    const responseType = init?.responseType;
		    delete init?.responseType;
		    if (endpoint.startsWith("/")) {
		      endpoint = endpoint.slice(1);
		    }
		    if (this.config.network) {
		      headers.append("x-network", this.config.network);
		    }
		    if (this.config.logging) {
		      this.config.logger(`Requesting: ${baseURL}/${endpoint}`);
		    }
		    let res = await fetch(`${baseURL}/${endpoint}`, {
		      ...(init || {}),
		      headers
		    });
		    if (this.config.logging) {
		      this.config.logger(`Response:   ${res.url} - ${res.status}`);
		    }
		    const contentType = res.headers.get("content-type");
		    const charset = contentType?.match(/charset=([^()<>@,;:\"/[\]?.=\s]*)/i)?.[1];
		    const response = res;
		    const decodeText = async () => {
		      if (charset) {
		        try {
		          response.data = new TextDecoder(charset).decode(await res.arrayBuffer());
		        } catch (e) {
		          response.data = await res.text();
		        }
		      } else {
		        response.data = await res.text();
		      }
		    };
		    if (responseType === "arraybuffer") {
		      response.data = await res.arrayBuffer();
		    } else if (responseType === "text") {
		      await decodeText();
		    } else if (responseType === "webstream") {
		      response.data = addAsyncIterator(res.body);
		    } else {
		      /** axios defaults to JSON, and then text, we mimic the behaviour */
		      try {
		        let test = await res.clone().json();
		        if (typeof test !== "object") {
		          await decodeText();
		        } else {
		          response.data = await res.json();
		        }
		        test = null;
		      } catch {
		        await decodeText();
		      }
		    }
		    return response;
		  }
		}
		api.default = Api;
		/**
		 * *** To be removed when browsers catch up with the whatwg standard. ***
		 * [Symbol.AsyncIterator] is needed to use `for-await` on the returned ReadableStream (web stream).
		 * Feature is available in nodejs, and should be available in browsers eventually.
		 */
		const addAsyncIterator = body => {
		  const bodyWithIter = body;
		  if (typeof bodyWithIter[Symbol.asyncIterator] === "undefined") {
		    bodyWithIter[Symbol.asyncIterator] = webIiterator(body);
		    return bodyWithIter;
		  }
		  return body;
		};
		const webIiterator = function (stream) {
		  return async function* iteratorGenerator() {
		    const reader = stream.getReader(); //lock
		    try {
		      while (true) {
		        const {
		          done,
		          value
		        } = await reader.read();
		        if (done) return;
		        yield value;
		      }
		    } finally {
		      reader.releaseLock(); //unlock
		    }
		  };
		};
		return api;
	}

	var network = {};

	var hasRequiredNetwork;

	function requireNetwork () {
		if (hasRequiredNetwork) return network;
		hasRequiredNetwork = 1;

		Object.defineProperty(network, "__esModule", {
		  value: true
		});
		class Network {
		  api;
		  constructor(api) {
		    this.api = api;
		  }
		  getInfo() {
		    return this.api.get(`info`).then(response => {
		      return response.data;
		    });
		  }
		  getPeers() {
		    return this.api.get(`peers`).then(response => {
		      return response.data;
		    });
		  }
		}
		network.default = Network;
		return network;
	}

	var transactions = {};

	var error = {};

	var hasRequiredError;

	function requireError () {
		if (hasRequiredError) return error;
		hasRequiredError = 1;

		Object.defineProperty(error, "__esModule", {
		  value: true
		});
		error.getError = void 0;
		class ArweaveError extends Error {
		  type;
		  response;
		  constructor(type, optional = {}) {
		    if (optional.message) {
		      super(optional.message);
		    } else {
		      super();
		    }
		    this.type = type;
		    this.response = optional.response;
		  }
		  getType() {
		    return this.type;
		  }
		}
		error.default = ArweaveError;
		// Safely get error string
		// from a response, falling back to
		// resp.data, statusText or 'unknown'.
		// Note: a wrongly set content-type can
		// cause what is a json response to be interepted
		// as a string or Buffer, so we handle that too.
		function getError(resp) {
		  let data = resp.data;
		  if (typeof resp.data === "string") {
		    try {
		      data = JSON.parse(resp.data);
		    } catch (e) {}
		  }
		  if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {
		    try {
		      data = JSON.parse(data.toString());
		    } catch (e) {}
		  }
		  return data ? data.error || data : resp.statusText || "unknown";
		}
		error.getError = getError;
		return error;
	}

	var transaction = {};

	var deepHash = {};

	var hasRequiredDeepHash;

	function requireDeepHash () {
		if (hasRequiredDeepHash) return deepHash;
		hasRequiredDeepHash = 1;

		var __importDefault = deepHash && deepHash.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(deepHash, "__esModule", {
		  value: true
		});
		const common_1 = __importDefault(requireCommon());
		async function deepHash$1(data) {
		  if (Array.isArray(data)) {
		    const tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer("list"), common_1.default.utils.stringToBuffer(data.length.toString())]);
		    return await deepHashChunks(data, await common_1.default.crypto.hash(tag, "SHA-384"));
		  }
		  const tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer("blob"), common_1.default.utils.stringToBuffer(data.byteLength.toString())]);
		  const taggedHash = common_1.default.utils.concatBuffers([await common_1.default.crypto.hash(tag, "SHA-384"), await common_1.default.crypto.hash(data, "SHA-384")]);
		  return await common_1.default.crypto.hash(taggedHash, "SHA-384");
		}
		deepHash.default = deepHash$1;
		async function deepHashChunks(chunks, acc) {
		  if (chunks.length < 1) {
		    return acc;
		  }
		  const hashPair = common_1.default.utils.concatBuffers([acc, await deepHash$1(chunks[0])]);
		  const newAcc = await common_1.default.crypto.hash(hashPair, "SHA-384");
		  return await deepHashChunks(chunks.slice(1), newAcc);
		}
		return deepHash;
	}

	var merkle = {};

	var hasRequiredMerkle;

	function requireMerkle () {
		if (hasRequiredMerkle) return merkle;
		hasRequiredMerkle = 1;
		(function (exports) {

			var __importDefault = merkle && merkle.__importDefault || function (mod) {
			  return mod && mod.__esModule ? mod : {
			    "default": mod
			  };
			};
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.debug = exports.validatePath = exports.arrayCompare = exports.bufferToInt = exports.intToBuffer = exports.arrayFlatten = exports.generateProofs = exports.buildLayers = exports.generateTransactionChunks = exports.generateTree = exports.computeRootHash = exports.generateLeaves = exports.chunkData = exports.MIN_CHUNK_SIZE = exports.MAX_CHUNK_SIZE = void 0;
			/**
			 * @see {@link https://github.com/ArweaveTeam/arweave/blob/fbc381e0e36efffa45d13f2faa6199d3766edaa2/apps/arweave/src/ar_merkle.erl}
			 */
			const common_1 = __importDefault(requireCommon());
			const utils_1 = requireUtils$1();
			exports.MAX_CHUNK_SIZE = 256 * 1024;
			exports.MIN_CHUNK_SIZE = 32 * 1024;
			const NOTE_SIZE = 32;
			const HASH_SIZE = 32;
			/**
			 * Takes the input data and chunks it into (mostly) equal sized chunks.
			 * The last chunk will be a bit smaller as it contains the remainder
			 * from the chunking process.
			 */
			async function chunkData(data) {
			  let chunks = [];
			  let rest = data;
			  let cursor = 0;
			  while (rest.byteLength >= exports.MAX_CHUNK_SIZE) {
			    let chunkSize = exports.MAX_CHUNK_SIZE;
			    // If the total bytes left will produce a chunk < MIN_CHUNK_SIZE,
			    // then adjust the amount we put in this 2nd last chunk.
			    let nextChunkSize = rest.byteLength - exports.MAX_CHUNK_SIZE;
			    if (nextChunkSize > 0 && nextChunkSize < exports.MIN_CHUNK_SIZE) {
			      chunkSize = Math.ceil(rest.byteLength / 2);
			      // console.log(`Last chunk will be: ${nextChunkSize} which is below ${MIN_CHUNK_SIZE}, adjusting current to ${chunkSize} with ${rest.byteLength} left.`)
			    }
			    const chunk = rest.slice(0, chunkSize);
			    const dataHash = await common_1.default.crypto.hash(chunk);
			    cursor += chunk.byteLength;
			    chunks.push({
			      dataHash,
			      minByteRange: cursor - chunk.byteLength,
			      maxByteRange: cursor
			    });
			    rest = rest.slice(chunkSize);
			  }
			  chunks.push({
			    dataHash: await common_1.default.crypto.hash(rest),
			    minByteRange: cursor,
			    maxByteRange: cursor + rest.byteLength
			  });
			  return chunks;
			}
			exports.chunkData = chunkData;
			async function generateLeaves(chunks) {
			  return Promise.all(chunks.map(async ({
			    dataHash,
			    minByteRange,
			    maxByteRange
			  }) => {
			    return {
			      type: "leaf",
			      id: await hash(await Promise.all([hash(dataHash), hash(intToBuffer(maxByteRange))])),
			      dataHash: dataHash,
			      minByteRange,
			      maxByteRange
			    };
			  }));
			}
			exports.generateLeaves = generateLeaves;
			/**
			 * Builds an arweave merkle tree and gets the root hash for the given input.
			 */
			async function computeRootHash(data) {
			  const rootNode = await generateTree(data);
			  return rootNode.id;
			}
			exports.computeRootHash = computeRootHash;
			async function generateTree(data) {
			  const rootNode = await buildLayers(await generateLeaves(await chunkData(data)));
			  return rootNode;
			}
			exports.generateTree = generateTree;
			/**
			 * Generates the data_root, chunks & proofs
			 * needed for a transaction.
			 *
			 * This also checks if the last chunk is a zero-length
			 * chunk and discards that chunk and proof if so.
			 * (we do not need to upload this zero length chunk)
			 *
			 * @param data
			 */
			async function generateTransactionChunks(data) {
			  const chunks = await chunkData(data);
			  const leaves = await generateLeaves(chunks);
			  const root = await buildLayers(leaves);
			  const proofs = await generateProofs(root);
			  // Discard the last chunk & proof if it's zero length.
			  const lastChunk = chunks.slice(-1)[0];
			  if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {
			    chunks.splice(chunks.length - 1, 1);
			    proofs.splice(proofs.length - 1, 1);
			  }
			  return {
			    data_root: root.id,
			    chunks,
			    proofs
			  };
			}
			exports.generateTransactionChunks = generateTransactionChunks;
			/**
			 * Starting with the bottom layer of leaf nodes, hash every second pair
			 * into a new branch node, push those branch nodes onto a new layer,
			 * and then recurse, building up the tree to it's root, where the
			 * layer only consists of two items.
			 */
			async function buildLayers(nodes, level = 0) {
			  // If there is only 1 node left, this is going to be the root node
			  if (nodes.length < 2) {
			    const root = nodes[0];
			    // console.log("Root layer", root);
			    return root;
			  }
			  const nextLayer = [];
			  for (let i = 0; i < nodes.length; i += 2) {
			    nextLayer.push(await hashBranch(nodes[i], nodes[i + 1]));
			  }
			  // console.log("Layer", nextLayer);
			  return buildLayers(nextLayer, level + 1);
			}
			exports.buildLayers = buildLayers;
			/**
			 * Recursively search through all branches of the tree,
			 * and generate a proof for each leaf node.
			 */
			function generateProofs(root) {
			  const proofs = resolveBranchProofs(root);
			  if (!Array.isArray(proofs)) {
			    return [proofs];
			  }
			  return arrayFlatten(proofs);
			}
			exports.generateProofs = generateProofs;
			function resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {
			  if (node.type == "leaf") {
			    return {
			      offset: node.maxByteRange - 1,
			      proof: (0, utils_1.concatBuffers)([proof, node.dataHash, intToBuffer(node.maxByteRange)])
			    };
			  }
			  if (node.type == "branch") {
			    const partialProof = (0, utils_1.concatBuffers)([proof, node.leftChild.id, node.rightChild.id, intToBuffer(node.byteRange)]);
			    return [resolveBranchProofs(node.leftChild, partialProof, depth + 1), resolveBranchProofs(node.rightChild, partialProof, depth + 1)];
			  }
			  throw new Error(`Unexpected node type`);
			}
			function arrayFlatten(input) {
			  const flat = [];
			  input.forEach(item => {
			    if (Array.isArray(item)) {
			      flat.push(...arrayFlatten(item));
			    } else {
			      flat.push(item);
			    }
			  });
			  return flat;
			}
			exports.arrayFlatten = arrayFlatten;
			async function hashBranch(left, right) {
			  if (!right) {
			    return left;
			  }
			  let branch = {
			    type: "branch",
			    id: await hash([await hash(left.id), await hash(right.id), await hash(intToBuffer(left.maxByteRange))]),
			    byteRange: left.maxByteRange,
			    maxByteRange: right.maxByteRange,
			    leftChild: left,
			    rightChild: right
			  };
			  return branch;
			}
			async function hash(data) {
			  if (Array.isArray(data)) {
			    data = common_1.default.utils.concatBuffers(data);
			  }
			  return new Uint8Array(await common_1.default.crypto.hash(data));
			}
			function intToBuffer(note) {
			  const buffer = new Uint8Array(NOTE_SIZE);
			  for (var i = buffer.length - 1; i >= 0; i--) {
			    var byte = note % 256;
			    buffer[i] = byte;
			    note = (note - byte) / 256;
			  }
			  return buffer;
			}
			exports.intToBuffer = intToBuffer;
			function bufferToInt(buffer) {
			  let value = 0;
			  for (var i = 0; i < buffer.length; i++) {
			    value *= 256;
			    value += buffer[i];
			  }
			  return value;
			}
			exports.bufferToInt = bufferToInt;
			const arrayCompare = (a, b) => a.every((value, index) => b[index] === value);
			exports.arrayCompare = arrayCompare;
			async function validatePath(id, dest, leftBound, rightBound, path) {
			  if (rightBound <= 0) {
			    return false;
			  }
			  if (dest >= rightBound) {
			    return validatePath(id, 0, rightBound - 1, rightBound, path);
			  }
			  if (dest < 0) {
			    return validatePath(id, 0, 0, rightBound, path);
			  }
			  if (path.length == HASH_SIZE + NOTE_SIZE) {
			    const pathData = path.slice(0, HASH_SIZE);
			    const endOffsetBuffer = path.slice(pathData.length, pathData.length + NOTE_SIZE);
			    const pathDataHash = await hash([await hash(pathData), await hash(endOffsetBuffer)]);
			    let result = (0, exports.arrayCompare)(id, pathDataHash);
			    if (result) {
			      return {
			        offset: rightBound - 1,
			        leftBound: leftBound,
			        rightBound: rightBound,
			        chunkSize: rightBound - leftBound
			      };
			    }
			    return false;
			  }
			  const left = path.slice(0, HASH_SIZE);
			  const right = path.slice(left.length, left.length + HASH_SIZE);
			  const offsetBuffer = path.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
			  const offset = bufferToInt(offsetBuffer);
			  const remainder = path.slice(left.length + right.length + offsetBuffer.length);
			  const pathHash = await hash([await hash(left), await hash(right), await hash(offsetBuffer)]);
			  if ((0, exports.arrayCompare)(id, pathHash)) {
			    if (dest < offset) {
			      return await validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);
			    }
			    return await validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);
			  }
			  return false;
			}
			exports.validatePath = validatePath;
			/**
			 * Inspect an arweave chunk proof.
			 * Takes proof, parses, reads and displays the values for console logging.
			 * One proof section per line
			 * Format: left,right,offset => hash
			 */
			async function debug(proof, output = "") {
			  if (proof.byteLength < 1) {
			    return output;
			  }
			  const left = proof.slice(0, HASH_SIZE);
			  const right = proof.slice(left.length, left.length + HASH_SIZE);
			  const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
			  const offset = bufferToInt(offsetBuffer);
			  const remainder = proof.slice(left.length + right.length + offsetBuffer.length);
			  const pathHash = await hash([await hash(left), await hash(right), await hash(offsetBuffer)]);
			  const updatedOutput = `${output}\n${JSON.stringify(Buffer.from(left))},${JSON.stringify(Buffer.from(right))},${offset} => ${JSON.stringify(pathHash)}`;
			  return debug(remainder, updatedOutput);
			}
			exports.debug = debug; 
		} (merkle));
		return merkle;
	}

	var hasRequiredTransaction;

	function requireTransaction () {
		if (hasRequiredTransaction) return transaction;
		hasRequiredTransaction = 1;

		var __createBinding = transaction && transaction.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = transaction && transaction.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = transaction && transaction.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		var __importDefault = transaction && transaction.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(transaction, "__esModule", {
		  value: true
		});
		transaction.Tag = void 0;
		const ArweaveUtils = __importStar(requireUtils$1());
		const deepHash_1 = __importDefault(requireDeepHash());
		const merkle_1 = requireMerkle();
		class BaseObject {
		  get(field, options) {
		    if (!Object.getOwnPropertyNames(this).includes(field)) {
		      throw new Error(`Field "${field}" is not a property of the Arweave Transaction class.`);
		    }
		    // Handle fields that are Uint8Arrays.
		    // To maintain compat we encode them to b64url
		    // if decode option is not specificed.
		    if (this[field] instanceof Uint8Array) {
		      if (options && options.decode && options.string) {
		        return ArweaveUtils.bufferToString(this[field]);
		      }
		      if (options && options.decode && !options.string) {
		        return this[field];
		      }
		      return ArweaveUtils.bufferTob64Url(this[field]);
		    }
		    if (this[field] instanceof Array) {
		      if (options?.decode !== undefined || options?.string !== undefined) {
		        if (field === "tags") {
		          console.warn(`Did you mean to use 'transaction["tags"]' ?`);
		        }
		        throw new Error(`Cannot decode or stringify an array.`);
		      }
		      return this[field];
		    }
		    if (options && options.decode == true) {
		      if (options && options.string) {
		        return ArweaveUtils.b64UrlToString(this[field]);
		      }
		      return ArweaveUtils.b64UrlToBuffer(this[field]);
		    }
		    return this[field];
		  }
		}
		class Tag extends BaseObject {
		  name;
		  value;
		  constructor(name, value, decode = false) {
		    super();
		    this.name = name;
		    this.value = value;
		  }
		}
		transaction.Tag = Tag;
		class Transaction extends BaseObject {
		  format = 2;
		  id = "";
		  last_tx = "";
		  owner = "";
		  tags = [];
		  target = "";
		  quantity = "0";
		  data_size = "0";
		  data = new Uint8Array();
		  data_root = "";
		  reward = "0";
		  signature = "";
		  // Computed when needed.
		  chunks;
		  constructor(attributes = {}) {
		    super();
		    Object.assign(this, attributes);
		    // If something passes in a Tx that has been toJSON'ed and back,
		    // or where the data was filled in from /tx/data endpoint.
		    // data will be b64url encoded, so decode it.
		    if (typeof this.data === "string") {
		      this.data = ArweaveUtils.b64UrlToBuffer(this.data);
		    }
		    if (attributes.tags) {
		      this.tags = attributes.tags.map(tag => {
		        return new Tag(tag.name, tag.value);
		      });
		    }
		  }
		  addTag(name, value) {
		    this.tags.push(new Tag(ArweaveUtils.stringToB64Url(name), ArweaveUtils.stringToB64Url(value)));
		  }
		  toJSON() {
		    return {
		      format: this.format,
		      id: this.id,
		      last_tx: this.last_tx,
		      owner: this.owner,
		      tags: this.tags,
		      target: this.target,
		      quantity: this.quantity,
		      data: ArweaveUtils.bufferTob64Url(this.data),
		      data_size: this.data_size,
		      data_root: this.data_root,
		      data_tree: this.data_tree,
		      reward: this.reward,
		      signature: this.signature
		    };
		  }
		  setOwner(owner) {
		    this.owner = owner;
		  }
		  setSignature({
		    id,
		    owner,
		    reward,
		    tags,
		    signature
		  }) {
		    this.id = id;
		    this.owner = owner;
		    if (reward) this.reward = reward;
		    if (tags) this.tags = tags;
		    this.signature = signature;
		  }
		  async prepareChunks(data) {
		    // Note: we *do not* use `this.data`, the caller may be
		    // operating on a transaction with an zero length data field.
		    // This function computes the chunks for the data passed in and
		    // assigns the result to this transaction. It should not read the
		    // data *from* this transaction.
		    if (!this.chunks && data.byteLength > 0) {
		      this.chunks = await (0, merkle_1.generateTransactionChunks)(data);
		      this.data_root = ArweaveUtils.bufferTob64Url(this.chunks.data_root);
		    }
		    if (!this.chunks && data.byteLength === 0) {
		      this.chunks = {
		        chunks: [],
		        data_root: new Uint8Array(),
		        proofs: []
		      };
		      this.data_root = "";
		    }
		  }
		  // Returns a chunk in a format suitable for posting to /chunk.
		  // Similar to `prepareChunks()` this does not operate `this.data`,
		  // instead using the data passed in.
		  getChunk(idx, data) {
		    if (!this.chunks) {
		      throw new Error(`Chunks have not been prepared`);
		    }
		    const proof = this.chunks.proofs[idx];
		    const chunk = this.chunks.chunks[idx];
		    return {
		      data_root: this.data_root,
		      data_size: this.data_size,
		      data_path: ArweaveUtils.bufferTob64Url(proof.proof),
		      offset: proof.offset.toString(),
		      chunk: ArweaveUtils.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))
		    };
		  }
		  async getSignatureData() {
		    switch (this.format) {
		      case 1:
		        let tags = this.tags.reduce((accumulator, tag) => {
		          return ArweaveUtils.concatBuffers([accumulator, tag.get("name", {
		            decode: true,
		            string: false
		          }), tag.get("value", {
		            decode: true,
		            string: false
		          })]);
		        }, new Uint8Array());
		        return ArweaveUtils.concatBuffers([this.get("owner", {
		          decode: true,
		          string: false
		        }), this.get("target", {
		          decode: true,
		          string: false
		        }), this.get("data", {
		          decode: true,
		          string: false
		        }), ArweaveUtils.stringToBuffer(this.quantity), ArweaveUtils.stringToBuffer(this.reward), this.get("last_tx", {
		          decode: true,
		          string: false
		        }), tags]);
		      case 2:
		        if (!this.data_root) {
		          await this.prepareChunks(this.data);
		        }
		        const tagList = this.tags.map(tag => [tag.get("name", {
		          decode: true,
		          string: false
		        }), tag.get("value", {
		          decode: true,
		          string: false
		        })]);
		        return await (0, deepHash_1.default)([ArweaveUtils.stringToBuffer(this.format.toString()), this.get("owner", {
		          decode: true,
		          string: false
		        }), this.get("target", {
		          decode: true,
		          string: false
		        }), ArweaveUtils.stringToBuffer(this.quantity), ArweaveUtils.stringToBuffer(this.reward), this.get("last_tx", {
		          decode: true,
		          string: false
		        }), tagList, ArweaveUtils.stringToBuffer(this.data_size), this.get("data_root", {
		          decode: true,
		          string: false
		        })]);
		      default:
		        throw new Error(`Unexpected transaction format: ${this.format}`);
		    }
		  }
		}
		transaction.default = Transaction;
		return transaction;
	}

	var transactionUploader = {};

	var hasRequiredTransactionUploader;

	function requireTransactionUploader () {
		if (hasRequiredTransactionUploader) return transactionUploader;
		hasRequiredTransactionUploader = 1;

		var __createBinding = transactionUploader && transactionUploader.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = transactionUploader && transactionUploader.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = transactionUploader && transactionUploader.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		var __importDefault = transactionUploader && transactionUploader.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(transactionUploader, "__esModule", {
		  value: true
		});
		transactionUploader.TransactionUploader = void 0;
		const transaction_1 = __importDefault(requireTransaction());
		const ArweaveUtils = __importStar(requireUtils$1());
		const error_1 = requireError();
		const merkle_1 = requireMerkle();
		// Maximum amount of chunks we will upload in the body.
		const MAX_CHUNKS_IN_BODY = 1;
		// We assume these errors are intermitment and we can try again after a delay:
		// - not_joined
		// - timeout
		// - data_root_not_found (we may have hit a node that just hasn't seen it yet)
		// - exceeds_disk_pool_size_limit
		// We also try again after any kind of unexpected network errors
		// Errors from /chunk we should never try and continue on.
		const FATAL_CHUNK_UPLOAD_ERRORS = ["invalid_json", "chunk_too_big", "data_path_too_big", "offset_too_big", "data_size_too_big", "chunk_proof_ratio_not_attractive", "invalid_proof"];
		// Amount we will delay on receiving an error response but do want to continue.
		const ERROR_DELAY = 1000 * 40;
		class TransactionUploader {
		  api;
		  chunkIndex = 0;
		  txPosted = false;
		  transaction;
		  lastRequestTimeEnd = 0;
		  totalErrors = 0; // Not serialized.
		  data;
		  lastResponseStatus = 0;
		  lastResponseError = "";
		  get isComplete() {
		    return this.txPosted && this.chunkIndex === this.transaction.chunks.chunks.length;
		  }
		  get totalChunks() {
		    return this.transaction.chunks.chunks.length;
		  }
		  get uploadedChunks() {
		    return this.chunkIndex;
		  }
		  get pctComplete() {
		    return Math.trunc(this.uploadedChunks / this.totalChunks * 100);
		  }
		  constructor(api, transaction) {
		    this.api = api;
		    if (!transaction.id) {
		      throw new Error(`Transaction is not signed`);
		    }
		    if (!transaction.chunks) {
		      throw new Error(`Transaction chunks not prepared`);
		    }
		    // Make a copy of transaction, zeroing the data so we can serialize.
		    this.data = transaction.data;
		    this.transaction = new transaction_1.default(Object.assign({}, transaction, {
		      data: new Uint8Array(0)
		    }));
		  }
		  /**
		   * Uploads the next part of the transaction.
		   * On the first call this posts the transaction
		   * itself and on any subsequent calls uploads the
		   * next chunk until it completes.
		   */
		  async uploadChunk(chunkIndex_) {
		    if (this.isComplete) {
		      throw new Error(`Upload is already complete`);
		    }
		    if (this.lastResponseError !== "") {
		      this.totalErrors++;
		    } else {
		      this.totalErrors = 0;
		    }
		    // We have been trying for about an hour receiving an
		    // error every time, so eventually bail.
		    if (this.totalErrors === 100) {
		      throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);
		    }
		    let delay = this.lastResponseError === "" ? 0 : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);
		    if (delay > 0) {
		      // Jitter delay bcoz networks, subtract up to 30% from 40 seconds
		      delay = delay - delay * Math.random() * 0.3;
		      await new Promise(res => setTimeout(res, delay));
		    }
		    this.lastResponseError = "";
		    if (!this.txPosted) {
		      await this.postTransaction();
		      return;
		    }
		    if (chunkIndex_) {
		      this.chunkIndex = chunkIndex_;
		    }
		    const chunk = this.transaction.getChunk(chunkIndex_ || this.chunkIndex, this.data);
		    const chunkOk = await (0, merkle_1.validatePath)(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), ArweaveUtils.b64UrlToBuffer(chunk.data_path));
		    if (!chunkOk) {
		      throw new Error(`Unable to validate chunk ${this.chunkIndex}`);
		    }
		    // Catch network errors and turn them into objects with status -1 and an error message.
		    const resp = await this.api.post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data)).catch(e => {
		      console.error(e.message);
		      return {
		        status: -1,
		        data: {
		          error: e.message
		        }
		      };
		    });
		    this.lastRequestTimeEnd = Date.now();
		    this.lastResponseStatus = resp.status;
		    if (this.lastResponseStatus == 200) {
		      this.chunkIndex++;
		    } else {
		      this.lastResponseError = (0, error_1.getError)(resp);
		      if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {
		        throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);
		      }
		    }
		  }
		  /**
		   * Reconstructs an upload from its serialized state and data.
		   * Checks if data matches the expected data_root.
		   *
		   * @param serialized
		   * @param data
		   */
		  static async fromSerialized(api, serialized, data) {
		    if (!serialized || typeof serialized.chunkIndex !== "number" || typeof serialized.transaction !== "object") {
		      throw new Error(`Serialized object does not match expected format.`);
		    }
		    // Everything looks ok, reconstruct the TransactionUpload,
		    // prepare the chunks again and verify the data_root matches
		    var transaction = new transaction_1.default(serialized.transaction);
		    if (!transaction.chunks) {
		      await transaction.prepareChunks(data);
		    }
		    const upload = new TransactionUploader(api, transaction);
		    // Copy the serialized upload information, and data passed in.
		    upload.chunkIndex = serialized.chunkIndex;
		    upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;
		    upload.lastResponseError = serialized.lastResponseError;
		    upload.lastResponseStatus = serialized.lastResponseStatus;
		    upload.txPosted = serialized.txPosted;
		    upload.data = data;
		    if (upload.transaction.data_root !== serialized.transaction.data_root) {
		      throw new Error(`Data mismatch: Uploader doesn't match provided data.`);
		    }
		    return upload;
		  }
		  /**
		   * Reconstruct an upload from the tx metadata, ie /tx/<id>.
		   *
		   * @param api
		   * @param id
		   * @param data
		   */
		  static async fromTransactionId(api, id) {
		    const resp = await api.get(`tx/${id}`);
		    if (resp.status !== 200) {
		      throw new Error(`Tx ${id} not found: ${resp.status}`);
		    }
		    const transaction = resp.data;
		    transaction.data = new Uint8Array(0);
		    const serialized = {
		      txPosted: true,
		      chunkIndex: 0,
		      lastResponseError: "",
		      lastRequestTimeEnd: 0,
		      lastResponseStatus: 0,
		      transaction
		    };
		    return serialized;
		  }
		  toJSON() {
		    return {
		      chunkIndex: this.chunkIndex,
		      transaction: this.transaction,
		      lastRequestTimeEnd: this.lastRequestTimeEnd,
		      lastResponseStatus: this.lastResponseStatus,
		      lastResponseError: this.lastResponseError,
		      txPosted: this.txPosted
		    };
		  }
		  // POST to /tx
		  async postTransaction() {
		    const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;
		    if (uploadInBody) {
		      // Post the transaction with data.
		      this.transaction.data = this.data;
		      const resp = await this.api.post(`tx`, this.transaction).catch(e => {
		        console.error(e);
		        return {
		          status: -1,
		          data: {
		            error: e.message
		          }
		        };
		      });
		      this.lastRequestTimeEnd = Date.now();
		      this.lastResponseStatus = resp.status;
		      this.transaction.data = new Uint8Array(0);
		      if (resp.status >= 200 && resp.status < 300) {
		        // We are complete.
		        this.txPosted = true;
		        this.chunkIndex = MAX_CHUNKS_IN_BODY;
		        return;
		      }
		      this.lastResponseError = (0, error_1.getError)(resp);
		      throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);
		    }
		    // Post the transaction with no data.
		    const resp = await this.api.post(`tx`, this.transaction);
		    this.lastRequestTimeEnd = Date.now();
		    this.lastResponseStatus = resp.status;
		    if (!(resp.status >= 200 && resp.status < 300)) {
		      this.lastResponseError = (0, error_1.getError)(resp);
		      throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);
		    }
		    this.txPosted = true;
		  }
		}
		transactionUploader.TransactionUploader = TransactionUploader;
		return transactionUploader;
	}

	var hasRequiredTransactions;

	function requireTransactions () {
		if (hasRequiredTransactions) return transactions;
		hasRequiredTransactions = 1;

		var __createBinding = transactions && transactions.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = transactions && transactions.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = transactions && transactions.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		var __importDefault = transactions && transactions.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(transactions, "__esModule", {
		  value: true
		});
		const error_1 = __importDefault(requireError());
		const transaction_1 = __importDefault(requireTransaction());
		const ArweaveUtils = __importStar(requireUtils$1());
		const transaction_uploader_1 = requireTransactionUploader();

		class Transactions {
		  api;
		  crypto;
		  chunks;
		  constructor(api, crypto, chunks) {
		    this.api = api;
		    this.crypto = crypto;
		    this.chunks = chunks;
		  }
		  async getTransactionAnchor() {
		    const res = await this.api.get(`tx_anchor`);
		    if (!res.data.match(/^[a-z0-9_-]{43,}/i) || !res.ok) {
		      throw new Error(`Could not getTransactionAnchor. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);
		    }
		    return res.data;
		  }
		  async getPrice(byteSize, targetAddress) {
		    let endpoint = targetAddress ? `price/${byteSize}/${targetAddress}` : `price/${byteSize}`;
		    const res = await this.api.get(endpoint);
		    if (!/^\d+$/.test(res.data) || !res.ok) {
		      throw new Error(`Could not getPrice. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);
		    }
		    return res.data;
		  }
		  async get(id) {
		    const response = await this.api.get(`tx/${id}`);
		    if (response.status == 200) {
		      const data_size = parseInt(response.data.data_size);
		      if (response.data.format >= 2 && data_size > 0 && data_size <= 1024 * 1024 * 12) {
		        const data = await this.getData(id);
		        return new transaction_1.default({
		          ...response.data,
		          data
		        });
		      }
		      return new transaction_1.default({
		        ...response.data,
		        format: response.data.format || 1
		      });
		    }
		    if (response.status == 404) {
		      throw new error_1.default("TX_NOT_FOUND" /* ArweaveErrorType.TX_NOT_FOUND */);
		    }
		    if (response.status == 410) {
		      throw new error_1.default("TX_FAILED" /* ArweaveErrorType.TX_FAILED */);
		    }
		    throw new error_1.default("TX_INVALID" /* ArweaveErrorType.TX_INVALID */);
		  }
		  fromRaw(attributes) {
		    return new transaction_1.default(attributes);
		  }
		  async search(tagName, tagValue) {
		    return this.api.post(`arql`, {
		      op: "equals",
		      expr1: tagName,
		      expr2: tagValue
		    }).then(response => {
		      if (!response.data) {
		        return [];
		      }
		      return response.data;
		    });
		  }
		  getStatus(id) {
		    return this.api.get(`tx/${id}/status`).then(response => {
		      if (response.status == 200) {
		        return {
		          status: 200,
		          confirmed: response.data
		        };
		      }
		      return {
		        status: response.status,
		        confirmed: null
		      };
		    });
		  }
		  async getData(id, options) {
		    let data = undefined;
		    try {
		      data = await this.chunks.downloadChunkedData(id);
		    } catch (error) {
		      console.error(`Error while trying to download chunked data for ${id}`);
		      console.error(error);
		    }
		    if (!data) {
		      console.warn(`Falling back to gateway cache for ${id}`);
		      try {
		        const {
		          data: resData,
		          ok,
		          status,
		          statusText
		        } = await this.api.get(`/${id}`, {
		          responseType: "arraybuffer"
		        });
		        if (!ok) {
		          throw new Error(`Bad http status code`, {
		            cause: {
		              status,
		              statusText
		            }
		          });
		        }
		        data = resData;
		      } catch (error) {
		        console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);
		        console.error(error);
		      }
		    }
		    if (!data) {
		      throw new Error(`${id} data was not found!`);
		    }
		    if (options && options.decode && !options.string) {
		      return data;
		    }
		    if (options && options.decode && options.string) {
		      return ArweaveUtils.bufferToString(data);
		    }
		    // Since decode wasn't requested, caller expects b64url encoded data.
		    return ArweaveUtils.bufferTob64Url(data);
		  }
		  async sign(transaction, jwk,
		  //"use_wallet" for backwards compatibility only
		  options) {
		    /** Non-exhaustive (only checks key names), but previously no jwk checking was done */
		    const isJwk = obj => {
		      let valid = true;
		      ["n", "e", "d", "p", "q", "dp", "dq", "qi"].map(key => !(key in obj) && (valid = false));
		      return valid;
		    };
		    const validJwk = typeof jwk === "object" && isJwk(jwk);
		    const externalWallet = typeof arweaveWallet === "object";
		    if (!validJwk && !externalWallet) {
		      throw new Error(`No valid JWK or external wallet found to sign transaction.`);
		    } else if (validJwk) {
		      transaction.setOwner(jwk.n);
		      let dataToSign = await transaction.getSignatureData();
		      let rawSignature = await this.crypto.sign(jwk, dataToSign, options);
		      let id = await this.crypto.hash(rawSignature);
		      transaction.setSignature({
		        id: ArweaveUtils.bufferTob64Url(id),
		        owner: jwk.n,
		        signature: ArweaveUtils.bufferTob64Url(rawSignature)
		      });
		    } else if (externalWallet) {
		      try {
		        const existingPermissions = await arweaveWallet.getPermissions();
		        if (!existingPermissions.includes("SIGN_TRANSACTION")) await arweaveWallet.connect(["SIGN_TRANSACTION"]);
		      } catch {
		        // Permission is already granted
		      }
		      const signedTransaction = await arweaveWallet.sign(transaction, options);
		      transaction.setSignature({
		        id: signedTransaction.id,
		        owner: signedTransaction.owner,
		        reward: signedTransaction.reward,
		        tags: signedTransaction.tags,
		        signature: signedTransaction.signature
		      });
		    } else {
		      //can't get here, but for sanity we'll throw an error.
		      throw new Error(`An error occurred while signing. Check wallet is valid`);
		    }
		  }
		  async verify(transaction) {
		    const signaturePayload = await transaction.getSignatureData();
		    /**
		     * The transaction ID should be a SHA-256 hash of the raw signature bytes, so this needs
		     * to be recalculated from the signature and checked against the transaction ID.
		     */
		    const rawSignature = transaction.get("signature", {
		      decode: true,
		      string: false
		    });
		    const expectedId = ArweaveUtils.bufferTob64Url(await this.crypto.hash(rawSignature));
		    if (transaction.id !== expectedId) {
		      throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);
		    }
		    /**
		     * Now verify the signature is valid and signed by the owner wallet (owner field = originating wallet public key).
		     */
		    return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);
		  }
		  async post(transaction) {
		    if (typeof transaction === "string") {
		      transaction = new transaction_1.default(JSON.parse(transaction));
		    } else if (typeof transaction.readInt32BE === "function") {
		      transaction = new transaction_1.default(JSON.parse(transaction.toString()));
		    } else if (typeof transaction === "object" && !(transaction instanceof transaction_1.default)) {
		      transaction = new transaction_1.default(transaction);
		    }
		    if (!(transaction instanceof transaction_1.default)) {
		      throw new Error(`Must be Transaction object`);
		    }
		    if (!transaction.chunks) {
		      await transaction.prepareChunks(transaction.data);
		    }
		    const uploader = await this.getUploader(transaction, transaction.data);
		    // Emulate existing error & return value behavior.
		    try {
		      while (!uploader.isComplete) {
		        await uploader.uploadChunk();
		      }
		    } catch (e) {
		      if (uploader.lastResponseStatus > 0) {
		        return {
		          status: uploader.lastResponseStatus,
		          statusText: uploader.lastResponseError,
		          data: {
		            error: uploader.lastResponseError
		          }
		        };
		      }
		      throw e;
		    }
		    return {
		      status: 200,
		      statusText: "OK",
		      data: {}
		    };
		  }
		  /**
		   * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress
		   * and the ability to resume.
		   *
		   * Usage example:
		   *
		   * ```
		   * const uploader = arweave.transactions.getUploader(transaction);
		   * while (!uploader.isComplete) {
		   *   await uploader.uploadChunk();
		   *   console.log(`${uploader.pctComplete}%`);
		   * }
		   * ```
		   *
		   * @param upload a Transaction object, a previously save progress object, or a transaction id.
		   * @param data the data of the transaction. Required when resuming an upload.
		   */
		  async getUploader(upload, data) {
		    let uploader;
		    if (data instanceof ArrayBuffer) {
		      data = new Uint8Array(data);
		    }
		    if (upload instanceof transaction_1.default) {
		      if (!data) {
		        data = upload.data;
		      }
		      if (!(data instanceof Uint8Array)) {
		        throw new Error("Data format is invalid");
		      }
		      if (!upload.chunks) {
		        await upload.prepareChunks(data);
		      }
		      uploader = new transaction_uploader_1.TransactionUploader(this.api, upload);
		      if (!uploader.data || uploader.data.length === 0) {
		        uploader.data = data;
		      }
		    } else {
		      if (typeof upload === "string") {
		        upload = await transaction_uploader_1.TransactionUploader.fromTransactionId(this.api, upload);
		      }
		      if (!data || !(data instanceof Uint8Array)) {
		        throw new Error(`Must provide data when resuming upload`);
		      }
		      // upload should be a serialized upload.
		      uploader = await transaction_uploader_1.TransactionUploader.fromSerialized(this.api, upload, data);
		    }
		    return uploader;
		  }
		  /**
		   * Async generator version of uploader
		   *
		   * Usage example:
		   *
		   * ```
		   * for await (const uploader of arweave.transactions.upload(tx)) {
		   *  console.log(`${uploader.pctComplete}%`);
		   * }
		   * ```
		   *
		   * @param upload a Transaction object, a previously save uploader, or a transaction id.
		   * @param data the data of the transaction. Required when resuming an upload.
		   */
		  async *upload(upload, data) {
		    const uploader = await this.getUploader(upload, data);
		    while (!uploader.isComplete) {
		      await uploader.uploadChunk();
		      yield uploader;
		    }
		    return uploader;
		  }
		}
		transactions.default = Transactions;
		return transactions;
	}

	var wallets = {};

	var hasRequiredWallets;

	function requireWallets () {
		if (hasRequiredWallets) return wallets;
		hasRequiredWallets = 1;

		var __createBinding = wallets && wallets.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = wallets && wallets.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = wallets && wallets.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(wallets, "__esModule", {
		  value: true
		});
		const ArweaveUtils = __importStar(requireUtils$1());

		class Wallets {
		  api;
		  crypto;
		  constructor(api, crypto) {
		    this.api = api;
		    this.crypto = crypto;
		  }
		  /**
		   * Get the wallet balance for the given address.
		   *
		   * @param {string} address - The arweave address to get the balance for.
		   *
		   * @returns {Promise<string>} - Promise which resolves with a winston string balance.
		   */
		  getBalance(address) {
		    return this.api.get(`wallet/${address}/balance`).then(response => {
		      return response.data;
		    });
		  }
		  /**
		   * Get the last transaction ID for the given wallet address.
		   *
		   * @param {string} address - The arweave address to get the transaction for.
		   *
		   * @returns {Promise<string>} - Promise which resolves with a transaction ID.
		   */
		  getLastTransactionID(address) {
		    return this.api.get(`wallet/${address}/last_tx`).then(response => {
		      return response.data;
		    });
		  }
		  generate() {
		    return this.crypto.generateJWK();
		  }
		  async jwkToAddress(jwk) {
		    if (!jwk || jwk === "use_wallet") {
		      return this.getAddress();
		    } else {
		      return this.getAddress(jwk);
		    }
		  }
		  async getAddress(jwk) {
		    if (!jwk || jwk === "use_wallet") {
		      try {
		        // @ts-ignore
		        await arweaveWallet.connect(["ACCESS_ADDRESS"]);
		      } catch {
		        // Permission is already granted
		      }
		      // @ts-ignore
		      return arweaveWallet.getActiveAddress();
		    } else {
		      return this.ownerToAddress(jwk.n);
		    }
		  }
		  async ownerToAddress(owner) {
		    return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));
		  }
		}
		wallets.default = Wallets;
		return wallets;
	}

	var silo = {};

	var hasRequiredSilo;

	function requireSilo () {
		if (hasRequiredSilo) return silo;
		hasRequiredSilo = 1;

		var __createBinding = silo && silo.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = silo && silo.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = silo && silo.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(silo, "__esModule", {
		  value: true
		});
		silo.SiloResource = void 0;
		const ArweaveUtils = __importStar(requireUtils$1());
		class Silo {
		  api;
		  crypto;
		  transactions;
		  constructor(api, crypto, transactions) {
		    this.api = api;
		    this.crypto = crypto;
		    this.transactions = transactions;
		  }
		  async get(siloURI) {
		    if (!siloURI) {
		      throw new Error(`No Silo URI specified`);
		    }
		    const resource = await this.parseUri(siloURI);
		    const ids = await this.transactions.search("Silo-Name", resource.getAccessKey());
		    if (ids.length == 0) {
		      throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
		    }
		    const transaction = await this.transactions.get(ids[0]);
		    if (!transaction) {
		      throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
		    }
		    const encrypted = transaction.get("data", {
		      decode: true,
		      string: false
		    });
		    return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
		  }
		  async readTransactionData(transaction, siloURI) {
		    if (!siloURI) {
		      throw new Error(`No Silo URI specified`);
		    }
		    const resource = await this.parseUri(siloURI);
		    const encrypted = transaction.get("data", {
		      decode: true,
		      string: false
		    });
		    return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
		  }
		  async parseUri(siloURI) {
		    const parsed = siloURI.match(/^([a-z0-9-_]+)\.([0-9]+)/i);
		    if (!parsed) {
		      throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);
		    }
		    const siloName = parsed[1];
		    const hashIterations = Math.pow(2, parseInt(parsed[2]));
		    const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);
		    const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));
		    const encryptionkey = await this.hash(digest.slice(16, 31), 1);
		    return new SiloResource(siloURI, accessKey, encryptionkey);
		  }
		  async hash(input, iterations) {
		    let digest = await this.crypto.hash(input);
		    for (let count = 0; count < iterations - 1; count++) {
		      digest = await this.crypto.hash(digest);
		    }
		    return digest;
		  }
		}
		silo.default = Silo;
		class SiloResource {
		  uri;
		  accessKey;
		  encryptionKey;
		  constructor(uri, accessKey, encryptionKey) {
		    this.uri = uri;
		    this.accessKey = accessKey;
		    this.encryptionKey = encryptionKey;
		  }
		  getUri() {
		    return this.uri;
		  }
		  getAccessKey() {
		    return this.accessKey;
		  }
		  getEncryptionKey() {
		    return this.encryptionKey;
		  }
		}
		silo.SiloResource = SiloResource;
		return silo;
	}

	var chunks = {};

	var hasRequiredChunks;

	function requireChunks () {
		if (hasRequiredChunks) return chunks;
		hasRequiredChunks = 1;

		var __createBinding = chunks && chunks.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = chunks && chunks.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = chunks && chunks.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		Object.defineProperty(chunks, "__esModule", {
		  value: true
		});
		const error_1 = requireError();
		const ArweaveUtils = __importStar(requireUtils$1());
		class Chunks {
		  api;
		  constructor(api) {
		    this.api = api;
		  }
		  async getTransactionOffset(id) {
		    const resp = await this.api.get(`tx/${id}/offset`);
		    if (resp.status === 200) {
		      return resp.data;
		    }
		    throw new Error(`Unable to get transaction offset: ${(0, error_1.getError)(resp)}`);
		  }
		  async getChunk(offset) {
		    const resp = await this.api.get(`chunk/${offset}`);
		    if (resp.status === 200) {
		      return resp.data;
		    }
		    throw new Error(`Unable to get chunk: ${(0, error_1.getError)(resp)}`);
		  }
		  async getChunkData(offset) {
		    const chunk = await this.getChunk(offset);
		    const buf = ArweaveUtils.b64UrlToBuffer(chunk.chunk);
		    return buf;
		  }
		  firstChunkOffset(offsetResponse) {
		    return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;
		  }
		  async downloadChunkedData(id) {
		    const offsetResponse = await this.getTransactionOffset(id);
		    const size = parseInt(offsetResponse.size);
		    const endOffset = parseInt(offsetResponse.offset);
		    const startOffset = endOffset - size + 1;
		    const data = new Uint8Array(size);
		    let byte = 0;
		    while (byte < size) {
		      if (this.api.config.logging) {
		        console.log(`[chunk] ${byte}/${size}`);
		      }
		      let chunkData;
		      try {
		        chunkData = await this.getChunkData(startOffset + byte);
		      } catch (error) {
		        console.error(`[chunk] Failed to fetch chunk at offset ${startOffset + byte}`);
		        console.error(`[chunk] This could indicate that the chunk wasn't uploaded or hasn't yet seeded properly to a particular gateway/node`);
		      }
		      if (chunkData) {
		        data.set(chunkData, byte);
		        byte += chunkData.length;
		      } else {
		        throw new Error(`Couldn't complete data download at ${byte}/${size}`);
		      }
		    }
		    return data;
		  }
		}
		chunks.default = Chunks;
		return chunks;
	}

	var blocks = {};

	var hasRequiredBlocks;

	function requireBlocks () {
		if (hasRequiredBlocks) return blocks;
		hasRequiredBlocks = 1;

		var __importDefault = blocks && blocks.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(blocks, "__esModule", {
		  value: true
		});
		const error_1 = __importDefault(requireError());

		class Blocks {
		  api;
		  network;
		  static HASH_ENDPOINT = "block/hash/";
		  static HEIGHT_ENDPOINT = "block/height/";
		  constructor(api, network) {
		    this.api = api;
		    this.network = network;
		  }
		  /**
		   * Gets a block by its "indep_hash"
		   */
		  async get(indepHash) {
		    const response = await this.api.get(`${Blocks.HASH_ENDPOINT}${indepHash}`);
		    if (response.status === 200) {
		      return response.data;
		    } else {
		      if (response.status === 404) {
		        throw new error_1.default("BLOCK_NOT_FOUND" /* ArweaveErrorType.BLOCK_NOT_FOUND */);
		      } else {
		        throw new Error(`Error while loading block data: ${response}`);
		      }
		    }
		  }
		  /**
		   * Gets a block by its "height"
		   */
		  async getByHeight(height) {
		    const response = await this.api.get(`${Blocks.HEIGHT_ENDPOINT}${height}`);
		    if (response.status === 200) {
		      return response.data;
		    } else {
		      if (response.status === 404) {
		        throw new error_1.default("BLOCK_NOT_FOUND" /* ArweaveErrorType.BLOCK_NOT_FOUND */);
		      } else {
		        throw new Error(`Error while loading block data: ${response}`);
		      }
		    }
		  }
		  /**
		   * Gets current block data (ie. block with indep_hash = Network.getInfo().current)
		   */
		  async getCurrent() {
		    const {
		      current
		    } = await this.network.getInfo();
		    return await this.get(current);
		  }
		}
		blocks.default = Blocks;
		return blocks;
	}

	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common;
		hasRequiredCommon = 1;

		var __createBinding = common && common.__createBinding || (Object.create ? function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  var desc = Object.getOwnPropertyDescriptor(m, k);
		  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		    desc = {
		      enumerable: true,
		      get: function () {
		        return m[k];
		      }
		    };
		  }
		  Object.defineProperty(o, k2, desc);
		} : function (o, m, k, k2) {
		  if (k2 === undefined) k2 = k;
		  o[k2] = m[k];
		});
		var __setModuleDefault = common && common.__setModuleDefault || (Object.create ? function (o, v) {
		  Object.defineProperty(o, "default", {
		    enumerable: true,
		    value: v
		  });
		} : function (o, v) {
		  o["default"] = v;
		});
		var __importStar = common && common.__importStar || function (mod) {
		  if (mod && mod.__esModule) return mod;
		  var result = {};
		  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		  __setModuleDefault(result, mod);
		  return result;
		};
		var __importDefault = common && common.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		Object.defineProperty(common, "__esModule", {
		  value: true
		});
		const ar_1 = __importDefault(requireAr());
		const api_1 = __importDefault(requireApi());
		const node_driver_1 = __importDefault(requireNodeDriver());
		const network_1 = __importDefault(requireNetwork());
		const transactions_1 = __importDefault(requireTransactions());
		const wallets_1 = __importDefault(requireWallets());
		const transaction_1 = __importDefault(requireTransaction());
		const ArweaveUtils = __importStar(requireUtils$1());
		const silo_1 = __importDefault(requireSilo());
		const chunks_1 = __importDefault(requireChunks());
		const blocks_1 = __importDefault(requireBlocks());
		class Arweave {
		  api;
		  wallets;
		  transactions;
		  network;
		  blocks;
		  ar;
		  silo;
		  chunks;
		  static init;
		  static crypto = new node_driver_1.default();
		  static utils = ArweaveUtils;
		  constructor(apiConfig) {
		    this.api = new api_1.default(apiConfig);
		    this.wallets = new wallets_1.default(this.api, Arweave.crypto);
		    this.chunks = new chunks_1.default(this.api);
		    this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);
		    this.silo = new silo_1.default(this.api, this.crypto, this.transactions);
		    this.network = new network_1.default(this.api);
		    this.blocks = new blocks_1.default(this.api, this.network);
		    this.ar = new ar_1.default();
		  }
		  /** @deprecated */
		  get crypto() {
		    return Arweave.crypto;
		  }
		  /** @deprecated */
		  get utils() {
		    return Arweave.utils;
		  }
		  getConfig() {
		    return {
		      api: this.api.getConfig(),
		      crypto: null
		    };
		  }
		  async createTransaction(attributes, jwk) {
		    const transaction = {};
		    Object.assign(transaction, attributes);
		    if (!attributes.data && !(attributes.target && attributes.quantity)) {
		      throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);
		    }
		    if (attributes.owner == undefined) {
		      if (jwk && jwk !== "use_wallet") {
		        transaction.owner = jwk.n;
		      }
		    }
		    if (attributes.last_tx == undefined) {
		      transaction.last_tx = await this.transactions.getTransactionAnchor();
		    }
		    if (typeof attributes.data === "string") {
		      attributes.data = ArweaveUtils.stringToBuffer(attributes.data);
		    }
		    if (attributes.data instanceof ArrayBuffer) {
		      attributes.data = new Uint8Array(attributes.data);
		    }
		    if (attributes.data && !(attributes.data instanceof Uint8Array)) {
		      throw new Error("Expected data to be a string, Uint8Array or ArrayBuffer");
		    }
		    if (attributes.reward == undefined) {
		      const length = attributes.data ? attributes.data.byteLength : 0;
		      transaction.reward = await this.transactions.getPrice(length, transaction.target);
		    }
		    // here we should call prepare chunk
		    transaction.data_root = "";
		    transaction.data_size = attributes.data ? attributes.data.byteLength.toString() : "0";
		    transaction.data = attributes.data || new Uint8Array(0);
		    const createdTransaction = new transaction_1.default(transaction);
		    await createdTransaction.getSignatureData();
		    return createdTransaction;
		  }
		  async createSiloTransaction(attributes, jwk, siloUri) {
		    const transaction = {};
		    Object.assign(transaction, attributes);
		    if (!attributes.data) {
		      throw new Error(`Silo transactions must have a 'data' value`);
		    }
		    if (!siloUri) {
		      throw new Error(`No Silo URI specified.`);
		    }
		    if (attributes.target || attributes.quantity) {
		      throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);
		    }
		    if (attributes.owner == undefined) {
		      if (!jwk || !jwk.n) {
		        throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);
		      }
		      transaction.owner = jwk.n;
		    }
		    if (attributes.last_tx == undefined) {
		      transaction.last_tx = await this.transactions.getTransactionAnchor();
		    }
		    const siloResource = await this.silo.parseUri(siloUri);
		    if (typeof attributes.data == "string") {
		      const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());
		      transaction.reward = await this.transactions.getPrice(encrypted.byteLength);
		      transaction.data = ArweaveUtils.bufferTob64Url(encrypted);
		    }
		    if (attributes.data instanceof Uint8Array) {
		      const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());
		      transaction.reward = await this.transactions.getPrice(encrypted.byteLength);
		      transaction.data = ArweaveUtils.bufferTob64Url(encrypted);
		    }
		    const siloTransaction = new transaction_1.default(transaction);
		    siloTransaction.addTag("Silo-Name", siloResource.getAccessKey());
		    siloTransaction.addTag("Silo-Version", `0.1.0`);
		    return siloTransaction;
		  }
		  arql(query) {
		    return this.api.post("/arql", query).then(response => response.data || []);
		  }
		}
		common.default = Arweave;
		return common;
	}

	var node;
	var hasRequiredNode;

	function requireNode () {
		if (hasRequiredNode) return node;
		hasRequiredNode = 1;

		var __importDefault = node && node.__importDefault || function (mod) {
		  return mod && mod.__esModule ? mod : {
		    "default": mod
		  };
		};
		const common_1 = __importDefault(requireCommon());
		common_1.default.init = function (apiConfig = {}) {
		  return new common_1.default(apiConfig);
		};
		node = common_1.default;
		return node;
	}

	var nodeExports = requireNode();
	var ArweaveModule = /*@__PURE__*/getDefaultExportFromCjs(nodeExports);

	// src/index.ts

	// src/lib/config/config.constants.ts
	var DEFAULT_OTHENT_CONFIG = {
	  debug: false,
	  inject: false,
	  auth0Domain: "auth.othent.io",
	  auth0ClientId: "uXkRmJoIa0NfzYgYEDAgj6Rss4wR1tIc",
	  auth0Strategy: "refresh-tokens",
	  auth0Cache: "memory",
	  auth0RefreshTokenExpirationMs: 1296e6,
	  // 2 weeks
	  auth0LogInMethod: "popup",
	  auth0RedirectURI: null,
	  auth0ReturnToURI: null,
	  serverBaseURL: "https://kms-server.othent.io",
	  autoConnect: "lazy",
	  cookieKey: null,
	  localStorageKey: null,
	  throwErrors: true,
	  tags: []
	};
	var DEFAULT_OTHENT_OPTIONS = {
	  ...DEFAULT_OTHENT_CONFIG,
	  appName: "",
	  appVersion: "",
	  persistCookie: false,
	  persistLocalStorage: false,
	  auth0Cache: "memory"
	};
	var DEFAULT_GATEWAY_CONFIG = {
	  host: "arweave.net",
	  protocol: "https",
	  port: 443
	};
	var DEFAULT_DISPATCH_NODE = "https://turbo.ardrive.io";
	var DEFAULT_COOKIE_KEY = "othentUserDetails";
	var CLIENT_NAME = "Othent KMS";
	var CLIENT_VERSION = "2.0.0-beta.10";
	var ANALYTICS_TAGS = [
	  {
	    name: "Client",
	    value: CLIENT_NAME
	  },
	  {
	    name: "Client-Version",
	    value: CLIENT_VERSION
	  }
	];

	// src/lib/utils/events/event-listener-handler.ts
	var EventListenersHandler = class {
	  constructor(options) {
	    this.listeners = /* @__PURE__ */ new Set();
	    this.initializedListeners = /* @__PURE__ */ new Set();
	    this.lastEmittedUpdateId = "";
	    this.lastEmittedParams = null;
	    this.options = {
	      diffParams: false,
	      replyOnListen: false
	    };
	    this.options = {
	      ...this.options,
	      ...options
	    };
	  }
	  getUpdateId(parameters) {
	    const serializer = (_, value) => {
	      return value && value === "oject" && !Array.isArray(value) ? Object.entries(value).sort((a, b) => a[0].localeCompare(b[0])) : value;
	    };
	    const { getUpdateIdTransform } = this.options;
	    const transformedParameters = getUpdateIdTransform ? getUpdateIdTransform(parameters) : parameters;
	    return JSON.stringify(transformedParameters, serializer);
	  }
	  get hasListeners() {
	    return this.listeners.size > 0;
	  }
	  add(listener) {
	    this.listeners.add(listener);
	    if (this.options.replyOnListen && this.lastEmittedParams)
	      this.emit(...this.lastEmittedParams);
	  }
	  delete(listener) {
	    this.listeners.add(listener);
	  }
	  emit(...parameters) {
	    const { initializedListeners, lastEmittedUpdateId } = this;
	    const updateId = this.getUpdateId(parameters);
	    const updatedAlreadyEmitted = lastEmittedUpdateId === updateId;
	    this.lastEmittedUpdateId = updateId;
	    this.lastEmittedParams = parameters;
	    this.listeners.forEach((listenerFn) => {
	      if (updatedAlreadyEmitted && initializedListeners.has(listenerFn)) return;
	      initializedListeners.add(listenerFn);
	      try {
	        listenerFn(...parameters);
	      } catch (err) {
	      }
	    });
	    return updatedAlreadyEmitted;
	  }
	};
	function mergeOptions(options, defaults) {
	  return extend$1(true, {}, defaults, options);
	}

	// src/lib/utils/cookies/cookie-storage.ts
	var DEFAULT_COOKIE_OPTIONS = {
	  secure: true,
	  domain: true,
	  ttlHours: 360
	};
	var _CookieStorage = class _CookieStorage {
	  // 2 weeks
	  constructor(cookieOptions = DEFAULT_COOKIE_OPTIONS) {
	    this.secureParam = null;
	    this.domainParam = null;
	    this.ttlMs = 1296e6;
	    const { secureParam, domainParam, ttlMs } = this.parseCookieOptions(
	      mergeOptions(cookieOptions, DEFAULT_COOKIE_OPTIONS)
	    );
	    this.secureParam = secureParam;
	    this.domainParam = domainParam;
	    this.ttlMs = ttlMs;
	    return new Proxy(this, {
	      get(target, prop) {
	        return prop in target || typeof prop !== "string" ? target[prop] : target.getItem(prop);
	      },
	      ownKeys(target) {
	        return document.cookie.split(_CookieStorage.COOKIE_SEPARATOR).map(
	          (cookieStr) => cookieStr.split(_CookieStorage.COOKIE_VALUE_SEPARATOR)[0]
	        );
	      },
	      getOwnPropertyDescriptor() {
	        return {
	          enumerable: true,
	          configurable: true
	        };
	      }
	    });
	  }
	  parseCookieOptions({
	    secure,
	    domain,
	    ttlHours
	  } = {}) {
	    const secureParam = secure ? "secure" : secure === void 0 ? this.secureParam : null;
	    const domainParam = domain ? `domain=${domain === true ? location.host : domain}` : domain === void 0 ? this.domainParam : null;
	    const ttlMs = ttlHours ? ttlHours * 36e5 : ttlHours === void 0 ? this.ttlMs : 0;
	    return {
	      secureParam,
	      domainParam,
	      ttlMs
	    };
	  }
	  getCookieParams(cookieOptions) {
	    const { secureParam, domainParam, ttlMs } = this.parseCookieOptions(cookieOptions);
	    const expirationDate = new Date(Date.now() + ttlMs);
	    const expiresParam = `expires=${expirationDate.toUTCString()}`;
	    const pathParam = "path=/";
	    const cookieParams = [expiresParam, secureParam, domainParam, pathParam].filter(Boolean).join("; ");
	    return cookieParams ? ` ${cookieParams};` : "";
	  }
	  get length() {
	    return document.cookie ? document.cookie.split(_CookieStorage.COOKIE_SEPARATOR).length : 0;
	  }
	  key(index) {
	    const cookieStrAtIndex = document.cookie.split(_CookieStorage.COOKIE_SEPARATOR)[index] || "";
	    const cookieKey = cookieStrAtIndex.split(
	      _CookieStorage.COOKIE_VALUE_SEPARATOR
	    )[0];
	    return cookieKey || null;
	  }
	  getItem(name) {
	    const targetCookie = document.cookie.split(_CookieStorage.COOKIE_SEPARATOR).find((item) => {
	      return item.split(_CookieStorage.COOKIE_VALUE_SEPARATOR)[0] === name;
	    });
	    return targetCookie && targetCookie.split(_CookieStorage.COOKIE_VALUE_SEPARATOR)[1] || null;
	  }
	  setItem(key, value, cookieOptions) {
	    const serializedValue = typeof value === "string" ? value : JSON.stringify(value);
	    const cookieParams = this.getCookieParams(cookieOptions);
	    if (process.env.NODE_ENV === "development") {
	      const actionLabel = ((cookieOptions == null ? void 0 : cookieOptions.ttlHours) || 1) < 0 ? "Removing" : "Setting";
	      console.info(`${actionLabel} cookie ${key}=<VALUE>;${cookieParams}`);
	    }
	    const cookieStr = `${key}=${serializedValue};${cookieParams}`;
	    document.cookie = cookieStr;
	    return cookieStr;
	  }
	  removeItem(key, cookieOptions) {
	    return this.setItem(key, "", { ...cookieOptions, ttlHours: -1 });
	  }
	  clear() {
	    document.cookie.split(_CookieStorage.COOKIE_SEPARATOR).forEach((item) => {
	      this.removeItem(item.split(_CookieStorage.COOKIE_VALUE_SEPARATOR)[0]);
	    });
	  }
	};
	_CookieStorage.COOKIE_SEPARATOR = /\s*;\s*/;
	_CookieStorage.COOKIE_VALUE_SEPARATOR = /\s*=\s*/;
	var CookieStorage = _CookieStorage;
	var cookieStorage = null;
	function getCookieStorage() {
	  if (!cookieStorage) {
	    const isLocalhost = process.env.NODE_ENV === "development" && (location == null ? void 0 : location.hostname) === "localhost";
	    cookieStorage = new CookieStorage({
	      secure: isLocalhost ? false : void 0,
	      domain: isLocalhost ? false : void 0
	    });
	  }
	  return cookieStorage;
	}
	async function getAnsProfile(address) {
	  try {
	    const response = await axios3.get(
	      "https://api.mem.tech/api/state/Tih8T1uESATJNzdwBIY3rpe25kWTzjw8uNiMRYe9I5M",
	      {
	        // Because this will return the whole contract's state, it could get quite large in the future. Therefore, we set
	        // a timeout of 2 seconds to make sure this request doesn't slow down the SDK due to the big download size.
	        timeout: 2e3
	      }
	    );
	    const balanceMatch = response.data.balances.find(
	      (balance) => balance.address === address
	    );
	    const domain = balanceMatch ? balanceMatch.primary_domain || balanceMatch.ownedDomains[0].domain || null : null;
	    return domain ? `${domain}.ar` : null;
	  } catch (err) {
	    console.warn(`Error resolving ANS domain for ${address} =
`, err);
	    return null;
	  }
	}

	// src/lib/auth/auth0.ts
	var _OthentAuth0Client = class _OthentAuth0Client {
	  constructor({
	    debug,
	    domain,
	    clientId,
	    strategy,
	    cache,
	    refreshTokenExpirationMs,
	    loginMethod,
	    redirectURI,
	    returnToURI,
	    appInfo,
	    initialUserDetails,
	    cookieKey,
	    localStorageKey
	  }) {
	    this.debug = false;
	    this.auth0ClientPromise = Promise.resolve(null);
	    this.authEventListenerHandler = new EventListenersHandler({
	      diffParams: true,
	      replyOnListen: true
	    });
	    this.userDetails = null;
	    this.userDetailsExpirationTimeoutID = 0;
	    this.cookieKey = null;
	    this.localStorageKey = null;
	    this.refreshTokenExpirationMs = +DEFAULT_OTHENT_CONFIG.auth0RefreshTokenExpirationMs;
	    this.appInfo = {
	      name: "",
	      version: ""
	    };
	    this.isReady = false;
	    this.isAuthenticated = false;
	    this.debug = debug;
	    this.loginMethod = loginMethod;
	    this.redirectURI = redirectURI;
	    this.returnToURI = returnToURI;
	    this.auth0ClientPromise = oe$1({
	      domain,
	      clientId,
	      useRefreshTokens: strategy === "refresh-tokens",
	      cacheLocation: typeof cache === "string" ? cache : void 0,
	      cache: typeof cache === "object" ? cache : void 0,
	      authorizationParams: {
	        redirect_uri: this.redirectURI
	        // scope: "openid profile email offline_access"
	        // audience
	      }
	    }).then((Auth0Client2) => {
	      this.isReady = true;
	      return Auth0Client2;
	    });
	    this.cookieKey = cookieKey;
	    this.localStorageKey = localStorageKey;
	    this.refreshTokenExpirationMs = refreshTokenExpirationMs;
	    this.appInfo = appInfo;
	    this.restoreUserDetails(initialUserDetails || null);
	    this.handleStorage = this.handleStorage.bind(this);
	  }
	  static isIdTokenValidUser(idToken) {
	    return !!(idToken && idToken.sub && idToken.owner && idToken.walletAddress && idToken.authSystem === "KMS");
	  }
	  static async getUserDetails(idToken) {
	    const { email = "", walletAddress } = idToken;
	    const sub = idToken.sub || "";
	    const authProvider = sub.split("|")[0];
	    let walletAddressLabel = await getAnsProfile(walletAddress);
	    if (!walletAddressLabel) {
	      const providerLabel = _OthentAuth0Client.PROVIDER_LABELS[authProvider] || "Unknown Provider";
	      walletAddressLabel = `${providerLabel} (${email})`;
	    }
	    return {
	      sub,
	      name: idToken.name || "",
	      givenName: idToken.given_name || "",
	      middleName: idToken.middle_name || "",
	      familyName: idToken.family_name || "",
	      nickname: idToken.nickname || "",
	      preferredUsername: idToken.preferred_username || "",
	      profile: idToken.profile || "",
	      picture: idToken.picture || "",
	      website: idToken.website || "",
	      locale: idToken.locale || "",
	      updatedAt: idToken.updated_at || "",
	      email,
	      emailVerified: !!idToken.email_verified,
	      owner: idToken.owner,
	      walletAddress: idToken.walletAddress,
	      walletAddressLabel,
	      authSystem: idToken.authSystem,
	      authProvider
	    };
	  }
	  // Getters / Setters:
	  getAuthEventListenerHandler() {
	    return this.authEventListenerHandler;
	  }
	  setAppInfo(appInfo) {
	    this.appInfo = appInfo;
	  }
	  // Storage listeners:
	  initStorageSyncing() {
	    if (!this.localStorageKey) return;
	    window.addEventListener("storage", this.handleStorage);
	  }
	  stopStorageSyncing() {
	    window.removeEventListener("storage", this.handleStorage);
	  }
	  handleStorage(event) {
	    if (event.key !== this.localStorageKey) return;
	    if (event.newValue) {
	      this.restoreUserDetails();
	    } else {
	      this.logOut();
	    }
	  }
	  persistUserDetails(userDetails) {
	    const { cookieKey, localStorageKey } = this;
	    if (cookieKey) {
	      const cookieStorage2 = getCookieStorage();
	      if (userDetails) {
	        cookieStorage2.setItem(cookieKey, JSON.stringify(userDetails));
	      } else if (cookieStorage2.getItem(cookieKey) !== null) {
	        cookieStorage2.removeItem(cookieKey);
	      }
	    }
	    if (localStorageKey) {
	      if (userDetails) {
	        const now = /* @__PURE__ */ new Date();
	        const serializedUserDetails = JSON.stringify({
	          userDetails,
	          createdAt: now.toUTCString(),
	          expiredBy: new Date(
	            now.getTime() + this.refreshTokenExpirationMs
	          ).toUTCString()
	        });
	        localStorage.setItem(localStorageKey, serializedUserDetails);
	      } else {
	        this.clearStoredUserDetails();
	      }
	    }
	  }
	  // `userDetails` setters:
	  setUserDetails(userDetails, updateAuth = true) {
	    window.clearTimeout(this.userDetailsExpirationTimeoutID);
	    if (userDetails) {
	      this.userDetailsExpirationTimeoutID = window.setTimeout(
	        this.logOut,
	        this.refreshTokenExpirationMs
	      );
	    }
	    const updatedAlreadyEmitted = this.authEventListenerHandler.emit(
	      userDetails,
	      updateAuth ? !!userDetails : this.isAuthenticated
	    );
	    if (!updatedAlreadyEmitted) {
	      this.userDetails = userDetails;
	    }
	    if (updateAuth) {
	      this.isAuthenticated = !!userDetails;
	      this.persistUserDetails(userDetails);
	    }
	    return userDetails;
	  }
	  restoreUserDetails(userDetails) {
	    let initialUserDetails = userDetails || null;
	    if (!initialUserDetails && this.localStorageKey) {
	      try {
	        const storedUserDetails = JSON.parse(
	          localStorage.getItem(this.localStorageKey) || "null"
	        );
	        if (storedUserDetails) {
	          const expiredBy = new Date(storedUserDetails.expiredBy).getTime();
	          if (!isNaN(expiredBy) && expiredBy > Date.now()) {
	            initialUserDetails = storedUserDetails.userDetails;
	          } else {
	            this.clearStoredUserDetails();
	          }
	        }
	      } catch (err) {
	      }
	    }
	    this.setUserDetails(initialUserDetails, false);
	  }
	  clearStoredUserDetails() {
	    Object.keys(localStorage).forEach((key) => {
	      if (key.startsWith("othent")) localStorage.removeItem(key);
	    });
	  }
	  async updateUserDetails(idToken) {
	    const nextUserDetails = idToken && _OthentAuth0Client.isIdTokenValidUser(idToken) ? await _OthentAuth0Client.getUserDetails(idToken) : null;
	    return this.setUserDetails(nextUserDetails);
	  }
	  getAuthorizationParams(authorizationParamsOrData = {}) {
	    const { authorizationParams, data } = authorizationParamsOrData.hasOwnProperty("keyName") ? {
	      authorizationParams: null,
	      data: authorizationParamsOrData
	    } : {
	      authorizationParams: authorizationParamsOrData,
	      data: null
	    };
	    const replacer = (key, value) => {
	      let bufferValues = [];
	      if (value instanceof Buffer || value instanceof DataView || ArrayBuffer.isView(value)) {
	        bufferValues = Array.from(new Uint8Array(value.buffer));
	      } else if (value instanceof ArrayBuffer) {
	        bufferValues = Array.from(new Uint8Array(value));
	      } else {
	        return value;
	      }
	      return key === "data" ? Object.fromEntries(Object.entries(bufferValues)) : {
	        type: "Buffer",
	        data: bufferValues
	      };
	    };
	    const transactionInput = {
	      othentFunction: "KMS",
	      othentSDKVersion: CLIENT_NAME,
	      othentAPIVersion: CLIENT_VERSION,
	      appName: this.appInfo.name,
	      appVersion: this.appInfo.version
	    };
	    if (data) {
	      transactionInput.data = data;
	    }
	    return {
	      ...authorizationParams,
	      transaction_input: JSON.stringify(transactionInput, replacer)
	    };
	  }
	  // Wrappers around Auth0's native client with some additional functionality:
	  async getTokenSilently(data) {
	    const auth0Client = await this.auth0ClientPromise;
	    if (!auth0Client) throw new Error("Missing Auth0 Client");
	    const authorizationParams = this.getAuthorizationParams(data);
	    if (this.debug) {
	      try {
	        console.log("getTokenSilently() =", {
	          ...authorizationParams,
	          transaction_input: JSON.parse(authorizationParams.transaction_input)
	        });
	      } catch (err) {
	        console.error("Error logging/parsing `authorizationParams`:", err);
	      }
	    }
	    try {
	      const getTokenSilentlyResponse = await auth0Client.getTokenSilently({
	        detailedResponse: true,
	        authorizationParams,
	        cacheMode: "off"
	        // Forces the client to get a new token, as we actually include data in them, it cannot be done any other way.
	      });
	      const idToken = await auth0Client.getUser();
	      if (!idToken) throw new Error("Could not get the user's details");
	      const userDetails = await this.updateUserDetails(idToken);
	      return {
	        ...getTokenSilentlyResponse,
	        idToken,
	        userDetails
	      };
	    } catch (err) {
	      throw err;
	    }
	  }
	  async logIn() {
	    const auth0Client = await this.auth0ClientPromise;
	    if (!auth0Client) throw new Error("Missing Auth0 Client");
	    if (this.debug) console.log("logIn()");
	    const isAuthenticated = await auth0Client.isAuthenticated();
	    if (isAuthenticated) {
	      throw new Error("Already logged in");
	    }
	    const authorizationParams = this.getAuthorizationParams({
	      redirect_uri: this.redirectURI
	      // TODO: This doesn't seem to change anything. It could be used to remember the last provider the user used.
	      // connection: "auth0",
	    });
	    if (this.loginMethod === "popup") {
	      await auth0Client.loginWithPopup(
	        {
	          authorizationParams
	        },
	        {
	          // { popup: <POPUP> } // This might be useful to provide an already-created popup in platforms like iOS.
	        }
	      );
	    } else {
	      auth0Client.loginWithRedirect({
	        authorizationParams
	        // openUrl(url) { }, // This might be useful to control the redirect in mobile platforms.
	      });
	      throw new Error("Redirecting...");
	    }
	    return this.getTokenSilently();
	  }
	  async handleRedirectCallback(callbackUrlWithParams) {
	    if (this.debug)
	      console.log(`handleRedirectCallback(${callbackUrlWithParams})`);
	    const auth0Client = await this.auth0ClientPromise;
	    if (!auth0Client) throw new Error("Missing Auth0 Client");
	    await auth0Client.handleRedirectCallback(callbackUrlWithParams);
	    const idToken = await auth0Client.getUser();
	    if (!idToken) throw new Error("Could not get the user's details");
	    return this.updateUserDetails(idToken);
	  }
	  async logOut() {
	    this.setUserDetails(null);
	    const auth0Client = await this.auth0ClientPromise;
	    if (!auth0Client) throw new Error("Missing Auth0 Client");
	    return auth0Client.logout({
	      logoutParams: {
	        returnTo: this.returnToURI
	      }
	    }).catch((err) => {
	      console.warn(err instanceof Error ? err.message : err);
	      if (typeof location !== "undefined") location.reload();
	    });
	  }
	  async encodeToken(data) {
	    const accessToken = await this.getTokenSilently(data);
	    return accessToken.id_token;
	  }
	  // Getters for cached user data:
	  getCachedUserDetails() {
	    return this.userDetails;
	  }
	  getCachedUserPublicKey() {
	    var _a;
	    return ((_a = this.userDetails) == null ? void 0 : _a.owner) || null;
	  }
	  getCachedUserSub() {
	    var _a;
	    return ((_a = this.userDetails) == null ? void 0 : _a.sub) || null;
	  }
	  getCachedUserAddress() {
	    var _a;
	    return ((_a = this.userDetails) == null ? void 0 : _a.walletAddress) || null;
	  }
	  getCachedUserAddressLabel() {
	    var _a;
	    return ((_a = this.userDetails) == null ? void 0 : _a.walletAddressLabel) || null;
	  }
	  getCachedUserEmail() {
	    var _a;
	    return ((_a = this.userDetails) == null ? void 0 : _a.email) || null;
	  }
	};
	_OthentAuth0Client.PROVIDER_LABELS = {
	  apple: "Apple",
	  auth0: "E-Mail",
	  "google-oauth2": "Google",
	  // TODO: Complete these values:
	  "<LinkedIn>": "LinkedIn",
	  "<X>": "X",
	  "<Meta>": "Meta",
	  "<Twitch>": "Twitch",
	  github: "GitHub"
	};
	var OthentAuth0Client = _OthentAuth0Client;
	function binaryDataTypeToString(buffer) {
	  return new TextDecoder().decode(buffer);
	}
	function binaryDataTypeOrStringToBinaryDataType(source) {
	  return typeof source === "string" ? stringToUint8Array(source) : source;
	}
	function stringToUint8Array(str) {
	  return new TextEncoder().encode(str);
	}
	function uint8ArrayTob64(buffer) {
	  return base64JsExports.fromByteArray(new Uint8Array(buffer));
	}
	function uint8ArrayTob64Url(buffer) {
	  return b64UrlEncode(uint8ArrayTob64(buffer));
	}
	function b64UrlEncode(str) {
	  return str.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
	}
	async function hash(data, algorithm = "SHA-256") {
	  let digest = await crypto.subtle.digest(algorithm, data);
	  return new Uint8Array(digest);
	}

	// src/lib/utils/errors/error.ts
	var OthentErrorID = /* @__PURE__ */ ((OthentErrorID2) => {
	  OthentErrorID2["Unexpected"] = "Unexpected";
	  OthentErrorID2["Validation"] = "Validation";
	  OthentErrorID2["UserCreation"] = "UserCreation";
	  OthentErrorID2["Encryption"] = "Encryption";
	  OthentErrorID2["Decryption"] = "Decryption";
	  OthentErrorID2["Signing"] = "Signing";
	  OthentErrorID2["PublicKey"] = "PublicKey";
	  return OthentErrorID2;
	})(OthentErrorID || {});
	var OthentError = class extends Error {
	  constructor(id, developerMessage, error, fromServer = false) {
	    super();
	    this.name = id;
	    this.message = developerMessage || "";
	    if (fromServer) {
	      this.stack = `${id} (from server): ${developerMessage}
`;
	    } else {
	      Error.captureStackTrace(this);
	    }
	    this.id = id;
	    this.developerMessage = developerMessage;
	    if (error instanceof Error) {
	      this.cause = error;
	    } else if (typeof error === "string" || typeof error === "number") {
	      this.cause = new Error(`${error}`);
	    }
	  }
	};

	// src/lib/utils/errors/error.utils.ts
	function isErrorResponseData(data) {
	  return typeof data === "object" && data.error === true && !!data.id && !!OthentErrorID[data.id];
	}
	function parseErrorResponse(error) {
	  var _a;
	  if (isAxiosError(error)) {
	    const data = (_a = error.response) == null ? void 0 : _a.data;
	    if (!isErrorResponseData(data)) {
	      return error;
	    }
	    const { id, developerMessage, cause } = data;
	    let causeError;
	    if (cause) {
	      causeError = new Error(cause.message);
	      causeError.name = cause.name;
	      causeError.stack = cause.stack;
	    }
	    return new OthentError(id, developerMessage || "", causeError, true);
	  }
	  if (error instanceof Error) {
	    return error;
	  }
	  return new Error("Unknown error");
	}

	// src/lib/othent-kms-client/operations/createUser.ts
	async function createUser(api, idToken) {
	  let createUserSuccess = false;
	  try {
	    const createUserResponse = await api.post(
	      "/create-user",
	      { encodedData: idToken }
	    );
	    createUserSuccess = createUserResponse.data.data;
	  } catch (err) {
	    throw parseErrorResponse(err);
	  }
	  if (!createUserSuccess) {
	    throw new Error("Error creating user on server.");
	  }
	  return true;
	}

	// src/lib/othent-kms-client/operations/decrypt.ts
	async function decrypt(api, auth0, ciphertext, keyName) {
	  var _a;
	  const encodedData = await auth0.encodeToken({ ciphertext, keyName });
	  let plaintext = null;
	  try {
	    const decryptResponse = await api.post("/decrypt", {
	      encodedData
	    });
	    plaintext = (_a = decryptResponse.data.data) != null ? _a : null;
	  } catch (err) {
	    throw parseErrorResponse(err);
	  }
	  if (plaintext === null) {
	    throw new Error("Error decrypting on server.");
	  }
	  return typeof plaintext === "string" ? plaintext : binaryDataTypeToString(new Uint8Array(plaintext.data));
	}

	// src/lib/othent-kms-client/operations/encrypt.ts
	async function encrypt(api, auth0, plaintext, keyName) {
	  var _a;
	  const encodedData = await auth0.encodeToken({ plaintext, keyName });
	  let ciphertext = null;
	  try {
	    const encryptResponse = await api.post("/encrypt", {
	      encodedData
	    });
	    ciphertext = (_a = encryptResponse.data.data) != null ? _a : null;
	  } catch (err) {
	    throw parseErrorResponse(err);
	  }
	  if (ciphertext === null) {
	    throw new Error("Error encrypting on server.");
	  }
	  return typeof ciphertext === "string" ? stringToUint8Array(ciphertext) : new Uint8Array(ciphertext.data);
	}

	// src/lib/othent-kms-client/operations/sign.ts
	async function sign(api, auth0, data, keyName) {
	  const encodedData = await auth0.encodeToken({ data, keyName });
	  let signature = null;
	  try {
	    const signResponse = await api.post("/sign", {
	      encodedData
	    });
	    signature = signResponse.data.data;
	  } catch (err) {
	    throw parseErrorResponse(err);
	  }
	  if (signature === null) {
	    throw new Error("Error signing data on server.");
	  }
	  return typeof signature === "string" ? stringToUint8Array(signature) : new Uint8Array(signature.data);
	}

	// src/lib/othent-kms-client/client.ts
	var OthentKMSClient = class {
	  constructor(baseURL, auth0) {
	    this.api = axios3.create({ baseURL });
	    this.auth0 = auth0;
	  }
	  async createUser(idToken) {
	    return createUser(this.api, idToken);
	  }
	  async decrypt(ciphertext, keyName) {
	    return decrypt(this.api, this.auth0, ciphertext, keyName);
	  }
	  async encrypt(plaintext, keyName) {
	    return encrypt(this.api, this.auth0, plaintext, keyName);
	  }
	  async sign(data, keyName) {
	    return sign(this.api, this.auth0, data, keyName);
	  }
	  getSignerSignFn(keyName) {
	    return async (data) => {
	      const signatureBuffer = await this.sign(data, keyName);
	      return signatureBuffer;
	    };
	  }
	};
	function padString(input) {
	  let segmentLength = 4;
	  let stringLength = input.length;
	  let diff = stringLength % segmentLength;
	  if (!diff) {
	    return input;
	  }
	  let position = stringLength;
	  let padLength = segmentLength - diff;
	  let paddedStringLength = stringLength + padLength;
	  let buffer = require$$0$5.Buffer.alloc(paddedStringLength);
	  buffer.write(input);
	  while (padLength--) {
	    buffer.write("=", position++);
	  }
	  return buffer.toString();
	}
	function encode(input, encoding = "utf8") {
	  if (require$$0$5.Buffer.isBuffer(input)) {
	    return fromBase64(input.toString("base64"));
	  }
	  return fromBase64(require$$0$5.Buffer.from(input, encoding).toString("base64"));
	}
	function decode(base64url2, encoding = "utf8") {
	  return require$$0$5.Buffer.from(toBase64(base64url2), "base64").toString(encoding);
	}
	function toBase64(base64url2) {
	  base64url2 = base64url2.toString();
	  return padString(base64url2).replace(/\-/g, "+").replace(/_/g, "/");
	}
	function fromBase64(base64) {
	  return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	}
	function toBuffer(base64url2) {
	  return require$$0$5.Buffer.from(toBase64(base64url2), "base64");
	}
	var base64url = encode;
	base64url.encode = encode;
	base64url.decode = decode;
	base64url.toBase64 = toBase64;
	base64url.fromBase64 = fromBase64;
	base64url.toBuffer = toBuffer;

	// src/lib/utils/promises/promises.utils.ts
	function isPromise(obj) {
	  return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
	}
	function initArweave(apiConfig) {
	  const ArweaveClass = ArweaveModule.default;
	  return ArweaveClass.init(apiConfig);
	}
	var _Othent = class _Othent {
	  // TODO: Add B64 / B64Encoded support (e.g. option on encrypt to return B64Encoded, make decrypt accept a B64 input, make all signature functions return B64Encoded results...)
	  // TODO: Consider moving some of the dependencies to peer dependencies (arweave, axios, warp-arbundles)
	  // TODO: Expose Auth0 client and/or accessToken for developers to use on their own backend?
	  constructor(options = DEFAULT_OTHENT_OPTIONS) {
	    this.errorEventListenerHandler = new EventListenersHandler();
	    this.tokens = /* @__PURE__ */ new Set();
	    this.walletName = CLIENT_NAME;
	    this.walletVersion = CLIENT_VERSION;
	    this.config = DEFAULT_OTHENT_CONFIG;
	    this.appInfo = {
	      name: "",
	      version: ""
	    };
	    this.gatewayConfig = DEFAULT_GATEWAY_CONFIG;
	    let {
	      appName,
	      appVersion,
	      persistCookie,
	      persistLocalStorage,
	      auth0Cache = DEFAULT_OTHENT_CONFIG.auth0Cache,
	      auth0RedirectURI,
	      auth0ReturnToURI,
	      gatewayConfig,
	      initialUserDetails,
	      ...configOptions
	    } = options;
	    const defaultRedirectURI = typeof location === "undefined" ? null : location.origin;
	    this.config = {
	      ...mergeOptions(configOptions, DEFAULT_OTHENT_CONFIG),
	      cookieKey: typeof persistCookie === "string" ? persistCookie : persistCookie ? DEFAULT_COOKIE_KEY : null,
	      localStorageKey: typeof persistLocalStorage === "string" ? persistLocalStorage : persistLocalStorage ? DEFAULT_COOKIE_KEY : null,
	      auth0Cache: typeof auth0Cache === "object" ? "custom" : auth0Cache,
	      auth0RedirectURI: auth0RedirectURI || defaultRedirectURI,
	      auth0ReturnToURI: auth0ReturnToURI || defaultRedirectURI
	    };
	    const { config } = this;
	    const { cookieKey, localStorageKey } = config;
	    if (typeof cookieKey === "string" && !cookieKey.startsWith("othent")) {
	      throw new Error(
	        '`persistCookie` / `cookieKey` must start with "othent".'
	      );
	    }
	    if (typeof localStorageKey === "string" && !localStorageKey.startsWith("othent")) {
	      throw new Error(
	        '`persistLocalStorage` / `localStorageKey` must start with "othent".'
	      );
	    }
	    if (!config.auth0RedirectURI) {
	      throw new Error("`auth0RedirectURI` is required.");
	    }
	    if (!config.auth0ReturnToURI) {
	      throw new Error("`auth0ReturnToURI` is required.");
	    }
	    this.appInfo = {
	      name: appName,
	      version: appVersion
	    };
	    this.gatewayConfig = gatewayConfig || DEFAULT_GATEWAY_CONFIG;
	    let crypto2 = null;
	    if (typeof window !== "undefined") {
	      crypto2 = window.crypto;
	    } else if (typeof global !== "undefined") {
	      crypto2 = global.crypto;
	    } else {
	      throw new Error(
	        "A Crypto module is needed for Othent to work. If your environment doesn't natively provide one, you should polyfill it."
	      );
	    }
	    this.crypto = crypto2;
	    if (config.autoConnect === "eager" && config.auth0LogInMethod === "popup" && config.auth0Strategy === "refresh-tokens" && auth0Cache === "memory") {
	      throw new Error(
	        'The browser cannot open the authentication modal automatically before an user interaction. Use `autoConnect = "lazy"` or change any of these other options: `auth0LogInMethod`, `auth0Strategy` or `auth0Cache`.'
	      );
	    }
	    this.auth0 = new OthentAuth0Client({
	      debug: config.debug,
	      domain: config.auth0Domain,
	      clientId: config.auth0ClientId,
	      strategy: config.auth0Strategy,
	      cache: auth0Cache,
	      refreshTokenExpirationMs: config.auth0RefreshTokenExpirationMs,
	      redirectURI: config.auth0RedirectURI,
	      returnToURI: config.auth0ReturnToURI,
	      loginMethod: config.auth0LogInMethod,
	      appInfo: this.appInfo,
	      initialUserDetails,
	      cookieKey: config.cookieKey,
	      localStorageKey: config.localStorageKey
	    });
	    if (this.config.autoConnect === "eager") {
	      let shouldAutoConnect = typeof location === "undefined";
	      if (!shouldAutoConnect) {
	        const url = new URL(location.href);
	        const { searchParams } = url;
	        if (!searchParams.has("code") && !searchParams.has("state")) {
	          shouldAutoConnect = true;
	        }
	      }
	      if (shouldAutoConnect) this.connect();
	    }
	    if (config.inject) {
	      window.arweaveWallet = this;
	    }
	    if (!config.throwErrors) {
	      const walletMethods = [
	        "connect",
	        "disconnect",
	        "getActiveAddress",
	        "getActivePublicKey",
	        "getAllAddresses",
	        "getWalletNames",
	        "getUserDetails",
	        "getSyncActiveAddress",
	        "getSyncActivePublicKey",
	        "getSyncAllAddresses",
	        "getSyncWalletNames",
	        "getSyncUserDetails",
	        "sign",
	        "dispatch",
	        "encrypt",
	        "decrypt",
	        "signature",
	        "signDataItem",
	        "signMessage",
	        "verifyMessage",
	        "privateHash",
	        "getArweaveConfig",
	        "getPermissions"
	      ];
	      walletMethods.forEach((walletMethod) => {
	        let fn = this[walletMethod];
	        if (typeof fn !== "function") return;
	        fn = fn.bind(this);
	        this[walletMethod] = (...args) => {
	          try {
	            let result = fn(...args);
	            if (isPromise(result)) {
	              result = result.catch((err) => {
	                this.onError(err);
	                return null;
	              });
	            }
	            return result;
	          } catch (err) {
	            this.onError(err);
	          }
	          return null;
	        };
	      });
	    }
	    this.api = new OthentKMSClient(this.config.serverBaseURL, this.auth0);
	  }
	  /**
	   * Start listening for `storage` events to sync user details across tabs. Only needed if `persistLocalStorage = true`.
	   *
	   * @returns A cleanup function that must be called whenever Othent needs to stop listening for `storage` events (e.g.
	   * to be used in React's `useEffects`'s cleanup function).
	   */
	  startTabSynching() {
	    if (!this.config.localStorageKey) {
	      console.warn(
	        "Calling `Othent.startTabSynching()` is a NOOP unless the `persistLocalStorage` option is used."
	      );
	    }
	    this.auth0.initStorageSyncing();
	    return () => {
	      this.auth0.stopStorageSyncing();
	    };
	  }
	  /**
	   *
	   * @param callbackUriWithParams
	   * @returns
	   */
	  async completeConnectionAfterRedirect(callbackUriWithParams) {
	    if (this.config.auth0LogInMethod !== "redirect") {
	      console.warn(
	        'Calling `Othent.completeConnectionAfterRedirect()` is a NOOP unless the `auth0LogInMethod` options is `"redirect"`.'
	      );
	    }
	    const urlString = callbackUriWithParams || (typeof location === "undefined" ? "" : location.href);
	    const urlObject = new URL(urlString.replace(/.+\.auth0:\/\//, "https://"));
	    const { searchParams } = urlObject;
	    if (!searchParams.has("code") || !searchParams.has("state") || !urlString)
	      return null;
	    let userDetails = null;
	    try {
	      userDetails = await this.auth0.handleRedirectCallback(urlString);
	    } finally {
	      if (typeof location !== "undefined" && typeof history !== "undefined") {
	        searchParams.delete("code");
	        searchParams.delete("state");
	        history.replaceState(null, "", urlObject);
	      }
	    }
	    return userDetails;
	  }
	  /**
	   * @returns `true` if Othent's Auth0 client has been initialized; `false` otherwise.
	   */
	  get isReady() {
	    return this.auth0.isReady;
	  }
	  // ERROR EVENT / ERROR HANDLING:
	  onError(error) {
	    if (!(error instanceof Error)) {
	      console.warn("Unknown error type", error);
	      return;
	    }
	    if (this.errorEventListenerHandler.hasListeners) {
	      this.errorEventListenerHandler.emit(error);
	    } else {
	      console.warn(
	        "Unhandled unthrown error:\n",
	        error,
	        '\nWhen using `throwErrors = false`, you must add at least one error event listener with `othent.addEventListener("error", () => { ... })`'
	      );
	    }
	  }
	  /**
	   * Add an event listener for the specific error type.
	   *
	   * @param type `"auth"` or `error`.
	   * @param listener Function of type `AuthListener` or `ErrorListener`.
	   * @returns A cleanup function that will remove the error listener when called.
	   */
	  addEventListener(type, listener) {
	    let eventListenerHandler = null;
	    if (type === "auth") {
	      eventListenerHandler = this.auth0.getAuthEventListenerHandler();
	    } else if (type === "error") {
	      if (this.config.throwErrors)
	        throw new Error(
	          "You can only listen for `error` events if `throwErrors = false`."
	        );
	      eventListenerHandler = this.errorEventListenerHandler;
	    }
	    if (!eventListenerHandler) throw new Error("Unknown event type");
	    eventListenerHandler.add(listener);
	    return () => {
	      eventListenerHandler.delete(listener);
	    };
	  }
	  /**
	   * Remove an error listener of the specified error type.
	   *
	   * @param type `"auth"` or `error`.
	   * @param listener Function of type `AuthListener` or `ErrorListener`.
	   */
	  removeEventListener(type, listener) {
	    let eventListenerHandler = null;
	    if (type === "auth") {
	      eventListenerHandler = this.auth0.getAuthEventListenerHandler();
	    } else if (type === "error") {
	      eventListenerHandler = this.errorEventListenerHandler;
	    }
	    if (!eventListenerHandler) throw new Error("Unknown event type");
	    eventListenerHandler.delete(listener);
	  }
	  // AUTH LOADING:
	  /**
	   * @returns `true` if the user is authenticated; `false` otherwise.
	   */
	  get isAuthenticated() {
	    return this.auth0.isAuthenticated;
	  }
	  /**
	   * Automatically checks if the user is authenticated. If they are not, and...
	   *
	   * - `autoConnect === "eager"`: Prompts them to sign in/up again. It throws an error if authentication fails.
	   * - `autoConnect === "lazy"`: Authenticates them automatically, either from an existing session or by prompting them
	   *   to sign in/up again. It throws an error if authentication fails.
	   * - `autoConnect === "off"`: It throws an error.
	   */
	  requireAuth() {
	    return this.requireUserDataOrThrow().then(() => {
	    });
	  }
	  /**
	   * Automatically checks if the user is authenticated. If they are not, and...
	   *
	   * - `autoConnect === "eager"`: Prompts them to sign in/up again. It throws an error if authentication fails.
	   * - `autoConnect === "lazy"`: Authenticates them automatically, either from an existing session or by prompting them
	   *   to sign in/up again. It throws an error if authentication fails.
	   * - `autoConnect === "off"`: It throws an error.
	   *
	   * @returns `Promise<{ sub, publicKey }>` to get these 2 properties required in most Othent functions.
	   */
	  async requireUserDataOrThrow() {
	    if (this.config.autoConnect !== "off" && !this.auth0.isAuthenticated) {
	      await this.connect(void 0, void 0, this.gatewayConfig);
	    }
	    const { sub, owner } = this.auth0.getCachedUserDetails() || {};
	    if (!sub || !owner) throw new Error("Missing cached user.");
	    return {
	      sub,
	      publicKey: owner
	    };
	  }
	  // CONNECT / DISCONNECT:
	  /**
	   * Prompts the user to sign in/up using Auth0's modal. This function cannot be called programmatically before the user
	   * interacts with the page (e.g. by clicking on a button), as that will result in a `Unable to open a popup` error.
	   *
	   * @returns A Promise with the `UserDetails` or `null` if the log in modal was closed, could not even be opened or
	   * authentication failed.
	   */
	  async connect(permissions, appInfo, gateway) {
	    if (permissions && permissions.toSorted().join("-") !== _Othent.ALL_PERMISSIONS.join("-")) {
	      throw new Error(
	        "Othent implicitly has access to all available permissions. You should pass `permissions = undefined` or include all of them."
	      );
	    }
	    if (appInfo) {
	      this.appInfo = appInfo;
	      this.auth0.setAppInfo(appInfo);
	    }
	    this.gatewayConfig = gateway || DEFAULT_GATEWAY_CONFIG;
	    let id_token = "";
	    let userDetails = null;
	    try {
	      const response = await this.auth0.getTokenSilently();
	      id_token = response.id_token;
	      userDetails = response.userDetails;
	    } catch (err) {
	      if (!(err instanceof Error)) throw err;
	      if (err.message !== "Login required" && !(err instanceof f)) {
	        throw err;
	      }
	      console.warn(err.message);
	    }
	    if (!id_token) {
	      try {
	        const response = await this.auth0.logIn();
	        id_token = response.id_token;
	        userDetails = response.userDetails;
	      } catch (err) {
	        if (!(err instanceof Error)) throw err;
	        if (err.message === "Redirecting...") await new Promise(() => {
	        });
	        if (err.message.startsWith("Unable to open a popup") || err instanceof p$1 || err instanceof h$1) {
	          if (err instanceof h$1) err.popup.close();
	          console.warn(err.message);
	          return null;
	        }
	        throw err;
	      }
	    }
	    if (id_token && !userDetails) {
	      await this.api.createUser(id_token);
	      const response = await this.auth0.getTokenSilently();
	      id_token = response.id_token;
	      userDetails = response.userDetails;
	    }
	    if (id_token && userDetails) return userDetails;
	    this.auth0.logOut();
	    throw new Error("Unexpected authentication error");
	  }
	  /**
	   * Logs out the user (disconnect the user's wallet). This will require the user to log back in after called.
	   */
	  async disconnect() {
	    return this.auth0.logOut();
	  }
	  // GET DATA (ASYNC):
	  /**
	   * Returns the Arweave wallet address associated with the active (authenticated) user account.
	   *
	   * The wallet address is derived from the corresponding public key (see [`getActivePublicKey()`](get-active-public-key.md)).
	   *
	   * This function assumes (and requires) a user is authenticated.
	   *
	   * @returns A Promise with the active wallet address of the users wallet.
	   */
	  getActiveAddress() {
	    return Promise.resolve(this.getSyncActiveAddress());
	  }
	  /**
	   * Returns the public key (`jwk.n` field) associated with the active (authenticated) user account.
	   *
	   * This function assumes (and requires) a user is authenticated.
	   *
	   * @returns A Promise with the owner (jwk.n field) of the users wallet.
	   */
	  getActivePublicKey() {
	    return Promise.resolve(this.getSyncActivePublicKey());
	  }
	  /**
	   * Returns an array of Arweave wallet addresses associated with the active (authenticated) user account.
	   *
	   * However, note that Othent does not currently support creating/storing more than one wallet associated to the same
	   * account, so this function will always return exactly one wallet address.
	   *
	   * This function assumes (and requires) a user is authenticated.
	   *
	   * @returns A Promise with an array of all wallet addresses of the users wallet.
	   */
	  getAllAddresses() {
	    return Promise.resolve(this.getSyncAllAddresses());
	  }
	  /**
	   * Similarly to ArConnect, each wallet in Othent has a nickname. This is either:
	   *
	   * - The user's [ANS](https://ans.gg) name.
	   * - A platform + email identifying label (e.g. `Google (email@gmail.com)`, `Twitter (email@outlook.com)`...).
	   *
	   * To provide better UX, you can retrieve these names and display them to the user, so that they can easily recognize
	   * which wallet they're using.
	   *
	   * However, note that Othent does not currently support creating/storing more than one wallet associated to the same
	   * account, so this function will always return exactly one wallet address.
	   *
	   * This function assumes (and requires) a user is authenticated.
	   *
	   * @returns A Promise containing an object that maps each wallet addresses to their nickname.
	   */
	  getWalletNames() {
	    return Promise.resolve(this.getSyncWalletNames());
	  }
	  /**
	   * Returns an object with all the user details of the active (authenticated) user account.
	   *
	   * @returns A Promise containing all the user details of the active user, or `null` if the user is not authenticated.
	   */
	  getUserDetails() {
	    return Promise.resolve(this.getSyncUserDetails());
	  }
	  // GET DATA (SYNC):
	  /**
	   * Get the active wallet address of the users wallet. This function assumes (and requires) a user is authenticated.
	   * @returns The active wallet address of the users wallet.
	   */
	  getSyncActiveAddress() {
	    return this.auth0.getCachedUserAddress() || "";
	  }
	  /**
	   * Get the owner (jwk.n) field of the users wallet. This function assumes (and requires) a user is authenticated.
	   * @returns The owner (jwk.n) field of the users wallet.
	   */
	  getSyncActivePublicKey() {
	    return this.auth0.getCachedUserPublicKey() || "";
	  }
	  /**
	   * Get all addresses of the users wallet. This function assumes (and requires) a user is authenticated.
	   * @returns All wallet addresses of the users wallet.
	   */
	  getSyncAllAddresses() {
	    const address = this.auth0.getCachedUserAddress();
	    return address ? [address] : [];
	  }
	  /**
	   * Get the wallets (users) email. This function assumes (and requires) a user is authenticated.
	   * @returns The wallets (users) email.
	   */
	  getSyncWalletNames() {
	    const address = this.auth0.getCachedUserAddress();
	    const addressLabel = this.auth0.getCachedUserAddressLabel();
	    return Promise.resolve(
	      address && addressLabel ? {
	        [address]: addressLabel
	      } : {}
	    );
	  }
	  /**
	   * Get user details. This function assumes (and requires) a user is authenticated.
	   * @returns The user's details.
	   */
	  getSyncUserDetails() {
	    return this.auth0.getCachedUserDetails();
	  }
	  addCommonTags(transactionOrTags = []) {
	    if (Array.isArray(transactionOrTags)) {
	      const appInfoTags = [
	        { name: "App-Name", value: this.appInfo.name },
	        { name: "App-Version", value: this.appInfo.version }
	      ];
	      return [
	        ...transactionOrTags,
	        ...this.config.tags,
	        ...appInfoTags,
	        ...ANALYTICS_TAGS
	      ];
	    }
	    for (const { name, value } of this.config.tags) {
	      transactionOrTags.addTag(name, value);
	    }
	    transactionOrTags.addTag("App-Name", this.appInfo.name);
	    transactionOrTags.addTag("App-Version", this.appInfo.version);
	    for (const { name, value } of ANALYTICS_TAGS) {
	      transactionOrTags.addTag(name, value);
	    }
	  }
	  /**
	   * To submit a transaction to the Arweave Network, it first has to be signed using a private key. Othent creates a private
	   * key / Arweave wallet for every account and stores it in Google KMS. The wallet associated with the active user account
	   * is used to sign transactions using the `sign()` function.
	   *
	   * The `sign()` function is meant to replicate the behavior of the `transactions.sign()` function of
	   * [`arweave-js`](https://github.com/arweaveTeam/arweave-js#sign-a-transaction), but instead of mutating the transaction
	   * object, it returns a new and signed transaction instance.
	   *
	   * This function assumes (and requires) a user is authenticated and a valid arweave transaction.
	   *
	   * @param transaction The transaction to sign.
	   *
	   * @returns A Promise containing a new signed transaction.
	   */
	  async sign(transaction) {
	    const { sub, publicKey } = await this.requireUserDataOrThrow();
	    const arweave = initArweave(this.gatewayConfig);
	    const transactionTags = transaction.get("tags").map(
	      (tag) => ({
	        name: tag.get("name", { decode: true, string: true }),
	        value: tag.get("value", { decode: true, string: true })
	      })
	    );
	    const tags = this.addCommonTags(transactionTags);
	    const transactionToSign = await arweave.createTransaction({
	      data: transaction.data,
	      owner: publicKey,
	      reward: transaction.reward
	    });
	    tags.forEach((tagData) => {
	      transactionToSign.addTag(tagData.name, tagData.value);
	    });
	    const dataToSign = await transactionToSign.getSignatureData();
	    const signatureBuffer = await this.api.sign(dataToSign, sub);
	    const id = await hash(signatureBuffer);
	    transactionToSign.setSignature({
	      id: uint8ArrayTob64Url(id),
	      owner: publicKey,
	      signature: uint8ArrayTob64Url(signatureBuffer),
	      tags: transactionToSign.tags,
	      reward: transactionToSign.reward
	    });
	    return transactionToSign;
	  }
	  /**
	   * The `dispatch()` function allows you to quickly sign and send a transaction to the network in a bundled format. It is
	   * best for smaller datas and contract interactions. If the bundled transaction cannot be submitted, it will fall back to a
	   * base layer transaction. The function returns the [result](dispatch.md#dispatch-result) of the API call.
	   *
	   * This function assumes (and requires) a user is authenticated and a valid arweave transaction.
	   *
	   * @param transaction The transaction to sign and dispatch.
	   *
	   * @returns The signed version of the transaction.
	   */
	  async dispatch(transaction, options) {
	    var _a;
	    const transactionTags = transaction.get("tags").map(
	      (tag) => ({
	        name: tag.get("name", { decode: true, string: true }),
	        value: tag.get("value", { decode: true, string: true })
	      })
	    );
	    const signedDataItemBuffer = await this.signDataItem({
	      data: transaction.data,
	      tags: transactionTags,
	      target: transaction.target
	    });
	    const url = `${(options == null ? void 0 : options.node) || DEFAULT_DISPATCH_NODE}/tx`;
	    try {
	      const res = await axios3.post(
	        url,
	        signedDataItemBuffer,
	        {
	          headers: {
	            "Content-Type": "application/octet-stream"
	          },
	          maxBodyLength: Infinity,
	          maxContentLength: Infinity,
	          responseType: "json"
	        }
	      );
	      if (res.status >= 400) {
	        throw new Error(`${res.status} - ${JSON.stringify(res.data)}`);
	      }
	      return {
	        ...res.data,
	        type: "BUNDLED"
	      };
	    } catch (err) {
	      console.warn(`Error dispatching transaction to ${url} =
`, err);
	      const signedTransaction = await this.sign(transaction);
	      const arweave = (_a = options == null ? void 0 : options.arweave) != null ? _a : initArweave(this.gatewayConfig);
	      const uploader = await arweave.transactions.getUploader(signedTransaction);
	      while (!uploader.isComplete) {
	        await uploader.uploadChunk();
	      }
	      return {
	        id: signedTransaction.id,
	        signature: signedTransaction.signature,
	        owner: signedTransaction.owner,
	        type: "BASE"
	      };
	    }
	  }
	  // ENCRYPT/DECRYPT:
	  /**
	   * Encrypt data with the users JWK.
	   *
	   * This function assumes (and requires) a user is authenticate.
	   *
	   * @param plaintext The data in string format to sign.
	   *
	   * @returns The encrypted data.
	   */
	  async encrypt(plaintext) {
	    const { sub } = await this.requireUserDataOrThrow();
	    const ciphertextBuffer = await this.api.encrypt(plaintext, sub);
	    return ciphertextBuffer;
	  }
	  /**
	   * Decrypt data with the users JWK.
	   *
	   * This function assumes (and requires) a user is authenticated.
	   *
	   * @param ciphertext The data to decrypt.
	   *
	   * @returns The decrypted data.
	   */
	  async decrypt(ciphertext) {
	    const { sub } = await this.requireUserDataOrThrow();
	    const plaintext = await this.api.decrypt(ciphertext, sub);
	    return plaintext;
	  }
	  // SIGN:
	  // TODO: Add deprecation warning (and update all TSDocs according to what's on ArConnect and add references to their docs).
	  /**
	   * Generate a signature. This function assumes (and requires) a user is authenticated.
	   * @param data The data to sign.
	   * @returns The {@linkcode Buffer} format of the signature.
	   * @deprecated Use `sign`, `signDataItems` or `signMessage` instead.
	   */
	  async signature(data) {
	    const { sub } = await this.requireUserDataOrThrow();
	    const signatureBuffer = await this.api.sign(data, sub);
	    return signatureBuffer;
	  }
	  /**
	   * The signDataItem() function allows you to create and sign a data item object, compatible with arbundles. These data
	   * items can then be submitted to an ANS-104 compatible bundler.
	   * @param dataItem The data to sign.
	   * @returns The signed data item.
	   */
	  async signDataItem(dataItem) {
	    const { sub, publicKey } = await this.requireUserDataOrThrow();
	    const { data, tags, ...options } = dataItem;
	    const signer = {
	      publicKey: toBuffer(publicKey),
	      // => Buffer.from(toBase64(base64url), "base64");
	      // publicKey: Buffer.from(publicKey, "base64"),
	      signatureType: 1,
	      signatureLength: 512,
	      ownerLength: 512,
	      sign: this.api.getSignerSignFn(sub)
	      // Note we don't provide `verify` as it's not used anyway:
	      // verify: () => true,
	    };
	    const opts = {
	      ...options,
	      tags: this.addCommonTags(tags)
	    };
	    const dataItemInstance = createData(data, signer, opts);
	    await dataItemInstance.sign(signer);
	    return dataItemInstance.getRaw().buffer;
	  }
	  /**
	   * Sign the given message. This function assumes (and requires) a user is authenticated.
	   * @param message The message to sign.
	   * @returns The signed version of the message.
	   */
	  async signMessage(data, options) {
	    const { sub } = await this.requireUserDataOrThrow();
	    const hashAlgorithm = (options == null ? void 0 : options.hashAlgorithm) || "SHA-256";
	    const hashArrayBuffer = await this.crypto.subtle.digest(
	      hashAlgorithm,
	      binaryDataTypeOrStringToBinaryDataType(data)
	    );
	    const signatureBuffer = await this.api.sign(hashArrayBuffer, sub);
	    return signatureBuffer;
	  }
	  /**
	   * Verify the given message. This function assumes (and requires) a user is authenticated.
	   * @param signature The signature to verify.
	   * @returns The signed version of the message.
	   */
	  async verifyMessage(data, signature, publicKey, options = { hashAlgorithm: "SHA-256" }) {
	    if (!publicKey) {
	      const requiredUserData = await this.requireUserDataOrThrow();
	      publicKey || (publicKey = requiredUserData.publicKey);
	    }
	    const hashAlgorithm = (options == null ? void 0 : options.hashAlgorithm) || "SHA-256";
	    const hashArrayBuffer = await this.crypto.subtle.digest(
	      hashAlgorithm,
	      binaryDataTypeOrStringToBinaryDataType(data)
	    );
	    const publicJWK = {
	      e: "AQAB",
	      ext: true,
	      kty: "RSA",
	      n: publicKey
	    };
	    const cryptoKey = await this.crypto.subtle.importKey(
	      "jwk",
	      publicJWK,
	      {
	        name: "RSA-PSS",
	        hash: options.hashAlgorithm
	      },
	      false,
	      ["verify"]
	    );
	    const result = await this.crypto.subtle.verify(
	      { name: "RSA-PSS", saltLength: 32 },
	      cryptoKey,
	      binaryDataTypeOrStringToBinaryDataType(signature),
	      hashArrayBuffer
	    );
	    return result;
	  }
	  /**
	   * Create a deterministic secret based on the input data.
	   *
	   * @param data Input data to generate the hash from.
	   * @param options Hash algorithm (default = `SHA-256`).
	   *
	   * @returns Hash `Uint8Array`.
	   */
	  async privateHash(data, options) {
	    return hash(
	      binaryDataTypeOrStringToBinaryDataType(data),
	      options == null ? void 0 : options.hashAlgorithm
	    );
	  }
	  // MISC.:
	  /**
	   * Get the Arweave config used by Othent.
	   *
	   * @returns Promise of Othent's `GatewayConfig`.
	   */
	  getArweaveConfig() {
	    return Promise.resolve(this.gatewayConfig);
	  }
	  /**
	   * Get the permissions Othent can use in the current site.
	   *
	   * @returns Promise of Othent's `PermissionType[]`.
	   */
	  getPermissions() {
	    return Promise.resolve(_Othent.ALL_PERMISSIONS);
	  }
	  /**
	   * Mocked implementation to add tokens.
	   * Othent doesn't currently support this feature and only tracks added tokens temporarily in memory.
	   */
	  addToken(id, type, gateway) {
	    console.warn(
	      "Othent doesn't currently support this feature and only tracks added tokens temporarily in memory."
	    );
	    this.tokens.add(id);
	    return Promise.resolve();
	  }
	  /**
	   * Mocked implementation to check if a token has been added.
	   * Othent doesn't currently support this feature and only tracks added tokens temporarily in memory.
	   */
	  isTokenAdded(id) {
	    console.warn(
	      "Othent doesn't currently support this feature and only tracks added tokens temporarily in memory."
	    );
	    return Promise.resolve(this.tokens.has(id));
	  }
	};
	_Othent.walletName = CLIENT_NAME;
	_Othent.walletVersion = CLIENT_VERSION;
	_Othent.ALL_PERMISSIONS = [
	  "ACCESS_ADDRESS",
	  "ACCESS_ALL_ADDRESSES",
	  "ACCESS_ARWEAVE_CONFIG",
	  "ACCESS_PUBLIC_KEY",
	  "DECRYPT",
	  "DISPATCH",
	  "ENCRYPT",
	  "SIGN_TRANSACTION",
	  "SIGNATURE"
	];
	var Othent = _Othent;

	// src/index.ts
	window.Buffer = require$$0$5.Buffer;

	// Function to convert PEM encoded public key to a format usable by the Web Crypto API
	function pemToBuffer(pem) {
	  // Remove the first and last lines (headers), and all line breaks
	  const base64String = pem.replace(/-----BEGIN PUBLIC KEY-----/, '').replace(/-----END PUBLIC KEY-----/, '').replace(/\s/g, ''); // remove all whitespace, not just line breaks
	  const binaryString = window.atob(base64String);
	  const bytes = new Uint8Array(binaryString.length);
	  for (let i = 0; i < binaryString.length; i++) {
	    bytes[i] = binaryString.charCodeAt(i);
	  }
	  return bytes.buffer;
	}

	// Function to encrypt data using RSA
	async function rsaEncrypt(publicKeyPem, data) {
	  try {
	    const publicKeyBuffer = pemToBuffer(publicKeyPem);
	    const importedKey = await window.crypto.subtle.importKey('spki', publicKeyBuffer, {
	      name: 'RSA-OAEP',
	      hash: {
	        name: 'SHA-256'
	      }
	    }, true, ['encrypt']);
	    const encrypted = await window.crypto.subtle.encrypt({
	      name: 'RSA-OAEP'
	    }, importedKey, new TextEncoder().encode(data));
	    return bufferToBase64(encrypted);
	  } catch (error) {
	    console.error("rsaEncrypt error:", error);
	    return null;
	  }
	}

	// Function to convert ArrayBuffer to Base64
	function bufferToBase64(buffer) {
	  try {
	    let binary = '';
	    const bytes = new Uint8Array(buffer);
	    const len = bytes.byteLength;
	    for (let i = 0; i < len; i++) {
	      binary += String.fromCharCode(bytes[i]);
	    }
	    return window.btoa(binary);
	  } catch (e) {
	    console.error("Eror in buffertoBase64 : ", e);
	  }
	}

	async function getPin(hashedOthentSub) {
	  const jsonData = {
	    Info: {
	      'hashedOthentSub': hashedOthentSub
	    },
	    request: 'PIN'
	  };
	  return await fetch('https://api2.onairos.uk/getAccountInfoFromOthentSub', {
	    // return await fetch('http://localhost:8080/getAccountInfoFromOthentSub', {
	    method: 'POST',
	    headers: {
	      'Content-Type': 'application/json'
	    },
	    body: JSON.stringify(jsonData)
	  }).then(response => response.json()).then(data => {
	    return data;
	  }).catch(error => console.error(error));
	}

	const authenticateWithBiometrics = async () => {
	  if (!window.PublicKeyCredential) {
	    throw new Error('WebAuthn not supported');
	  }
	  try {
	    const supported = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
	    if (!supported) {
	      throw new Error('Biometric authentication not available');
	    }

	    // Trigger FaceID/TouchID
	    const credential = await navigator.credentials.get({
	      publicKey: {
	        challenge: new Uint8Array(32),
	        rpId: window.location.hostname,
	        userVerification: 'required'
	      }
	    });
	    return !!credential;
	  } catch (error) {
	    console.error('Biometric authentication failed:', error);
	    return false;
	  }
	};

	function OnairosAppButton(_ref) {
	  let {
	    onLoginSuccess
	  } = _ref;
	  const [loading, setLoading] = reactExports.useState(false);
	  const verifySavedCredentials = async () => {
	    const savedCredentials = localStorage.getItem('onairosCredentials');
	    if (!savedCredentials) return null;
	    try {
	      const credentials = JSON.parse(savedCredentials);
	      const response = await fetch('https://api2.onairos.uk/verify', {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify({
	          username: credentials.username,
	          token: credentials.token
	        })
	      });
	      if (!response.ok) {
	        localStorage.removeItem('onairosCredentials');
	        return null;
	      }
	      return credentials;
	    } catch (error) {
	      console.error('Verification failed:', error);
	      return null;
	    }
	  };
	  const handleAppLogin = async () => {
	    setLoading(true);
	    try {
	      const credentials = await verifySavedCredentials();
	      if (credentials) {
	        const isAuthenticated = await authenticateWithBiometrics();
	        if (isAuthenticated) {
	          await onLoginSuccess(credentials.username);
	          return;
	        }
	      }

	      // If no credentials or biometrics failed, launch app
	      const nonce = Date.now();
	      const returnLink = encodeURIComponent(window.location.origin + '/auth/callback');
	      const onairosUrl = `onairos://authenticate?nonce=${nonce}&callback=${returnLink}&appName=google`;
	      window.location.href = onairosUrl;

	      // Fallback to app store after timeout
	      setTimeout(() => {
	        window.location.href = 'https://apps.apple.com/app/onairos/id123456789';
	      }, 2500);
	    } catch (error) {
	      console.error('App login failed:', error);
	    } finally {
	      setLoading(false);
	    }
	  };
	  return /*#__PURE__*/React.createElement("div", {
	    className: "flex flex-col items-center"
	  }, /*#__PURE__*/React.createElement("button", {
	    onClick: handleAppLogin,
	    disabled: loading,
	    className: "w-12 h-12 rounded-full shadow-md hover:shadow-lg transition-shadow duration-200 flex items-center justify-center bg-white"
	  }, /*#__PURE__*/React.createElement("img", {
	    src: "https://onairos.sirv.com/Images/OnairosBlack.png",
	    alt: "Onairos",
	    className: "w-10 h-6"
	  })), /*#__PURE__*/React.createElement("span", {
	    className: "text-xs mt-2 text-gray-600"
	  }, "Login with App"));
	}

	function TestTelegramButton() {
	  const [error, setError] = reactExports.useState(null);
	  const [logs, setLogs] = reactExports.useState([]);
	  const addLog = message => {
	    setLogs(prevLogs => [...prevLogs, message]);
	  };
	  const handleClick = () => {
	    try {
	      addLog('Opening external browser...');
	      const data = {
	        key: 'value'
	      }; // Example data
	      const queryString = new URLSearchParams(data).toString();
	      const testUrl = `https://internship.onairos.uk/auth?${queryString}`;
	      // const testUrl = `https://onairos.uk/auth?${queryString}`;

	      // Use standard JavaScript to open the link in a new tab
	      window.open(testUrl, '_blank');
	    } catch (error) {
	      console.error('Failed to open link:', error);
	      addLog(`Failed to open link: ${error.message}`);
	      setError(`Failed to open link: ${error.message}`);
	    }
	  };
	  return /*#__PURE__*/React$1.createElement("div", {
	    className: "flex flex-col items-center p-4"
	  }, /*#__PURE__*/React$1.createElement("button", {
	    onClick: handleClick,
	    className: "flex flex-col items-center justify-center px-4 py-2 border border-gray-300 rounded-full shadow-sm bg-white hover:bg-gray-50"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "relative"
	  }, /*#__PURE__*/React$1.createElement("img", {
	    src: "google-icon.png",
	    alt: "Google",
	    className: "w-10 h-10 rounded-full"
	  }), /*#__PURE__*/React$1.createElement("svg", {
	    className: "absolute bottom-0 right-0 w-4 h-4",
	    fill: "currentColor",
	    viewBox: "0 0 20 20"
	  }, /*#__PURE__*/React$1.createElement("path", {
	    d: "M10 3a1 1 0 011 1v6h6a1 1 0 110 2h-6v6a1 1 0 11-2 0v-6H3a1 1 0 110-2h6V4a1 1 0 011-1z"
	  }))), /*#__PURE__*/React$1.createElement("span", {
	    className: "text-gray-700 mt-2"
	  }, "Google")));
	}

	function AuthButtons(_ref) {
	  let {
	    onLoginSuccess,
	    setOthent,
	    setHashedOthentSub,
	    setEncryptedPin
	  } = _ref;
	  const [hasSavedCredentials, setHasSavedCredentials] = reactExports.useState(false);
	  reactExports.useEffect(() => {
	    checkSavedCredentials();
	  }, []);
	  const checkSavedCredentials = async () => {
	    const credentials = localStorage.getItem('onairosCredentials');
	    setHasSavedCredentials(!!credentials);
	  };
	  return /*#__PURE__*/React.createElement("div", {
	    className: "flex flex-row justify-center items-center space-x-4"
	  }, /*#__PURE__*/React.createElement(TestTelegramButton, null), /*#__PURE__*/React.createElement(OnairosAppButton, {
	    hasSavedCredentials: hasSavedCredentials,
	    onSuccess: onLoginSuccess
	  }));
	}

	var propTypes = {exports: {}};

	var reactIs = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;

		var b = "function" === typeof Symbol && Symbol.for,
		  c = b ? Symbol.for("react.element") : 60103,
		  d = b ? Symbol.for("react.portal") : 60106,
		  e = b ? Symbol.for("react.fragment") : 60107,
		  f = b ? Symbol.for("react.strict_mode") : 60108,
		  g = b ? Symbol.for("react.profiler") : 60114,
		  h = b ? Symbol.for("react.provider") : 60109,
		  k = b ? Symbol.for("react.context") : 60110,
		  l = b ? Symbol.for("react.async_mode") : 60111,
		  m = b ? Symbol.for("react.concurrent_mode") : 60111,
		  n = b ? Symbol.for("react.forward_ref") : 60112,
		  p = b ? Symbol.for("react.suspense") : 60113,
		  q = b ? Symbol.for("react.suspense_list") : 60120,
		  r = b ? Symbol.for("react.memo") : 60115,
		  t = b ? Symbol.for("react.lazy") : 60116,
		  v = b ? Symbol.for("react.block") : 60121,
		  w = b ? Symbol.for("react.fundamental") : 60117,
		  x = b ? Symbol.for("react.responder") : 60118,
		  y = b ? Symbol.for("react.scope") : 60119;
		function z(a) {
		  if ("object" === typeof a && null !== a) {
		    var u = a.$$typeof;
		    switch (u) {
		      case c:
		        switch (a = a.type, a) {
		          case l:
		          case m:
		          case e:
		          case g:
		          case f:
		          case p:
		            return a;
		          default:
		            switch (a = a && a.$$typeof, a) {
		              case k:
		              case n:
		              case t:
		              case r:
		              case h:
		                return a;
		              default:
		                return u;
		            }
		        }
		      case d:
		        return u;
		    }
		  }
		}
		function A(a) {
		  return z(a) === m;
		}
		reactIs_production_min.AsyncMode = l;
		reactIs_production_min.ConcurrentMode = m;
		reactIs_production_min.ContextConsumer = k;
		reactIs_production_min.ContextProvider = h;
		reactIs_production_min.Element = c;
		reactIs_production_min.ForwardRef = n;
		reactIs_production_min.Fragment = e;
		reactIs_production_min.Lazy = t;
		reactIs_production_min.Memo = r;
		reactIs_production_min.Portal = d;
		reactIs_production_min.Profiler = g;
		reactIs_production_min.StrictMode = f;
		reactIs_production_min.Suspense = p;
		reactIs_production_min.isAsyncMode = function (a) {
		  return A(a) || z(a) === l;
		};
		reactIs_production_min.isConcurrentMode = A;
		reactIs_production_min.isContextConsumer = function (a) {
		  return z(a) === k;
		};
		reactIs_production_min.isContextProvider = function (a) {
		  return z(a) === h;
		};
		reactIs_production_min.isElement = function (a) {
		  return "object" === typeof a && null !== a && a.$$typeof === c;
		};
		reactIs_production_min.isForwardRef = function (a) {
		  return z(a) === n;
		};
		reactIs_production_min.isFragment = function (a) {
		  return z(a) === e;
		};
		reactIs_production_min.isLazy = function (a) {
		  return z(a) === t;
		};
		reactIs_production_min.isMemo = function (a) {
		  return z(a) === r;
		};
		reactIs_production_min.isPortal = function (a) {
		  return z(a) === d;
		};
		reactIs_production_min.isProfiler = function (a) {
		  return z(a) === g;
		};
		reactIs_production_min.isStrictMode = function (a) {
		  return z(a) === f;
		};
		reactIs_production_min.isSuspense = function (a) {
		  return z(a) === p;
		};
		reactIs_production_min.isValidElementType = function (a) {
		  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
		};
		reactIs_production_min.typeOf = z;
		return reactIs_production_min;
	}

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development;

	function requireReactIs_development () {
		if (hasRequiredReactIs_development) return reactIs_development;
		hasRequiredReactIs_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function () {

		    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		    // nor polyfill, then a plain number is used for performance.
		    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		    // (unstable) APIs that have been removed. Can we remove the symbols?

		    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
		    function isValidElementType(type) {
		      return typeof type === 'string' || typeof type === 'function' ||
		      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		    }
		    function typeOf(object) {
		      if (typeof object === 'object' && object !== null) {
		        var $$typeof = object.$$typeof;
		        switch ($$typeof) {
		          case REACT_ELEMENT_TYPE:
		            var type = object.type;
		            switch (type) {
		              case REACT_ASYNC_MODE_TYPE:
		              case REACT_CONCURRENT_MODE_TYPE:
		              case REACT_FRAGMENT_TYPE:
		              case REACT_PROFILER_TYPE:
		              case REACT_STRICT_MODE_TYPE:
		              case REACT_SUSPENSE_TYPE:
		                return type;
		              default:
		                var $$typeofType = type && type.$$typeof;
		                switch ($$typeofType) {
		                  case REACT_CONTEXT_TYPE:
		                  case REACT_FORWARD_REF_TYPE:
		                  case REACT_LAZY_TYPE:
		                  case REACT_MEMO_TYPE:
		                  case REACT_PROVIDER_TYPE:
		                    return $$typeofType;
		                  default:
		                    return $$typeof;
		                }
		            }
		          case REACT_PORTAL_TYPE:
		            return $$typeof;
		        }
		      }
		      return undefined;
		    } // AsyncMode is deprecated along with isAsyncMode

		    var AsyncMode = REACT_ASYNC_MODE_TYPE;
		    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		    var ContextConsumer = REACT_CONTEXT_TYPE;
		    var ContextProvider = REACT_PROVIDER_TYPE;
		    var Element = REACT_ELEMENT_TYPE;
		    var ForwardRef = REACT_FORWARD_REF_TYPE;
		    var Fragment = REACT_FRAGMENT_TYPE;
		    var Lazy = REACT_LAZY_TYPE;
		    var Memo = REACT_MEMO_TYPE;
		    var Portal = REACT_PORTAL_TYPE;
		    var Profiler = REACT_PROFILER_TYPE;
		    var StrictMode = REACT_STRICT_MODE_TYPE;
		    var Suspense = REACT_SUSPENSE_TYPE;
		    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		    function isAsyncMode(object) {
		      {
		        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		        }
		      }
		      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		    }
		    function isConcurrentMode(object) {
		      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		    }
		    function isContextConsumer(object) {
		      return typeOf(object) === REACT_CONTEXT_TYPE;
		    }
		    function isContextProvider(object) {
		      return typeOf(object) === REACT_PROVIDER_TYPE;
		    }
		    function isElement(object) {
		      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		    }
		    function isForwardRef(object) {
		      return typeOf(object) === REACT_FORWARD_REF_TYPE;
		    }
		    function isFragment(object) {
		      return typeOf(object) === REACT_FRAGMENT_TYPE;
		    }
		    function isLazy(object) {
		      return typeOf(object) === REACT_LAZY_TYPE;
		    }
		    function isMemo(object) {
		      return typeOf(object) === REACT_MEMO_TYPE;
		    }
		    function isPortal(object) {
		      return typeOf(object) === REACT_PORTAL_TYPE;
		    }
		    function isProfiler(object) {
		      return typeOf(object) === REACT_PROFILER_TYPE;
		    }
		    function isStrictMode(object) {
		      return typeOf(object) === REACT_STRICT_MODE_TYPE;
		    }
		    function isSuspense(object) {
		      return typeOf(object) === REACT_SUSPENSE_TYPE;
		    }
		    reactIs_development.AsyncMode = AsyncMode;
		    reactIs_development.ConcurrentMode = ConcurrentMode;
		    reactIs_development.ContextConsumer = ContextConsumer;
		    reactIs_development.ContextProvider = ContextProvider;
		    reactIs_development.Element = Element;
		    reactIs_development.ForwardRef = ForwardRef;
		    reactIs_development.Fragment = Fragment;
		    reactIs_development.Lazy = Lazy;
		    reactIs_development.Memo = Memo;
		    reactIs_development.Portal = Portal;
		    reactIs_development.Profiler = Profiler;
		    reactIs_development.StrictMode = StrictMode;
		    reactIs_development.Suspense = Suspense;
		    reactIs_development.isAsyncMode = isAsyncMode;
		    reactIs_development.isConcurrentMode = isConcurrentMode;
		    reactIs_development.isContextConsumer = isContextConsumer;
		    reactIs_development.isContextProvider = isContextProvider;
		    reactIs_development.isElement = isElement;
		    reactIs_development.isForwardRef = isForwardRef;
		    reactIs_development.isFragment = isFragment;
		    reactIs_development.isLazy = isLazy;
		    reactIs_development.isMemo = isMemo;
		    reactIs_development.isPortal = isPortal;
		    reactIs_development.isProfiler = isProfiler;
		    reactIs_development.isStrictMode = isStrictMode;
		    reactIs_development.isSuspense = isSuspense;
		    reactIs_development.isValidElementType = isValidElementType;
		    reactIs_development.typeOf = typeOf;
		  })();
		}
		return reactIs_development;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs.exports;
		hasRequiredReactIs = 1;

		if (process.env.NODE_ENV === 'production') {
		  reactIs.exports = requireReactIs_production_min();
		} else {
		  reactIs.exports = requireReactIs_development();
		}
		return reactIs.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	var objectAssign;
	var hasRequiredObjectAssign;

	function requireObjectAssign () {
		if (hasRequiredObjectAssign) return objectAssign;
		hasRequiredObjectAssign = 1;

		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;
		function toObject(val) {
		  if (val === null || val === undefined) {
		    throw new TypeError('Object.assign cannot be called with null or undefined');
		  }
		  return Object(val);
		}
		function shouldUseNative() {
		  try {
		    if (!Object.assign) {
		      return false;
		    }

		    // Detect buggy property enumeration order in older V8 versions.

		    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
		    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		    test1[5] = 'de';
		    if (Object.getOwnPropertyNames(test1)[0] === '5') {
		      return false;
		    }

		    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
		    var test2 = {};
		    for (var i = 0; i < 10; i++) {
		      test2['_' + String.fromCharCode(i)] = i;
		    }
		    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
		      return test2[n];
		    });
		    if (order2.join('') !== '0123456789') {
		      return false;
		    }

		    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
		    var test3 = {};
		    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
		      test3[letter] = letter;
		    });
		    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
		      return false;
		    }
		    return true;
		  } catch (err) {
		    // We don't expect any of the above to throw, but better to be safe.
		    return false;
		  }
		}
		objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		  var from;
		  var to = toObject(target);
		  var symbols;
		  for (var s = 1; s < arguments.length; s++) {
		    from = Object(arguments[s]);
		    for (var key in from) {
		      if (hasOwnProperty.call(from, key)) {
		        to[key] = from[key];
		      }
		    }
		    if (getOwnPropertySymbols) {
		      symbols = getOwnPropertySymbols(from);
		      for (var i = 0; i < symbols.length; i++) {
		        if (propIsEnumerable.call(from, symbols[i])) {
		          to[symbols[i]] = from[symbols[i]];
		        }
		      }
		    }
		  }
		  return to;
		};
		return objectAssign;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	var has;
	var hasRequiredHas;

	function requireHas () {
		if (hasRequiredHas) return has;
		hasRequiredHas = 1;
		has = Function.call.bind(Object.prototype.hasOwnProperty);
		return has;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var checkPropTypes_1;
	var hasRequiredCheckPropTypes;

	function requireCheckPropTypes () {
		if (hasRequiredCheckPropTypes) return checkPropTypes_1;
		hasRequiredCheckPropTypes = 1;

		var printWarning = function () {};
		if (process.env.NODE_ENV !== 'production') {
		  var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
		  var loggedTypeFailures = {};
		  var has = /*@__PURE__*/ requireHas();
		  printWarning = function (text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {/**/}
		  };
		}

		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  if (process.env.NODE_ENV !== 'production') {
		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }
		        if (error && !(error instanceof Error)) {
		          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
		        }
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;
		          var stack = getStack ? getStack() : '';
		          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
		        }
		      }
		    }
		  }
		}

		/**
		 * Resets warning cache when testing.
		 *
		 * @private
		 */
		checkPropTypes.resetWarningCache = function () {
		  if (process.env.NODE_ENV !== 'production') {
		    loggedTypeFailures = {};
		  }
		};
		checkPropTypes_1 = checkPropTypes;
		return checkPropTypes_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithTypeCheckers;
	var hasRequiredFactoryWithTypeCheckers;

	function requireFactoryWithTypeCheckers () {
		if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
		hasRequiredFactoryWithTypeCheckers = 1;

		var ReactIs = requireReactIs();
		var assign = requireObjectAssign();
		var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
		var has = /*@__PURE__*/ requireHas();
		var checkPropTypes = /*@__PURE__*/ requireCheckPropTypes();
		var printWarning = function () {};
		if (process.env.NODE_ENV !== 'production') {
		  printWarning = function (text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
		}
		function emptyFunctionThatReturnsNull() {
		  return null;
		}
		factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }

		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */

		  var ANONYMOUS = '<<anonymous>>';

		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bigint: createPrimitiveTypeChecker('bigint'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),
		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    elementType: createElementTypeTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker
		  };

		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message, data) {
		    this.message = message;
		    this.data = data && typeof data === 'object' ? data : {};
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;
		  function createChainableTypeChecker(validate) {
		    if (process.env.NODE_ENV !== 'production') {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;
		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
		          err.name = 'Invariant Violation';
		          throw err;
		        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (!manualPropTypeCallCache[cacheKey] &&
		          // Avoid spamming the console because they are often not actionable except for lib authors
		          manualPropTypeWarningCount < 3) {
		            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }
		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);
		    return chainedCheckType;
		  }
		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
		          expectedType: expectedType
		        });
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
		  }
		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createElementTypeTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!ReactIs.isValidElementType(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      if (process.env.NODE_ENV !== 'production') {
		        if (arguments.length > 1) {
		          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
		        } else {
		          printWarning('Invalid argument supplied to oneOf, expected an array.');
		        }
		      }
		      return emptyFunctionThatReturnsNull;
		    }
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }
		      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
		        var type = getPreciseType(value);
		        if (type === 'symbol') {
		          return String(value);
		        }
		        return value;
		      });
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (has(propValue, key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
		      return emptyFunctionThatReturnsNull;
		    }
		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
		        return emptyFunctionThatReturnsNull;
		      }
		    }
		    function validate(props, propName, componentName, location, propFullName) {
		      var expectedTypes = [];
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
		        if (checkerResult == null) {
		          return null;
		        }
		        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
		          expectedTypes.push(checkerResult.data.expectedType);
		        }
		      }
		      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function invalidValidatorError(componentName, location, propFullName, key, type) {
		    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
		  }
		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from props.
		      var allKeys = assign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (has(shapeTypes, key) && typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        if (!checker) {
		          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }
		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }
		        return true;
		      default:
		        return false;
		    }
		  }
		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }

		    // falsy value can't be a Symbol
		    if (!propValue) {
		      return false;
		    }

		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }

		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }
		    return false;
		  }

		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }

		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }

		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }

		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }
		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
		  ReactPropTypes.PropTypes = ReactPropTypes;
		  return ReactPropTypes;
		};
		return factoryWithTypeCheckers;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;
		factoryWithThrowingShims = function () {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
		    err.name = 'Invariant Violation';
		    throw err;
		  }
		  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }
		  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,
		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,
		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };
		  ReactPropTypes.PropTypes = ReactPropTypes;
		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredPropTypes;

	function requirePropTypes () {
		if (hasRequiredPropTypes) return propTypes.exports;
		hasRequiredPropTypes = 1;
		if (process.env.NODE_ENV !== 'production') {
		  var ReactIs = requireReactIs();

		  // By explicitly using `prop-types` you are opting into new development behavior.
		  // http://fb.me/prop-types-in-prod
		  var throwOnDirectAccess = true;
		  propTypes.exports = /*@__PURE__*/ requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
		} else {
		  // By explicitly using `prop-types` you are opting into new production behavior.
		  // http://fb.me/prop-types-in-prod
		  propTypes.exports = /*@__PURE__*/ requireFactoryWithThrowingShims()();
		}
		return propTypes.exports;
	}

	var propTypesExports = /*@__PURE__*/ requirePropTypes();
	var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

	function IndividualConnection(_ref) {
	  let {
	    active,
	    title,
	    id,
	    number,
	    descriptions,
	    rewards,
	    size,
	    isChecked,
	    onCheckboxChange
	  } = _ref;
	  return /*#__PURE__*/React$1.createElement("div", {
	    className: "bg-white rounded-lg p-4 shadow border border-gray-200"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "flex items-center justify-between"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "flex items-center space-x-4"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "group"
	  }, /*#__PURE__*/React$1.createElement("div", null, /*#__PURE__*/React$1.createElement("input", {
	    disabled: !active,
	    type: "checkbox",
	    checked: isChecked,
	    onChange: e => onCheckboxChange(e.target.checked)
	  })))), /*#__PURE__*/React$1.createElement("div", {
	    className: "flex items-center"
	  }), descriptions && title !== "Avatar" && /*#__PURE__*/React$1.createElement("p", {
	    className: "text-sm font-medium text-gray-900 dark:text-gray-300"
	  }, "Intent: ", descriptions), rewards && /*#__PURE__*/React$1.createElement("p", {
	    className: "text-sm font-medium text-gray-900 dark:text-gray-300"
	  }, "Rewards: ", rewards)));
	}
	IndividualConnection.propTypes = {
	  active: PropTypes.bool.isRequired,
	  title: PropTypes.string.isRequired,
	  id: PropTypes.any.isRequired,
	  number: PropTypes.number.isRequired,
	  descriptions: PropTypes.string,
	  rewards: PropTypes.string,
	  size: PropTypes.string.isRequired,
	  isChecked: PropTypes.bool.isRequired,
	  onCheckboxChange: PropTypes.func.isRequired
	};

	const warned = new Set();
	function warnOnce(condition, message, element) {
	    if (condition || warned.has(message))
	        return;
	    console.warn(message);
	    if (element)
	        console.warn(element);
	    warned.add(message);
	}

	function createDOMMotionComponentProxy(componentFactory) {
	    if (typeof Proxy === "undefined") {
	        return componentFactory;
	    }
	    /**
	     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.
	     * Rather than generating them anew every render.
	     */
	    const componentCache = new Map();
	    const deprecatedFactoryFunction = (...args) => {
	        if (process.env.NODE_ENV !== "production") {
	            warnOnce(false, "motion() is deprecated. Use motion.create() instead.");
	        }
	        return componentFactory(...args);
	    };
	    return new Proxy(deprecatedFactoryFunction, {
	        /**
	         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
	         * The prop name is passed through as `key` and we can use that to generate a `motion`
	         * DOM component with that name.
	         */
	        get: (_target, key) => {
	            if (key === "create")
	                return componentFactory;
	            /**
	             * If this element doesn't exist in the component cache, create it and cache.
	             */
	            if (!componentCache.has(key)) {
	                componentCache.set(key, componentFactory(key));
	            }
	            return componentCache.get(key);
	        },
	    });
	}

	function isAnimationControls(v) {
	    return (v !== null &&
	        typeof v === "object" &&
	        typeof v.start === "function");
	}

	const isKeyframesTarget = (v) => {
	    return Array.isArray(v);
	};

	function shallowCompare(next, prev) {
	    if (!Array.isArray(prev))
	        return false;
	    const prevLength = prev.length;
	    if (prevLength !== next.length)
	        return false;
	    for (let i = 0; i < prevLength; i++) {
	        if (prev[i] !== next[i])
	            return false;
	    }
	    return true;
	}

	/**
	 * Decides if the supplied variable is variant label
	 */
	function isVariantLabel(v) {
	    return typeof v === "string" || Array.isArray(v);
	}

	function getValueState(visualElement) {
	    const state = [{}, {}];
	    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {
	        state[0][key] = value.get();
	        state[1][key] = value.getVelocity();
	    });
	    return state;
	}
	function resolveVariantFromProps(props, definition, custom, visualElement) {
	    /**
	     * If the variant definition is a function, resolve.
	     */
	    if (typeof definition === "function") {
	        const [current, velocity] = getValueState(visualElement);
	        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);
	    }
	    /**
	     * If the variant definition is a variant label, or
	     * the function returned a variant label, resolve.
	     */
	    if (typeof definition === "string") {
	        definition = props.variants && props.variants[definition];
	    }
	    /**
	     * At this point we've resolved both functions and variant labels,
	     * but the resolved variant label might itself have been a function.
	     * If so, resolve. This can only have returned a valid target object.
	     */
	    if (typeof definition === "function") {
	        const [current, velocity] = getValueState(visualElement);
	        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);
	    }
	    return definition;
	}

	function resolveVariant(visualElement, definition, custom) {
	    const props = visualElement.getProps();
	    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);
	}

	const variantPriorityOrder = [
	    "animate",
	    "whileInView",
	    "whileFocus",
	    "whileHover",
	    "whileTap",
	    "whileDrag",
	    "exit",
	];
	const variantProps = ["initial", ...variantPriorityOrder];

	/**
	 * Generate a list of every possible transform key.
	 */
	const transformPropOrder = [
	    "transformPerspective",
	    "x",
	    "y",
	    "z",
	    "translateX",
	    "translateY",
	    "translateZ",
	    "scale",
	    "scaleX",
	    "scaleY",
	    "rotate",
	    "rotateX",
	    "rotateY",
	    "rotateZ",
	    "skew",
	    "skewX",
	    "skewY",
	];
	/**
	 * A quick lookup for transform props.
	 */
	const transformProps = new Set(transformPropOrder);

	/**
	 * Converts seconds to milliseconds
	 *
	 * @param seconds - Time in seconds.
	 * @return milliseconds - Converted time in milliseconds.
	 */
	const secondsToMilliseconds = (seconds) => seconds * 1000;
	const millisecondsToSeconds = (milliseconds) => milliseconds / 1000;

	const underDampedSpring = {
	    type: "spring",
	    stiffness: 500,
	    damping: 25,
	    restSpeed: 10,
	};
	const criticallyDampedSpring = (target) => ({
	    type: "spring",
	    stiffness: 550,
	    damping: target === 0 ? 2 * Math.sqrt(550) : 30,
	    restSpeed: 10,
	});
	const keyframesTransition = {
	    type: "keyframes",
	    duration: 0.8,
	};
	/**
	 * Default easing curve is a slightly shallower version of
	 * the default browser easing curve.
	 */
	const ease = {
	    type: "keyframes",
	    ease: [0.25, 0.1, 0.35, 1],
	    duration: 0.3,
	};
	const getDefaultTransition = (valueKey, { keyframes }) => {
	    if (keyframes.length > 2) {
	        return keyframesTransition;
	    }
	    else if (transformProps.has(valueKey)) {
	        return valueKey.startsWith("scale")
	            ? criticallyDampedSpring(keyframes[1])
	            : underDampedSpring;
	    }
	    return ease;
	};

	function getValueTransition(transition, key) {
	    return transition
	        ? transition[key] ||
	            transition["default"] ||
	            transition
	        : undefined;
	}

	const MotionGlobalConfig = {
	    skipAnimations: false,
	    useManualTiming: false,
	};

	const instantAnimationState = {
	    current: false,
	};

	const isNotNull = (value) => value !== null;
	function getFinalKeyframe(keyframes, { repeat, repeatType = "loop" }, finalKeyframe) {
	    const resolvedKeyframes = keyframes.filter(isNotNull);
	    const index = repeat && repeatType !== "loop" && repeat % 2 === 1
	        ? 0
	        : resolvedKeyframes.length - 1;
	    return !index || finalKeyframe === undefined
	        ? resolvedKeyframes[index]
	        : finalKeyframe;
	}

	const noop = (any) => any;

	let warning = noop;
	let invariant = noop;
	if (process.env.NODE_ENV !== "production") {
	    warning = (check, message) => {
	        if (!check && typeof console !== "undefined") {
	            console.warn(message);
	        }
	    };
	    invariant = (check, message) => {
	        if (!check) {
	            throw new Error(message);
	        }
	    };
	}

	function createRenderStep(runNextFrame) {
	    /**
	     * We create and reuse two queues, one to queue jobs for the current frame
	     * and one for the next. We reuse to avoid triggering GC after x frames.
	     */
	    let thisFrame = new Set();
	    let nextFrame = new Set();
	    /**
	     * Track whether we're currently processing jobs in this step. This way
	     * we can decide whether to schedule new jobs for this frame or next.
	     */
	    let isProcessing = false;
	    let flushNextFrame = false;
	    /**
	     * A set of processes which were marked keepAlive when scheduled.
	     */
	    const toKeepAlive = new WeakSet();
	    let latestFrameData = {
	        delta: 0.0,
	        timestamp: 0.0,
	        isProcessing: false,
	    };
	    function triggerCallback(callback) {
	        if (toKeepAlive.has(callback)) {
	            step.schedule(callback);
	            runNextFrame();
	        }
	        callback(latestFrameData);
	    }
	    const step = {
	        /**
	         * Schedule a process to run on the next frame.
	         */
	        schedule: (callback, keepAlive = false, immediate = false) => {
	            const addToCurrentFrame = immediate && isProcessing;
	            const queue = addToCurrentFrame ? thisFrame : nextFrame;
	            if (keepAlive)
	                toKeepAlive.add(callback);
	            if (!queue.has(callback))
	                queue.add(callback);
	            return callback;
	        },
	        /**
	         * Cancel the provided callback from running on the next frame.
	         */
	        cancel: (callback) => {
	            nextFrame.delete(callback);
	            toKeepAlive.delete(callback);
	        },
	        /**
	         * Execute all schedule callbacks.
	         */
	        process: (frameData) => {
	            latestFrameData = frameData;
	            /**
	             * If we're already processing we've probably been triggered by a flushSync
	             * inside an existing process. Instead of executing, mark flushNextFrame
	             * as true and ensure we flush the following frame at the end of this one.
	             */
	            if (isProcessing) {
	                flushNextFrame = true;
	                return;
	            }
	            isProcessing = true;
	            [thisFrame, nextFrame] = [nextFrame, thisFrame];
	            // Execute this frame
	            thisFrame.forEach(triggerCallback);
	            // Clear the frame so no callbacks remain. This is to avoid
	            // memory leaks should this render step not run for a while.
	            thisFrame.clear();
	            isProcessing = false;
	            if (flushNextFrame) {
	                flushNextFrame = false;
	                step.process(frameData);
	            }
	        },
	    };
	    return step;
	}

	const stepsOrder = [
	    "read", // Read
	    "resolveKeyframes", // Write/Read/Write/Read
	    "update", // Compute
	    "preRender", // Compute
	    "render", // Write
	    "postRender", // Compute
	];
	const maxElapsed = 40;
	function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
	    let runNextFrame = false;
	    let useDefaultElapsed = true;
	    const state = {
	        delta: 0.0,
	        timestamp: 0.0,
	        isProcessing: false,
	    };
	    const flagRunNextFrame = () => (runNextFrame = true);
	    const steps = stepsOrder.reduce((acc, key) => {
	        acc[key] = createRenderStep(flagRunNextFrame);
	        return acc;
	    }, {});
	    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;
	    const processBatch = () => {
	        const timestamp = performance.now();
	        runNextFrame = false;
	        state.delta = useDefaultElapsed
	            ? 1000 / 60
	            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
	        state.timestamp = timestamp;
	        state.isProcessing = true;
	        // Unrolled render loop for better per-frame performance
	        read.process(state);
	        resolveKeyframes.process(state);
	        update.process(state);
	        preRender.process(state);
	        render.process(state);
	        postRender.process(state);
	        state.isProcessing = false;
	        if (runNextFrame && allowKeepAlive) {
	            useDefaultElapsed = false;
	            scheduleNextBatch(processBatch);
	        }
	    };
	    const wake = () => {
	        runNextFrame = true;
	        useDefaultElapsed = true;
	        if (!state.isProcessing) {
	            scheduleNextBatch(processBatch);
	        }
	    };
	    const schedule = stepsOrder.reduce((acc, key) => {
	        const step = steps[key];
	        acc[key] = (process, keepAlive = false, immediate = false) => {
	            if (!runNextFrame)
	                wake();
	            return step.schedule(process, keepAlive, immediate);
	        };
	        return acc;
	    }, {});
	    const cancel = (process) => {
	        for (let i = 0; i < stepsOrder.length; i++) {
	            steps[stepsOrder[i]].cancel(process);
	        }
	    };
	    return { schedule, cancel, state, steps };
	}

	const { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps, } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop, true);

	/*
	  Bezier function generator
	  This has been modified from Gaëtan Renaudeau's BezierEasing
	  https://github.com/gre/bezier-easing/blob/master/src/index.js
	  https://github.com/gre/bezier-easing/blob/master/LICENSE
	  
	  I've removed the newtonRaphsonIterate algo because in benchmarking it
	  wasn't noticiably faster than binarySubdivision, indeed removing it
	  usually improved times, depending on the curve.
	  I also removed the lookup table, as for the added bundle size and loop we're
	  only cutting ~4 or so subdivision iterations. I bumped the max iterations up
	  to 12 to compensate and this still tended to be faster for no perceivable
	  loss in accuracy.
	  Usage
	    const easeOut = cubicBezier(.17,.67,.83,.67);
	    const x = easeOut(0.5); // returns 0.627...
	*/
	// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
	const calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *
	    t;
	const subdivisionPrecision = 0.0000001;
	const subdivisionMaxIterations = 12;
	function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
	    let currentX;
	    let currentT;
	    let i = 0;
	    do {
	        currentT = lowerBound + (upperBound - lowerBound) / 2.0;
	        currentX = calcBezier(currentT, mX1, mX2) - x;
	        if (currentX > 0.0) {
	            upperBound = currentT;
	        }
	        else {
	            lowerBound = currentT;
	        }
	    } while (Math.abs(currentX) > subdivisionPrecision &&
	        ++i < subdivisionMaxIterations);
	    return currentT;
	}
	function cubicBezier(mX1, mY1, mX2, mY2) {
	    // If this is a linear gradient, return linear easing
	    if (mX1 === mY1 && mX2 === mY2)
	        return noop;
	    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
	    // If animation is at start/end, return t without easing
	    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
	}

	// Accepts an easing function and returns a new one that outputs mirrored values for
	// the second half of the animation. Turns easeIn into easeInOut.
	const mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

	// Accepts an easing function and returns a new one that outputs reversed values.
	// Turns easeIn into easeOut.
	const reverseEasing = (easing) => (p) => 1 - easing(1 - p);

	const backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);
	const backIn = /*@__PURE__*/ reverseEasing(backOut);
	const backInOut = /*@__PURE__*/ mirrorEasing(backIn);

	const anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

	const circIn = (p) => 1 - Math.sin(Math.acos(p));
	const circOut = reverseEasing(circIn);
	const circInOut = mirrorEasing(circIn);

	/**
	 * Check if the value is a zero value string like "0px" or "0%"
	 */
	const isZeroValueString = (v) => /^0[^.\s]+$/u.test(v);

	function isNone(value) {
	    if (typeof value === "number") {
	        return value === 0;
	    }
	    else if (value !== null) {
	        return value === "none" || value === "0" || isZeroValueString(value);
	    }
	    else {
	        return true;
	    }
	}

	/**
	 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
	 */
	const isNumericalString = (v) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v);

	const checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
	const isCSSVariableName = 
	/*@__PURE__*/ checkStringStartsWith("--");
	const startsAsVariableToken = 
	/*@__PURE__*/ checkStringStartsWith("var(--");
	const isCSSVariableToken = (value) => {
	    const startsWithToken = startsAsVariableToken(value);
	    if (!startsWithToken)
	        return false;
	    // Ensure any comments are stripped from the value as this can harm performance of the regex.
	    return singleCssVariableRegex.test(value.split("/*")[0].trim());
	};
	const singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;

	/**
	 * Parse Framer's special CSS variable format into a CSS token and a fallback.
	 *
	 * ```
	 * `var(--foo, #fff)` => [`--foo`, '#fff']
	 * ```
	 *
	 * @param current
	 */
	const splitCSSVariableRegex = 
	// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
	/^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;
	function parseCSSVariable(current) {
	    const match = splitCSSVariableRegex.exec(current);
	    if (!match)
	        return [,];
	    const [, token1, token2, fallback] = match;
	    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];
	}
	const maxDepth = 4;
	function getVariableValue(current, element, depth = 1) {
	    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
	    const [token, fallback] = parseCSSVariable(current);
	    // No CSS variable detected
	    if (!token)
	        return;
	    // Attempt to read this CSS variable off the element
	    const resolved = window.getComputedStyle(element).getPropertyValue(token);
	    if (resolved) {
	        const trimmed = resolved.trim();
	        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
	    }
	    return isCSSVariableToken(fallback)
	        ? getVariableValue(fallback, element, depth + 1)
	        : fallback;
	}

	const clamp = (min, max, v) => {
	    if (v > max)
	        return max;
	    if (v < min)
	        return min;
	    return v;
	};

	const number = {
	    test: (v) => typeof v === "number",
	    parse: parseFloat,
	    transform: (v) => v,
	};
	const alpha = {
	    ...number,
	    transform: (v) => clamp(0, 1, v),
	};
	const scale = {
	    ...number,
	    default: 1,
	};

	const createUnitType = (unit) => ({
	    test: (v) => typeof v === "string" && v.endsWith(unit) && v.split(" ").length === 1,
	    parse: parseFloat,
	    transform: (v) => `${v}${unit}`,
	});
	const degrees = /*@__PURE__*/ createUnitType("deg");
	const percent = /*@__PURE__*/ createUnitType("%");
	const px = /*@__PURE__*/ createUnitType("px");
	const vh = /*@__PURE__*/ createUnitType("vh");
	const vw = /*@__PURE__*/ createUnitType("vw");
	const progressPercentage = {
	    ...percent,
	    parse: (v) => percent.parse(v) / 100,
	    transform: (v) => percent.transform(v * 100),
	};

	const positionalKeys = new Set([
	    "width",
	    "height",
	    "top",
	    "left",
	    "right",
	    "bottom",
	    "x",
	    "y",
	    "translateX",
	    "translateY",
	]);
	const isNumOrPxType = (v) => v === number || v === px;
	const getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
	const getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {
	    if (transform === "none" || !transform)
	        return 0;
	    const matrix3d = transform.match(/^matrix3d\((.+)\)$/u);
	    if (matrix3d) {
	        return getPosFromMatrix(matrix3d[1], pos3);
	    }
	    else {
	        const matrix = transform.match(/^matrix\((.+)\)$/u);
	        if (matrix) {
	            return getPosFromMatrix(matrix[1], pos2);
	        }
	        else {
	            return 0;
	        }
	    }
	};
	const transformKeys = new Set(["x", "y", "z"]);
	const nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
	function removeNonTranslationalTransform(visualElement) {
	    const removedTransforms = [];
	    nonTranslationalTransformKeys.forEach((key) => {
	        const value = visualElement.getValue(key);
	        if (value !== undefined) {
	            removedTransforms.push([key, value.get()]);
	            value.set(key.startsWith("scale") ? 1 : 0);
	        }
	    });
	    return removedTransforms;
	}
	const positionalValues = {
	    // Dimensions
	    width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
	    height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
	    top: (_bbox, { top }) => parseFloat(top),
	    left: (_bbox, { left }) => parseFloat(left),
	    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
	    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
	    // Transform
	    x: getTranslateFromMatrix(4, 13),
	    y: getTranslateFromMatrix(5, 14),
	};
	// Alias translate longform names
	positionalValues.translateX = positionalValues.x;
	positionalValues.translateY = positionalValues.y;

	/**
	 * Tests a provided value against a ValueType
	 */
	const testValueType = (v) => (type) => type.test(v);

	/**
	 * ValueType for "auto"
	 */
	const auto = {
	    test: (v) => v === "auto",
	    parse: (v) => v,
	};

	/**
	 * A list of value types commonly used for dimensions
	 */
	const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
	/**
	 * Tests a dimensional value against the list of dimension ValueTypes
	 */
	const findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

	const toResolve = new Set();
	let isScheduled = false;
	let anyNeedsMeasurement = false;
	function measureAllKeyframes() {
	    if (anyNeedsMeasurement) {
	        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);
	        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));
	        const transformsToRestore = new Map();
	        /**
	         * Write pass
	         * If we're measuring elements we want to remove bounding box-changing transforms.
	         */
	        elementsToMeasure.forEach((element) => {
	            const removedTransforms = removeNonTranslationalTransform(element);
	            if (!removedTransforms.length)
	                return;
	            transformsToRestore.set(element, removedTransforms);
	            element.render();
	        });
	        // Read
	        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
	        // Write
	        elementsToMeasure.forEach((element) => {
	            element.render();
	            const restore = transformsToRestore.get(element);
	            if (restore) {
	                restore.forEach(([key, value]) => {
	                    var _a;
	                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);
	                });
	            }
	        });
	        // Read
	        resolversToMeasure.forEach((resolver) => resolver.measureEndState());
	        // Write
	        resolversToMeasure.forEach((resolver) => {
	            if (resolver.suspendedScrollY !== undefined) {
	                window.scrollTo(0, resolver.suspendedScrollY);
	            }
	        });
	    }
	    anyNeedsMeasurement = false;
	    isScheduled = false;
	    toResolve.forEach((resolver) => resolver.complete());
	    toResolve.clear();
	}
	function readAllKeyframes() {
	    toResolve.forEach((resolver) => {
	        resolver.readKeyframes();
	        if (resolver.needsMeasurement) {
	            anyNeedsMeasurement = true;
	        }
	    });
	}
	function flushKeyframeResolvers() {
	    readAllKeyframes();
	    measureAllKeyframes();
	}
	class KeyframeResolver {
	    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {
	        /**
	         * Track whether this resolver has completed. Once complete, it never
	         * needs to attempt keyframe resolution again.
	         */
	        this.isComplete = false;
	        /**
	         * Track whether this resolver is async. If it is, it'll be added to the
	         * resolver queue and flushed in the next frame. Resolvers that aren't going
	         * to trigger read/write thrashing don't need to be async.
	         */
	        this.isAsync = false;
	        /**
	         * Track whether this resolver needs to perform a measurement
	         * to resolve its keyframes.
	         */
	        this.needsMeasurement = false;
	        /**
	         * Track whether this resolver is currently scheduled to resolve
	         * to allow it to be cancelled and resumed externally.
	         */
	        this.isScheduled = false;
	        this.unresolvedKeyframes = [...unresolvedKeyframes];
	        this.onComplete = onComplete;
	        this.name = name;
	        this.motionValue = motionValue;
	        this.element = element;
	        this.isAsync = isAsync;
	    }
	    scheduleResolve() {
	        this.isScheduled = true;
	        if (this.isAsync) {
	            toResolve.add(this);
	            if (!isScheduled) {
	                isScheduled = true;
	                frame.read(readAllKeyframes);
	                frame.resolveKeyframes(measureAllKeyframes);
	            }
	        }
	        else {
	            this.readKeyframes();
	            this.complete();
	        }
	    }
	    readKeyframes() {
	        const { unresolvedKeyframes, name, element, motionValue } = this;
	        /**
	         * If a keyframe is null, we hydrate it either by reading it from
	         * the instance, or propagating from previous keyframes.
	         */
	        for (let i = 0; i < unresolvedKeyframes.length; i++) {
	            if (unresolvedKeyframes[i] === null) {
	                /**
	                 * If the first keyframe is null, we need to find its value by sampling the element
	                 */
	                if (i === 0) {
	                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();
	                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
	                    if (currentValue !== undefined) {
	                        unresolvedKeyframes[0] = currentValue;
	                    }
	                    else if (element && name) {
	                        const valueAsRead = element.readValue(name, finalKeyframe);
	                        if (valueAsRead !== undefined && valueAsRead !== null) {
	                            unresolvedKeyframes[0] = valueAsRead;
	                        }
	                    }
	                    if (unresolvedKeyframes[0] === undefined) {
	                        unresolvedKeyframes[0] = finalKeyframe;
	                    }
	                    if (motionValue && currentValue === undefined) {
	                        motionValue.set(unresolvedKeyframes[0]);
	                    }
	                }
	                else {
	                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];
	                }
	            }
	        }
	    }
	    setFinalKeyframe() { }
	    measureInitialState() { }
	    renderEndStyles() { }
	    measureEndState() { }
	    complete() {
	        this.isComplete = true;
	        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);
	        toResolve.delete(this);
	    }
	    cancel() {
	        if (!this.isComplete) {
	            this.isScheduled = false;
	            toResolve.delete(this);
	        }
	    }
	    resume() {
	        if (!this.isComplete)
	            this.scheduleResolve();
	    }
	}

	// If this number is a decimal, make it just five decimal places
	// to avoid exponents
	const sanitize = (v) => Math.round(v * 100000) / 100000;

	const floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;

	function isNullish(v) {
	    return v == null;
	}

	const singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;

	/**
	 * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,
	 * but false if a number or multiple colors
	 */
	const isColorString = (type, testProp) => (v) => {
	    return Boolean((typeof v === "string" &&
	        singleColorRegex.test(v) &&
	        v.startsWith(type)) ||
	        (testProp &&
	            !isNullish(v) &&
	            Object.prototype.hasOwnProperty.call(v, testProp)));
	};
	const splitColor = (aName, bName, cName) => (v) => {
	    if (typeof v !== "string")
	        return v;
	    const [a, b, c, alpha] = v.match(floatRegex);
	    return {
	        [aName]: parseFloat(a),
	        [bName]: parseFloat(b),
	        [cName]: parseFloat(c),
	        alpha: alpha !== undefined ? parseFloat(alpha) : 1,
	    };
	};

	const clampRgbUnit = (v) => clamp(0, 255, v);
	const rgbUnit = {
	    ...number,
	    transform: (v) => Math.round(clampRgbUnit(v)),
	};
	const rgba = {
	    test: /*@__PURE__*/ isColorString("rgb", "red"),
	    parse: /*@__PURE__*/ splitColor("red", "green", "blue"),
	    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" +
	        rgbUnit.transform(red) +
	        ", " +
	        rgbUnit.transform(green) +
	        ", " +
	        rgbUnit.transform(blue) +
	        ", " +
	        sanitize(alpha.transform(alpha$1)) +
	        ")",
	};

	function parseHex(v) {
	    let r = "";
	    let g = "";
	    let b = "";
	    let a = "";
	    // If we have 6 characters, ie #FF0000
	    if (v.length > 5) {
	        r = v.substring(1, 3);
	        g = v.substring(3, 5);
	        b = v.substring(5, 7);
	        a = v.substring(7, 9);
	        // Or we have 3 characters, ie #F00
	    }
	    else {
	        r = v.substring(1, 2);
	        g = v.substring(2, 3);
	        b = v.substring(3, 4);
	        a = v.substring(4, 5);
	        r += r;
	        g += g;
	        b += b;
	        a += a;
	    }
	    return {
	        red: parseInt(r, 16),
	        green: parseInt(g, 16),
	        blue: parseInt(b, 16),
	        alpha: a ? parseInt(a, 16) / 255 : 1,
	    };
	}
	const hex = {
	    test: /*@__PURE__*/ isColorString("#"),
	    parse: parseHex,
	    transform: rgba.transform,
	};

	const hsla = {
	    test: /*@__PURE__*/ isColorString("hsl", "hue"),
	    parse: /*@__PURE__*/ splitColor("hue", "saturation", "lightness"),
	    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
	        return ("hsla(" +
	            Math.round(hue) +
	            ", " +
	            percent.transform(sanitize(saturation)) +
	            ", " +
	            percent.transform(sanitize(lightness)) +
	            ", " +
	            sanitize(alpha.transform(alpha$1)) +
	            ")");
	    },
	};

	const color = {
	    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
	    parse: (v) => {
	        if (rgba.test(v)) {
	            return rgba.parse(v);
	        }
	        else if (hsla.test(v)) {
	            return hsla.parse(v);
	        }
	        else {
	            return hex.parse(v);
	        }
	    },
	    transform: (v) => {
	        return typeof v === "string"
	            ? v
	            : v.hasOwnProperty("red")
	                ? rgba.transform(v)
	                : hsla.transform(v);
	    },
	};

	const colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;

	function test(v) {
	    var _a, _b;
	    return (isNaN(v) &&
	        typeof v === "string" &&
	        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +
	            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >
	            0);
	}
	const NUMBER_TOKEN = "number";
	const COLOR_TOKEN = "color";
	const VAR_TOKEN = "var";
	const VAR_FUNCTION_TOKEN = "var(";
	const SPLIT_TOKEN = "${}";
	// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`
	const complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
	function analyseComplexValue(value) {
	    const originalValue = value.toString();
	    const values = [];
	    const indexes = {
	        color: [],
	        number: [],
	        var: [],
	    };
	    const types = [];
	    let i = 0;
	    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
	        if (color.test(parsedValue)) {
	            indexes.color.push(i);
	            types.push(COLOR_TOKEN);
	            values.push(color.parse(parsedValue));
	        }
	        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
	            indexes.var.push(i);
	            types.push(VAR_TOKEN);
	            values.push(parsedValue);
	        }
	        else {
	            indexes.number.push(i);
	            types.push(NUMBER_TOKEN);
	            values.push(parseFloat(parsedValue));
	        }
	        ++i;
	        return SPLIT_TOKEN;
	    });
	    const split = tokenised.split(SPLIT_TOKEN);
	    return { values, split, indexes, types };
	}
	function parseComplexValue(v) {
	    return analyseComplexValue(v).values;
	}
	function createTransformer(source) {
	    const { split, types } = analyseComplexValue(source);
	    const numSections = split.length;
	    return (v) => {
	        let output = "";
	        for (let i = 0; i < numSections; i++) {
	            output += split[i];
	            if (v[i] !== undefined) {
	                const type = types[i];
	                if (type === NUMBER_TOKEN) {
	                    output += sanitize(v[i]);
	                }
	                else if (type === COLOR_TOKEN) {
	                    output += color.transform(v[i]);
	                }
	                else {
	                    output += v[i];
	                }
	            }
	        }
	        return output;
	    };
	}
	const convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
	function getAnimatableNone$1(v) {
	    const parsed = parseComplexValue(v);
	    const transformer = createTransformer(v);
	    return transformer(parsed.map(convertNumbersToZero));
	}
	const complex = {
	    test,
	    parse: parseComplexValue,
	    createTransformer,
	    getAnimatableNone: getAnimatableNone$1,
	};

	/**
	 * Properties that should default to 1 or 100%
	 */
	const maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
	function applyDefaultFilter(v) {
	    const [name, value] = v.slice(0, -1).split("(");
	    if (name === "drop-shadow")
	        return v;
	    const [number] = value.match(floatRegex) || [];
	    if (!number)
	        return v;
	    const unit = value.replace(number, "");
	    let defaultValue = maxDefaults.has(name) ? 1 : 0;
	    if (number !== value)
	        defaultValue *= 100;
	    return name + "(" + defaultValue + unit + ")";
	}
	const functionRegex = /\b([a-z-]*)\(.*?\)/gu;
	const filter = {
	    ...complex,
	    getAnimatableNone: (v) => {
	        const functions = v.match(functionRegex);
	        return functions ? functions.map(applyDefaultFilter).join(" ") : v;
	    },
	};

	const browserNumberValueTypes = {
	    // Border props
	    borderWidth: px,
	    borderTopWidth: px,
	    borderRightWidth: px,
	    borderBottomWidth: px,
	    borderLeftWidth: px,
	    borderRadius: px,
	    radius: px,
	    borderTopLeftRadius: px,
	    borderTopRightRadius: px,
	    borderBottomRightRadius: px,
	    borderBottomLeftRadius: px,
	    // Positioning props
	    width: px,
	    maxWidth: px,
	    height: px,
	    maxHeight: px,
	    top: px,
	    right: px,
	    bottom: px,
	    left: px,
	    // Spacing props
	    padding: px,
	    paddingTop: px,
	    paddingRight: px,
	    paddingBottom: px,
	    paddingLeft: px,
	    margin: px,
	    marginTop: px,
	    marginRight: px,
	    marginBottom: px,
	    marginLeft: px,
	    // Misc
	    backgroundPositionX: px,
	    backgroundPositionY: px,
	};

	const transformValueTypes = {
	    rotate: degrees,
	    rotateX: degrees,
	    rotateY: degrees,
	    rotateZ: degrees,
	    scale,
	    scaleX: scale,
	    scaleY: scale,
	    scaleZ: scale,
	    skew: degrees,
	    skewX: degrees,
	    skewY: degrees,
	    distance: px,
	    translateX: px,
	    translateY: px,
	    translateZ: px,
	    x: px,
	    y: px,
	    z: px,
	    perspective: px,
	    transformPerspective: px,
	    opacity: alpha,
	    originX: progressPercentage,
	    originY: progressPercentage,
	    originZ: px,
	};

	const int = {
	    ...number,
	    transform: Math.round,
	};

	const numberValueTypes = {
	    ...browserNumberValueTypes,
	    ...transformValueTypes,
	    zIndex: int,
	    size: px,
	    // SVG
	    fillOpacity: alpha,
	    strokeOpacity: alpha,
	    numOctaves: int,
	};

	/**
	 * A map of default value types for common values
	 */
	const defaultValueTypes = {
	    ...numberValueTypes,
	    // Color props
	    color,
	    backgroundColor: color,
	    outlineColor: color,
	    fill: color,
	    stroke: color,
	    // Border props
	    borderColor: color,
	    borderTopColor: color,
	    borderRightColor: color,
	    borderBottomColor: color,
	    borderLeftColor: color,
	    filter,
	    WebkitFilter: filter,
	};
	/**
	 * Gets the default ValueType for the provided value key
	 */
	const getDefaultValueType = (key) => defaultValueTypes[key];

	function getAnimatableNone(key, value) {
	    let defaultValueType = getDefaultValueType(key);
	    if (defaultValueType !== filter)
	        defaultValueType = complex;
	    // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
	    return defaultValueType.getAnimatableNone
	        ? defaultValueType.getAnimatableNone(value)
	        : undefined;
	}

	/**
	 * If we encounter keyframes like "none" or "0" and we also have keyframes like
	 * "#fff" or "200px 200px" we want to find a keyframe to serve as a template for
	 * the "none" keyframes. In this case "#fff" or "200px 200px" - then these get turned into
	 * zero equivalents, i.e. "#fff0" or "0px 0px".
	 */
	const invalidTemplates = new Set(["auto", "none", "0"]);
	function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {
	    let i = 0;
	    let animatableTemplate = undefined;
	    while (i < unresolvedKeyframes.length && !animatableTemplate) {
	        const keyframe = unresolvedKeyframes[i];
	        if (typeof keyframe === "string" &&
	            !invalidTemplates.has(keyframe) &&
	            analyseComplexValue(keyframe).values.length) {
	            animatableTemplate = unresolvedKeyframes[i];
	        }
	        i++;
	    }
	    if (animatableTemplate && name) {
	        for (const noneIndex of noneKeyframeIndexes) {
	            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);
	        }
	    }
	}

	class DOMKeyframesResolver extends KeyframeResolver {
	    constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {
	        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);
	    }
	    readKeyframes() {
	        const { unresolvedKeyframes, element, name } = this;
	        if (!element || !element.current)
	            return;
	        super.readKeyframes();
	        /**
	         * If any keyframe is a CSS variable, we need to find its value by sampling the element
	         */
	        for (let i = 0; i < unresolvedKeyframes.length; i++) {
	            let keyframe = unresolvedKeyframes[i];
	            if (typeof keyframe === "string") {
	                keyframe = keyframe.trim();
	                if (isCSSVariableToken(keyframe)) {
	                    const resolved = getVariableValue(keyframe, element.current);
	                    if (resolved !== undefined) {
	                        unresolvedKeyframes[i] = resolved;
	                    }
	                    if (i === unresolvedKeyframes.length - 1) {
	                        this.finalKeyframe = keyframe;
	                    }
	                }
	            }
	        }
	        /**
	         * Resolve "none" values. We do this potentially twice - once before and once after measuring keyframes.
	         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which
	         * have a far bigger performance impact.
	         */
	        this.resolveNoneKeyframes();
	        /**
	         * Check to see if unit type has changed. If so schedule jobs that will
	         * temporarily set styles to the destination keyframes.
	         * Skip if we have more than two keyframes or this isn't a positional value.
	         * TODO: We can throw if there are multiple keyframes and the value type changes.
	         */
	        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
	            return;
	        }
	        const [origin, target] = unresolvedKeyframes;
	        const originType = findDimensionValueType(origin);
	        const targetType = findDimensionValueType(target);
	        /**
	         * Either we don't recognise these value types or we can animate between them.
	         */
	        if (originType === targetType)
	            return;
	        /**
	         * If both values are numbers or pixels, we can animate between them by
	         * converting them to numbers.
	         */
	        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
	            for (let i = 0; i < unresolvedKeyframes.length; i++) {
	                const value = unresolvedKeyframes[i];
	                if (typeof value === "string") {
	                    unresolvedKeyframes[i] = parseFloat(value);
	                }
	            }
	        }
	        else {
	            /**
	             * Else, the only way to resolve this is by measuring the element.
	             */
	            this.needsMeasurement = true;
	        }
	    }
	    resolveNoneKeyframes() {
	        const { unresolvedKeyframes, name } = this;
	        const noneKeyframeIndexes = [];
	        for (let i = 0; i < unresolvedKeyframes.length; i++) {
	            if (isNone(unresolvedKeyframes[i])) {
	                noneKeyframeIndexes.push(i);
	            }
	        }
	        if (noneKeyframeIndexes.length) {
	            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);
	        }
	    }
	    measureInitialState() {
	        const { element, unresolvedKeyframes, name } = this;
	        if (!element || !element.current)
	            return;
	        if (name === "height") {
	            this.suspendedScrollY = window.pageYOffset;
	        }
	        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
	        unresolvedKeyframes[0] = this.measuredOrigin;
	        // Set final key frame to measure after next render
	        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
	        if (measureKeyframe !== undefined) {
	            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
	        }
	    }
	    measureEndState() {
	        var _a;
	        const { element, name, unresolvedKeyframes } = this;
	        if (!element || !element.current)
	            return;
	        const value = element.getValue(name);
	        value && value.jump(this.measuredOrigin, false);
	        const finalKeyframeIndex = unresolvedKeyframes.length - 1;
	        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
	        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
	        if (finalKeyframe !== null && this.finalKeyframe === undefined) {
	            this.finalKeyframe = finalKeyframe;
	        }
	        // If we removed transform values, reapply them before the next render
	        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {
	            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {
	                element
	                    .getValue(unsetTransformName)
	                    .set(unsetTransformValue);
	            });
	        }
	        this.resolveNoneKeyframes();
	    }
	}

	function isGenerator(type) {
	    return typeof type === "function";
	}

	let now;
	function clearTime() {
	    now = undefined;
	}
	/**
	 * An eventloop-synchronous alternative to performance.now().
	 *
	 * Ensures that time measurements remain consistent within a synchronous context.
	 * Usually calling performance.now() twice within the same synchronous context
	 * will return different values which isn't useful for animations when we're usually
	 * trying to sync animations to the same frame.
	 */
	const time = {
	    now: () => {
	        if (now === undefined) {
	            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming
	                ? frameData.timestamp
	                : performance.now());
	        }
	        return now;
	    },
	    set: (newTime) => {
	        now = newTime;
	        queueMicrotask(clearTime);
	    },
	};

	/**
	 * Check if a value is animatable. Examples:
	 *
	 * ✅: 100, "100px", "#fff"
	 * ❌: "block", "url(2.jpg)"
	 * @param value
	 *
	 * @internal
	 */
	const isAnimatable = (value, name) => {
	    // If the list of keys tat might be non-animatable grows, replace with Set
	    if (name === "zIndex")
	        return false;
	    // If it's a number or a keyframes array, we can animate it. We might at some point
	    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
	    // but for now lets leave it like this for performance reasons
	    if (typeof value === "number" || Array.isArray(value))
	        return true;
	    if (typeof value === "string" && // It's animatable if we have a string
	        (complex.test(value) || value === "0") && // And it contains numbers and/or colors
	        !value.startsWith("url(") // Unless it starts with "url("
	    ) {
	        return true;
	    }
	    return false;
	};

	function hasKeyframesChanged(keyframes) {
	    const current = keyframes[0];
	    if (keyframes.length === 1)
	        return true;
	    for (let i = 0; i < keyframes.length; i++) {
	        if (keyframes[i] !== current)
	            return true;
	    }
	}
	function canAnimate(keyframes, name, type, velocity) {
	    /**
	     * Check if we're able to animate between the start and end keyframes,
	     * and throw a warning if we're attempting to animate between one that's
	     * animatable and another that isn't.
	     */
	    const originKeyframe = keyframes[0];
	    if (originKeyframe === null)
	        return false;
	    /**
	     * These aren't traditionally animatable but we do support them.
	     * In future we could look into making this more generic or replacing
	     * this function with mix() === mixImmediate
	     */
	    if (name === "display" || name === "visibility")
	        return true;
	    const targetKeyframe = keyframes[keyframes.length - 1];
	    const isOriginAnimatable = isAnimatable(originKeyframe, name);
	    const isTargetAnimatable = isAnimatable(targetKeyframe, name);
	    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
	    // Always skip if any of these are true
	    if (!isOriginAnimatable || !isTargetAnimatable) {
	        return false;
	    }
	    return (hasKeyframesChanged(keyframes) ||
	        ((type === "spring" || isGenerator(type)) && velocity));
	}

	/**
	 * Maximum time allowed between an animation being created and it being
	 * resolved for us to use the latter as the start time.
	 *
	 * This is to ensure that while we prefer to "start" an animation as soon
	 * as it's triggered, we also want to avoid a visual jump if there's a big delay
	 * between these two moments.
	 */
	const MAX_RESOLVE_DELAY = 40;
	class BaseAnimation {
	    constructor({ autoplay = true, delay = 0, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", ...options }) {
	        // Track whether the animation has been stopped. Stopped animations won't restart.
	        this.isStopped = false;
	        this.hasAttemptedResolve = false;
	        this.createdAt = time.now();
	        this.options = {
	            autoplay,
	            delay,
	            type,
	            repeat,
	            repeatDelay,
	            repeatType,
	            ...options,
	        };
	        this.updateFinishedPromise();
	    }
	    /**
	     * This method uses the createdAt and resolvedAt to calculate the
	     * animation startTime. *Ideally*, we would use the createdAt time as t=0
	     * as the following frame would then be the first frame of the animation in
	     * progress, which would feel snappier.
	     *
	     * However, if there's a delay (main thread work) between the creation of
	     * the animation and the first commited frame, we prefer to use resolvedAt
	     * to avoid a sudden jump into the animation.
	     */
	    calcStartTime() {
	        if (!this.resolvedAt)
	            return this.createdAt;
	        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY
	            ? this.resolvedAt
	            : this.createdAt;
	    }
	    /**
	     * A getter for resolved data. If keyframes are not yet resolved, accessing
	     * this.resolved will synchronously flush all pending keyframe resolvers.
	     * This is a deoptimisation, but at its worst still batches read/writes.
	     */
	    get resolved() {
	        if (!this._resolved && !this.hasAttemptedResolve) {
	            flushKeyframeResolvers();
	        }
	        return this._resolved;
	    }
	    /**
	     * A method to be called when the keyframes resolver completes. This method
	     * will check if its possible to run the animation and, if not, skip it.
	     * Otherwise, it will call initPlayback on the implementing class.
	     */
	    onKeyframesResolved(keyframes, finalKeyframe) {
	        this.resolvedAt = time.now();
	        this.hasAttemptedResolve = true;
	        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;
	        /**
	         * If we can't animate this value with the resolved keyframes
	         * then we should complete it immediately.
	         */
	        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {
	            // Finish immediately
	            if (!delay) {
	                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));
	                onComplete === null || onComplete === void 0 ? void 0 : onComplete();
	                this.resolveFinishedPromise();
	                return;
	            }
	            // Finish after a delay
	            else {
	                this.options.duration = 0;
	            }
	        }
	        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);
	        if (resolvedAnimation === false)
	            return;
	        this._resolved = {
	            keyframes,
	            finalKeyframe,
	            ...resolvedAnimation,
	        };
	        this.onPostResolved();
	    }
	    onPostResolved() { }
	    /**
	     * Allows the returned animation to be awaited or promise-chained. Currently
	     * resolves when the animation finishes at all but in a future update could/should
	     * reject if its cancels.
	     */
	    then(resolve, reject) {
	        return this.currentFinishedPromise.then(resolve, reject);
	    }
	    flatten() {
	        this.options.type = "keyframes";
	        this.options.ease = "linear";
	    }
	    updateFinishedPromise() {
	        this.currentFinishedPromise = new Promise((resolve) => {
	            this.resolveFinishedPromise = resolve;
	        });
	    }
	}

	/*
	  Progress within given range

	  Given a lower limit and an upper limit, we return the progress
	  (expressed as a number 0-1) represented by the given value, and
	  limit that progress to within 0-1.

	  @param [number]: Lower limit
	  @param [number]: Upper limit
	  @param [number]: Value to find progress within given range
	  @return [number]: Progress of value within range as expressed 0-1
	*/
	const progress = (from, to, value) => {
	    const toFromDifference = to - from;
	    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
	};

	const generateLinearEasing = (easing, duration, // as milliseconds
	resolution = 10 // as milliseconds
	) => {
	    let points = "";
	    const numPoints = Math.max(Math.round(duration / resolution), 2);
	    for (let i = 0; i < numPoints; i++) {
	        points += easing(progress(0, numPoints - 1, i)) + ", ";
	    }
	    return `linear(${points.substring(0, points.length - 2)})`;
	};

	/*
	  Convert velocity into velocity per second

	  @param [number]: Unit per frame
	  @param [number]: Frame duration in ms
	*/
	function velocityPerSecond(velocity, frameDuration) {
	    return frameDuration ? velocity * (1000 / frameDuration) : 0;
	}

	const velocitySampleDuration = 5; // ms
	function calcGeneratorVelocity(resolveValue, t, current) {
	    const prevT = Math.max(t - velocitySampleDuration, 0);
	    return velocityPerSecond(current - resolveValue(prevT), t - prevT);
	}

	const springDefaults = {
	    // Default spring physics
	    stiffness: 100,
	    damping: 10,
	    mass: 1.0,
	    velocity: 0.0,
	    // Default duration/bounce-based options
	    duration: 800, // in ms
	    bounce: 0.3,
	    visualDuration: 0.3, // in seconds
	    // Rest thresholds
	    restSpeed: {
	        granular: 0.01,
	        default: 2,
	    },
	    restDelta: {
	        granular: 0.005,
	        default: 0.5,
	    },
	    // Limits
	    minDuration: 0.01, // in seconds
	    maxDuration: 10.0, // in seconds
	    minDamping: 0.05,
	    maxDamping: 1,
	};

	const safeMin = 0.001;
	function findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass, }) {
	    let envelope;
	    let derivative;
	    warning(duration <= secondsToMilliseconds(springDefaults.maxDuration), "Spring duration must be 10 seconds or less");
	    let dampingRatio = 1 - bounce;
	    /**
	     * Restrict dampingRatio and duration to within acceptable ranges.
	     */
	    dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);
	    duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));
	    if (dampingRatio < 1) {
	        /**
	         * Underdamped spring
	         */
	        envelope = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const a = exponentialDecay - velocity;
	            const b = calcAngularFreq(undampedFreq, dampingRatio);
	            const c = Math.exp(-delta);
	            return safeMin - (a / b) * c;
	        };
	        derivative = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const d = delta * velocity + velocity;
	            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
	            const f = Math.exp(-delta);
	            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
	            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
	            return (factor * ((d - e) * f)) / g;
	        };
	    }
	    else {
	        /**
	         * Critically-damped spring
	         */
	        envelope = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (undampedFreq - velocity) * duration + 1;
	            return -safeMin + a * b;
	        };
	        derivative = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (velocity - undampedFreq) * (duration * duration);
	            return a * b;
	        };
	    }
	    const initialGuess = 5 / duration;
	    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
	    duration = secondsToMilliseconds(duration);
	    if (isNaN(undampedFreq)) {
	        return {
	            stiffness: springDefaults.stiffness,
	            damping: springDefaults.damping,
	            duration,
	        };
	    }
	    else {
	        const stiffness = Math.pow(undampedFreq, 2) * mass;
	        return {
	            stiffness,
	            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
	            duration,
	        };
	    }
	}
	const rootIterations = 12;
	function approximateRoot(envelope, derivative, initialGuess) {
	    let result = initialGuess;
	    for (let i = 1; i < rootIterations; i++) {
	        result = result - envelope(result) / derivative(result);
	    }
	    return result;
	}
	function calcAngularFreq(undampedFreq, dampingRatio) {
	    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
	}

	/**
	 * Implement a practical max duration for keyframe generation
	 * to prevent infinite loops
	 */
	const maxGeneratorDuration = 20000;
	function calcGeneratorDuration(generator) {
	    let duration = 0;
	    const timeStep = 50;
	    let state = generator.next(duration);
	    while (!state.done && duration < maxGeneratorDuration) {
	        duration += timeStep;
	        state = generator.next(duration);
	    }
	    return duration >= maxGeneratorDuration ? Infinity : duration;
	}

	const durationKeys = ["duration", "bounce"];
	const physicsKeys = ["stiffness", "damping", "mass"];
	function isSpringType(options, keys) {
	    return keys.some((key) => options[key] !== undefined);
	}
	function getSpringOptions(options) {
	    let springOptions = {
	        velocity: springDefaults.velocity,
	        stiffness: springDefaults.stiffness,
	        damping: springDefaults.damping,
	        mass: springDefaults.mass,
	        isResolvedFromDuration: false,
	        ...options,
	    };
	    // stiffness/damping/mass overrides duration/bounce
	    if (!isSpringType(options, physicsKeys) &&
	        isSpringType(options, durationKeys)) {
	        if (options.visualDuration) {
	            const visualDuration = options.visualDuration;
	            const root = (2 * Math.PI) / (visualDuration * 1.2);
	            const stiffness = root * root;
	            const damping = 2 * clamp(0.05, 1, 1 - options.bounce) * Math.sqrt(stiffness);
	            springOptions = {
	                ...springOptions,
	                mass: springDefaults.mass,
	                stiffness,
	                damping,
	            };
	        }
	        else {
	            const derived = findSpring(options);
	            springOptions = {
	                ...springOptions,
	                ...derived,
	                mass: springDefaults.mass,
	            };
	            springOptions.isResolvedFromDuration = true;
	        }
	    }
	    return springOptions;
	}
	function spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce) {
	    const options = typeof optionsOrVisualDuration !== "object"
	        ? {
	            visualDuration: optionsOrVisualDuration,
	            keyframes: [0, 1],
	            bounce,
	        }
	        : optionsOrVisualDuration;
	    let { restSpeed, restDelta } = options;
	    const origin = options.keyframes[0];
	    const target = options.keyframes[options.keyframes.length - 1];
	    /**
	     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
	     * to reduce GC during animation.
	     */
	    const state = { done: false, value: origin };
	    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({
	        ...options,
	        velocity: -millisecondsToSeconds(options.velocity || 0),
	    });
	    const initialVelocity = velocity || 0.0;
	    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
	    const initialDelta = target - origin;
	    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
	    /**
	     * If we're working on a granular scale, use smaller defaults for determining
	     * when the spring is finished.
	     *
	     * These defaults have been selected emprically based on what strikes a good
	     * ratio between feeling good and finishing as soon as changes are imperceptible.
	     */
	    const isGranularScale = Math.abs(initialDelta) < 5;
	    restSpeed || (restSpeed = isGranularScale
	        ? springDefaults.restSpeed.granular
	        : springDefaults.restSpeed.default);
	    restDelta || (restDelta = isGranularScale
	        ? springDefaults.restDelta.granular
	        : springDefaults.restDelta.default);
	    let resolveSpring;
	    if (dampingRatio < 1) {
	        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
	        // Underdamped spring
	        resolveSpring = (t) => {
	            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	            return (target -
	                envelope *
	                    (((initialVelocity +
	                        dampingRatio * undampedAngularFreq * initialDelta) /
	                        angularFreq) *
	                        Math.sin(angularFreq * t) +
	                        initialDelta * Math.cos(angularFreq * t)));
	        };
	    }
	    else if (dampingRatio === 1) {
	        // Critically damped spring
	        resolveSpring = (t) => target -
	            Math.exp(-undampedAngularFreq * t) *
	                (initialDelta +
	                    (initialVelocity + undampedAngularFreq * initialDelta) * t);
	    }
	    else {
	        // Overdamped spring
	        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
	        resolveSpring = (t) => {
	            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	            // When performing sinh or cosh values can hit Infinity so we cap them here
	            const freqForT = Math.min(dampedAngularFreq * t, 300);
	            return (target -
	                (envelope *
	                    ((initialVelocity +
	                        dampingRatio * undampedAngularFreq * initialDelta) *
	                        Math.sinh(freqForT) +
	                        dampedAngularFreq *
	                            initialDelta *
	                            Math.cosh(freqForT))) /
	                    dampedAngularFreq);
	        };
	    }
	    const generator = {
	        calculatedDuration: isResolvedFromDuration ? duration || null : null,
	        next: (t) => {
	            const current = resolveSpring(t);
	            if (!isResolvedFromDuration) {
	                let currentVelocity = 0.0;
	                /**
	                 * We only need to calculate velocity for under-damped springs
	                 * as over- and critically-damped springs can't overshoot, so
	                 * checking only for displacement is enough.
	                 */
	                if (dampingRatio < 1) {
	                    currentVelocity =
	                        t === 0
	                            ? secondsToMilliseconds(initialVelocity)
	                            : calcGeneratorVelocity(resolveSpring, t, current);
	                }
	                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
	                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
	                state.done =
	                    isBelowVelocityThreshold && isBelowDisplacementThreshold;
	            }
	            else {
	                state.done = t >= duration;
	            }
	            state.value = state.done ? target : current;
	            return state;
	        },
	        toString: () => {
	            const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
	            const easing = generateLinearEasing((progress) => generator.next(calculatedDuration * progress).value, calculatedDuration, 30);
	            return calculatedDuration + "ms " + easing;
	        },
	    };
	    return generator;
	}

	function inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {
	    const origin = keyframes[0];
	    const state = {
	        done: false,
	        value: origin,
	    };
	    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);
	    const nearestBoundary = (v) => {
	        if (min === undefined)
	            return max;
	        if (max === undefined)
	            return min;
	        return Math.abs(min - v) < Math.abs(max - v) ? min : max;
	    };
	    let amplitude = power * velocity;
	    const ideal = origin + amplitude;
	    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
	    /**
	     * If the target has changed we need to re-calculate the amplitude, otherwise
	     * the animation will start from the wrong position.
	     */
	    if (target !== ideal)
	        amplitude = target - origin;
	    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
	    const calcLatest = (t) => target + calcDelta(t);
	    const applyFriction = (t) => {
	        const delta = calcDelta(t);
	        const latest = calcLatest(t);
	        state.done = Math.abs(delta) <= restDelta;
	        state.value = state.done ? target : latest;
	    };
	    /**
	     * Ideally this would resolve for t in a stateless way, we could
	     * do that by always precalculating the animation but as we know
	     * this will be done anyway we can assume that spring will
	     * be discovered during that.
	     */
	    let timeReachedBoundary;
	    let spring$1;
	    const checkCatchBoundary = (t) => {
	        if (!isOutOfBounds(state.value))
	            return;
	        timeReachedBoundary = t;
	        spring$1 = spring({
	            keyframes: [state.value, nearestBoundary(state.value)],
	            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000
	            damping: bounceDamping,
	            stiffness: bounceStiffness,
	            restDelta,
	            restSpeed,
	        });
	    };
	    checkCatchBoundary(0);
	    return {
	        calculatedDuration: null,
	        next: (t) => {
	            /**
	             * We need to resolve the friction to figure out if we need a
	             * spring but we don't want to do this twice per frame. So here
	             * we flag if we updated for this frame and later if we did
	             * we can skip doing it again.
	             */
	            let hasUpdatedFrame = false;
	            if (!spring$1 && timeReachedBoundary === undefined) {
	                hasUpdatedFrame = true;
	                applyFriction(t);
	                checkCatchBoundary(t);
	            }
	            /**
	             * If we have a spring and the provided t is beyond the moment the friction
	             * animation crossed the min/max boundary, use the spring.
	             */
	            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {
	                return spring$1.next(t - timeReachedBoundary);
	            }
	            else {
	                !hasUpdatedFrame && applyFriction(t);
	                return state;
	            }
	        },
	    };
	}

	const easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);
	const easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);
	const easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);

	const isEasingArray = (ease) => {
	    return Array.isArray(ease) && typeof ease[0] !== "number";
	};

	const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

	const easingLookup = {
	    linear: noop,
	    easeIn,
	    easeInOut,
	    easeOut,
	    circIn,
	    circInOut,
	    circOut,
	    backIn,
	    backInOut,
	    backOut,
	    anticipate,
	};
	const easingDefinitionToFunction = (definition) => {
	    if (isBezierDefinition(definition)) {
	        // If cubic bezier definition, create bezier curve
	        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
	        const [x1, y1, x2, y2] = definition;
	        return cubicBezier(x1, y1, x2, y2);
	    }
	    else if (typeof definition === "string") {
	        // Else lookup from table
	        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);
	        return easingLookup[definition];
	    }
	    return definition;
	};

	/**
	 * Pipe
	 * Compose other transformers to run linearily
	 * pipe(min(20), max(40))
	 * @param  {...functions} transformers
	 * @return {function}
	 */
	const combineFunctions = (a, b) => (v) => b(a(v));
	const pipe = (...transformers) => transformers.reduce(combineFunctions);

	/*
	  Value in range from progress

	  Given a lower limit and an upper limit, we return the value within
	  that range as expressed by progress (usually a number from 0 to 1)

	  So progress = 0.5 would change

	  from -------- to

	  to

	  from ---- to

	  E.g. from = 10, to = 20, progress = 0.5 => 15

	  @param [number]: Lower limit of range
	  @param [number]: Upper limit of range
	  @param [number]: The progress between lower and upper limits expressed 0-1
	  @return [number]: Value as calculated from progress within range (not limited within range)
	*/
	const mixNumber$1 = (from, to, progress) => {
	    return from + (to - from) * progress;
	};

	// Adapted from https://gist.github.com/mjackson/5311256
	function hueToRgb(p, q, t) {
	    if (t < 0)
	        t += 1;
	    if (t > 1)
	        t -= 1;
	    if (t < 1 / 6)
	        return p + (q - p) * 6 * t;
	    if (t < 1 / 2)
	        return q;
	    if (t < 2 / 3)
	        return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	}
	function hslaToRgba({ hue, saturation, lightness, alpha }) {
	    hue /= 360;
	    saturation /= 100;
	    lightness /= 100;
	    let red = 0;
	    let green = 0;
	    let blue = 0;
	    if (!saturation) {
	        red = green = blue = lightness;
	    }
	    else {
	        const q = lightness < 0.5
	            ? lightness * (1 + saturation)
	            : lightness + saturation - lightness * saturation;
	        const p = 2 * lightness - q;
	        red = hueToRgb(p, q, hue + 1 / 3);
	        green = hueToRgb(p, q, hue);
	        blue = hueToRgb(p, q, hue - 1 / 3);
	    }
	    return {
	        red: Math.round(red * 255),
	        green: Math.round(green * 255),
	        blue: Math.round(blue * 255),
	        alpha,
	    };
	}

	function mixImmediate(a, b) {
	    return (p) => (p > 0 ? b : a);
	}

	// Linear color space blending
	// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw
	// Demonstrated http://codepen.io/osublake/pen/xGVVaN
	const mixLinearColor = (from, to, v) => {
	    const fromExpo = from * from;
	    const expo = v * (to * to - fromExpo) + fromExpo;
	    return expo < 0 ? 0 : Math.sqrt(expo);
	};
	const colorTypes = [hex, rgba, hsla];
	const getColorType = (v) => colorTypes.find((type) => type.test(v));
	function asRGBA(color) {
	    const type = getColorType(color);
	    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);
	    if (!Boolean(type))
	        return false;
	    let model = type.parse(color);
	    if (type === hsla) {
	        // TODO Remove this cast - needed since Motion's stricter typing
	        model = hslaToRgba(model);
	    }
	    return model;
	}
	const mixColor = (from, to) => {
	    const fromRGBA = asRGBA(from);
	    const toRGBA = asRGBA(to);
	    if (!fromRGBA || !toRGBA) {
	        return mixImmediate(from, to);
	    }
	    const blended = { ...fromRGBA };
	    return (v) => {
	        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
	        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
	        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
	        blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v);
	        return rgba.transform(blended);
	    };
	};

	const invisibleValues = new Set(["none", "hidden"]);
	/**
	 * Returns a function that, when provided a progress value between 0 and 1,
	 * will return the "none" or "hidden" string only when the progress is that of
	 * the origin or target.
	 */
	function mixVisibility(origin, target) {
	    if (invisibleValues.has(origin)) {
	        return (p) => (p <= 0 ? origin : target);
	    }
	    else {
	        return (p) => (p >= 1 ? target : origin);
	    }
	}

	function mixNumber(a, b) {
	    return (p) => mixNumber$1(a, b, p);
	}
	function getMixer(a) {
	    if (typeof a === "number") {
	        return mixNumber;
	    }
	    else if (typeof a === "string") {
	        return isCSSVariableToken(a)
	            ? mixImmediate
	            : color.test(a)
	                ? mixColor
	                : mixComplex;
	    }
	    else if (Array.isArray(a)) {
	        return mixArray;
	    }
	    else if (typeof a === "object") {
	        return color.test(a) ? mixColor : mixObject;
	    }
	    return mixImmediate;
	}
	function mixArray(a, b) {
	    const output = [...a];
	    const numValues = output.length;
	    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));
	    return (p) => {
	        for (let i = 0; i < numValues; i++) {
	            output[i] = blendValue[i](p);
	        }
	        return output;
	    };
	}
	function mixObject(a, b) {
	    const output = { ...a, ...b };
	    const blendValue = {};
	    for (const key in output) {
	        if (a[key] !== undefined && b[key] !== undefined) {
	            blendValue[key] = getMixer(a[key])(a[key], b[key]);
	        }
	    }
	    return (v) => {
	        for (const key in blendValue) {
	            output[key] = blendValue[key](v);
	        }
	        return output;
	    };
	}
	function matchOrder(origin, target) {
	    var _a;
	    const orderedOrigin = [];
	    const pointers = { color: 0, var: 0, number: 0 };
	    for (let i = 0; i < target.values.length; i++) {
	        const type = target.types[i];
	        const originIndex = origin.indexes[type][pointers[type]];
	        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;
	        orderedOrigin[i] = originValue;
	        pointers[type]++;
	    }
	    return orderedOrigin;
	}
	const mixComplex = (origin, target) => {
	    const template = complex.createTransformer(target);
	    const originStats = analyseComplexValue(origin);
	    const targetStats = analyseComplexValue(target);
	    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&
	        originStats.indexes.color.length === targetStats.indexes.color.length &&
	        originStats.indexes.number.length >= targetStats.indexes.number.length;
	    if (canInterpolate) {
	        if ((invisibleValues.has(origin) &&
	            !targetStats.values.length) ||
	            (invisibleValues.has(target) &&
	                !originStats.values.length)) {
	            return mixVisibility(origin, target);
	        }
	        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
	    }
	    else {
	        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
	        return mixImmediate(origin, target);
	    }
	};

	function mix(from, to, p) {
	    if (typeof from === "number" &&
	        typeof to === "number" &&
	        typeof p === "number") {
	        return mixNumber$1(from, to, p);
	    }
	    const mixer = getMixer(from);
	    return mixer(from, to);
	}

	function createMixers(output, ease, customMixer) {
	    const mixers = [];
	    const mixerFactory = customMixer || mix;
	    const numMixers = output.length - 1;
	    for (let i = 0; i < numMixers; i++) {
	        let mixer = mixerFactory(output[i], output[i + 1]);
	        if (ease) {
	            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;
	            mixer = pipe(easingFunction, mixer);
	        }
	        mixers.push(mixer);
	    }
	    return mixers;
	}
	/**
	 * Create a function that maps from a numerical input array to a generic output array.
	 *
	 * Accepts:
	 *   - Numbers
	 *   - Colors (hex, hsl, hsla, rgb, rgba)
	 *   - Complex (combinations of one or more numbers or strings)
	 *
	 * ```jsx
	 * const mixColor = interpolate([0, 1], ['#fff', '#000'])
	 *
	 * mixColor(0.5) // 'rgba(128, 128, 128, 1)'
	 * ```
	 *
	 * TODO Revist this approach once we've moved to data models for values,
	 * probably not needed to pregenerate mixer functions.
	 *
	 * @public
	 */
	function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
	    const inputLength = input.length;
	    invariant(inputLength === output.length, "Both input and output ranges must be the same length");
	    /**
	     * If we're only provided a single input, we can just make a function
	     * that returns the output.
	     */
	    if (inputLength === 1)
	        return () => output[0];
	    if (inputLength === 2 && input[0] === input[1])
	        return () => output[1];
	    // If input runs highest -> lowest, reverse both arrays
	    if (input[0] > input[inputLength - 1]) {
	        input = [...input].reverse();
	        output = [...output].reverse();
	    }
	    const mixers = createMixers(output, ease, mixer);
	    const numMixers = mixers.length;
	    const interpolator = (v) => {
	        let i = 0;
	        if (numMixers > 1) {
	            for (; i < input.length - 2; i++) {
	                if (v < input[i + 1])
	                    break;
	            }
	        }
	        const progressInRange = progress(input[i], input[i + 1], v);
	        return mixers[i](progressInRange);
	    };
	    return isClamp
	        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))
	        : interpolator;
	}

	function fillOffset(offset, remaining) {
	    const min = offset[offset.length - 1];
	    for (let i = 1; i <= remaining; i++) {
	        const offsetProgress = progress(0, remaining, i);
	        offset.push(mixNumber$1(min, 1, offsetProgress));
	    }
	}

	function defaultOffset(arr) {
	    const offset = [0];
	    fillOffset(offset, arr.length - 1);
	    return offset;
	}

	function convertOffsetToTimes(offset, duration) {
	    return offset.map((o) => o * duration);
	}

	function defaultEasing(values, easing) {
	    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
	}
	function keyframes({ duration = 300, keyframes: keyframeValues, times, ease = "easeInOut", }) {
	    /**
	     * Easing functions can be externally defined as strings. Here we convert them
	     * into actual functions.
	     */
	    const easingFunctions = isEasingArray(ease)
	        ? ease.map(easingDefinitionToFunction)
	        : easingDefinitionToFunction(ease);
	    /**
	     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
	     * to reduce GC during animation.
	     */
	    const state = {
	        done: false,
	        value: keyframeValues[0],
	    };
	    /**
	     * Create a times array based on the provided 0-1 offsets
	     */
	    const absoluteTimes = convertOffsetToTimes(
	    // Only use the provided offsets if they're the correct length
	    // TODO Maybe we should warn here if there's a length mismatch
	    times && times.length === keyframeValues.length
	        ? times
	        : defaultOffset(keyframeValues), duration);
	    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
	        ease: Array.isArray(easingFunctions)
	            ? easingFunctions
	            : defaultEasing(keyframeValues, easingFunctions),
	    });
	    return {
	        calculatedDuration: duration,
	        next: (t) => {
	            state.value = mapTimeToKeyframe(t);
	            state.done = t >= duration;
	            return state;
	        },
	    };
	}

	const frameloopDriver = (update) => {
	    const passTimestamp = ({ timestamp }) => update(timestamp);
	    return {
	        start: () => frame.update(passTimestamp, true),
	        stop: () => cancelFrame(passTimestamp),
	        /**
	         * If we're processing this frame we can use the
	         * framelocked timestamp to keep things in sync.
	         */
	        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),
	    };
	};

	const generators = {
	    decay: inertia,
	    inertia,
	    tween: keyframes,
	    keyframes: keyframes,
	    spring,
	};
	const percentToProgress = (percent) => percent / 100;
	/**
	 * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of
	 * features we expose publically. Mostly the compatibility is to ensure visual identity
	 * between both WAAPI and main thread animations.
	 */
	class MainThreadAnimation extends BaseAnimation {
	    constructor(options) {
	        super(options);
	        /**
	         * The time at which the animation was paused.
	         */
	        this.holdTime = null;
	        /**
	         * The time at which the animation was cancelled.
	         */
	        this.cancelTime = null;
	        /**
	         * The current time of the animation.
	         */
	        this.currentTime = 0;
	        /**
	         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.
	         */
	        this.playbackSpeed = 1;
	        /**
	         * The state of the animation to apply when the animation is resolved. This
	         * allows calls to the public API to control the animation before it is resolved,
	         * without us having to resolve it first.
	         */
	        this.pendingPlayState = "running";
	        /**
	         * The time at which the animation was started.
	         */
	        this.startTime = null;
	        this.state = "idle";
	        /**
	         * This method is bound to the instance to fix a pattern where
	         * animation.stop is returned as a reference from a useEffect.
	         */
	        this.stop = () => {
	            this.resolver.cancel();
	            this.isStopped = true;
	            if (this.state === "idle")
	                return;
	            this.teardown();
	            const { onStop } = this.options;
	            onStop && onStop();
	        };
	        const { name, motionValue, element, keyframes } = this.options;
	        const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;
	        const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);
	        this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue, element);
	        this.resolver.scheduleResolve();
	    }
	    flatten() {
	        super.flatten();
	        // If we've already resolved the animation, re-initialise it
	        if (this._resolved) {
	            Object.assign(this._resolved, this.initPlayback(this._resolved.keyframes));
	        }
	    }
	    initPlayback(keyframes$1) {
	        const { type = "keyframes", repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = this.options;
	        const generatorFactory = isGenerator(type)
	            ? type
	            : generators[type] || keyframes;
	        /**
	         * If our generator doesn't support mixing numbers, we need to replace keyframes with
	         * [0, 100] and then make a function that maps that to the actual keyframes.
	         *
	         * 100 is chosen instead of 1 as it works nicer with spring animations.
	         */
	        let mapPercentToKeyframes;
	        let mirroredGenerator;
	        if (generatorFactory !== keyframes &&
	            typeof keyframes$1[0] !== "number") {
	            if (process.env.NODE_ENV !== "production") {
	                invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);
	            }
	            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));
	            keyframes$1 = [0, 100];
	        }
	        const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });
	        /**
	         * If we have a mirror repeat type we need to create a second generator that outputs the
	         * mirrored (not reversed) animation and later ping pong between the two generators.
	         */
	        if (repeatType === "mirror") {
	            mirroredGenerator = generatorFactory({
	                ...this.options,
	                keyframes: [...keyframes$1].reverse(),
	                velocity: -velocity,
	            });
	        }
	        /**
	         * If duration is undefined and we have repeat options,
	         * we need to calculate a duration from the generator.
	         *
	         * We set it to the generator itself to cache the duration.
	         * Any timeline resolver will need to have already precalculated
	         * the duration by this step.
	         */
	        if (generator.calculatedDuration === null) {
	            generator.calculatedDuration = calcGeneratorDuration(generator);
	        }
	        const { calculatedDuration } = generator;
	        const resolvedDuration = calculatedDuration + repeatDelay;
	        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
	        return {
	            generator,
	            mirroredGenerator,
	            mapPercentToKeyframes,
	            calculatedDuration,
	            resolvedDuration,
	            totalDuration,
	        };
	    }
	    onPostResolved() {
	        const { autoplay = true } = this.options;
	        this.play();
	        if (this.pendingPlayState === "paused" || !autoplay) {
	            this.pause();
	        }
	        else {
	            this.state = this.pendingPlayState;
	        }
	    }
	    tick(timestamp, sample = false) {
	        const { resolved } = this;
	        // If the animations has failed to resolve, return the final keyframe.
	        if (!resolved) {
	            const { keyframes } = this.options;
	            return { done: true, value: keyframes[keyframes.length - 1] };
	        }
	        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration, } = resolved;
	        if (this.startTime === null)
	            return generator.next(0);
	        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;
	        /**
	         * requestAnimationFrame timestamps can come through as lower than
	         * the startTime as set by performance.now(). Here we prevent this,
	         * though in the future it could be possible to make setting startTime
	         * a pending operation that gets resolved here.
	         */
	        if (this.speed > 0) {
	            this.startTime = Math.min(this.startTime, timestamp);
	        }
	        else if (this.speed < 0) {
	            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);
	        }
	        // Update currentTime
	        if (sample) {
	            this.currentTime = timestamp;
	        }
	        else if (this.holdTime !== null) {
	            this.currentTime = this.holdTime;
	        }
	        else {
	            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =
	            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for
	            // example.
	            this.currentTime =
	                Math.round(timestamp - this.startTime) * this.speed;
	        }
	        // Rebase on delay
	        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);
	        const isInDelayPhase = this.speed >= 0
	            ? timeWithoutDelay < 0
	            : timeWithoutDelay > totalDuration;
	        this.currentTime = Math.max(timeWithoutDelay, 0);
	        // If this animation has finished, set the current time  to the total duration.
	        if (this.state === "finished" && this.holdTime === null) {
	            this.currentTime = totalDuration;
	        }
	        let elapsed = this.currentTime;
	        let frameGenerator = generator;
	        if (repeat) {
	            /**
	             * Get the current progress (0-1) of the animation. If t is >
	             * than duration we'll get values like 2.5 (midway through the
	             * third iteration)
	             */
	            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;
	            /**
	             * Get the current iteration (0 indexed). For instance the floor of
	             * 2.5 is 2.
	             */
	            let currentIteration = Math.floor(progress);
	            /**
	             * Get the current progress of the iteration by taking the remainder
	             * so 2.5 is 0.5 through iteration 2
	             */
	            let iterationProgress = progress % 1.0;
	            /**
	             * If iteration progress is 1 we count that as the end
	             * of the previous iteration.
	             */
	            if (!iterationProgress && progress >= 1) {
	                iterationProgress = 1;
	            }
	            iterationProgress === 1 && currentIteration--;
	            currentIteration = Math.min(currentIteration, repeat + 1);
	            /**
	             * Reverse progress if we're not running in "normal" direction
	             */
	            const isOddIteration = Boolean(currentIteration % 2);
	            if (isOddIteration) {
	                if (repeatType === "reverse") {
	                    iterationProgress = 1 - iterationProgress;
	                    if (repeatDelay) {
	                        iterationProgress -= repeatDelay / resolvedDuration;
	                    }
	                }
	                else if (repeatType === "mirror") {
	                    frameGenerator = mirroredGenerator;
	                }
	            }
	            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;
	        }
	        /**
	         * If we're in negative time, set state as the initial keyframe.
	         * This prevents delay: x, duration: 0 animations from finishing
	         * instantly.
	         */
	        const state = isInDelayPhase
	            ? { done: false, value: keyframes[0] }
	            : frameGenerator.next(elapsed);
	        if (mapPercentToKeyframes) {
	            state.value = mapPercentToKeyframes(state.value);
	        }
	        let { done } = state;
	        if (!isInDelayPhase && calculatedDuration !== null) {
	            done =
	                this.speed >= 0
	                    ? this.currentTime >= totalDuration
	                    : this.currentTime <= 0;
	        }
	        const isAnimationFinished = this.holdTime === null &&
	            (this.state === "finished" || (this.state === "running" && done));
	        if (isAnimationFinished && finalKeyframe !== undefined) {
	            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);
	        }
	        if (onUpdate) {
	            onUpdate(state.value);
	        }
	        if (isAnimationFinished) {
	            this.finish();
	        }
	        return state;
	    }
	    get duration() {
	        const { resolved } = this;
	        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;
	    }
	    get time() {
	        return millisecondsToSeconds(this.currentTime);
	    }
	    set time(newTime) {
	        newTime = secondsToMilliseconds(newTime);
	        this.currentTime = newTime;
	        if (this.holdTime !== null || this.speed === 0) {
	            this.holdTime = newTime;
	        }
	        else if (this.driver) {
	            this.startTime = this.driver.now() - newTime / this.speed;
	        }
	    }
	    get speed() {
	        return this.playbackSpeed;
	    }
	    set speed(newSpeed) {
	        const hasChanged = this.playbackSpeed !== newSpeed;
	        this.playbackSpeed = newSpeed;
	        if (hasChanged) {
	            this.time = millisecondsToSeconds(this.currentTime);
	        }
	    }
	    play() {
	        if (!this.resolver.isScheduled) {
	            this.resolver.resume();
	        }
	        if (!this._resolved) {
	            this.pendingPlayState = "running";
	            return;
	        }
	        if (this.isStopped)
	            return;
	        const { driver = frameloopDriver, onPlay, startTime } = this.options;
	        if (!this.driver) {
	            this.driver = driver((timestamp) => this.tick(timestamp));
	        }
	        onPlay && onPlay();
	        const now = this.driver.now();
	        if (this.holdTime !== null) {
	            this.startTime = now - this.holdTime;
	        }
	        else if (!this.startTime) {
	            this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
	        }
	        else if (this.state === "finished") {
	            this.startTime = now;
	        }
	        if (this.state === "finished") {
	            this.updateFinishedPromise();
	        }
	        this.cancelTime = this.startTime;
	        this.holdTime = null;
	        /**
	         * Set playState to running only after we've used it in
	         * the previous logic.
	         */
	        this.state = "running";
	        this.driver.start();
	    }
	    pause() {
	        var _a;
	        if (!this._resolved) {
	            this.pendingPlayState = "paused";
	            return;
	        }
	        this.state = "paused";
	        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;
	    }
	    complete() {
	        if (this.state !== "running") {
	            this.play();
	        }
	        this.pendingPlayState = this.state = "finished";
	        this.holdTime = null;
	    }
	    finish() {
	        this.teardown();
	        this.state = "finished";
	        const { onComplete } = this.options;
	        onComplete && onComplete();
	    }
	    cancel() {
	        if (this.cancelTime !== null) {
	            this.tick(this.cancelTime);
	        }
	        this.teardown();
	        this.updateFinishedPromise();
	    }
	    teardown() {
	        this.state = "idle";
	        this.stopDriver();
	        this.resolveFinishedPromise();
	        this.updateFinishedPromise();
	        this.startTime = this.cancelTime = null;
	        this.resolver.cancel();
	    }
	    stopDriver() {
	        if (!this.driver)
	            return;
	        this.driver.stop();
	        this.driver = undefined;
	    }
	    sample(time) {
	        this.startTime = 0;
	        return this.tick(time, true);
	    }
	}

	/**
	 * A list of values that can be hardware-accelerated.
	 */
	const acceleratedValues = new Set([
	    "opacity",
	    "clipPath",
	    "filter",
	    "transform",
	    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved
	    // or until we implement support for linear() easing.
	    // "background-color"
	]);

	function memo(callback) {
	    let result;
	    return () => {
	        if (result === undefined)
	            result = callback();
	        return result;
	    };
	}

	/**
	 * Add the ability for test suites to manually set support flags
	 * to better test more environments.
	 */
	const supportsFlags = {
	    linearEasing: undefined,
	};

	function memoSupports(callback, supportsFlag) {
	    const memoized = memo(callback);
	    return () => { var _a; return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized(); };
	}

	const supportsLinearEasing = /*@__PURE__*/ memoSupports(() => {
	    try {
	        document
	            .createElement("div")
	            .animate({ opacity: 0 }, { easing: "linear(0, 1)" });
	    }
	    catch (e) {
	        return false;
	    }
	    return true;
	}, "linearEasing");

	function isWaapiSupportedEasing(easing) {
	    return Boolean((typeof easing === "function" && supportsLinearEasing()) ||
	        !easing ||
	        (typeof easing === "string" &&
	            (easing in supportedWaapiEasing || supportsLinearEasing())) ||
	        isBezierDefinition(easing) ||
	        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));
	}
	const cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
	const supportedWaapiEasing = {
	    linear: "linear",
	    ease: "ease",
	    easeIn: "ease-in",
	    easeOut: "ease-out",
	    easeInOut: "ease-in-out",
	    circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),
	    circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),
	    backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
	    backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),
	};
	function mapEasingToNativeEasing(easing, duration) {
	    if (!easing) {
	        return undefined;
	    }
	    else if (typeof easing === "function" && supportsLinearEasing()) {
	        return generateLinearEasing(easing, duration);
	    }
	    else if (isBezierDefinition(easing)) {
	        return cubicBezierAsString(easing);
	    }
	    else if (Array.isArray(easing)) {
	        return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) ||
	            supportedWaapiEasing.easeOut);
	    }
	    else {
	        return supportedWaapiEasing[easing];
	    }
	}

	function startWaapiAnimation(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = "loop", ease = "easeInOut", times, } = {}) {
	    const keyframeOptions = { [valueName]: keyframes };
	    if (times)
	        keyframeOptions.offset = times;
	    const easing = mapEasingToNativeEasing(ease, duration);
	    /**
	     * If this is an easing array, apply to keyframes, not animation as a whole
	     */
	    if (Array.isArray(easing))
	        keyframeOptions.easing = easing;
	    return element.animate(keyframeOptions, {
	        delay,
	        duration,
	        easing: !Array.isArray(easing) ? easing : "linear",
	        fill: "both",
	        iterations: repeat + 1,
	        direction: repeatType === "reverse" ? "alternate" : "normal",
	    });
	}

	function attachTimeline(animation, timeline) {
	    animation.timeline = timeline;
	    animation.onfinish = null;
	}

	const supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));

	/**
	 * 10ms is chosen here as it strikes a balance between smooth
	 * results (more than one keyframe per frame at 60fps) and
	 * keyframe quantity.
	 */
	const sampleDelta = 10; //ms
	/**
	 * Implement a practical max duration for keyframe generation
	 * to prevent infinite loops
	 */
	const maxDuration = 20000;
	/**
	 * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.
	 * WAAPI doesn't support spring or function easings so we run these as JS animation before
	 * handing off.
	 */
	function requiresPregeneratedKeyframes(options) {
	    return (isGenerator(options.type) ||
	        options.type === "spring" ||
	        !isWaapiSupportedEasing(options.ease));
	}
	function pregenerateKeyframes(keyframes, options) {
	    /**
	     * Create a main-thread animation to pregenerate keyframes.
	     * We sample this at regular intervals to generate keyframes that we then
	     * linearly interpolate between.
	     */
	    const sampleAnimation = new MainThreadAnimation({
	        ...options,
	        keyframes,
	        repeat: 0,
	        delay: 0,
	        isGenerator: true,
	    });
	    let state = { done: false, value: keyframes[0] };
	    const pregeneratedKeyframes = [];
	    /**
	     * Bail after 20 seconds of pre-generated keyframes as it's likely
	     * we're heading for an infinite loop.
	     */
	    let t = 0;
	    while (!state.done && t < maxDuration) {
	        state = sampleAnimation.sample(t);
	        pregeneratedKeyframes.push(state.value);
	        t += sampleDelta;
	    }
	    return {
	        times: undefined,
	        keyframes: pregeneratedKeyframes,
	        duration: t - sampleDelta,
	        ease: "linear",
	    };
	}
	const unsupportedEasingFunctions = {
	    anticipate,
	    backInOut,
	    circInOut,
	};
	function isUnsupportedEase(key) {
	    return key in unsupportedEasingFunctions;
	}
	class AcceleratedAnimation extends BaseAnimation {
	    constructor(options) {
	        super(options);
	        const { name, motionValue, element, keyframes } = this.options;
	        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);
	        this.resolver.scheduleResolve();
	    }
	    initPlayback(keyframes, finalKeyframe) {
	        var _a;
	        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;
	        /**
	         * If element has since been unmounted, return false to indicate
	         * the animation failed to initialised.
	         */
	        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {
	            return false;
	        }
	        /**
	         * If the user has provided an easing function name that isn't supported
	         * by WAAPI (like "anticipate"), we need to provide the corressponding
	         * function. This will later get converted to a linear() easing function.
	         */
	        if (typeof ease === "string" &&
	            supportsLinearEasing() &&
	            isUnsupportedEase(ease)) {
	            ease = unsupportedEasingFunctions[ease];
	        }
	        /**
	         * If this animation needs pre-generated keyframes then generate.
	         */
	        if (requiresPregeneratedKeyframes(this.options)) {
	            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;
	            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);
	            keyframes = pregeneratedAnimation.keyframes;
	            // If this is a very short animation, ensure we have
	            // at least two keyframes to animate between as older browsers
	            // can't animate between a single keyframe.
	            if (keyframes.length === 1) {
	                keyframes[1] = keyframes[0];
	            }
	            duration = pregeneratedAnimation.duration;
	            times = pregeneratedAnimation.times;
	            ease = pregeneratedAnimation.ease;
	            type = "keyframes";
	        }
	        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });
	        // Override the browser calculated startTime with one synchronised to other JS
	        // and WAAPI animations starting this event loop.
	        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
	        if (this.pendingTimeline) {
	            attachTimeline(animation, this.pendingTimeline);
	            this.pendingTimeline = undefined;
	        }
	        else {
	            /**
	             * Prefer the `onfinish` prop as it's more widely supported than
	             * the `finished` promise.
	             *
	             * Here, we synchronously set the provided MotionValue to the end
	             * keyframe. If we didn't, when the WAAPI animation is finished it would
	             * be removed from the element which would then revert to its old styles.
	             */
	            animation.onfinish = () => {
	                const { onComplete } = this.options;
	                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));
	                onComplete && onComplete();
	                this.cancel();
	                this.resolveFinishedPromise();
	            };
	        }
	        return {
	            animation,
	            duration,
	            times,
	            type,
	            ease,
	            keyframes: keyframes,
	        };
	    }
	    get duration() {
	        const { resolved } = this;
	        if (!resolved)
	            return 0;
	        const { duration } = resolved;
	        return millisecondsToSeconds(duration);
	    }
	    get time() {
	        const { resolved } = this;
	        if (!resolved)
	            return 0;
	        const { animation } = resolved;
	        return millisecondsToSeconds(animation.currentTime || 0);
	    }
	    set time(newTime) {
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        const { animation } = resolved;
	        animation.currentTime = secondsToMilliseconds(newTime);
	    }
	    get speed() {
	        const { resolved } = this;
	        if (!resolved)
	            return 1;
	        const { animation } = resolved;
	        return animation.playbackRate;
	    }
	    set speed(newSpeed) {
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        const { animation } = resolved;
	        animation.playbackRate = newSpeed;
	    }
	    get state() {
	        const { resolved } = this;
	        if (!resolved)
	            return "idle";
	        const { animation } = resolved;
	        return animation.playState;
	    }
	    get startTime() {
	        const { resolved } = this;
	        if (!resolved)
	            return null;
	        const { animation } = resolved;
	        // Coerce to number as TypeScript incorrectly types this
	        // as CSSNumberish
	        return animation.startTime;
	    }
	    /**
	     * Replace the default DocumentTimeline with another AnimationTimeline.
	     * Currently used for scroll animations.
	     */
	    attachTimeline(timeline) {
	        if (!this._resolved) {
	            this.pendingTimeline = timeline;
	        }
	        else {
	            const { resolved } = this;
	            if (!resolved)
	                return noop;
	            const { animation } = resolved;
	            attachTimeline(animation, timeline);
	        }
	        return noop;
	    }
	    play() {
	        if (this.isStopped)
	            return;
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        const { animation } = resolved;
	        if (animation.playState === "finished") {
	            this.updateFinishedPromise();
	        }
	        animation.play();
	    }
	    pause() {
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        const { animation } = resolved;
	        animation.pause();
	    }
	    stop() {
	        this.resolver.cancel();
	        this.isStopped = true;
	        if (this.state === "idle")
	            return;
	        this.resolveFinishedPromise();
	        this.updateFinishedPromise();
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        const { animation, keyframes, duration, type, ease, times } = resolved;
	        if (animation.playState === "idle" ||
	            animation.playState === "finished") {
	            return;
	        }
	        /**
	         * WAAPI doesn't natively have any interruption capabilities.
	         *
	         * Rather than read commited styles back out of the DOM, we can
	         * create a renderless JS animation and sample it twice to calculate
	         * its current value, "previous" value, and therefore allow
	         * Motion to calculate velocity for any subsequent animation.
	         */
	        if (this.time) {
	            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;
	            const sampleAnimation = new MainThreadAnimation({
	                ...options,
	                keyframes,
	                duration,
	                type,
	                ease,
	                times,
	                isGenerator: true,
	            });
	            const sampleTime = secondsToMilliseconds(this.time);
	            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);
	        }
	        const { onStop } = this.options;
	        onStop && onStop();
	        this.cancel();
	    }
	    complete() {
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        resolved.animation.finish();
	    }
	    cancel() {
	        const { resolved } = this;
	        if (!resolved)
	            return;
	        resolved.animation.cancel();
	    }
	    static supports(options) {
	        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;
	        return (supportsWaapi() &&
	            name &&
	            acceleratedValues.has(name) &&
	            motionValue &&
	            motionValue.owner &&
	            motionValue.owner.current instanceof HTMLElement &&
	            /**
	             * If we're outputting values to onUpdate then we can't use WAAPI as there's
	             * no way to read the value from WAAPI every frame.
	             */
	            !motionValue.owner.getProps().onUpdate &&
	            !repeatDelay &&
	            repeatType !== "mirror" &&
	            damping !== 0 &&
	            type !== "inertia");
	    }
	}

	const supportsScrollTimeline = memo(() => window.ScrollTimeline !== undefined);

	class GroupPlaybackControls {
	    constructor(animations) {
	        // Bound to accomodate common `return animation.stop` pattern
	        this.stop = () => this.runAll("stop");
	        this.animations = animations.filter(Boolean);
	    }
	    then(onResolve, onReject) {
	        return Promise.all(this.animations).then(onResolve).catch(onReject);
	    }
	    /**
	     * TODO: Filter out cancelled or stopped animations before returning
	     */
	    getAll(propName) {
	        return this.animations[0][propName];
	    }
	    setAll(propName, newValue) {
	        for (let i = 0; i < this.animations.length; i++) {
	            this.animations[i][propName] = newValue;
	        }
	    }
	    attachTimeline(timeline, fallback) {
	        const subscriptions = this.animations.map((animation) => {
	            if (supportsScrollTimeline() && animation.attachTimeline) {
	                return animation.attachTimeline(timeline);
	            }
	            else {
	                return fallback(animation);
	            }
	        });
	        return () => {
	            subscriptions.forEach((cancel, i) => {
	                cancel && cancel();
	                this.animations[i].stop();
	            });
	        };
	    }
	    get time() {
	        return this.getAll("time");
	    }
	    set time(time) {
	        this.setAll("time", time);
	    }
	    get speed() {
	        return this.getAll("speed");
	    }
	    set speed(speed) {
	        this.setAll("speed", speed);
	    }
	    get startTime() {
	        return this.getAll("startTime");
	    }
	    get duration() {
	        let max = 0;
	        for (let i = 0; i < this.animations.length; i++) {
	            max = Math.max(max, this.animations[i].duration);
	        }
	        return max;
	    }
	    runAll(methodName) {
	        this.animations.forEach((controls) => controls[methodName]());
	    }
	    flatten() {
	        this.runAll("flatten");
	    }
	    play() {
	        this.runAll("play");
	    }
	    pause() {
	        this.runAll("pause");
	    }
	    cancel() {
	        this.runAll("cancel");
	    }
	    complete() {
	        this.runAll("complete");
	    }
	}

	/**
	 * Decide whether a transition is defined on a given Transition.
	 * This filters out orchestration options and returns true
	 * if any options are left.
	 */
	function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
	    return !!Object.keys(transition).length;
	}

	const animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {
	    const valueTransition = getValueTransition(transition, name) || {};
	    /**
	     * Most transition values are currently completely overwritten by value-specific
	     * transitions. In the future it'd be nicer to blend these transitions. But for now
	     * delay actually does inherit from the root transition if not value-specific.
	     */
	    const delay = valueTransition.delay || transition.delay || 0;
	    /**
	     * Elapsed isn't a public transition option but can be passed through from
	     * optimized appear effects in milliseconds.
	     */
	    let { elapsed = 0 } = transition;
	    elapsed = elapsed - secondsToMilliseconds(delay);
	    let options = {
	        keyframes: Array.isArray(target) ? target : [null, target],
	        ease: "easeOut",
	        velocity: value.getVelocity(),
	        ...valueTransition,
	        delay: -elapsed,
	        onUpdate: (v) => {
	            value.set(v);
	            valueTransition.onUpdate && valueTransition.onUpdate(v);
	        },
	        onComplete: () => {
	            onComplete();
	            valueTransition.onComplete && valueTransition.onComplete();
	        },
	        name,
	        motionValue: value,
	        element: isHandoff ? undefined : element,
	    };
	    /**
	     * If there's no transition defined for this value, we can generate
	     * unqiue transition settings for this value.
	     */
	    if (!isTransitionDefined(valueTransition)) {
	        options = {
	            ...options,
	            ...getDefaultTransition(name, options),
	        };
	    }
	    /**
	     * Both WAAPI and our internal animation functions use durations
	     * as defined by milliseconds, while our external API defines them
	     * as seconds.
	     */
	    if (options.duration) {
	        options.duration = secondsToMilliseconds(options.duration);
	    }
	    if (options.repeatDelay) {
	        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
	    }
	    if (options.from !== undefined) {
	        options.keyframes[0] = options.from;
	    }
	    let shouldSkip = false;
	    if (options.type === false ||
	        (options.duration === 0 && !options.repeatDelay)) {
	        options.duration = 0;
	        if (options.delay === 0) {
	            shouldSkip = true;
	        }
	    }
	    if (instantAnimationState.current ||
	        MotionGlobalConfig.skipAnimations) {
	        shouldSkip = true;
	        options.duration = 0;
	        options.delay = 0;
	    }
	    /**
	     * If we can or must skip creating the animation, and apply only
	     * the final keyframe, do so. We also check once keyframes are resolved but
	     * this early check prevents the need to create an animation at all.
	     */
	    if (shouldSkip && !isHandoff && value.get() !== undefined) {
	        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);
	        if (finalKeyframe !== undefined) {
	            frame.update(() => {
	                options.onUpdate(finalKeyframe);
	                options.onComplete();
	            });
	            // We still want to return some animation controls here rather
	            // than returning undefined
	            return new GroupPlaybackControls([]);
	        }
	    }
	    /**
	     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via
	     * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
	     * optimised animation.
	     */
	    if (!isHandoff && AcceleratedAnimation.supports(options)) {
	        return new AcceleratedAnimation(options);
	    }
	    else {
	        return new MainThreadAnimation(options);
	    }
	};

	const isCustomValue = (v) => {
	    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
	};
	const resolveFinalValueInKeyframes = (v) => {
	    // TODO maybe throw if v.length - 1 is placeholder token?
	    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
	};

	function addUniqueItem(arr, item) {
	    if (arr.indexOf(item) === -1)
	        arr.push(item);
	}
	function removeItem(arr, item) {
	    const index = arr.indexOf(item);
	    if (index > -1)
	        arr.splice(index, 1);
	}

	class SubscriptionManager {
	    constructor() {
	        this.subscriptions = [];
	    }
	    add(handler) {
	        addUniqueItem(this.subscriptions, handler);
	        return () => removeItem(this.subscriptions, handler);
	    }
	    notify(a, b, c) {
	        const numSubscriptions = this.subscriptions.length;
	        if (!numSubscriptions)
	            return;
	        if (numSubscriptions === 1) {
	            /**
	             * If there's only a single handler we can just call it without invoking a loop.
	             */
	            this.subscriptions[0](a, b, c);
	        }
	        else {
	            for (let i = 0; i < numSubscriptions; i++) {
	                /**
	                 * Check whether the handler exists before firing as it's possible
	                 * the subscriptions were modified during this loop running.
	                 */
	                const handler = this.subscriptions[i];
	                handler && handler(a, b, c);
	            }
	        }
	    }
	    getSize() {
	        return this.subscriptions.length;
	    }
	    clear() {
	        this.subscriptions.length = 0;
	    }
	}

	/**
	 * Maximum time between the value of two frames, beyond which we
	 * assume the velocity has since been 0.
	 */
	const MAX_VELOCITY_DELTA = 30;
	const isFloat = (value) => {
	    return !isNaN(parseFloat(value));
	};
	/**
	 * `MotionValue` is used to track the state and velocity of motion values.
	 *
	 * @public
	 */
	class MotionValue {
	    /**
	     * @param init - The initiating value
	     * @param config - Optional configuration options
	     *
	     * -  `transformer`: A function to transform incoming values with.
	     *
	     * @internal
	     */
	    constructor(init, options = {}) {
	        /**
	         * This will be replaced by the build step with the latest version number.
	         * When MotionValues are provided to motion components, warn if versions are mixed.
	         */
	        this.version = "11.15.0";
	        /**
	         * Tracks whether this value can output a velocity. Currently this is only true
	         * if the value is numerical, but we might be able to widen the scope here and support
	         * other value types.
	         *
	         * @internal
	         */
	        this.canTrackVelocity = null;
	        /**
	         * An object containing a SubscriptionManager for each active event.
	         */
	        this.events = {};
	        this.updateAndNotify = (v, render = true) => {
	            const currentTime = time.now();
	            /**
	             * If we're updating the value during another frame or eventloop
	             * than the previous frame, then the we set the previous frame value
	             * to current.
	             */
	            if (this.updatedAt !== currentTime) {
	                this.setPrevFrameValue();
	            }
	            this.prev = this.current;
	            this.setCurrent(v);
	            // Update update subscribers
	            if (this.current !== this.prev && this.events.change) {
	                this.events.change.notify(this.current);
	            }
	            // Update render subscribers
	            if (render && this.events.renderRequest) {
	                this.events.renderRequest.notify(this.current);
	            }
	        };
	        this.hasAnimated = false;
	        this.setCurrent(init);
	        this.owner = options.owner;
	    }
	    setCurrent(current) {
	        this.current = current;
	        this.updatedAt = time.now();
	        if (this.canTrackVelocity === null && current !== undefined) {
	            this.canTrackVelocity = isFloat(this.current);
	        }
	    }
	    setPrevFrameValue(prevFrameValue = this.current) {
	        this.prevFrameValue = prevFrameValue;
	        this.prevUpdatedAt = this.updatedAt;
	    }
	    /**
	     * Adds a function that will be notified when the `MotionValue` is updated.
	     *
	     * It returns a function that, when called, will cancel the subscription.
	     *
	     * When calling `onChange` inside a React component, it should be wrapped with the
	     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
	     * from the `useEffect` function to ensure you don't add duplicate subscribers..
	     *
	     * ```jsx
	     * export const MyComponent = () => {
	     *   const x = useMotionValue(0)
	     *   const y = useMotionValue(0)
	     *   const opacity = useMotionValue(1)
	     *
	     *   useEffect(() => {
	     *     function updateOpacity() {
	     *       const maxXY = Math.max(x.get(), y.get())
	     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
	     *       opacity.set(newOpacity)
	     *     }
	     *
	     *     const unsubscribeX = x.on("change", updateOpacity)
	     *     const unsubscribeY = y.on("change", updateOpacity)
	     *
	     *     return () => {
	     *       unsubscribeX()
	     *       unsubscribeY()
	     *     }
	     *   }, [])
	     *
	     *   return <motion.div style={{ x }} />
	     * }
	     * ```
	     *
	     * @param subscriber - A function that receives the latest value.
	     * @returns A function that, when called, will cancel this subscription.
	     *
	     * @deprecated
	     */
	    onChange(subscription) {
	        if (process.env.NODE_ENV !== "production") {
	            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
	        }
	        return this.on("change", subscription);
	    }
	    on(eventName, callback) {
	        if (!this.events[eventName]) {
	            this.events[eventName] = new SubscriptionManager();
	        }
	        const unsubscribe = this.events[eventName].add(callback);
	        if (eventName === "change") {
	            return () => {
	                unsubscribe();
	                /**
	                 * If we have no more change listeners by the start
	                 * of the next frame, stop active animations.
	                 */
	                frame.read(() => {
	                    if (!this.events.change.getSize()) {
	                        this.stop();
	                    }
	                });
	            };
	        }
	        return unsubscribe;
	    }
	    clearListeners() {
	        for (const eventManagers in this.events) {
	            this.events[eventManagers].clear();
	        }
	    }
	    /**
	     * Attaches a passive effect to the `MotionValue`.
	     *
	     * @internal
	     */
	    attach(passiveEffect, stopPassiveEffect) {
	        this.passiveEffect = passiveEffect;
	        this.stopPassiveEffect = stopPassiveEffect;
	    }
	    /**
	     * Sets the state of the `MotionValue`.
	     *
	     * @remarks
	     *
	     * ```jsx
	     * const x = useMotionValue(0)
	     * x.set(10)
	     * ```
	     *
	     * @param latest - Latest value to set.
	     * @param render - Whether to notify render subscribers. Defaults to `true`
	     *
	     * @public
	     */
	    set(v, render = true) {
	        if (!render || !this.passiveEffect) {
	            this.updateAndNotify(v, render);
	        }
	        else {
	            this.passiveEffect(v, this.updateAndNotify);
	        }
	    }
	    setWithVelocity(prev, current, delta) {
	        this.set(current);
	        this.prev = undefined;
	        this.prevFrameValue = prev;
	        this.prevUpdatedAt = this.updatedAt - delta;
	    }
	    /**
	     * Set the state of the `MotionValue`, stopping any active animations,
	     * effects, and resets velocity to `0`.
	     */
	    jump(v, endAnimation = true) {
	        this.updateAndNotify(v);
	        this.prev = v;
	        this.prevUpdatedAt = this.prevFrameValue = undefined;
	        endAnimation && this.stop();
	        if (this.stopPassiveEffect)
	            this.stopPassiveEffect();
	    }
	    /**
	     * Returns the latest state of `MotionValue`
	     *
	     * @returns - The latest state of `MotionValue`
	     *
	     * @public
	     */
	    get() {
	        return this.current;
	    }
	    /**
	     * @public
	     */
	    getPrevious() {
	        return this.prev;
	    }
	    /**
	     * Returns the latest velocity of `MotionValue`
	     *
	     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
	     *
	     * @public
	     */
	    getVelocity() {
	        const currentTime = time.now();
	        if (!this.canTrackVelocity ||
	            this.prevFrameValue === undefined ||
	            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
	            return 0;
	        }
	        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
	        // Casts because of parseFloat's poor typing
	        return velocityPerSecond(parseFloat(this.current) -
	            parseFloat(this.prevFrameValue), delta);
	    }
	    /**
	     * Registers a new animation to control this `MotionValue`. Only one
	     * animation can drive a `MotionValue` at one time.
	     *
	     * ```jsx
	     * value.start()
	     * ```
	     *
	     * @param animation - A function that starts the provided animation
	     *
	     * @internal
	     */
	    start(startAnimation) {
	        this.stop();
	        return new Promise((resolve) => {
	            this.hasAnimated = true;
	            this.animation = startAnimation(resolve);
	            if (this.events.animationStart) {
	                this.events.animationStart.notify();
	            }
	        }).then(() => {
	            if (this.events.animationComplete) {
	                this.events.animationComplete.notify();
	            }
	            this.clearAnimation();
	        });
	    }
	    /**
	     * Stop the currently active animation.
	     *
	     * @public
	     */
	    stop() {
	        if (this.animation) {
	            this.animation.stop();
	            if (this.events.animationCancel) {
	                this.events.animationCancel.notify();
	            }
	        }
	        this.clearAnimation();
	    }
	    /**
	     * Returns `true` if this value is currently animating.
	     *
	     * @public
	     */
	    isAnimating() {
	        return !!this.animation;
	    }
	    clearAnimation() {
	        delete this.animation;
	    }
	    /**
	     * Destroy and clean up subscribers to this `MotionValue`.
	     *
	     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
	     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
	     * created a `MotionValue` via the `motionValue` function.
	     *
	     * @public
	     */
	    destroy() {
	        this.clearListeners();
	        this.stop();
	        if (this.stopPassiveEffect) {
	            this.stopPassiveEffect();
	        }
	    }
	}
	function motionValue(init, options) {
	    return new MotionValue(init, options);
	}

	/**
	 * Set VisualElement's MotionValue, creating a new MotionValue for it if
	 * it doesn't exist.
	 */
	function setMotionValue(visualElement, key, value) {
	    if (visualElement.hasValue(key)) {
	        visualElement.getValue(key).set(value);
	    }
	    else {
	        visualElement.addValue(key, motionValue(value));
	    }
	}
	function setTarget(visualElement, definition) {
	    const resolved = resolveVariant(visualElement, definition);
	    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};
	    target = { ...target, ...transitionEnd };
	    for (const key in target) {
	        const value = resolveFinalValueInKeyframes(target[key]);
	        setMotionValue(visualElement, key, value);
	    }
	}

	/**
	 * Convert camelCase to dash-case properties.
	 */
	const camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();

	const optimizedAppearDataId = "framerAppearId";
	const optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

	function getOptimisedAppearId(visualElement) {
	    return visualElement.props[optimizedAppearDataAttribute];
	}

	const isMotionValue = (value) => Boolean(value && value.getVelocity);

	function isWillChangeMotionValue(value) {
	    return Boolean(isMotionValue(value) && value.add);
	}

	function addValueToWillChange(visualElement, key) {
	    const willChange = visualElement.getValue("willChange");
	    /**
	     * It could be that a user has set willChange to a regular MotionValue,
	     * in which case we can't add the value to it.
	     */
	    if (isWillChangeMotionValue(willChange)) {
	        return willChange.add(key);
	    }
	}

	/**
	 * Decide whether we should block this animation. Previously, we achieved this
	 * just by checking whether the key was listed in protectedKeys, but this
	 * posed problems if an animation was triggered by afterChildren and protectedKeys
	 * had been set to true in the meantime.
	 */
	function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
	    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
	    needsAnimating[key] = false;
	    return shouldBlock;
	}
	function animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {
	    var _a;
	    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;
	    if (transitionOverride)
	        transition = transitionOverride;
	    const animations = [];
	    const animationTypeState = type &&
	        visualElement.animationState &&
	        visualElement.animationState.getState()[type];
	    for (const key in target) {
	        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);
	        const valueTarget = target[key];
	        if (valueTarget === undefined ||
	            (animationTypeState &&
	                shouldBlockAnimation(animationTypeState, key))) {
	            continue;
	        }
	        const valueTransition = {
	            delay,
	            ...getValueTransition(transition || {}, key),
	        };
	        /**
	         * If this is the first time a value is being animated, check
	         * to see if we're handling off from an existing animation.
	         */
	        let isHandoff = false;
	        if (window.MotionHandoffAnimation) {
	            const appearId = getOptimisedAppearId(visualElement);
	            if (appearId) {
	                const startTime = window.MotionHandoffAnimation(appearId, key, frame);
	                if (startTime !== null) {
	                    valueTransition.startTime = startTime;
	                    isHandoff = true;
	                }
	            }
	        }
	        addValueToWillChange(visualElement, key);
	        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)
	            ? { type: false }
	            : valueTransition, visualElement, isHandoff));
	        const animation = value.animation;
	        if (animation) {
	            animations.push(animation);
	        }
	    }
	    if (transitionEnd) {
	        Promise.all(animations).then(() => {
	            frame.update(() => {
	                transitionEnd && setTarget(visualElement, transitionEnd);
	            });
	        });
	    }
	    return animations;
	}

	function animateVariant(visualElement, variant, options = {}) {
	    var _a;
	    const resolved = resolveVariant(visualElement, variant, options.type === "exit"
	        ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom
	        : undefined);
	    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
	    if (options.transitionOverride) {
	        transition = options.transitionOverride;
	    }
	    /**
	     * If we have a variant, create a callback that runs it as an animation.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    const getAnimation = resolved
	        ? () => Promise.all(animateTarget(visualElement, resolved, options))
	        : () => Promise.resolve();
	    /**
	     * If we have children, create a callback that runs all their animations.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size
	        ? (forwardDelay = 0) => {
	            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;
	            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
	        }
	        : () => Promise.resolve();
	    /**
	     * If the transition explicitly defines a "when" option, we need to resolve either
	     * this animation or all children animations before playing the other.
	     */
	    const { when } = transition;
	    if (when) {
	        const [first, last] = when === "beforeChildren"
	            ? [getAnimation, getChildAnimations]
	            : [getChildAnimations, getAnimation];
	        return first().then(() => last());
	    }
	    else {
	        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
	    }
	}
	function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
	    const animations = [];
	    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
	    const generateStaggerDuration = staggerDirection === 1
	        ? (i = 0) => i * staggerChildren
	        : (i = 0) => maxStaggerDuration - i * staggerChildren;
	    Array.from(visualElement.variantChildren)
	        .sort(sortByTreeOrder)
	        .forEach((child, i) => {
	        child.notify("AnimationStart", variant);
	        animations.push(animateVariant(child, variant, {
	            ...options,
	            delay: delayChildren + generateStaggerDuration(i),
	        }).then(() => child.notify("AnimationComplete", variant)));
	    });
	    return Promise.all(animations);
	}
	function sortByTreeOrder(a, b) {
	    return a.sortNodePosition(b);
	}

	function animateVisualElement(visualElement, definition, options = {}) {
	    visualElement.notify("AnimationStart", definition);
	    let animation;
	    if (Array.isArray(definition)) {
	        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));
	        animation = Promise.all(animations);
	    }
	    else if (typeof definition === "string") {
	        animation = animateVariant(visualElement, definition, options);
	    }
	    else {
	        const resolvedDefinition = typeof definition === "function"
	            ? resolveVariant(visualElement, definition, options.custom)
	            : definition;
	        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
	    }
	    return animation.then(() => {
	        visualElement.notify("AnimationComplete", definition);
	    });
	}

	const numVariantProps = variantProps.length;
	function getVariantContext(visualElement) {
	    if (!visualElement)
	        return undefined;
	    if (!visualElement.isControllingVariants) {
	        const context = visualElement.parent
	            ? getVariantContext(visualElement.parent) || {}
	            : {};
	        if (visualElement.props.initial !== undefined) {
	            context.initial = visualElement.props.initial;
	        }
	        return context;
	    }
	    const context = {};
	    for (let i = 0; i < numVariantProps; i++) {
	        const name = variantProps[i];
	        const prop = visualElement.props[name];
	        if (isVariantLabel(prop) || prop === false) {
	            context[name] = prop;
	        }
	    }
	    return context;
	}

	const reversePriorityOrder = [...variantPriorityOrder].reverse();
	const numAnimationTypes = variantPriorityOrder.length;
	function animateList(visualElement) {
	    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
	}
	function createAnimationState(visualElement) {
	    let animate = animateList(visualElement);
	    let state = createState();
	    let isInitialRender = true;
	    /**
	     * This function will be used to reduce the animation definitions for
	     * each active animation type into an object of resolved values for it.
	     */
	    const buildResolvedTypeValues = (type) => (acc, definition) => {
	        var _a;
	        const resolved = resolveVariant(visualElement, definition, type === "exit"
	            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom
	            : undefined);
	        if (resolved) {
	            const { transition, transitionEnd, ...target } = resolved;
	            acc = { ...acc, ...target, ...transitionEnd };
	        }
	        return acc;
	    };
	    /**
	     * This just allows us to inject mocked animation functions
	     * @internal
	     */
	    function setAnimateFunction(makeAnimator) {
	        animate = makeAnimator(visualElement);
	    }
	    /**
	     * When we receive new props, we need to:
	     * 1. Create a list of protected keys for each type. This is a directory of
	     *    value keys that are currently being "handled" by types of a higher priority
	     *    so that whenever an animation is played of a given type, these values are
	     *    protected from being animated.
	     * 2. Determine if an animation type needs animating.
	     * 3. Determine if any values have been removed from a type and figure out
	     *    what to animate those to.
	     */
	    function animateChanges(changedActiveType) {
	        const { props } = visualElement;
	        const context = getVariantContext(visualElement.parent) || {};
	        /**
	         * A list of animations that we'll build into as we iterate through the animation
	         * types. This will get executed at the end of the function.
	         */
	        const animations = [];
	        /**
	         * Keep track of which values have been removed. Then, as we hit lower priority
	         * animation types, we can check if they contain removed values and animate to that.
	         */
	        const removedKeys = new Set();
	        /**
	         * A dictionary of all encountered keys. This is an object to let us build into and
	         * copy it without iteration. Each time we hit an animation type we set its protected
	         * keys - the keys its not allowed to animate - to the latest version of this object.
	         */
	        let encounteredKeys = {};
	        /**
	         * If a variant has been removed at a given index, and this component is controlling
	         * variant animations, we want to ensure lower-priority variants are forced to animate.
	         */
	        let removedVariantIndex = Infinity;
	        /**
	         * Iterate through all animation types in reverse priority order. For each, we want to
	         * detect which values it's handling and whether or not they've changed (and therefore
	         * need to be animated). If any values have been removed, we want to detect those in
	         * lower priority props and flag for animation.
	         */
	        for (let i = 0; i < numAnimationTypes; i++) {
	            const type = reversePriorityOrder[i];
	            const typeState = state[type];
	            const prop = props[type] !== undefined
	                ? props[type]
	                : context[type];
	            const propIsVariant = isVariantLabel(prop);
	            /**
	             * If this type has *just* changed isActive status, set activeDelta
	             * to that status. Otherwise set to null.
	             */
	            const activeDelta = type === changedActiveType ? typeState.isActive : null;
	            if (activeDelta === false)
	                removedVariantIndex = i;
	            /**
	             * If this prop is an inherited variant, rather than been set directly on the
	             * component itself, we want to make sure we allow the parent to trigger animations.
	             *
	             * TODO: Can probably change this to a !isControllingVariants check
	             */
	            let isInherited = prop === context[type] &&
	                prop !== props[type] &&
	                propIsVariant;
	            /**
	             *
	             */
	            if (isInherited &&
	                isInitialRender &&
	                visualElement.manuallyAnimateOnMount) {
	                isInherited = false;
	            }
	            /**
	             * Set all encountered keys so far as the protected keys for this type. This will
	             * be any key that has been animated or otherwise handled by active, higher-priortiy types.
	             */
	            typeState.protectedKeys = { ...encounteredKeys };
	            // Check if we can skip analysing this prop early
	            if (
	            // If it isn't active and hasn't *just* been set as inactive
	            (!typeState.isActive && activeDelta === null) ||
	                // If we didn't and don't have any defined prop for this animation type
	                (!prop && !typeState.prevProp) ||
	                // Or if the prop doesn't define an animation
	                isAnimationControls(prop) ||
	                typeof prop === "boolean") {
	                continue;
	            }
	            /**
	             * As we go look through the values defined on this type, if we detect
	             * a changed value or a value that was removed in a higher priority, we set
	             * this to true and add this prop to the animation list.
	             */
	            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
	            let shouldAnimateType = variantDidChange ||
	                // If we're making this variant active, we want to always make it active
	                (type === changedActiveType &&
	                    typeState.isActive &&
	                    !isInherited &&
	                    propIsVariant) ||
	                // If we removed a higher-priority variant (i is in reverse order)
	                (i > removedVariantIndex && propIsVariant);
	            let handledRemovedValues = false;
	            /**
	             * As animations can be set as variant lists, variants or target objects, we
	             * coerce everything to an array if it isn't one already
	             */
	            const definitionList = Array.isArray(prop) ? prop : [prop];
	            /**
	             * Build an object of all the resolved values. We'll use this in the subsequent
	             * animateChanges calls to determine whether a value has changed.
	             */
	            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});
	            if (activeDelta === false)
	                resolvedValues = {};
	            /**
	             * Now we need to loop through all the keys in the prev prop and this prop,
	             * and decide:
	             * 1. If the value has changed, and needs animating
	             * 2. If it has been removed, and needs adding to the removedKeys set
	             * 3. If it has been removed in a higher priority type and needs animating
	             * 4. If it hasn't been removed in a higher priority but hasn't changed, and
	             *    needs adding to the type's protectedKeys list.
	             */
	            const { prevResolvedValues = {} } = typeState;
	            const allKeys = {
	                ...prevResolvedValues,
	                ...resolvedValues,
	            };
	            const markToAnimate = (key) => {
	                shouldAnimateType = true;
	                if (removedKeys.has(key)) {
	                    handledRemovedValues = true;
	                    removedKeys.delete(key);
	                }
	                typeState.needsAnimating[key] = true;
	                const motionValue = visualElement.getValue(key);
	                if (motionValue)
	                    motionValue.liveStyle = false;
	            };
	            for (const key in allKeys) {
	                const next = resolvedValues[key];
	                const prev = prevResolvedValues[key];
	                // If we've already handled this we can just skip ahead
	                if (encounteredKeys.hasOwnProperty(key))
	                    continue;
	                /**
	                 * If the value has changed, we probably want to animate it.
	                 */
	                let valueHasChanged = false;
	                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
	                    valueHasChanged = !shallowCompare(next, prev);
	                }
	                else {
	                    valueHasChanged = next !== prev;
	                }
	                if (valueHasChanged) {
	                    if (next !== undefined && next !== null) {
	                        // If next is defined and doesn't equal prev, it needs animating
	                        markToAnimate(key);
	                    }
	                    else {
	                        // If it's undefined, it's been removed.
	                        removedKeys.add(key);
	                    }
	                }
	                else if (next !== undefined && removedKeys.has(key)) {
	                    /**
	                     * If next hasn't changed and it isn't undefined, we want to check if it's
	                     * been removed by a higher priority
	                     */
	                    markToAnimate(key);
	                }
	                else {
	                    /**
	                     * If it hasn't changed, we add it to the list of protected values
	                     * to ensure it doesn't get animated.
	                     */
	                    typeState.protectedKeys[key] = true;
	                }
	            }
	            /**
	             * Update the typeState so next time animateChanges is called we can compare the
	             * latest prop and resolvedValues to these.
	             */
	            typeState.prevProp = prop;
	            typeState.prevResolvedValues = resolvedValues;
	            /**
	             *
	             */
	            if (typeState.isActive) {
	                encounteredKeys = { ...encounteredKeys, ...resolvedValues };
	            }
	            if (isInitialRender && visualElement.blockInitialAnimation) {
	                shouldAnimateType = false;
	            }
	            /**
	             * If this is an inherited prop we want to skip this animation
	             * unless the inherited variants haven't changed on this render.
	             */
	            const willAnimateViaParent = isInherited && variantDidChange;
	            const needsAnimating = !willAnimateViaParent || handledRemovedValues;
	            if (shouldAnimateType && needsAnimating) {
	                animations.push(...definitionList.map((animation) => ({
	                    animation: animation,
	                    options: { type },
	                })));
	            }
	        }
	        /**
	         * If there are some removed value that haven't been dealt with,
	         * we need to create a new animation that falls back either to the value
	         * defined in the style prop, or the last read value.
	         */
	        if (removedKeys.size) {
	            const fallbackAnimation = {};
	            removedKeys.forEach((key) => {
	                const fallbackTarget = visualElement.getBaseTarget(key);
	                const motionValue = visualElement.getValue(key);
	                if (motionValue)
	                    motionValue.liveStyle = true;
	                // @ts-expect-error - @mattgperry to figure if we should do something here
	                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;
	            });
	            animations.push({ animation: fallbackAnimation });
	        }
	        let shouldAnimate = Boolean(animations.length);
	        if (isInitialRender &&
	            (props.initial === false || props.initial === props.animate) &&
	            !visualElement.manuallyAnimateOnMount) {
	            shouldAnimate = false;
	        }
	        isInitialRender = false;
	        return shouldAnimate ? animate(animations) : Promise.resolve();
	    }
	    /**
	     * Change whether a certain animation type is active.
	     */
	    function setActive(type, isActive) {
	        var _a;
	        // If the active state hasn't changed, we can safely do nothing here
	        if (state[type].isActive === isActive)
	            return Promise.resolve();
	        // Propagate active change to children
	        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });
	        state[type].isActive = isActive;
	        const animations = animateChanges(type);
	        for (const key in state) {
	            state[key].protectedKeys = {};
	        }
	        return animations;
	    }
	    return {
	        animateChanges,
	        setActive,
	        setAnimateFunction,
	        getState: () => state,
	        reset: () => {
	            state = createState();
	            isInitialRender = true;
	        },
	    };
	}
	function checkVariantsDidChange(prev, next) {
	    if (typeof next === "string") {
	        return next !== prev;
	    }
	    else if (Array.isArray(next)) {
	        return !shallowCompare(next, prev);
	    }
	    return false;
	}
	function createTypeState(isActive = false) {
	    return {
	        isActive,
	        protectedKeys: {},
	        needsAnimating: {},
	        prevResolvedValues: {},
	    };
	}
	function createState() {
	    return {
	        animate: createTypeState(true),
	        whileInView: createTypeState(),
	        whileHover: createTypeState(),
	        whileTap: createTypeState(),
	        whileDrag: createTypeState(),
	        whileFocus: createTypeState(),
	        exit: createTypeState(),
	    };
	}

	class Feature {
	    constructor(node) {
	        this.isMounted = false;
	        this.node = node;
	    }
	    update() { }
	}

	class AnimationFeature extends Feature {
	    /**
	     * We dynamically generate the AnimationState manager as it contains a reference
	     * to the underlying animation library. We only want to load that if we load this,
	     * so people can optionally code split it out using the `m` component.
	     */
	    constructor(node) {
	        super(node);
	        node.animationState || (node.animationState = createAnimationState(node));
	    }
	    updateAnimationControlsSubscription() {
	        const { animate } = this.node.getProps();
	        if (isAnimationControls(animate)) {
	            this.unmountControls = animate.subscribe(this.node);
	        }
	    }
	    /**
	     * Subscribe any provided AnimationControls to the component's VisualElement
	     */
	    mount() {
	        this.updateAnimationControlsSubscription();
	    }
	    update() {
	        const { animate } = this.node.getProps();
	        const { animate: prevAnimate } = this.node.prevProps || {};
	        if (animate !== prevAnimate) {
	            this.updateAnimationControlsSubscription();
	        }
	    }
	    unmount() {
	        var _a;
	        this.node.animationState.reset();
	        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);
	    }
	}

	let id$1 = 0;
	class ExitAnimationFeature extends Feature {
	    constructor() {
	        super(...arguments);
	        this.id = id$1++;
	    }
	    update() {
	        if (!this.node.presenceContext)
	            return;
	        const { isPresent, onExitComplete } = this.node.presenceContext;
	        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
	        if (!this.node.animationState || isPresent === prevIsPresent) {
	            return;
	        }
	        const exitAnimation = this.node.animationState.setActive("exit", !isPresent);
	        if (onExitComplete && !isPresent) {
	            exitAnimation.then(() => onExitComplete(this.id));
	        }
	    }
	    mount() {
	        const { register } = this.node.presenceContext || {};
	        if (register) {
	            this.unmount = register(this.id);
	        }
	    }
	    unmount() { }
	}

	const animations = {
	    animation: {
	        Feature: AnimationFeature,
	    },
	    exit: {
	        Feature: ExitAnimationFeature,
	    },
	};

	const isDragging = {
	    x: false,
	    y: false,
	};
	function isDragActive() {
	    return isDragging.x || isDragging.y;
	}

	function resolveElements(elementOrSelector, scope, selectorCache) {
	    var _a;
	    if (elementOrSelector instanceof Element) {
	        return [elementOrSelector];
	    }
	    else if (typeof elementOrSelector === "string") {
	        let root = document;
	        if (scope) {
	            // TODO: Refactor to utils package
	            // invariant(
	            //     Boolean(scope.current),
	            //     "Scope provided, but no element detected."
	            // )
	            root = scope.current;
	        }
	        const elements = (_a = selectorCache === null || selectorCache === void 0 ? void 0 : selectorCache[elementOrSelector]) !== null && _a !== void 0 ? _a : root.querySelectorAll(elementOrSelector);
	        return elements ? Array.from(elements) : [];
	    }
	    return Array.from(elementOrSelector);
	}

	function setupGesture(elementOrSelector, options) {
	    const elements = resolveElements(elementOrSelector);
	    const gestureAbortController = new AbortController();
	    const eventOptions = {
	        passive: true,
	        ...options,
	        signal: gestureAbortController.signal,
	    };
	    const cancel = () => gestureAbortController.abort();
	    return [elements, eventOptions, cancel];
	}

	/**
	 * Filter out events that are not pointer events, or are triggering
	 * while a Motion gesture is active.
	 */
	function filterEvents$1(callback) {
	    return (event) => {
	        if (event.pointerType === "touch" || isDragActive())
	            return;
	        callback(event);
	    };
	}
	/**
	 * Create a hover gesture. hover() is different to .addEventListener("pointerenter")
	 * in that it has an easier syntax, filters out polyfilled touch events, interoperates
	 * with drag gestures, and automatically removes the "pointerennd" event listener when the hover ends.
	 *
	 * @public
	 */
	function hover(elementOrSelector, onHoverStart, options = {}) {
	    const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);
	    const onPointerEnter = filterEvents$1((enterEvent) => {
	        const { target } = enterEvent;
	        const onHoverEnd = onHoverStart(enterEvent);
	        if (!onHoverEnd || !target)
	            return;
	        const onPointerLeave = filterEvents$1((leaveEvent) => {
	            onHoverEnd(leaveEvent);
	            target.removeEventListener("pointerleave", onPointerLeave);
	        });
	        target.addEventListener("pointerleave", onPointerLeave, eventOptions);
	    });
	    elements.forEach((element) => {
	        element.addEventListener("pointerenter", onPointerEnter, eventOptions);
	    });
	    return cancel;
	}

	const isPrimaryPointer = (event) => {
	    if (event.pointerType === "mouse") {
	        return typeof event.button !== "number" || event.button <= 0;
	    }
	    else {
	        /**
	         * isPrimary is true for all mice buttons, whereas every touch point
	         * is regarded as its own input. So subsequent concurrent touch points
	         * will be false.
	         *
	         * Specifically match against false here as incomplete versions of
	         * PointerEvents in very old browser might have it set as undefined.
	         */
	        return event.isPrimary !== false;
	    }
	};

	const isPressing = new WeakSet();

	/**
	 * Filter out events that are not "Enter" keys.
	 */
	function filterEvents(callback) {
	    return (event) => {
	        if (event.key !== "Enter")
	            return;
	        callback(event);
	    };
	}
	function firePointerEvent(target, type) {
	    target.dispatchEvent(new PointerEvent("pointer" + type, { isPrimary: true, bubbles: true }));
	}
	const enableKeyboardPress = (focusEvent, eventOptions) => {
	    const element = focusEvent.currentTarget;
	    if (!element)
	        return;
	    const handleKeydown = filterEvents(() => {
	        if (isPressing.has(element))
	            return;
	        firePointerEvent(element, "down");
	        const handleKeyup = filterEvents(() => {
	            firePointerEvent(element, "up");
	        });
	        const handleBlur = () => firePointerEvent(element, "cancel");
	        element.addEventListener("keyup", handleKeyup, eventOptions);
	        element.addEventListener("blur", handleBlur, eventOptions);
	    });
	    element.addEventListener("keydown", handleKeydown, eventOptions);
	    /**
	     * Add an event listener that fires on blur to remove the keydown events.
	     */
	    element.addEventListener("blur", () => element.removeEventListener("keydown", handleKeydown), eventOptions);
	};

	const focusableElements = new Set([
	    "BUTTON",
	    "INPUT",
	    "SELECT",
	    "TEXTAREA",
	    "A",
	]);
	function isElementKeyboardAccessible(element) {
	    return focusableElements.has(element.tagName) || element.tabIndex !== -1;
	}

	/**
	 * Recursively traverse up the tree to check whether the provided child node
	 * is the parent or a descendant of it.
	 *
	 * @param parent - Element to find
	 * @param child - Element to test against parent
	 */
	const isNodeOrChild = (parent, child) => {
	    if (!child) {
	        return false;
	    }
	    else if (parent === child) {
	        return true;
	    }
	    else {
	        return isNodeOrChild(parent, child.parentElement);
	    }
	};

	/**
	 * Filter out events that are not primary pointer events, or are triggering
	 * while a Motion gesture is active.
	 */
	function isValidPressEvent(event) {
	    return isPrimaryPointer(event) && !isDragActive();
	}
	/**
	 * Create a press gesture.
	 *
	 * Press is different to `"pointerdown"`, `"pointerup"` in that it
	 * automatically filters out secondary pointer events like right
	 * click and multitouch.
	 *
	 * It also adds accessibility support for keyboards, where
	 * an element with a press gesture will receive focus and
	 *  trigger on Enter `"keydown"` and `"keyup"` events.
	 *
	 * This is different to a browser's `"click"` event, which does
	 * respond to keyboards but only for the `"click"` itself, rather
	 * than the press start and end/cancel. The element also needs
	 * to be focusable for this to work, whereas a press gesture will
	 * make an element focusable by default.
	 *
	 * @public
	 */
	function press(elementOrSelector, onPressStart, options = {}) {
	    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);
	    const startPress = (startEvent) => {
	        const element = startEvent.currentTarget;
	        if (!isValidPressEvent(startEvent) || isPressing.has(element))
	            return;
	        isPressing.add(element);
	        const onPressEnd = onPressStart(startEvent);
	        const onPointerEnd = (endEvent, success) => {
	            window.removeEventListener("pointerup", onPointerUp);
	            window.removeEventListener("pointercancel", onPointerCancel);
	            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {
	                return;
	            }
	            isPressing.delete(element);
	            if (onPressEnd) {
	                onPressEnd(endEvent, { success });
	            }
	        };
	        const onPointerUp = (upEvent) => {
	            onPointerEnd(upEvent, options.useGlobalTarget ||
	                isNodeOrChild(element, upEvent.target));
	        };
	        const onPointerCancel = (cancelEvent) => {
	            onPointerEnd(cancelEvent, false);
	        };
	        window.addEventListener("pointerup", onPointerUp, eventOptions);
	        window.addEventListener("pointercancel", onPointerCancel, eventOptions);
	    };
	    elements.forEach((element) => {
	        if (!isElementKeyboardAccessible(element)) {
	            element.tabIndex = 0;
	        }
	        const target = options.useGlobalTarget ? window : element;
	        target.addEventListener("pointerdown", startPress, eventOptions);
	        element.addEventListener("focus", (event) => enableKeyboardPress(event, eventOptions), eventOptions);
	    });
	    return cancelEvents;
	}

	function setDragLock(axis) {
	    if (axis === "x" || axis === "y") {
	        if (isDragging[axis]) {
	            return null;
	        }
	        else {
	            isDragging[axis] = true;
	            return () => {
	                isDragging[axis] = false;
	            };
	        }
	    }
	    else {
	        if (isDragging.x || isDragging.y) {
	            return null;
	        }
	        else {
	            isDragging.x = isDragging.y = true;
	            return () => {
	                isDragging.x = isDragging.y = false;
	            };
	        }
	    }
	}

	function extractEventInfo(event) {
	    return {
	        point: {
	            x: event.pageX,
	            y: event.pageY,
	        },
	    };
	}
	const addPointerInfo = (handler) => {
	    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
	};

	function addDomEvent(target, eventName, handler, options = { passive: true }) {
	    target.addEventListener(eventName, handler, options);
	    return () => target.removeEventListener(eventName, handler);
	}

	function addPointerEvent(target, eventName, handler, options) {
	    return addDomEvent(target, eventName, addPointerInfo(handler), options);
	}

	const distance = (a, b) => Math.abs(a - b);
	function distance2D(a, b) {
	    // Multi-dimensional
	    const xDelta = distance(a.x, b.x);
	    const yDelta = distance(a.y, b.y);
	    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
	}

	/**
	 * @internal
	 */
	class PanSession {
	    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {
	        /**
	         * @internal
	         */
	        this.startEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEventInfo = null;
	        /**
	         * @internal
	         */
	        this.handlers = {};
	        /**
	         * @internal
	         */
	        this.contextWindow = window;
	        this.updatePoint = () => {
	            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
	                return;
	            const info = getPanInfo(this.lastMoveEventInfo, this.history);
	            const isPanStarted = this.startEvent !== null;
	            // Only start panning if the offset is larger than 3 pixels. If we make it
	            // any larger than this we'll want to reset the pointer history
	            // on the first update to avoid visual snapping to the cursoe.
	            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;
	            if (!isPanStarted && !isDistancePastThreshold)
	                return;
	            const { point } = info;
	            const { timestamp } = frameData;
	            this.history.push({ ...point, timestamp });
	            const { onStart, onMove } = this.handlers;
	            if (!isPanStarted) {
	                onStart && onStart(this.lastMoveEvent, info);
	                this.startEvent = this.lastMoveEvent;
	            }
	            onMove && onMove(this.lastMoveEvent, info);
	        };
	        this.handlePointerMove = (event, info) => {
	            this.lastMoveEvent = event;
	            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);
	            // Throttle mouse move event to once per frame
	            frame.update(this.updatePoint, true);
	        };
	        this.handlePointerUp = (event, info) => {
	            this.end();
	            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
	            if (this.dragSnapToOrigin)
	                resumeAnimation && resumeAnimation();
	            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
	                return;
	            const panInfo = getPanInfo(event.type === "pointercancel"
	                ? this.lastMoveEventInfo
	                : transformPoint(info, this.transformPagePoint), this.history);
	            if (this.startEvent && onEnd) {
	                onEnd(event, panInfo);
	            }
	            onSessionEnd && onSessionEnd(event, panInfo);
	        };
	        // If we have more than one touch, don't start detecting this gesture
	        if (!isPrimaryPointer(event))
	            return;
	        this.dragSnapToOrigin = dragSnapToOrigin;
	        this.handlers = handlers;
	        this.transformPagePoint = transformPagePoint;
	        this.contextWindow = contextWindow || window;
	        const info = extractEventInfo(event);
	        const initialInfo = transformPoint(info, this.transformPagePoint);
	        const { point } = initialInfo;
	        const { timestamp } = frameData;
	        this.history = [{ ...point, timestamp }];
	        const { onSessionStart } = handlers;
	        onSessionStart &&
	            onSessionStart(event, getPanInfo(initialInfo, this.history));
	        this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
	    }
	    updateHandlers(handlers) {
	        this.handlers = handlers;
	    }
	    end() {
	        this.removeListeners && this.removeListeners();
	        cancelFrame(this.updatePoint);
	    }
	}
	function transformPoint(info, transformPagePoint) {
	    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
	}
	function subtractPoint(a, b) {
	    return { x: a.x - b.x, y: a.y - b.y };
	}
	function getPanInfo({ point }, history) {
	    return {
	        point,
	        delta: subtractPoint(point, lastDevicePoint(history)),
	        offset: subtractPoint(point, startDevicePoint(history)),
	        velocity: getVelocity(history, 0.1),
	    };
	}
	function startDevicePoint(history) {
	    return history[0];
	}
	function lastDevicePoint(history) {
	    return history[history.length - 1];
	}
	function getVelocity(history, timeDelta) {
	    if (history.length < 2) {
	        return { x: 0, y: 0 };
	    }
	    let i = history.length - 1;
	    let timestampedPoint = null;
	    const lastPoint = lastDevicePoint(history);
	    while (i >= 0) {
	        timestampedPoint = history[i];
	        if (lastPoint.timestamp - timestampedPoint.timestamp >
	            secondsToMilliseconds(timeDelta)) {
	            break;
	        }
	        i--;
	    }
	    if (!timestampedPoint) {
	        return { x: 0, y: 0 };
	    }
	    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
	    if (time === 0) {
	        return { x: 0, y: 0 };
	    }
	    const currentVelocity = {
	        x: (lastPoint.x - timestampedPoint.x) / time,
	        y: (lastPoint.y - timestampedPoint.y) / time,
	    };
	    if (currentVelocity.x === Infinity) {
	        currentVelocity.x = 0;
	    }
	    if (currentVelocity.y === Infinity) {
	        currentVelocity.y = 0;
	    }
	    return currentVelocity;
	}

	function isRefObject(ref) {
	    return (ref &&
	        typeof ref === "object" &&
	        Object.prototype.hasOwnProperty.call(ref, "current"));
	}

	const SCALE_PRECISION = 0.0001;
	const SCALE_MIN = 1 - SCALE_PRECISION;
	const SCALE_MAX = 1 + SCALE_PRECISION;
	const TRANSLATE_PRECISION = 0.01;
	const TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
	const TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
	function calcLength(axis) {
	    return axis.max - axis.min;
	}
	function isNear(value, target, maxDistance) {
	    return Math.abs(value - target) <= maxDistance;
	}
	function calcAxisDelta(delta, source, target, origin = 0.5) {
	    delta.origin = origin;
	    delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);
	    delta.scale = calcLength(target) / calcLength(source);
	    delta.translate =
	        mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;
	    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||
	        isNaN(delta.scale)) {
	        delta.scale = 1.0;
	    }
	    if ((delta.translate >= TRANSLATE_MIN &&
	        delta.translate <= TRANSLATE_MAX) ||
	        isNaN(delta.translate)) {
	        delta.translate = 0.0;
	    }
	}
	function calcBoxDelta(delta, source, target, origin) {
	    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);
	    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);
	}
	function calcRelativeAxis(target, relative, parent) {
	    target.min = parent.min + relative.min;
	    target.max = target.min + calcLength(relative);
	}
	function calcRelativeBox(target, relative, parent) {
	    calcRelativeAxis(target.x, relative.x, parent.x);
	    calcRelativeAxis(target.y, relative.y, parent.y);
	}
	function calcRelativeAxisPosition(target, layout, parent) {
	    target.min = layout.min - parent.min;
	    target.max = target.min + calcLength(layout);
	}
	function calcRelativePosition(target, layout, parent) {
	    calcRelativeAxisPosition(target.x, layout.x, parent.x);
	    calcRelativeAxisPosition(target.y, layout.y, parent.y);
	}

	/**
	 * Apply constraints to a point. These constraints are both physical along an
	 * axis, and an elastic factor that determines how much to constrain the point
	 * by if it does lie outside the defined parameters.
	 */
	function applyConstraints(point, { min, max }, elastic) {
	    if (min !== undefined && point < min) {
	        // If we have a min point defined, and this is outside of that, constrain
	        point = elastic
	            ? mixNumber$1(min, point, elastic.min)
	            : Math.max(point, min);
	    }
	    else if (max !== undefined && point > max) {
	        // If we have a max point defined, and this is outside of that, constrain
	        point = elastic
	            ? mixNumber$1(max, point, elastic.max)
	            : Math.min(point, max);
	    }
	    return point;
	}
	/**
	 * Calculate constraints in terms of the viewport when defined relatively to the
	 * measured axis. This is measured from the nearest edge, so a max constraint of 200
	 * on an axis with a max value of 300 would return a constraint of 500 - axis length
	 */
	function calcRelativeAxisConstraints(axis, min, max) {
	    return {
	        min: min !== undefined ? axis.min + min : undefined,
	        max: max !== undefined
	            ? axis.max + max - (axis.max - axis.min)
	            : undefined,
	    };
	}
	/**
	 * Calculate constraints in terms of the viewport when
	 * defined relatively to the measured bounding box.
	 */
	function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
	    return {
	        x: calcRelativeAxisConstraints(layoutBox.x, left, right),
	        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),
	    };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative axis
	 */
	function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
	    let min = constraintsAxis.min - layoutAxis.min;
	    let max = constraintsAxis.max - layoutAxis.max;
	    // If the constraints axis is actually smaller than the layout axis then we can
	    // flip the constraints
	    if (constraintsAxis.max - constraintsAxis.min <
	        layoutAxis.max - layoutAxis.min) {
	        [min, max] = [max, min];
	    }
	    return { min, max };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative box
	 */
	function calcViewportConstraints(layoutBox, constraintsBox) {
	    return {
	        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
	        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),
	    };
	}
	/**
	 * Calculate a transform origin relative to the source axis, between 0-1, that results
	 * in an asthetically pleasing scale/transform needed to project from source to target.
	 */
	function calcOrigin$1(source, target) {
	    let origin = 0.5;
	    const sourceLength = calcLength(source);
	    const targetLength = calcLength(target);
	    if (targetLength > sourceLength) {
	        origin = progress(target.min, target.max - sourceLength, source.min);
	    }
	    else if (sourceLength > targetLength) {
	        origin = progress(source.min, source.max - targetLength, target.min);
	    }
	    return clamp(0, 1, origin);
	}
	/**
	 * Rebase the calculated viewport constraints relative to the layout.min point.
	 */
	function rebaseAxisConstraints(layout, constraints) {
	    const relativeConstraints = {};
	    if (constraints.min !== undefined) {
	        relativeConstraints.min = constraints.min - layout.min;
	    }
	    if (constraints.max !== undefined) {
	        relativeConstraints.max = constraints.max - layout.min;
	    }
	    return relativeConstraints;
	}
	const defaultElastic = 0.35;
	/**
	 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
	 */
	function resolveDragElastic(dragElastic = defaultElastic) {
	    if (dragElastic === false) {
	        dragElastic = 0;
	    }
	    else if (dragElastic === true) {
	        dragElastic = defaultElastic;
	    }
	    return {
	        x: resolveAxisElastic(dragElastic, "left", "right"),
	        y: resolveAxisElastic(dragElastic, "top", "bottom"),
	    };
	}
	function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
	    return {
	        min: resolvePointElastic(dragElastic, minLabel),
	        max: resolvePointElastic(dragElastic, maxLabel),
	    };
	}
	function resolvePointElastic(dragElastic, label) {
	    return typeof dragElastic === "number"
	        ? dragElastic
	        : dragElastic[label] || 0;
	}

	const createAxisDelta = () => ({
	    translate: 0,
	    scale: 1,
	    origin: 0,
	    originPoint: 0,
	});
	const createDelta = () => ({
	    x: createAxisDelta(),
	    y: createAxisDelta(),
	});
	const createAxis = () => ({ min: 0, max: 0 });
	const createBox = () => ({
	    x: createAxis(),
	    y: createAxis(),
	});

	function eachAxis(callback) {
	    return [callback("x"), callback("y")];
	}

	/**
	 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
	 * it's easier to consider each axis individually. This function returns a bounding box
	 * as a map of single-axis min/max values.
	 */
	function convertBoundingBoxToBox({ top, left, right, bottom, }) {
	    return {
	        x: { min: left, max: right },
	        y: { min: top, max: bottom },
	    };
	}
	function convertBoxToBoundingBox({ x, y }) {
	    return { top: y.min, right: x.max, bottom: y.max, left: x.min };
	}
	/**
	 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
	 * provided by Framer to allow measured points to be corrected for device scaling. This is used
	 * when measuring DOM elements and DOM event points.
	 */
	function transformBoxPoints(point, transformPoint) {
	    if (!transformPoint)
	        return point;
	    const topLeft = transformPoint({ x: point.left, y: point.top });
	    const bottomRight = transformPoint({ x: point.right, y: point.bottom });
	    return {
	        top: topLeft.y,
	        left: topLeft.x,
	        bottom: bottomRight.y,
	        right: bottomRight.x,
	    };
	}

	function isIdentityScale(scale) {
	    return scale === undefined || scale === 1;
	}
	function hasScale({ scale, scaleX, scaleY }) {
	    return (!isIdentityScale(scale) ||
	        !isIdentityScale(scaleX) ||
	        !isIdentityScale(scaleY));
	}
	function hasTransform(values) {
	    return (hasScale(values) ||
	        has2DTranslate(values) ||
	        values.z ||
	        values.rotate ||
	        values.rotateX ||
	        values.rotateY ||
	        values.skewX ||
	        values.skewY);
	}
	function has2DTranslate(values) {
	    return is2DTranslate(values.x) || is2DTranslate(values.y);
	}
	function is2DTranslate(value) {
	    return value && value !== "0%";
	}

	/**
	 * Scales a point based on a factor and an originPoint
	 */
	function scalePoint(point, scale, originPoint) {
	    const distanceFromOrigin = point - originPoint;
	    const scaled = scale * distanceFromOrigin;
	    return originPoint + scaled;
	}
	/**
	 * Applies a translate/scale delta to a point
	 */
	function applyPointDelta(point, translate, scale, originPoint, boxScale) {
	    if (boxScale !== undefined) {
	        point = scalePoint(point, boxScale, originPoint);
	    }
	    return scalePoint(point, scale, originPoint) + translate;
	}
	/**
	 * Applies a translate/scale delta to an axis
	 */
	function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {
	    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Applies a translate/scale delta to a box
	 */
	function applyBoxDelta(box, { x, y }) {
	    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
	    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
	}
	const TREE_SCALE_SNAP_MIN = 0.999999999999;
	const TREE_SCALE_SNAP_MAX = 1.0000000000001;
	/**
	 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
	 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
	 *
	 * This is the final nested loop within updateLayoutDelta for future refactoring
	 */
	function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
	    const treeLength = treePath.length;
	    if (!treeLength)
	        return;
	    // Reset the treeScale
	    treeScale.x = treeScale.y = 1;
	    let node;
	    let delta;
	    for (let i = 0; i < treeLength; i++) {
	        node = treePath[i];
	        delta = node.projectionDelta;
	        /**
	         * TODO: Prefer to remove this, but currently we have motion components with
	         * display: contents in Framer.
	         */
	        const { visualElement } = node.options;
	        if (visualElement &&
	            visualElement.props.style &&
	            visualElement.props.style.display === "contents") {
	            continue;
	        }
	        if (isSharedTransition &&
	            node.options.layoutScroll &&
	            node.scroll &&
	            node !== node.root) {
	            transformBox(box, {
	                x: -node.scroll.offset.x,
	                y: -node.scroll.offset.y,
	            });
	        }
	        if (delta) {
	            // Incoporate each ancestor's scale into a culmulative treeScale for this component
	            treeScale.x *= delta.x.scale;
	            treeScale.y *= delta.y.scale;
	            // Apply each ancestor's calculated delta into this component's recorded layout box
	            applyBoxDelta(box, delta);
	        }
	        if (isSharedTransition && hasTransform(node.latestValues)) {
	            transformBox(box, node.latestValues);
	        }
	    }
	    /**
	     * Snap tree scale back to 1 if it's within a non-perceivable threshold.
	     * This will help reduce useless scales getting rendered.
	     */
	    if (treeScale.x < TREE_SCALE_SNAP_MAX &&
	        treeScale.x > TREE_SCALE_SNAP_MIN) {
	        treeScale.x = 1.0;
	    }
	    if (treeScale.y < TREE_SCALE_SNAP_MAX &&
	        treeScale.y > TREE_SCALE_SNAP_MIN) {
	        treeScale.y = 1.0;
	    }
	}
	function translateAxis(axis, distance) {
	    axis.min = axis.min + distance;
	    axis.max = axis.max + distance;
	}
	/**
	 * Apply a transform to an axis from the latest resolved motion values.
	 * This function basically acts as a bridge between a flat motion value map
	 * and applyAxisDelta
	 */
	function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {
	    const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);
	    // Apply the axis delta to the final axis
	    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);
	}
	/**
	 * Apply a transform to a box from the latest resolved motion values.
	 */
	function transformBox(box, transform) {
	    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);
	    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);
	}

	function measureViewportBox(instance, transformPoint) {
	    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));
	}
	function measurePageBox(element, rootProjectionNode, transformPagePoint) {
	    const viewportBox = measureViewportBox(element, transformPagePoint);
	    const { scroll } = rootProjectionNode;
	    if (scroll) {
	        translateAxis(viewportBox.x, scroll.offset.x);
	        translateAxis(viewportBox.y, scroll.offset.y);
	    }
	    return viewportBox;
	}

	// Fixes https://github.com/motiondivision/motion/issues/2270
	const getContextWindow = ({ current }) => {
	    return current ? current.ownerDocument.defaultView : null;
	};

	const elementDragControls = new WeakMap();
	/**
	 *
	 */
	// let latestPointerEvent: PointerEvent
	class VisualElementDragControls {
	    constructor(visualElement) {
	        this.openDragLock = null;
	        this.isDragging = false;
	        this.currentDirection = null;
	        this.originPoint = { x: 0, y: 0 };
	        /**
	         * The permitted boundaries of travel, in pixels.
	         */
	        this.constraints = false;
	        this.hasMutatedConstraints = false;
	        /**
	         * The per-axis resolved elastic values.
	         */
	        this.elastic = createBox();
	        this.visualElement = visualElement;
	    }
	    start(originEvent, { snapToCursor = false } = {}) {
	        /**
	         * Don't start dragging if this component is exiting
	         */
	        const { presenceContext } = this.visualElement;
	        if (presenceContext && presenceContext.isPresent === false)
	            return;
	        const onSessionStart = (event) => {
	            const { dragSnapToOrigin } = this.getProps();
	            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch
	            // the component.
	            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();
	            if (snapToCursor) {
	                this.snapToCursor(extractEventInfo(event).point);
	            }
	        };
	        const onStart = (event, info) => {
	            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
	            const { drag, dragPropagation, onDragStart } = this.getProps();
	            if (drag && !dragPropagation) {
	                if (this.openDragLock)
	                    this.openDragLock();
	                this.openDragLock = setDragLock(drag);
	                // If we don 't have the lock, don't start dragging
	                if (!this.openDragLock)
	                    return;
	            }
	            this.isDragging = true;
	            this.currentDirection = null;
	            this.resolveConstraints();
	            if (this.visualElement.projection) {
	                this.visualElement.projection.isAnimationBlocked = true;
	                this.visualElement.projection.target = undefined;
	            }
	            /**
	             * Record gesture origin
	             */
	            eachAxis((axis) => {
	                let current = this.getAxisMotionValue(axis).get() || 0;
	                /**
	                 * If the MotionValue is a percentage value convert to px
	                 */
	                if (percent.test(current)) {
	                    const { projection } = this.visualElement;
	                    if (projection && projection.layout) {
	                        const measuredAxis = projection.layout.layoutBox[axis];
	                        if (measuredAxis) {
	                            const length = calcLength(measuredAxis);
	                            current = length * (parseFloat(current) / 100);
	                        }
	                    }
	                }
	                this.originPoint[axis] = current;
	            });
	            // Fire onDragStart event
	            if (onDragStart) {
	                frame.postRender(() => onDragStart(event, info));
	            }
	            addValueToWillChange(this.visualElement, "transform");
	            const { animationState } = this.visualElement;
	            animationState && animationState.setActive("whileDrag", true);
	        };
	        const onMove = (event, info) => {
	            // latestPointerEvent = event
	            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();
	            // If we didn't successfully receive the gesture lock, early return.
	            if (!dragPropagation && !this.openDragLock)
	                return;
	            const { offset } = info;
	            // Attempt to detect drag direction if directionLock is true
	            if (dragDirectionLock && this.currentDirection === null) {
	                this.currentDirection = getCurrentDirection(offset);
	                // If we've successfully set a direction, notify listener
	                if (this.currentDirection !== null) {
	                    onDirectionLock && onDirectionLock(this.currentDirection);
	                }
	                return;
	            }
	            // Update each point with the latest position
	            this.updateAxis("x", info.point, offset);
	            this.updateAxis("y", info.point, offset);
	            /**
	             * Ideally we would leave the renderer to fire naturally at the end of
	             * this frame but if the element is about to change layout as the result
	             * of a re-render we want to ensure the browser can read the latest
	             * bounding box to ensure the pointer and element don't fall out of sync.
	             */
	            this.visualElement.render();
	            /**
	             * This must fire after the render call as it might trigger a state
	             * change which itself might trigger a layout update.
	             */
	            onDrag && onDrag(event, info);
	        };
	        const onSessionEnd = (event, info) => this.stop(event, info);
	        const resumeAnimation = () => eachAxis((axis) => {
	            var _a;
	            return this.getAnimationState(axis) === "paused" &&
	                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());
	        });
	        const { dragSnapToOrigin } = this.getProps();
	        this.panSession = new PanSession(originEvent, {
	            onSessionStart,
	            onStart,
	            onMove,
	            onSessionEnd,
	            resumeAnimation,
	        }, {
	            transformPagePoint: this.visualElement.getTransformPagePoint(),
	            dragSnapToOrigin,
	            contextWindow: getContextWindow(this.visualElement),
	        });
	    }
	    stop(event, info) {
	        const isDragging = this.isDragging;
	        this.cancel();
	        if (!isDragging)
	            return;
	        const { velocity } = info;
	        this.startAnimation(velocity);
	        const { onDragEnd } = this.getProps();
	        if (onDragEnd) {
	            frame.postRender(() => onDragEnd(event, info));
	        }
	    }
	    cancel() {
	        this.isDragging = false;
	        const { projection, animationState } = this.visualElement;
	        if (projection) {
	            projection.isAnimationBlocked = false;
	        }
	        this.panSession && this.panSession.end();
	        this.panSession = undefined;
	        const { dragPropagation } = this.getProps();
	        if (!dragPropagation && this.openDragLock) {
	            this.openDragLock();
	            this.openDragLock = null;
	        }
	        animationState && animationState.setActive("whileDrag", false);
	    }
	    updateAxis(axis, _point, offset) {
	        const { drag } = this.getProps();
	        // If we're not dragging this axis, do an early return.
	        if (!offset || !shouldDrag(axis, drag, this.currentDirection))
	            return;
	        const axisValue = this.getAxisMotionValue(axis);
	        let next = this.originPoint[axis] + offset[axis];
	        // Apply constraints
	        if (this.constraints && this.constraints[axis]) {
	            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
	        }
	        axisValue.set(next);
	    }
	    resolveConstraints() {
	        var _a;
	        const { dragConstraints, dragElastic } = this.getProps();
	        const layout = this.visualElement.projection &&
	            !this.visualElement.projection.layout
	            ? this.visualElement.projection.measure(false)
	            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;
	        const prevConstraints = this.constraints;
	        if (dragConstraints && isRefObject(dragConstraints)) {
	            if (!this.constraints) {
	                this.constraints = this.resolveRefConstraints();
	            }
	        }
	        else {
	            if (dragConstraints && layout) {
	                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);
	            }
	            else {
	                this.constraints = false;
	            }
	        }
	        this.elastic = resolveDragElastic(dragElastic);
	        /**
	         * If we're outputting to external MotionValues, we want to rebase the measured constraints
	         * from viewport-relative to component-relative.
	         */
	        if (prevConstraints !== this.constraints &&
	            layout &&
	            this.constraints &&
	            !this.hasMutatedConstraints) {
	            eachAxis((axis) => {
	                if (this.constraints !== false &&
	                    this.getAxisMotionValue(axis)) {
	                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);
	                }
	            });
	        }
	    }
	    resolveRefConstraints() {
	        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
	        if (!constraints || !isRefObject(constraints))
	            return false;
	        const constraintsElement = constraints.current;
	        invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
	        const { projection } = this.visualElement;
	        // TODO
	        if (!projection || !projection.layout)
	            return false;
	        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
	        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
	        /**
	         * If there's an onMeasureDragConstraints listener we call it and
	         * if different constraints are returned, set constraints to that
	         */
	        if (onMeasureDragConstraints) {
	            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
	            this.hasMutatedConstraints = !!userConstraints;
	            if (userConstraints) {
	                measuredConstraints = convertBoundingBoxToBox(userConstraints);
	            }
	        }
	        return measuredConstraints;
	    }
	    startAnimation(velocity) {
	        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();
	        const constraints = this.constraints || {};
	        const momentumAnimations = eachAxis((axis) => {
	            if (!shouldDrag(axis, drag, this.currentDirection)) {
	                return;
	            }
	            let transition = (constraints && constraints[axis]) || {};
	            if (dragSnapToOrigin)
	                transition = { min: 0, max: 0 };
	            /**
	             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
	             * of spring animations so we should look into adding a disable spring option to `inertia`.
	             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
	             * using the value of `dragElastic`.
	             */
	            const bounceStiffness = dragElastic ? 200 : 1000000;
	            const bounceDamping = dragElastic ? 40 : 10000000;
	            const inertia = {
	                type: "inertia",
	                velocity: dragMomentum ? velocity[axis] : 0,
	                bounceStiffness,
	                bounceDamping,
	                timeConstant: 750,
	                restDelta: 1,
	                restSpeed: 10,
	                ...dragTransition,
	                ...transition,
	            };
	            // If we're not animating on an externally-provided `MotionValue` we can use the
	            // component's animation controls which will handle interactions with whileHover (etc),
	            // otherwise we just have to animate the `MotionValue` itself.
	            return this.startAxisValueAnimation(axis, inertia);
	        });
	        // Run all animations and then resolve the new drag constraints.
	        return Promise.all(momentumAnimations).then(onDragTransitionEnd);
	    }
	    startAxisValueAnimation(axis, transition) {
	        const axisValue = this.getAxisMotionValue(axis);
	        addValueToWillChange(this.visualElement, axis);
	        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));
	    }
	    stopAnimation() {
	        eachAxis((axis) => this.getAxisMotionValue(axis).stop());
	    }
	    pauseAnimation() {
	        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });
	    }
	    getAnimationState(axis) {
	        var _a;
	        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;
	    }
	    /**
	     * Drag works differently depending on which props are provided.
	     *
	     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
	     * - Otherwise, we apply the delta to the x/y motion values.
	     */
	    getAxisMotionValue(axis) {
	        const dragKey = `_drag${axis.toUpperCase()}`;
	        const props = this.visualElement.getProps();
	        const externalMotionValue = props[dragKey];
	        return externalMotionValue
	            ? externalMotionValue
	            : this.visualElement.getValue(axis, (props.initial
	                ? props.initial[axis]
	                : undefined) || 0);
	    }
	    snapToCursor(point) {
	        eachAxis((axis) => {
	            const { drag } = this.getProps();
	            // If we're not dragging this axis, do an early return.
	            if (!shouldDrag(axis, drag, this.currentDirection))
	                return;
	            const { projection } = this.visualElement;
	            const axisValue = this.getAxisMotionValue(axis);
	            if (projection && projection.layout) {
	                const { min, max } = projection.layout.layoutBox[axis];
	                axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));
	            }
	        });
	    }
	    /**
	     * When the viewport resizes we want to check if the measured constraints
	     * have changed and, if so, reposition the element within those new constraints
	     * relative to where it was before the resize.
	     */
	    scalePositionWithinConstraints() {
	        if (!this.visualElement.current)
	            return;
	        const { drag, dragConstraints } = this.getProps();
	        const { projection } = this.visualElement;
	        if (!isRefObject(dragConstraints) || !projection || !this.constraints)
	            return;
	        /**
	         * Stop current animations as there can be visual glitching if we try to do
	         * this mid-animation
	         */
	        this.stopAnimation();
	        /**
	         * Record the relative position of the dragged element relative to the
	         * constraints box and save as a progress value.
	         */
	        const boxProgress = { x: 0, y: 0 };
	        eachAxis((axis) => {
	            const axisValue = this.getAxisMotionValue(axis);
	            if (axisValue && this.constraints !== false) {
	                const latest = axisValue.get();
	                boxProgress[axis] = calcOrigin$1({ min: latest, max: latest }, this.constraints[axis]);
	            }
	        });
	        /**
	         * Update the layout of this element and resolve the latest drag constraints
	         */
	        const { transformTemplate } = this.visualElement.getProps();
	        this.visualElement.current.style.transform = transformTemplate
	            ? transformTemplate({}, "")
	            : "none";
	        projection.root && projection.root.updateScroll();
	        projection.updateLayout();
	        this.resolveConstraints();
	        /**
	         * For each axis, calculate the current progress of the layout axis
	         * within the new constraints.
	         */
	        eachAxis((axis) => {
	            if (!shouldDrag(axis, drag, null))
	                return;
	            /**
	             * Calculate a new transform based on the previous box progress
	             */
	            const axisValue = this.getAxisMotionValue(axis);
	            const { min, max } = this.constraints[axis];
	            axisValue.set(mixNumber$1(min, max, boxProgress[axis]));
	        });
	    }
	    addListeners() {
	        if (!this.visualElement.current)
	            return;
	        elementDragControls.set(this.visualElement, this);
	        const element = this.visualElement.current;
	        /**
	         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
	         */
	        const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
	            const { drag, dragListener = true } = this.getProps();
	            drag && dragListener && this.start(event);
	        });
	        const measureDragConstraints = () => {
	            const { dragConstraints } = this.getProps();
	            if (isRefObject(dragConstraints) && dragConstraints.current) {
	                this.constraints = this.resolveRefConstraints();
	            }
	        };
	        const { projection } = this.visualElement;
	        const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
	        if (projection && !projection.layout) {
	            projection.root && projection.root.updateScroll();
	            projection.updateLayout();
	        }
	        frame.read(measureDragConstraints);
	        /**
	         * Attach a window resize listener to scale the draggable target within its defined
	         * constraints as the window resizes.
	         */
	        const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
	        /**
	         * If the element's layout changes, calculate the delta and apply that to
	         * the drag gesture's origin point.
	         */
	        const stopLayoutUpdateListener = projection.addEventListener("didUpdate", (({ delta, hasLayoutChanged }) => {
	            if (this.isDragging && hasLayoutChanged) {
	                eachAxis((axis) => {
	                    const motionValue = this.getAxisMotionValue(axis);
	                    if (!motionValue)
	                        return;
	                    this.originPoint[axis] += delta[axis].translate;
	                    motionValue.set(motionValue.get() + delta[axis].translate);
	                });
	                this.visualElement.render();
	            }
	        }));
	        return () => {
	            stopResizeListener();
	            stopPointerListener();
	            stopMeasureLayoutListener();
	            stopLayoutUpdateListener && stopLayoutUpdateListener();
	        };
	    }
	    getProps() {
	        const props = this.visualElement.getProps();
	        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;
	        return {
	            ...props,
	            drag,
	            dragDirectionLock,
	            dragPropagation,
	            dragConstraints,
	            dragElastic,
	            dragMomentum,
	        };
	    }
	}
	function shouldDrag(direction, drag, currentDirection) {
	    return ((drag === true || drag === direction) &&
	        (currentDirection === null || currentDirection === direction));
	}
	/**
	 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
	 * than the provided threshold, return `null`.
	 *
	 * @param offset - The x/y offset from origin.
	 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
	 */
	function getCurrentDirection(offset, lockThreshold = 10) {
	    let direction = null;
	    if (Math.abs(offset.y) > lockThreshold) {
	        direction = "y";
	    }
	    else if (Math.abs(offset.x) > lockThreshold) {
	        direction = "x";
	    }
	    return direction;
	}

	class DragGesture extends Feature {
	    constructor(node) {
	        super(node);
	        this.removeGroupControls = noop;
	        this.removeListeners = noop;
	        this.controls = new VisualElementDragControls(node);
	    }
	    mount() {
	        // If we've been provided a DragControls for manual control over the drag gesture,
	        // subscribe this component to it on mount.
	        const { dragControls } = this.node.getProps();
	        if (dragControls) {
	            this.removeGroupControls = dragControls.subscribe(this.controls);
	        }
	        this.removeListeners = this.controls.addListeners() || noop;
	    }
	    unmount() {
	        this.removeGroupControls();
	        this.removeListeners();
	    }
	}

	const asyncHandler = (handler) => (event, info) => {
	    if (handler) {
	        frame.postRender(() => handler(event, info));
	    }
	};
	class PanGesture extends Feature {
	    constructor() {
	        super(...arguments);
	        this.removePointerDownListener = noop;
	    }
	    onPointerDown(pointerDownEvent) {
	        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
	            transformPagePoint: this.node.getTransformPagePoint(),
	            contextWindow: getContextWindow(this.node),
	        });
	    }
	    createPanHandlers() {
	        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
	        return {
	            onSessionStart: asyncHandler(onPanSessionStart),
	            onStart: asyncHandler(onPanStart),
	            onMove: onPan,
	            onEnd: (event, info) => {
	                delete this.session;
	                if (onPanEnd) {
	                    frame.postRender(() => onPanEnd(event, info));
	                }
	            },
	        };
	    }
	    mount() {
	        this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
	    }
	    update() {
	        this.session && this.session.updateHandlers(this.createPanHandlers());
	    }
	    unmount() {
	        this.removePointerDownListener();
	        this.session && this.session.end();
	    }
	}

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production_min;

	function requireReactJsxRuntime_production_min () {
		if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
		hasRequiredReactJsxRuntime_production_min = 1;

		var f = requireReact(),
		  k = Symbol.for("react.element"),
		  l = Symbol.for("react.fragment"),
		  m = Object.prototype.hasOwnProperty,
		  n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
		  p = {
		    key: !0,
		    ref: !0,
		    __self: !0,
		    __source: !0
		  };
		function q(c, a, g) {
		  var b,
		    d = {},
		    e = null,
		    h = null;
		  void 0 !== g && (e = "" + g);
		  void 0 !== a.key && (e = "" + a.key);
		  void 0 !== a.ref && (h = a.ref);
		  for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
		  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
		  return {
		    $$typeof: k,
		    type: c,
		    key: e,
		    ref: h,
		    props: d,
		    _owner: n.current
		  };
		}
		reactJsxRuntime_production_min.Fragment = l;
		reactJsxRuntime_production_min.jsx = q;
		reactJsxRuntime_production_min.jsxs = q;
		return reactJsxRuntime_production_min;
	}

	var reactJsxRuntime_development = {};

	/**
	 * @license React
	 * react-jsx-runtime.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_development;

	function requireReactJsxRuntime_development () {
		if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
		hasRequiredReactJsxRuntime_development = 1;

		if (process.env.NODE_ENV !== "production") {
		  (function () {

		    var React = requireReact();

		    // ATTENTION
		    // When adding new symbols to this file,
		    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		    // The Symbol used to tag the ReactElement-like types.
		    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		    var REACT_MEMO_TYPE = Symbol.for('react.memo');
		    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		    var FAUX_ITERATOR_SYMBOL = '@@iterator';
		    function getIteratorFn(maybeIterable) {
		      if (maybeIterable === null || typeof maybeIterable !== 'object') {
		        return null;
		      }
		      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
		      if (typeof maybeIterator === 'function') {
		        return maybeIterator;
		      }
		      return null;
		    }
		    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
		    function error(format) {
		      {
		        {
		          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		            args[_key2 - 1] = arguments[_key2];
		          }
		          printWarning('error', format, args);
		        }
		      }
		    }
		    function printWarning(level, format, args) {
		      // When changing this logic, you might want to also
		      // update consoleWithStackDev.www.js as well.
		      {
		        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		        var stack = ReactDebugCurrentFrame.getStackAddendum();
		        if (stack !== '') {
		          format += '%s';
		          args = args.concat([stack]);
		        } // eslint-disable-next-line react-internal/safe-string-coercion

		        var argsWithFormat = args.map(function (item) {
		          return String(item);
		        }); // Careful: RN currently depends on this prefix

		        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		        // breaks IE9: https://github.com/facebook/react/issues/13610
		        // eslint-disable-next-line react-internal/no-production-logging

		        Function.prototype.apply.call(console[level], console, argsWithFormat);
		      }
		    }

		    // -----------------------------------------------------------------------------

		    var enableScopeAPI = false; // Experimental Create Event Handle API.
		    var enableCacheElement = false;
		    var enableTransitionTracing = false; // No known bugs, but needs performance testing

		    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		    // stuff. Intended to enable React core members to more easily debug scheduling
		    // issues in DEV builds.

		    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		    var REACT_MODULE_REFERENCE;
		    {
		      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		    }
		    function isValidElementType(type) {
		      if (typeof type === 'string' || typeof type === 'function') {
		        return true;
		      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

		      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
		        return true;
		      }
		      if (typeof type === 'object' && type !== null) {
		        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
		        // This needs to include all possible module reference object
		        // types supported by any Flight configuration anywhere since
		        // we don't know which Flight build this will end up being used
		        // with.
		        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		          return true;
		        }
		      }
		      return false;
		    }
		    function getWrappedName(outerType, innerType, wrapperName) {
		      var displayName = outerType.displayName;
		      if (displayName) {
		        return displayName;
		      }
		      var functionName = innerType.displayName || innerType.name || '';
		      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		    } // Keep in sync with react-reconciler/getComponentNameFromFiber

		    function getContextName(type) {
		      return type.displayName || 'Context';
		    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

		    function getComponentNameFromType(type) {
		      if (type == null) {
		        // Host root, text node or just invalid type.
		        return null;
		      }
		      {
		        if (typeof type.tag === 'number') {
		          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		        }
		      }
		      if (typeof type === 'function') {
		        return type.displayName || type.name || null;
		      }
		      if (typeof type === 'string') {
		        return type;
		      }
		      switch (type) {
		        case REACT_FRAGMENT_TYPE:
		          return 'Fragment';
		        case REACT_PORTAL_TYPE:
		          return 'Portal';
		        case REACT_PROFILER_TYPE:
		          return 'Profiler';
		        case REACT_STRICT_MODE_TYPE:
		          return 'StrictMode';
		        case REACT_SUSPENSE_TYPE:
		          return 'Suspense';
		        case REACT_SUSPENSE_LIST_TYPE:
		          return 'SuspenseList';
		      }
		      if (typeof type === 'object') {
		        switch (type.$$typeof) {
		          case REACT_CONTEXT_TYPE:
		            var context = type;
		            return getContextName(context) + '.Consumer';
		          case REACT_PROVIDER_TYPE:
		            var provider = type;
		            return getContextName(provider._context) + '.Provider';
		          case REACT_FORWARD_REF_TYPE:
		            return getWrappedName(type, type.render, 'ForwardRef');
		          case REACT_MEMO_TYPE:
		            var outerName = type.displayName || null;
		            if (outerName !== null) {
		              return outerName;
		            }
		            return getComponentNameFromType(type.type) || 'Memo';
		          case REACT_LAZY_TYPE:
		            {
		              var lazyComponent = type;
		              var payload = lazyComponent._payload;
		              var init = lazyComponent._init;
		              try {
		                return getComponentNameFromType(init(payload));
		              } catch (x) {
		                return null;
		              }
		            }

		          // eslint-disable-next-line no-fallthrough
		        }
		      }
		      return null;
		    }
		    var assign = Object.assign;

		    // Helpers to patch console.logs to avoid logging during side-effect free
		    // replaying on render function. This currently only patches the object
		    // lazily which won't cover if the log function was extracted eagerly.
		    // We could also eagerly patch the method.
		    var disabledDepth = 0;
		    var prevLog;
		    var prevInfo;
		    var prevWarn;
		    var prevError;
		    var prevGroup;
		    var prevGroupCollapsed;
		    var prevGroupEnd;
		    function disabledLog() {}
		    disabledLog.__reactDisabledLog = true;
		    function disableLogs() {
		      {
		        if (disabledDepth === 0) {
		          /* eslint-disable react-internal/no-production-logging */
		          prevLog = console.log;
		          prevInfo = console.info;
		          prevWarn = console.warn;
		          prevError = console.error;
		          prevGroup = console.group;
		          prevGroupCollapsed = console.groupCollapsed;
		          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		          var props = {
		            configurable: true,
		            enumerable: true,
		            value: disabledLog,
		            writable: true
		          }; // $FlowFixMe Flow thinks console is immutable.

		          Object.defineProperties(console, {
		            info: props,
		            log: props,
		            warn: props,
		            error: props,
		            group: props,
		            groupCollapsed: props,
		            groupEnd: props
		          });
		          /* eslint-enable react-internal/no-production-logging */
		        }
		        disabledDepth++;
		      }
		    }
		    function reenableLogs() {
		      {
		        disabledDepth--;
		        if (disabledDepth === 0) {
		          /* eslint-disable react-internal/no-production-logging */
		          var props = {
		            configurable: true,
		            enumerable: true,
		            writable: true
		          }; // $FlowFixMe Flow thinks console is immutable.

		          Object.defineProperties(console, {
		            log: assign({}, props, {
		              value: prevLog
		            }),
		            info: assign({}, props, {
		              value: prevInfo
		            }),
		            warn: assign({}, props, {
		              value: prevWarn
		            }),
		            error: assign({}, props, {
		              value: prevError
		            }),
		            group: assign({}, props, {
		              value: prevGroup
		            }),
		            groupCollapsed: assign({}, props, {
		              value: prevGroupCollapsed
		            }),
		            groupEnd: assign({}, props, {
		              value: prevGroupEnd
		            })
		          });
		          /* eslint-enable react-internal/no-production-logging */
		        }
		        if (disabledDepth < 0) {
		          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		        }
		      }
		    }
		    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
		    var prefix;
		    function describeBuiltInComponentFrame(name, source, ownerFn) {
		      {
		        if (prefix === undefined) {
		          // Extract the VM specific prefix used by each line.
		          try {
		            throw Error();
		          } catch (x) {
		            var match = x.stack.trim().match(/\n( *(at )?)/);
		            prefix = match && match[1] || '';
		          }
		        } // We use the prefix to ensure our stacks line up with native stack frames.

		        return '\n' + prefix + name;
		      }
		    }
		    var reentry = false;
		    var componentFrameCache;
		    {
		      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		      componentFrameCache = new PossiblyWeakMap();
		    }
		    function describeNativeComponentFrame(fn, construct) {
		      // If something asked for a stack inside a fake render, it should get ignored.
		      if (!fn || reentry) {
		        return '';
		      }
		      {
		        var frame = componentFrameCache.get(fn);
		        if (frame !== undefined) {
		          return frame;
		        }
		      }
		      var control;
		      reentry = true;
		      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		      Error.prepareStackTrace = undefined;
		      var previousDispatcher;
		      {
		        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
		        // for warnings.

		        ReactCurrentDispatcher.current = null;
		        disableLogs();
		      }
		      try {
		        // This should throw.
		        if (construct) {
		          // Something should be setting the props in the constructor.
		          var Fake = function () {
		            throw Error();
		          }; // $FlowFixMe

		          Object.defineProperty(Fake.prototype, 'props', {
		            set: function () {
		              // We use a throwing setter instead of frozen or non-writable props
		              // because that won't throw in a non-strict mode function.
		              throw Error();
		            }
		          });
		          if (typeof Reflect === 'object' && Reflect.construct) {
		            // We construct a different control for this case to include any extra
		            // frames added by the construct call.
		            try {
		              Reflect.construct(Fake, []);
		            } catch (x) {
		              control = x;
		            }
		            Reflect.construct(fn, [], Fake);
		          } else {
		            try {
		              Fake.call();
		            } catch (x) {
		              control = x;
		            }
		            fn.call(Fake.prototype);
		          }
		        } else {
		          try {
		            throw Error();
		          } catch (x) {
		            control = x;
		          }
		          fn();
		        }
		      } catch (sample) {
		        // This is inlined manually because closure doesn't do it for us.
		        if (sample && control && typeof sample.stack === 'string') {
		          // This extracts the first frame from the sample that isn't also in the control.
		          // Skipping one frame that we assume is the frame that calls the two.
		          var sampleLines = sample.stack.split('\n');
		          var controlLines = control.stack.split('\n');
		          var s = sampleLines.length - 1;
		          var c = controlLines.length - 1;
		          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		            // We expect at least one stack frame to be shared.
		            // Typically this will be the root most one. However, stack frames may be
		            // cut off due to maximum stack limits. In this case, one maybe cut off
		            // earlier than the other. We assume that the sample is longer or the same
		            // and there for cut off earlier. So we should find the root most frame in
		            // the sample somewhere in the control.
		            c--;
		          }
		          for (; s >= 1 && c >= 0; s--, c--) {
		            // Next we find the first one that isn't the same which should be the
		            // frame that called our sample function and the control.
		            if (sampleLines[s] !== controlLines[c]) {
		              // In V8, the first line is describing the message but other VMs don't.
		              // If we're about to return the first line, and the control is also on the same
		              // line, that's a pretty good indicator that our sample threw at same line as
		              // the control. I.e. before we entered the sample frame. So we ignore this result.
		              // This can happen if you passed a class to function component, or non-function.
		              if (s !== 1 || c !== 1) {
		                do {
		                  s--;
		                  c--; // We may still have similar intermediate frames from the construct call.
		                  // The next one that isn't the same should be our match though.

		                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                    // but we have a user-provided "displayName"
		                    // splice it in to make the stack more readable.

		                    if (fn.displayName && _frame.includes('<anonymous>')) {
		                      _frame = _frame.replace('<anonymous>', fn.displayName);
		                    }
		                    {
		                      if (typeof fn === 'function') {
		                        componentFrameCache.set(fn, _frame);
		                      }
		                    } // Return the line we found.

		                    return _frame;
		                  }
		                } while (s >= 1 && c >= 0);
		              }
		              break;
		            }
		          }
		        }
		      } finally {
		        reentry = false;
		        {
		          ReactCurrentDispatcher.current = previousDispatcher;
		          reenableLogs();
		        }
		        Error.prepareStackTrace = previousPrepareStackTrace;
		      } // Fallback to just using the name if we couldn't make it throw.

		      var name = fn ? fn.displayName || fn.name : '';
		      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
		      {
		        if (typeof fn === 'function') {
		          componentFrameCache.set(fn, syntheticFrame);
		        }
		      }
		      return syntheticFrame;
		    }
		    function describeFunctionComponentFrame(fn, source, ownerFn) {
		      {
		        return describeNativeComponentFrame(fn, false);
		      }
		    }
		    function shouldConstruct(Component) {
		      var prototype = Component.prototype;
		      return !!(prototype && prototype.isReactComponent);
		    }
		    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
		      if (type == null) {
		        return '';
		      }
		      if (typeof type === 'function') {
		        {
		          return describeNativeComponentFrame(type, shouldConstruct(type));
		        }
		      }
		      if (typeof type === 'string') {
		        return describeBuiltInComponentFrame(type);
		      }
		      switch (type) {
		        case REACT_SUSPENSE_TYPE:
		          return describeBuiltInComponentFrame('Suspense');
		        case REACT_SUSPENSE_LIST_TYPE:
		          return describeBuiltInComponentFrame('SuspenseList');
		      }
		      if (typeof type === 'object') {
		        switch (type.$$typeof) {
		          case REACT_FORWARD_REF_TYPE:
		            return describeFunctionComponentFrame(type.render);
		          case REACT_MEMO_TYPE:
		            // Memo may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
		          case REACT_LAZY_TYPE:
		            {
		              var lazyComponent = type;
		              var payload = lazyComponent._payload;
		              var init = lazyComponent._init;
		              try {
		                // Lazy may contain any component type so we recursively resolve it.
		                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		              } catch (x) {}
		            }
		        }
		      }
		      return '';
		    }
		    var hasOwnProperty = Object.prototype.hasOwnProperty;
		    var loggedTypeFailures = {};
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    function setCurrentlyValidatingElement(element) {
		      {
		        if (element) {
		          var owner = element._owner;
		          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		          ReactDebugCurrentFrame.setExtraStackFrame(stack);
		        } else {
		          ReactDebugCurrentFrame.setExtraStackFrame(null);
		        }
		      }
		    }
		    function checkPropTypes(typeSpecs, values, location, componentName, element) {
		      {
		        // $FlowFixMe This is okay but Flow doesn't know it.
		        var has = Function.call.bind(hasOwnProperty);
		        for (var typeSpecName in typeSpecs) {
		          if (has(typeSpecs, typeSpecName)) {
		            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		            // fail the render phase where it didn't fail before. So we log it.
		            // After these have been cleaned up, we'll let them throw.

		            try {
		              // This is intentionally an invariant that gets caught. It's the same
		              // behavior as without this statement except with a better message.
		              if (typeof typeSpecs[typeSpecName] !== 'function') {
		                // eslint-disable-next-line react-internal/prod-error-codes
		                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		                err.name = 'Invariant Violation';
		                throw err;
		              }
		              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		            } catch (ex) {
		              error$1 = ex;
		            }
		            if (error$1 && !(error$1 instanceof Error)) {
		              setCurrentlyValidatingElement(element);
		              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
		              setCurrentlyValidatingElement(null);
		            }
		            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		              // Only monitor this failure once because there tends to be a lot of the
		              // same error.
		              loggedTypeFailures[error$1.message] = true;
		              setCurrentlyValidatingElement(element);
		              error('Failed %s type: %s', location, error$1.message);
		              setCurrentlyValidatingElement(null);
		            }
		          }
		        }
		      }
		    }
		    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		    function isArray(a) {
		      return isArrayImpl(a);
		    }

		    /*
		     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		     *
		     * The functions in this module will throw an easier-to-understand,
		     * easier-to-debug exception with a clear errors message message explaining the
		     * problem. (Instead of a confusing exception thrown inside the implementation
		     * of the `value` object).
		     */
		    // $FlowFixMe only called in DEV, so void return is not possible.
		    function typeName(value) {
		      {
		        // toStringTag is needed for namespaced types like Temporal.Instant
		        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		        return type;
		      }
		    } // $FlowFixMe only called in DEV, so void return is not possible.

		    function willCoercionThrow(value) {
		      {
		        try {
		          testStringCoercion(value);
		          return false;
		        } catch (e) {
		          return true;
		        }
		      }
		    }
		    function testStringCoercion(value) {
		      // If you ended up here by following an exception call stack, here's what's
		      // happened: you supplied an object or symbol value to React (as a prop, key,
		      // DOM attribute, CSS property, string ref, etc.) and when React tried to
		      // coerce it to a string using `'' + value`, an exception was thrown.
		      //
		      // The most common types that will cause this exception are `Symbol` instances
		      // and Temporal objects like `Temporal.Instant`. But any object that has a
		      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		      // exception. (Library authors do this to prevent users from using built-in
		      // numeric operators like `+` or comparison operators like `>=` because custom
		      // methods are needed to perform accurate arithmetic or comparison.)
		      //
		      // To fix the problem, coerce this object or symbol value to a string before
		      // passing it to React. The most reliable way is usually `String(value)`.
		      //
		      // To find which value is throwing, check the browser or debugger console.
		      // Before this exception was thrown, there should be `console.error` output
		      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		      // problem and how that type was used: key, atrribute, input value prop, etc.
		      // In most cases, this console output also shows the component and its
		      // ancestor components where the exception happened.
		      //
		      // eslint-disable-next-line react-internal/safe-string-coercion
		      return '' + value;
		    }
		    function checkKeyStringCoercion(value) {
		      {
		        if (willCoercionThrow(value)) {
		          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
		          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		        }
		      }
		    }
		    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
		    var RESERVED_PROPS = {
		      key: true,
		      ref: true,
		      __self: true,
		      __source: true
		    };
		    var specialPropKeyWarningShown;
		    var specialPropRefWarningShown;
		    var didWarnAboutStringRefs;
		    {
		      didWarnAboutStringRefs = {};
		    }
		    function hasValidRef(config) {
		      {
		        if (hasOwnProperty.call(config, 'ref')) {
		          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
		          if (getter && getter.isReactWarning) {
		            return false;
		          }
		        }
		      }
		      return config.ref !== undefined;
		    }
		    function hasValidKey(config) {
		      {
		        if (hasOwnProperty.call(config, 'key')) {
		          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
		          if (getter && getter.isReactWarning) {
		            return false;
		          }
		        }
		      }
		      return config.key !== undefined;
		    }
		    function warnIfStringRefCannotBeAutoConverted(config, self) {
		      {
		        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
		          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
		          if (!didWarnAboutStringRefs[componentName]) {
		            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
		            didWarnAboutStringRefs[componentName] = true;
		          }
		        }
		      }
		    }
		    function defineKeyPropWarningGetter(props, displayName) {
		      {
		        var warnAboutAccessingKey = function () {
		          if (!specialPropKeyWarningShown) {
		            specialPropKeyWarningShown = true;
		            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		          }
		        };
		        warnAboutAccessingKey.isReactWarning = true;
		        Object.defineProperty(props, 'key', {
		          get: warnAboutAccessingKey,
		          configurable: true
		        });
		      }
		    }
		    function defineRefPropWarningGetter(props, displayName) {
		      {
		        var warnAboutAccessingRef = function () {
		          if (!specialPropRefWarningShown) {
		            specialPropRefWarningShown = true;
		            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		          }
		        };
		        warnAboutAccessingRef.isReactWarning = true;
		        Object.defineProperty(props, 'ref', {
		          get: warnAboutAccessingRef,
		          configurable: true
		        });
		      }
		    }
		    /**
		     * Factory method to create a new React element. This no longer adheres to
		     * the class pattern, so do not use new to call it. Also, instanceof check
		     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		     * if something is a React Element.
		     *
		     * @param {*} type
		     * @param {*} props
		     * @param {*} key
		     * @param {string|object} ref
		     * @param {*} owner
		     * @param {*} self A *temporary* helper to detect places where `this` is
		     * different from the `owner` when React.createElement is called, so that we
		     * can warn. We want to get rid of owner and replace string `ref`s with arrow
		     * functions, and as long as `this` and owner are the same, there will be no
		     * change in behavior.
		     * @param {*} source An annotation object (added by a transpiler or otherwise)
		     * indicating filename, line number, and/or other information.
		     * @internal
		     */

		    var ReactElement = function (type, key, ref, self, source, owner, props) {
		      var element = {
		        // This tag allows us to uniquely identify this as a React Element
		        $$typeof: REACT_ELEMENT_TYPE,
		        // Built-in properties that belong on the element
		        type: type,
		        key: key,
		        ref: ref,
		        props: props,
		        // Record the component responsible for creating this element.
		        _owner: owner
		      };
		      {
		        // The validation flag is currently mutative. We put it on
		        // an external backing store so that we can freeze the whole object.
		        // This can be replaced with a WeakMap once they are implemented in
		        // commonly used development environments.
		        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		        // the validation flag non-enumerable (where possible, which should
		        // include every environment we run tests in), so the test framework
		        // ignores it.

		        Object.defineProperty(element._store, 'validated', {
		          configurable: false,
		          enumerable: false,
		          writable: true,
		          value: false
		        }); // self and source are DEV only properties.

		        Object.defineProperty(element, '_self', {
		          configurable: false,
		          enumerable: false,
		          writable: false,
		          value: self
		        }); // Two elements created in two different places should be considered
		        // equal for testing purposes and therefore we hide it from enumeration.

		        Object.defineProperty(element, '_source', {
		          configurable: false,
		          enumerable: false,
		          writable: false,
		          value: source
		        });
		        if (Object.freeze) {
		          Object.freeze(element.props);
		          Object.freeze(element);
		        }
		      }
		      return element;
		    };
		    /**
		     * https://github.com/reactjs/rfcs/pull/107
		     * @param {*} type
		     * @param {object} props
		     * @param {string} key
		     */

		    function jsxDEV(type, config, maybeKey, source, self) {
		      {
		        var propName; // Reserved names are extracted

		        var props = {};
		        var key = null;
		        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
		        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
		        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
		        // but as an intermediary step, we will use jsxDEV for everything except
		        // <div {...props} key="Hi" />, because we aren't currently able to tell if
		        // key is explicitly declared to be undefined or not.

		        if (maybeKey !== undefined) {
		          {
		            checkKeyStringCoercion(maybeKey);
		          }
		          key = '' + maybeKey;
		        }
		        if (hasValidKey(config)) {
		          {
		            checkKeyStringCoercion(config.key);
		          }
		          key = '' + config.key;
		        }
		        if (hasValidRef(config)) {
		          ref = config.ref;
		          warnIfStringRefCannotBeAutoConverted(config, self);
		        } // Remaining properties are added to a new props object

		        for (propName in config) {
		          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		            props[propName] = config[propName];
		          }
		        } // Resolve default props

		        if (type && type.defaultProps) {
		          var defaultProps = type.defaultProps;
		          for (propName in defaultProps) {
		            if (props[propName] === undefined) {
		              props[propName] = defaultProps[propName];
		            }
		          }
		        }
		        if (key || ref) {
		          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
		          if (key) {
		            defineKeyPropWarningGetter(props, displayName);
		          }
		          if (ref) {
		            defineRefPropWarningGetter(props, displayName);
		          }
		        }
		        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		      }
		    }
		    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
		    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
		    function setCurrentlyValidatingElement$1(element) {
		      {
		        if (element) {
		          var owner = element._owner;
		          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		        } else {
		          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		        }
		      }
		    }
		    var propTypesMisspellWarningShown;
		    {
		      propTypesMisspellWarningShown = false;
		    }
		    /**
		     * Verifies the object is a ReactElement.
		     * See https://reactjs.org/docs/react-api.html#isvalidelement
		     * @param {?object} object
		     * @return {boolean} True if `object` is a ReactElement.
		     * @final
		     */

		    function isValidElement(object) {
		      {
		        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		      }
		    }
		    function getDeclarationErrorAddendum() {
		      {
		        if (ReactCurrentOwner$1.current) {
		          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
		          if (name) {
		            return '\n\nCheck the render method of `' + name + '`.';
		          }
		        }
		        return '';
		      }
		    }
		    function getSourceInfoErrorAddendum(source) {
		      {
		        if (source !== undefined) {
		          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		          var lineNumber = source.lineNumber;
		          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		        }
		        return '';
		      }
		    }
		    /**
		     * Warn if there's no key explicitly set on dynamic arrays of children or
		     * object keys are not valid. This allows us to keep track of children between
		     * updates.
		     */

		    var ownerHasKeyUseWarning = {};
		    function getCurrentComponentErrorInfo(parentType) {
		      {
		        var info = getDeclarationErrorAddendum();
		        if (!info) {
		          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
		          if (parentName) {
		            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		          }
		        }
		        return info;
		      }
		    }
		    /**
		     * Warn if the element doesn't have an explicit key assigned to it.
		     * This element is in an array. The array could grow and shrink or be
		     * reordered. All children that haven't already been validated are required to
		     * have a "key" property assigned to it. Error statuses are cached so a warning
		     * will only be shown once.
		     *
		     * @internal
		     * @param {ReactElement} element Element that requires a key.
		     * @param {*} parentType element's parent's type.
		     */

		    function validateExplicitKey(element, parentType) {
		      {
		        if (!element._store || element._store.validated || element.key != null) {
		          return;
		        }
		        element._store.validated = true;
		        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
		        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		          return;
		        }
		        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		        // property, it may be the creator of the child that's responsible for
		        // assigning it a key.

		        var childOwner = '';
		        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
		          // Give the component that originally created this child.
		          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
		        }
		        setCurrentlyValidatingElement$1(element);
		        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
		        setCurrentlyValidatingElement$1(null);
		      }
		    }
		    /**
		     * Ensure that every element either is passed in a static location, in an
		     * array with an explicit keys property defined, or in an object literal
		     * with valid key property.
		     *
		     * @internal
		     * @param {ReactNode} node Statically passed child of any type.
		     * @param {*} parentType node's parent's type.
		     */

		    function validateChildKeys(node, parentType) {
		      {
		        if (typeof node !== 'object') {
		          return;
		        }
		        if (isArray(node)) {
		          for (var i = 0; i < node.length; i++) {
		            var child = node[i];
		            if (isValidElement(child)) {
		              validateExplicitKey(child, parentType);
		            }
		          }
		        } else if (isValidElement(node)) {
		          // This element was passed in a valid location.
		          if (node._store) {
		            node._store.validated = true;
		          }
		        } else if (node) {
		          var iteratorFn = getIteratorFn(node);
		          if (typeof iteratorFn === 'function') {
		            // Entry iterators used to provide implicit keys,
		            // but now we print a separate warning for them later.
		            if (iteratorFn !== node.entries) {
		              var iterator = iteratorFn.call(node);
		              var step;
		              while (!(step = iterator.next()).done) {
		                if (isValidElement(step.value)) {
		                  validateExplicitKey(step.value, parentType);
		                }
		              }
		            }
		          }
		        }
		      }
		    }
		    /**
		     * Given an element, validate that its props follow the propTypes definition,
		     * provided by the type.
		     *
		     * @param {ReactElement} element
		     */

		    function validatePropTypes(element) {
		      {
		        var type = element.type;
		        if (type === null || type === undefined || typeof type === 'string') {
		          return;
		        }
		        var propTypes;
		        if (typeof type === 'function') {
		          propTypes = type.propTypes;
		        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
		        // Note: Memo only checks outer props here.
		        // Inner props are checked in the reconciler.
		        type.$$typeof === REACT_MEMO_TYPE)) {
		          propTypes = type.propTypes;
		        } else {
		          return;
		        }
		        if (propTypes) {
		          // Intentionally inside to avoid triggering lazy initializers:
		          var name = getComponentNameFromType(type);
		          checkPropTypes(propTypes, element.props, 'prop', name, element);
		        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		          var _name = getComponentNameFromType(type);
		          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		        }
		        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		        }
		      }
		    }
		    /**
		     * Given a fragment, validate that it can only be provided with fragment props
		     * @param {ReactElement} fragment
		     */

		    function validateFragmentProps(fragment) {
		      {
		        var keys = Object.keys(fragment.props);
		        for (var i = 0; i < keys.length; i++) {
		          var key = keys[i];
		          if (key !== 'children' && key !== 'key') {
		            setCurrentlyValidatingElement$1(fragment);
		            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
		            setCurrentlyValidatingElement$1(null);
		            break;
		          }
		        }
		        if (fragment.ref !== null) {
		          setCurrentlyValidatingElement$1(fragment);
		          error('Invalid attribute `ref` supplied to `React.Fragment`.');
		          setCurrentlyValidatingElement$1(null);
		        }
		      }
		    }
		    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
		      {
		        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		        // succeed and there will likely be errors in render.

		        if (!validType) {
		          var info = '';
		          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		          }
		          var sourceInfo = getSourceInfoErrorAddendum(source);
		          if (sourceInfo) {
		            info += sourceInfo;
		          } else {
		            info += getDeclarationErrorAddendum();
		          }
		          var typeString;
		          if (type === null) {
		            typeString = 'null';
		          } else if (isArray(type)) {
		            typeString = 'array';
		          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
		            info = ' Did you accidentally export a JSX literal instead of a component?';
		          } else {
		            typeString = typeof type;
		          }
		          error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		        }
		        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
		        // TODO: Drop this when these are no longer allowed as the type argument.

		        if (element == null) {
		          return element;
		        } // Skip key warning if the type isn't valid since our key validation logic
		        // doesn't expect a non-string/function type and can throw confusing errors.
		        // We don't want exception behavior to differ between dev and prod.
		        // (Rendering will throw with a helpful message and as soon as the type is
		        // fixed, the key warnings will appear.)

		        if (validType) {
		          var children = props.children;
		          if (children !== undefined) {
		            if (isStaticChildren) {
		              if (isArray(children)) {
		                for (var i = 0; i < children.length; i++) {
		                  validateChildKeys(children[i], type);
		                }
		                if (Object.freeze) {
		                  Object.freeze(children);
		                }
		              } else {
		                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
		              }
		            } else {
		              validateChildKeys(children, type);
		            }
		          }
		        }
		        if (type === REACT_FRAGMENT_TYPE) {
		          validateFragmentProps(element);
		        } else {
		          validatePropTypes(element);
		        }
		        return element;
		      }
		    } // These two functions exist to still get child warnings in dev
		    // even with the prod transform. This means that jsxDEV is purely
		    // opt-in behavior for better messages but that we won't stop
		    // giving you warnings if you use production apis.

		    function jsxWithValidationStatic(type, props, key) {
		      {
		        return jsxWithValidation(type, props, key, true);
		      }
		    }
		    function jsxWithValidationDynamic(type, props, key) {
		      {
		        return jsxWithValidation(type, props, key, false);
		      }
		    }
		    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
		    // for now we can ship identical prod functions

		    var jsxs = jsxWithValidationStatic;
		    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
		    reactJsxRuntime_development.jsx = jsx;
		    reactJsxRuntime_development.jsxs = jsxs;
		  })();
		}
		return reactJsxRuntime_development;
	}

	var hasRequiredJsxRuntime;

	function requireJsxRuntime () {
		if (hasRequiredJsxRuntime) return jsxRuntime.exports;
		hasRequiredJsxRuntime = 1;

		if (process.env.NODE_ENV === 'production') {
		  jsxRuntime.exports = requireReactJsxRuntime_production_min();
		} else {
		  jsxRuntime.exports = requireReactJsxRuntime_development();
		}
		return jsxRuntime.exports;
	}

	var jsxRuntimeExports = requireJsxRuntime();

	/**
	 * @public
	 */
	const PresenceContext = reactExports.createContext(null);

	/**
	 * When a component is the child of `AnimatePresence`, it can use `usePresence`
	 * to access information about whether it's still present in the React tree.
	 *
	 * ```jsx
	 * import { usePresence } from "framer-motion"
	 *
	 * export const Component = () => {
	 *   const [isPresent, safeToRemove] = usePresence()
	 *
	 *   useEffect(() => {
	 *     !isPresent && setTimeout(safeToRemove, 1000)
	 *   }, [isPresent])
	 *
	 *   return <div />
	 * }
	 * ```
	 *
	 * If `isPresent` is `false`, it means that a component has been removed the tree, but
	 * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
	 *
	 * @public
	 */
	function usePresence() {
	    const context = reactExports.useContext(PresenceContext);
	    if (context === null)
	        return [true, null];
	    const { isPresent, onExitComplete, register } = context;
	    // It's safe to call the following hooks conditionally (after an early return) because the context will always
	    // either be null or non-null for the lifespan of the component.
	    const id = reactExports.useId();
	    reactExports.useEffect(() => register(id), []);
	    const safeToRemove = reactExports.useCallback(() => onExitComplete && onExitComplete(id), [id, onExitComplete]);
	    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
	}

	const LayoutGroupContext = reactExports.createContext({});

	/**
	 * Internal, exported only for usage in Framer
	 */
	const SwitchLayoutGroupContext = reactExports.createContext({});

	/**
	 * This should only ever be modified on the client otherwise it'll
	 * persist through server requests. If we need instanced states we
	 * could lazy-init via root.
	 */
	const globalProjectionState = {
	    /**
	     * Global flag as to whether the tree has animated since the last time
	     * we resized the window
	     */
	    hasAnimatedSinceResize: true,
	    /**
	     * We set this to true once, on the first update. Any nodes added to the tree beyond that
	     * update will be given a `data-projection-id` attribute.
	     */
	    hasEverUpdated: false,
	};

	function pixelsToPercent(pixels, axis) {
	    if (axis.max === axis.min)
	        return 0;
	    return (pixels / (axis.max - axis.min)) * 100;
	}
	/**
	 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
	 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
	 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
	 * borderRadius in both states. If we animate between the two in pixels that will trigger
	 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
	 */
	const correctBorderRadius = {
	    correct: (latest, node) => {
	        if (!node.target)
	            return latest;
	        /**
	         * If latest is a string, if it's a percentage we can return immediately as it's
	         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
	         */
	        if (typeof latest === "string") {
	            if (px.test(latest)) {
	                latest = parseFloat(latest);
	            }
	            else {
	                return latest;
	            }
	        }
	        /**
	         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
	         * pixel value as a percentage of each axis
	         */
	        const x = pixelsToPercent(latest, node.target.x);
	        const y = pixelsToPercent(latest, node.target.y);
	        return `${x}% ${y}%`;
	    },
	};

	const correctBoxShadow = {
	    correct: (latest, { treeScale, projectionDelta }) => {
	        const original = latest;
	        const shadow = complex.parse(latest);
	        // TODO: Doesn't support multiple shadows
	        if (shadow.length > 5)
	            return original;
	        const template = complex.createTransformer(latest);
	        const offset = typeof shadow[0] !== "number" ? 1 : 0;
	        // Calculate the overall context scale
	        const xScale = projectionDelta.x.scale * treeScale.x;
	        const yScale = projectionDelta.y.scale * treeScale.y;
	        shadow[0 + offset] /= xScale;
	        shadow[1 + offset] /= yScale;
	        /**
	         * Ideally we'd correct x and y scales individually, but because blur and
	         * spread apply to both we have to take a scale average and apply that instead.
	         * We could potentially improve the outcome of this by incorporating the ratio between
	         * the two scales.
	         */
	        const averageScale = mixNumber$1(xScale, yScale, 0.5);
	        // Blur
	        if (typeof shadow[2 + offset] === "number")
	            shadow[2 + offset] /= averageScale;
	        // Spread
	        if (typeof shadow[3 + offset] === "number")
	            shadow[3 + offset] /= averageScale;
	        return template(shadow);
	    },
	};

	const scaleCorrectors = {};
	function addScaleCorrector(correctors) {
	    Object.assign(scaleCorrectors, correctors);
	}

	const { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);

	class MeasureLayoutWithContext extends reactExports.Component {
	    /**
	     * This only mounts projection nodes for components that
	     * need measuring, we might want to do it for all components
	     * in order to incorporate transforms
	     */
	    componentDidMount() {
	        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
	        const { projection } = visualElement;
	        addScaleCorrector(defaultScaleCorrectors);
	        if (projection) {
	            if (layoutGroup.group)
	                layoutGroup.group.add(projection);
	            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
	                switchLayoutGroup.register(projection);
	            }
	            projection.root.didUpdate();
	            projection.addEventListener("animationComplete", () => {
	                this.safeToRemove();
	            });
	            projection.setOptions({
	                ...projection.options,
	                onExitComplete: () => this.safeToRemove(),
	            });
	        }
	        globalProjectionState.hasEverUpdated = true;
	    }
	    getSnapshotBeforeUpdate(prevProps) {
	        const { layoutDependency, visualElement, drag, isPresent } = this.props;
	        const projection = visualElement.projection;
	        if (!projection)
	            return null;
	        /**
	         * TODO: We use this data in relegate to determine whether to
	         * promote a previous element. There's no guarantee its presence data
	         * will have updated by this point - if a bug like this arises it will
	         * have to be that we markForRelegation and then find a new lead some other way,
	         * perhaps in didUpdate
	         */
	        projection.isPresent = isPresent;
	        if (drag ||
	            prevProps.layoutDependency !== layoutDependency ||
	            layoutDependency === undefined) {
	            projection.willUpdate();
	        }
	        else {
	            this.safeToRemove();
	        }
	        if (prevProps.isPresent !== isPresent) {
	            if (isPresent) {
	                projection.promote();
	            }
	            else if (!projection.relegate()) {
	                /**
	                 * If there's another stack member taking over from this one,
	                 * it's in charge of the exit animation and therefore should
	                 * be in charge of the safe to remove. Otherwise we call it here.
	                 */
	                frame.postRender(() => {
	                    const stack = projection.getStack();
	                    if (!stack || !stack.members.length) {
	                        this.safeToRemove();
	                    }
	                });
	            }
	        }
	        return null;
	    }
	    componentDidUpdate() {
	        const { projection } = this.props.visualElement;
	        if (projection) {
	            projection.root.didUpdate();
	            microtask.postRender(() => {
	                if (!projection.currentAnimation && projection.isLead()) {
	                    this.safeToRemove();
	                }
	            });
	        }
	    }
	    componentWillUnmount() {
	        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;
	        const { projection } = visualElement;
	        if (projection) {
	            projection.scheduleCheckAfterUnmount();
	            if (layoutGroup && layoutGroup.group)
	                layoutGroup.group.remove(projection);
	            if (promoteContext && promoteContext.deregister)
	                promoteContext.deregister(projection);
	        }
	    }
	    safeToRemove() {
	        const { safeToRemove } = this.props;
	        safeToRemove && safeToRemove();
	    }
	    render() {
	        return null;
	    }
	}
	function MeasureLayout(props) {
	    const [isPresent, safeToRemove] = usePresence();
	    const layoutGroup = reactExports.useContext(LayoutGroupContext);
	    return (jsxRuntimeExports.jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));
	}
	const defaultScaleCorrectors = {
	    borderRadius: {
	        ...correctBorderRadius,
	        applyTo: [
	            "borderTopLeftRadius",
	            "borderTopRightRadius",
	            "borderBottomLeftRadius",
	            "borderBottomRightRadius",
	        ],
	    },
	    borderTopLeftRadius: correctBorderRadius,
	    borderTopRightRadius: correctBorderRadius,
	    borderBottomLeftRadius: correctBorderRadius,
	    borderBottomRightRadius: correctBorderRadius,
	    boxShadow: correctBoxShadow,
	};

	const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
	const numBorders = borders.length;
	const asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
	const isPx = (value) => typeof value === "number" || px.test(value);
	function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
	    if (shouldCrossfadeOpacity) {
	        target.opacity = mixNumber$1(0, 
	        // TODO Reinstate this if only child
	        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));
	        target.opacityExit = mixNumber$1(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));
	    }
	    else if (isOnlyMember) {
	        target.opacity = mixNumber$1(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);
	    }
	    /**
	     * Mix border radius
	     */
	    for (let i = 0; i < numBorders; i++) {
	        const borderLabel = `border${borders[i]}Radius`;
	        let followRadius = getRadius(follow, borderLabel);
	        let leadRadius = getRadius(lead, borderLabel);
	        if (followRadius === undefined && leadRadius === undefined)
	            continue;
	        followRadius || (followRadius = 0);
	        leadRadius || (leadRadius = 0);
	        const canMix = followRadius === 0 ||
	            leadRadius === 0 ||
	            isPx(followRadius) === isPx(leadRadius);
	        if (canMix) {
	            target[borderLabel] = Math.max(mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress), 0);
	            if (percent.test(leadRadius) || percent.test(followRadius)) {
	                target[borderLabel] += "%";
	            }
	        }
	        else {
	            target[borderLabel] = leadRadius;
	        }
	    }
	    /**
	     * Mix rotation
	     */
	    if (follow.rotate || lead.rotate) {
	        target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress);
	    }
	}
	function getRadius(values, radiusName) {
	    return values[radiusName] !== undefined
	        ? values[radiusName]
	        : values.borderRadius;
	}
	// /**
	//  * We only want to mix the background color if there's a follow element
	//  * that we're not crossfading opacity between. For instance with switch
	//  * AnimateSharedLayout animations, this helps the illusion of a continuous
	//  * element being animated but also cuts down on the number of paints triggered
	//  * for elements where opacity is doing that work for us.
	//  */
	// if (
	//     !hasFollowElement &&
	//     latestLeadValues.backgroundColor &&
	//     latestFollowValues.backgroundColor
	// ) {
	//     /**
	//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.
	//      * We could probably create a mixer that runs at the start of the animation but
	//      * the idea behind the crossfader is that it runs dynamically between two potentially
	//      * changing targets (ie opacity or borderRadius may be animating independently via variants)
	//      */
	//     leadState.backgroundColor = followState.backgroundColor = mixColor(
	//         latestFollowValues.backgroundColor as string,
	//         latestLeadValues.backgroundColor as string
	//     )(p)
	// }
	const easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);
	const easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);
	function compress(min, max, easing) {
	    return (p) => {
	        // Could replace ifs with clamp
	        if (p < min)
	            return 0;
	        if (p > max)
	            return 1;
	        return easing(progress(min, max, p));
	    };
	}

	/**
	 * Reset an axis to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyAxisInto(axis, originAxis) {
	    axis.min = originAxis.min;
	    axis.max = originAxis.max;
	}
	/**
	 * Reset a box to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyBoxInto(box, originBox) {
	    copyAxisInto(box.x, originBox.x);
	    copyAxisInto(box.y, originBox.y);
	}
	/**
	 * Reset a delta to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyAxisDeltaInto(delta, originDelta) {
	    delta.translate = originDelta.translate;
	    delta.scale = originDelta.scale;
	    delta.originPoint = originDelta.originPoint;
	    delta.origin = originDelta.origin;
	}

	/**
	 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
	 */
	function removePointDelta(point, translate, scale, originPoint, boxScale) {
	    point -= translate;
	    point = scalePoint(point, 1 / scale, originPoint);
	    if (boxScale !== undefined) {
	        point = scalePoint(point, 1 / boxScale, originPoint);
	    }
	    return point;
	}
	/**
	 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
	 */
	function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
	    if (percent.test(translate)) {
	        translate = parseFloat(translate);
	        const relativeProgress = mixNumber$1(sourceAxis.min, sourceAxis.max, translate / 100);
	        translate = relativeProgress - sourceAxis.min;
	    }
	    if (typeof translate !== "number")
	        return;
	    let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);
	    if (axis === originAxis)
	        originPoint -= translate;
	    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
	    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
	}
	/**
	 * The names of the motion values we want to apply as translation, scale and origin.
	 */
	const xKeys = ["x", "scaleX", "originX"];
	const yKeys = ["y", "scaleY", "originY"];
	/**
	 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeBoxTransforms(box, transforms, originBox, sourceBox) {
	    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);
	    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);
	}

	function isAxisDeltaZero(delta) {
	    return delta.translate === 0 && delta.scale === 1;
	}
	function isDeltaZero(delta) {
	    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
	}
	function axisEquals(a, b) {
	    return a.min === b.min && a.max === b.max;
	}
	function boxEquals(a, b) {
	    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);
	}
	function axisEqualsRounded(a, b) {
	    return (Math.round(a.min) === Math.round(b.min) &&
	        Math.round(a.max) === Math.round(b.max));
	}
	function boxEqualsRounded(a, b) {
	    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);
	}
	function aspectRatio(box) {
	    return calcLength(box.x) / calcLength(box.y);
	}
	function axisDeltaEquals(a, b) {
	    return (a.translate === b.translate &&
	        a.scale === b.scale &&
	        a.originPoint === b.originPoint);
	}

	class NodeStack {
	    constructor() {
	        this.members = [];
	    }
	    add(node) {
	        addUniqueItem(this.members, node);
	        node.scheduleRender();
	    }
	    remove(node) {
	        removeItem(this.members, node);
	        if (node === this.prevLead) {
	            this.prevLead = undefined;
	        }
	        if (node === this.lead) {
	            const prevLead = this.members[this.members.length - 1];
	            if (prevLead) {
	                this.promote(prevLead);
	            }
	        }
	    }
	    relegate(node) {
	        const indexOfNode = this.members.findIndex((member) => node === member);
	        if (indexOfNode === 0)
	            return false;
	        /**
	         * Find the next projection node that is present
	         */
	        let prevLead;
	        for (let i = indexOfNode; i >= 0; i--) {
	            const member = this.members[i];
	            if (member.isPresent !== false) {
	                prevLead = member;
	                break;
	            }
	        }
	        if (prevLead) {
	            this.promote(prevLead);
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    promote(node, preserveFollowOpacity) {
	        const prevLead = this.lead;
	        if (node === prevLead)
	            return;
	        this.prevLead = prevLead;
	        this.lead = node;
	        node.show();
	        if (prevLead) {
	            prevLead.instance && prevLead.scheduleRender();
	            node.scheduleRender();
	            node.resumeFrom = prevLead;
	            if (preserveFollowOpacity) {
	                node.resumeFrom.preserveOpacity = true;
	            }
	            if (prevLead.snapshot) {
	                node.snapshot = prevLead.snapshot;
	                node.snapshot.latestValues =
	                    prevLead.animationValues || prevLead.latestValues;
	            }
	            if (node.root && node.root.isUpdating) {
	                node.isLayoutDirty = true;
	            }
	            const { crossfade } = node.options;
	            if (crossfade === false) {
	                prevLead.hide();
	            }
	            /**
	             * TODO:
	             *   - Test border radius when previous node was deleted
	             *   - boxShadow mixing
	             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)
	             *   - Shared between element A in transformed container and element B (transform stays the same or changes)
	             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)
	             * ---
	             *   - Crossfade opacity of root nodes
	             *   - layoutId changes after animation
	             *   - layoutId changes mid animation
	             */
	        }
	    }
	    exitAnimationComplete() {
	        this.members.forEach((node) => {
	            const { options, resumingFrom } = node;
	            options.onExitComplete && options.onExitComplete();
	            if (resumingFrom) {
	                resumingFrom.options.onExitComplete &&
	                    resumingFrom.options.onExitComplete();
	            }
	        });
	    }
	    scheduleRender() {
	        this.members.forEach((node) => {
	            node.instance && node.scheduleRender(false);
	        });
	    }
	    /**
	     * Clear any leads that have been removed this render to prevent them from being
	     * used in future animations and to prevent memory leaks
	     */
	    removeLeadSnapshot() {
	        if (this.lead && this.lead.snapshot) {
	            this.lead.snapshot = undefined;
	        }
	    }
	}

	function buildProjectionTransform(delta, treeScale, latestTransform) {
	    let transform = "";
	    /**
	     * The translations we use to calculate are always relative to the viewport coordinate space.
	     * But when we apply scales, we also scale the coordinate space of an element and its children.
	     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
	     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
	     */
	    const xTranslate = delta.x.translate / treeScale.x;
	    const yTranslate = delta.y.translate / treeScale.y;
	    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;
	    if (xTranslate || yTranslate || zTranslate) {
	        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
	    }
	    /**
	     * Apply scale correction for the tree transform.
	     * This will apply scale to the screen-orientated axes.
	     */
	    if (treeScale.x !== 1 || treeScale.y !== 1) {
	        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
	    }
	    if (latestTransform) {
	        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;
	        if (transformPerspective)
	            transform = `perspective(${transformPerspective}px) ${transform}`;
	        if (rotate)
	            transform += `rotate(${rotate}deg) `;
	        if (rotateX)
	            transform += `rotateX(${rotateX}deg) `;
	        if (rotateY)
	            transform += `rotateY(${rotateY}deg) `;
	        if (skewX)
	            transform += `skewX(${skewX}deg) `;
	        if (skewY)
	            transform += `skewY(${skewY}deg) `;
	    }
	    /**
	     * Apply scale to match the size of the element to the size we want it.
	     * This will apply scale to the element-orientated axes.
	     */
	    const elementScaleX = delta.x.scale * treeScale.x;
	    const elementScaleY = delta.y.scale * treeScale.y;
	    if (elementScaleX !== 1 || elementScaleY !== 1) {
	        transform += `scale(${elementScaleX}, ${elementScaleY})`;
	    }
	    return transform || "none";
	}

	const compareByDepth = (a, b) => a.depth - b.depth;

	class FlatTree {
	    constructor() {
	        this.children = [];
	        this.isDirty = false;
	    }
	    add(child) {
	        addUniqueItem(this.children, child);
	        this.isDirty = true;
	    }
	    remove(child) {
	        removeItem(this.children, child);
	        this.isDirty = true;
	    }
	    forEach(callback) {
	        this.isDirty && this.children.sort(compareByDepth);
	        this.isDirty = false;
	        this.children.forEach(callback);
	    }
	}

	/**
	 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
	 *
	 * TODO: Remove and move to library
	 */
	function resolveMotionValue(value) {
	    const unwrappedValue = isMotionValue(value) ? value.get() : value;
	    return isCustomValue(unwrappedValue)
	        ? unwrappedValue.toValue()
	        : unwrappedValue;
	}

	/**
	 * Timeout defined in ms
	 */
	function delay(callback, timeout) {
	    const start = time.now();
	    const checkElapsed = ({ timestamp }) => {
	        const elapsed = timestamp - start;
	        if (elapsed >= timeout) {
	            cancelFrame(checkElapsed);
	            callback(elapsed - timeout);
	        }
	    };
	    frame.read(checkElapsed, true);
	    return () => cancelFrame(checkElapsed);
	}

	function isSVGElement(element) {
	    return element instanceof SVGElement && element.tagName !== "svg";
	}

	function animateSingleValue(value, keyframes, options) {
	    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
	    motionValue$1.start(animateMotionValue("", motionValue$1, keyframes, options));
	    return motionValue$1.animation;
	}

	const metrics = {
	    type: "projectionFrame",
	    totalNodes: 0,
	    resolvedTargetDeltas: 0,
	    recalculatedProjection: 0,
	};
	const isDebug = typeof window !== "undefined" && window.MotionDebug !== undefined;
	const transformAxes = ["", "X", "Y", "Z"];
	const hiddenVisibility = { visibility: "hidden" };
	/**
	 * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1
	 * which has a noticeable difference in spring animations
	 */
	const animationTarget = 1000;
	let id = 0;
	function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {
	    const { latestValues } = visualElement;
	    // Record the distorting transform and then temporarily set it to 0
	    if (latestValues[key]) {
	        values[key] = latestValues[key];
	        visualElement.setStaticValue(key, 0);
	        if (sharedAnimationValues) {
	            sharedAnimationValues[key] = 0;
	        }
	    }
	}
	function cancelTreeOptimisedTransformAnimations(projectionNode) {
	    projectionNode.hasCheckedOptimisedAppear = true;
	    if (projectionNode.root === projectionNode)
	        return;
	    const { visualElement } = projectionNode.options;
	    if (!visualElement)
	        return;
	    const appearId = getOptimisedAppearId(visualElement);
	    if (window.MotionHasOptimisedAnimation(appearId, "transform")) {
	        const { layout, layoutId } = projectionNode.options;
	        window.MotionCancelOptimisedAnimation(appearId, "transform", frame, !(layout || layoutId));
	    }
	    const { parent } = projectionNode;
	    if (parent && !parent.hasCheckedOptimisedAppear) {
	        cancelTreeOptimisedTransformAnimations(parent);
	    }
	}
	function createProjectionNode$1({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {
	    return class ProjectionNode {
	        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
	            /**
	             * A unique ID generated for every projection node.
	             */
	            this.id = id++;
	            /**
	             * An id that represents a unique session instigated by startUpdate.
	             */
	            this.animationId = 0;
	            /**
	             * A Set containing all this component's children. This is used to iterate
	             * through the children.
	             *
	             * TODO: This could be faster to iterate as a flat array stored on the root node.
	             */
	            this.children = new Set();
	            /**
	             * Options for the node. We use this to configure what kind of layout animations
	             * we should perform (if any).
	             */
	            this.options = {};
	            /**
	             * We use this to detect when its safe to shut down part of a projection tree.
	             * We have to keep projecting children for scale correction and relative projection
	             * until all their parents stop performing layout animations.
	             */
	            this.isTreeAnimating = false;
	            this.isAnimationBlocked = false;
	            /**
	             * Flag to true if we think this layout has been changed. We can't always know this,
	             * currently we set it to true every time a component renders, or if it has a layoutDependency
	             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup
	             * and if one node is dirtied, they all are.
	             */
	            this.isLayoutDirty = false;
	            /**
	             * Flag to true if we think the projection calculations for this node needs
	             * recalculating as a result of an updated transform or layout animation.
	             */
	            this.isProjectionDirty = false;
	            /**
	             * Flag to true if the layout *or* transform has changed. This then gets propagated
	             * throughout the projection tree, forcing any element below to recalculate on the next frame.
	             */
	            this.isSharedProjectionDirty = false;
	            /**
	             * Flag transform dirty. This gets propagated throughout the whole tree but is only
	             * respected by shared nodes.
	             */
	            this.isTransformDirty = false;
	            /**
	             * Block layout updates for instant layout transitions throughout the tree.
	             */
	            this.updateManuallyBlocked = false;
	            this.updateBlockedByResize = false;
	            /**
	             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`
	             * call.
	             */
	            this.isUpdating = false;
	            /**
	             * If this is an SVG element we currently disable projection transforms
	             */
	            this.isSVG = false;
	            /**
	             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset
	             * its projection styles.
	             */
	            this.needsReset = false;
	            /**
	             * Flags whether this node should have its transform reset prior to measuring.
	             */
	            this.shouldResetTransform = false;
	            /**
	             * Store whether this node has been checked for optimised appear animations. As
	             * effects fire bottom-up, and we want to look up the tree for appear animations,
	             * this makes sure we only check each path once, stopping at nodes that
	             * have already been checked.
	             */
	            this.hasCheckedOptimisedAppear = false;
	            /**
	             * An object representing the calculated contextual/accumulated/tree scale.
	             * This will be used to scale calculcated projection transforms, as these are
	             * calculated in screen-space but need to be scaled for elements to layoutly
	             * make it to their calculated destinations.
	             *
	             * TODO: Lazy-init
	             */
	            this.treeScale = { x: 1, y: 1 };
	            /**
	             *
	             */
	            this.eventHandlers = new Map();
	            this.hasTreeAnimated = false;
	            // Note: Currently only running on root node
	            this.updateScheduled = false;
	            this.scheduleUpdate = () => this.update();
	            this.projectionUpdateScheduled = false;
	            this.checkUpdateFailed = () => {
	                if (this.isUpdating) {
	                    this.isUpdating = false;
	                    this.clearAllSnapshots();
	                }
	            };
	            /**
	             * This is a multi-step process as shared nodes might be of different depths. Nodes
	             * are sorted by depth order, so we need to resolve the entire tree before moving to
	             * the next step.
	             */
	            this.updateProjection = () => {
	                this.projectionUpdateScheduled = false;
	                /**
	                 * Reset debug counts. Manually resetting rather than creating a new
	                 * object each frame.
	                 */
	                if (isDebug) {
	                    metrics.totalNodes =
	                        metrics.resolvedTargetDeltas =
	                            metrics.recalculatedProjection =
	                                0;
	                }
	                this.nodes.forEach(propagateDirtyNodes);
	                this.nodes.forEach(resolveTargetDelta);
	                this.nodes.forEach(calcProjection);
	                this.nodes.forEach(cleanDirtyNodes);
	                if (isDebug) {
	                    window.MotionDebug.record(metrics);
	                }
	            };
	            /**
	             * Frame calculations
	             */
	            this.resolvedRelativeTargetAt = 0.0;
	            this.hasProjected = false;
	            this.isVisible = true;
	            this.animationProgress = 0;
	            /**
	             * Shared layout
	             */
	            // TODO Only running on root node
	            this.sharedNodes = new Map();
	            this.latestValues = latestValues;
	            this.root = parent ? parent.root || parent : this;
	            this.path = parent ? [...parent.path, parent] : [];
	            this.parent = parent;
	            this.depth = parent ? parent.depth + 1 : 0;
	            for (let i = 0; i < this.path.length; i++) {
	                this.path[i].shouldResetTransform = true;
	            }
	            if (this.root === this)
	                this.nodes = new FlatTree();
	        }
	        addEventListener(name, handler) {
	            if (!this.eventHandlers.has(name)) {
	                this.eventHandlers.set(name, new SubscriptionManager());
	            }
	            return this.eventHandlers.get(name).add(handler);
	        }
	        notifyListeners(name, ...args) {
	            const subscriptionManager = this.eventHandlers.get(name);
	            subscriptionManager && subscriptionManager.notify(...args);
	        }
	        hasListeners(name) {
	            return this.eventHandlers.has(name);
	        }
	        /**
	         * Lifecycles
	         */
	        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
	            if (this.instance)
	                return;
	            this.isSVG = isSVGElement(instance);
	            this.instance = instance;
	            const { layoutId, layout, visualElement } = this.options;
	            if (visualElement && !visualElement.current) {
	                visualElement.mount(instance);
	            }
	            this.root.nodes.add(this);
	            this.parent && this.parent.children.add(this);
	            if (isLayoutDirty && (layout || layoutId)) {
	                this.isLayoutDirty = true;
	            }
	            if (attachResizeListener) {
	                let cancelDelay;
	                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);
	                attachResizeListener(instance, () => {
	                    this.root.updateBlockedByResize = true;
	                    cancelDelay && cancelDelay();
	                    cancelDelay = delay(resizeUnblockUpdate, 250);
	                    if (globalProjectionState.hasAnimatedSinceResize) {
	                        globalProjectionState.hasAnimatedSinceResize = false;
	                        this.nodes.forEach(finishAnimation);
	                    }
	                });
	            }
	            if (layoutId) {
	                this.root.registerSharedNode(layoutId, this);
	            }
	            // Only register the handler if it requires layout animation
	            if (this.options.animate !== false &&
	                visualElement &&
	                (layoutId || layout)) {
	                this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {
	                    if (this.isTreeAnimationBlocked()) {
	                        this.target = undefined;
	                        this.relativeTarget = undefined;
	                        return;
	                    }
	                    // TODO: Check here if an animation exists
	                    const layoutTransition = this.options.transition ||
	                        visualElement.getDefaultTransition() ||
	                        defaultLayoutTransition;
	                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();
	                    /**
	                     * The target layout of the element might stay the same,
	                     * but its position relative to its parent has changed.
	                     */
	                    const targetChanged = !this.targetLayout ||
	                        !boxEqualsRounded(this.targetLayout, newLayout) ||
	                        hasRelativeTargetChanged;
	                    /**
	                     * If the layout hasn't seemed to have changed, it might be that the
	                     * element is visually in the same place in the document but its position
	                     * relative to its parent has indeed changed. So here we check for that.
	                     */
	                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
	                    if (this.options.layoutRoot ||
	                        (this.resumeFrom && this.resumeFrom.instance) ||
	                        hasOnlyRelativeTargetChanged ||
	                        (hasLayoutChanged &&
	                            (targetChanged || !this.currentAnimation))) {
	                        if (this.resumeFrom) {
	                            this.resumingFrom = this.resumeFrom;
	                            this.resumingFrom.resumingFrom = undefined;
	                        }
	                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
	                        const animationOptions = {
	                            ...getValueTransition(layoutTransition, "layout"),
	                            onPlay: onLayoutAnimationStart,
	                            onComplete: onLayoutAnimationComplete,
	                        };
	                        if (visualElement.shouldReduceMotion ||
	                            this.options.layoutRoot) {
	                            animationOptions.delay = 0;
	                            animationOptions.type = false;
	                        }
	                        this.startAnimation(animationOptions);
	                    }
	                    else {
	                        /**
	                         * If the layout hasn't changed and we have an animation that hasn't started yet,
	                         * finish it immediately. Otherwise it will be animating from a location
	                         * that was probably never commited to screen and look like a jumpy box.
	                         */
	                        if (!hasLayoutChanged) {
	                            finishAnimation(this);
	                        }
	                        if (this.isLead() && this.options.onExitComplete) {
	                            this.options.onExitComplete();
	                        }
	                    }
	                    this.targetLayout = newLayout;
	                });
	            }
	        }
	        unmount() {
	            this.options.layoutId && this.willUpdate();
	            this.root.nodes.remove(this);
	            const stack = this.getStack();
	            stack && stack.remove(this);
	            this.parent && this.parent.children.delete(this);
	            this.instance = undefined;
	            cancelFrame(this.updateProjection);
	        }
	        // only on the root
	        blockUpdate() {
	            this.updateManuallyBlocked = true;
	        }
	        unblockUpdate() {
	            this.updateManuallyBlocked = false;
	        }
	        isUpdateBlocked() {
	            return this.updateManuallyBlocked || this.updateBlockedByResize;
	        }
	        isTreeAnimationBlocked() {
	            return (this.isAnimationBlocked ||
	                (this.parent && this.parent.isTreeAnimationBlocked()) ||
	                false);
	        }
	        // Note: currently only running on root node
	        startUpdate() {
	            if (this.isUpdateBlocked())
	                return;
	            this.isUpdating = true;
	            this.nodes && this.nodes.forEach(resetSkewAndRotation);
	            this.animationId++;
	        }
	        getTransformTemplate() {
	            const { visualElement } = this.options;
	            return visualElement && visualElement.getProps().transformTemplate;
	        }
	        willUpdate(shouldNotifyListeners = true) {
	            this.root.hasTreeAnimated = true;
	            if (this.root.isUpdateBlocked()) {
	                this.options.onExitComplete && this.options.onExitComplete();
	                return;
	            }
	            /**
	             * If we're running optimised appear animations then these must be
	             * cancelled before measuring the DOM. This is so we can measure
	             * the true layout of the element rather than the WAAPI animation
	             * which will be unaffected by the resetSkewAndRotate step.
	             *
	             * Note: This is a DOM write. Worst case scenario is this is sandwiched
	             * between other snapshot reads which will cause unnecessary style recalculations.
	             * This has to happen here though, as we don't yet know which nodes will need
	             * snapshots in startUpdate(), but we only want to cancel optimised animations
	             * if a layout animation measurement is actually going to be affected by them.
	             */
	            if (window.MotionCancelOptimisedAnimation &&
	                !this.hasCheckedOptimisedAppear) {
	                cancelTreeOptimisedTransformAnimations(this);
	            }
	            !this.root.isUpdating && this.root.startUpdate();
	            if (this.isLayoutDirty)
	                return;
	            this.isLayoutDirty = true;
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                node.shouldResetTransform = true;
	                node.updateScroll("snapshot");
	                if (node.options.layoutRoot) {
	                    node.willUpdate(false);
	                }
	            }
	            const { layoutId, layout } = this.options;
	            if (layoutId === undefined && !layout)
	                return;
	            const transformTemplate = this.getTransformTemplate();
	            this.prevTransformTemplateValue = transformTemplate
	                ? transformTemplate(this.latestValues, "")
	                : undefined;
	            this.updateSnapshot();
	            shouldNotifyListeners && this.notifyListeners("willUpdate");
	        }
	        update() {
	            this.updateScheduled = false;
	            const updateWasBlocked = this.isUpdateBlocked();
	            // When doing an instant transition, we skip the layout update,
	            // but should still clean up the measurements so that the next
	            // snapshot could be taken correctly.
	            if (updateWasBlocked) {
	                this.unblockUpdate();
	                this.clearAllSnapshots();
	                this.nodes.forEach(clearMeasurements);
	                return;
	            }
	            if (!this.isUpdating) {
	                this.nodes.forEach(clearIsLayoutDirty);
	            }
	            this.isUpdating = false;
	            /**
	             * Write
	             */
	            this.nodes.forEach(resetTransformStyle);
	            /**
	             * Read ==================
	             */
	            // Update layout measurements of updated children
	            this.nodes.forEach(updateLayout);
	            /**
	             * Write
	             */
	            // Notify listeners that the layout is updated
	            this.nodes.forEach(notifyLayoutUpdate);
	            this.clearAllSnapshots();
	            /**
	             * Manually flush any pending updates. Ideally
	             * we could leave this to the following requestAnimationFrame but this seems
	             * to leave a flash of incorrectly styled content.
	             */
	            const now = time.now();
	            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);
	            frameData.timestamp = now;
	            frameData.isProcessing = true;
	            frameSteps.update.process(frameData);
	            frameSteps.preRender.process(frameData);
	            frameSteps.render.process(frameData);
	            frameData.isProcessing = false;
	        }
	        didUpdate() {
	            if (!this.updateScheduled) {
	                this.updateScheduled = true;
	                microtask.read(this.scheduleUpdate);
	            }
	        }
	        clearAllSnapshots() {
	            this.nodes.forEach(clearSnapshot);
	            this.sharedNodes.forEach(removeLeadSnapshots);
	        }
	        scheduleUpdateProjection() {
	            if (!this.projectionUpdateScheduled) {
	                this.projectionUpdateScheduled = true;
	                frame.preRender(this.updateProjection, false, true);
	            }
	        }
	        scheduleCheckAfterUnmount() {
	            /**
	             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,
	             * we manually call didUpdate to give a chance to the siblings to animate.
	             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.
	             */
	            frame.postRender(() => {
	                if (this.isLayoutDirty) {
	                    this.root.didUpdate();
	                }
	                else {
	                    this.root.checkUpdateFailed();
	                }
	            });
	        }
	        /**
	         * Update measurements
	         */
	        updateSnapshot() {
	            if (this.snapshot || !this.instance)
	                return;
	            this.snapshot = this.measure();
	        }
	        updateLayout() {
	            if (!this.instance)
	                return;
	            // TODO: Incorporate into a forwarded scroll offset
	            this.updateScroll();
	            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&
	                !this.isLayoutDirty) {
	                return;
	            }
	            /**
	             * When a node is mounted, it simply resumes from the prevLead's
	             * snapshot instead of taking a new one, but the ancestors scroll
	             * might have updated while the prevLead is unmounted. We need to
	             * update the scroll again to make sure the layout we measure is
	             * up to date.
	             */
	            if (this.resumeFrom && !this.resumeFrom.instance) {
	                for (let i = 0; i < this.path.length; i++) {
	                    const node = this.path[i];
	                    node.updateScroll();
	                }
	            }
	            const prevLayout = this.layout;
	            this.layout = this.measure(false);
	            this.layoutCorrected = createBox();
	            this.isLayoutDirty = false;
	            this.projectionDelta = undefined;
	            this.notifyListeners("measure", this.layout.layoutBox);
	            const { visualElement } = this.options;
	            visualElement &&
	                visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);
	        }
	        updateScroll(phase = "measure") {
	            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
	            if (this.scroll &&
	                this.scroll.animationId === this.root.animationId &&
	                this.scroll.phase === phase) {
	                needsMeasurement = false;
	            }
	            if (needsMeasurement) {
	                const isRoot = checkIsScrollRoot(this.instance);
	                this.scroll = {
	                    animationId: this.root.animationId,
	                    phase,
	                    isRoot,
	                    offset: measureScroll(this.instance),
	                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,
	                };
	            }
	        }
	        resetTransform() {
	            if (!resetTransform)
	                return;
	            const isResetRequested = this.isLayoutDirty ||
	                this.shouldResetTransform ||
	                this.options.alwaysMeasureLayout;
	            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
	            const transformTemplate = this.getTransformTemplate();
	            const transformTemplateValue = transformTemplate
	                ? transformTemplate(this.latestValues, "")
	                : undefined;
	            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
	            if (isResetRequested &&
	                (hasProjection ||
	                    hasTransform(this.latestValues) ||
	                    transformTemplateHasChanged)) {
	                resetTransform(this.instance, transformTemplateValue);
	                this.shouldResetTransform = false;
	                this.scheduleRender();
	            }
	        }
	        measure(removeTransform = true) {
	            const pageBox = this.measurePageBox();
	            let layoutBox = this.removeElementScroll(pageBox);
	            /**
	             * Measurements taken during the pre-render stage
	             * still have transforms applied so we remove them
	             * via calculation.
	             */
	            if (removeTransform) {
	                layoutBox = this.removeTransform(layoutBox);
	            }
	            roundBox(layoutBox);
	            return {
	                animationId: this.root.animationId,
	                measuredBox: pageBox,
	                layoutBox,
	                latestValues: {},
	                source: this.id,
	            };
	        }
	        measurePageBox() {
	            var _a;
	            const { visualElement } = this.options;
	            if (!visualElement)
	                return createBox();
	            const box = visualElement.measureViewportBox();
	            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);
	            if (!wasInScrollRoot) {
	                // Remove viewport scroll to give page-relative coordinates
	                const { scroll } = this.root;
	                if (scroll) {
	                    translateAxis(box.x, scroll.offset.x);
	                    translateAxis(box.y, scroll.offset.y);
	                }
	            }
	            return box;
	        }
	        removeElementScroll(box) {
	            var _a;
	            const boxWithoutScroll = createBox();
	            copyBoxInto(boxWithoutScroll, box);
	            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {
	                return boxWithoutScroll;
	            }
	            /**
	             * Performance TODO: Keep a cumulative scroll offset down the tree
	             * rather than loop back up the path.
	             */
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                const { scroll, options } = node;
	                if (node !== this.root && scroll && options.layoutScroll) {
	                    /**
	                     * If this is a new scroll root, we want to remove all previous scrolls
	                     * from the viewport box.
	                     */
	                    if (scroll.wasRoot) {
	                        copyBoxInto(boxWithoutScroll, box);
	                    }
	                    translateAxis(boxWithoutScroll.x, scroll.offset.x);
	                    translateAxis(boxWithoutScroll.y, scroll.offset.y);
	                }
	            }
	            return boxWithoutScroll;
	        }
	        applyTransform(box, transformOnly = false) {
	            const withTransforms = createBox();
	            copyBoxInto(withTransforms, box);
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                if (!transformOnly &&
	                    node.options.layoutScroll &&
	                    node.scroll &&
	                    node !== node.root) {
	                    transformBox(withTransforms, {
	                        x: -node.scroll.offset.x,
	                        y: -node.scroll.offset.y,
	                    });
	                }
	                if (!hasTransform(node.latestValues))
	                    continue;
	                transformBox(withTransforms, node.latestValues);
	            }
	            if (hasTransform(this.latestValues)) {
	                transformBox(withTransforms, this.latestValues);
	            }
	            return withTransforms;
	        }
	        removeTransform(box) {
	            const boxWithoutTransform = createBox();
	            copyBoxInto(boxWithoutTransform, box);
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                if (!node.instance)
	                    continue;
	                if (!hasTransform(node.latestValues))
	                    continue;
	                hasScale(node.latestValues) && node.updateSnapshot();
	                const sourceBox = createBox();
	                const nodeBox = node.measurePageBox();
	                copyBoxInto(sourceBox, nodeBox);
	                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);
	            }
	            if (hasTransform(this.latestValues)) {
	                removeBoxTransforms(boxWithoutTransform, this.latestValues);
	            }
	            return boxWithoutTransform;
	        }
	        setTargetDelta(delta) {
	            this.targetDelta = delta;
	            this.root.scheduleUpdateProjection();
	            this.isProjectionDirty = true;
	        }
	        setOptions(options) {
	            this.options = {
	                ...this.options,
	                ...options,
	                crossfade: options.crossfade !== undefined ? options.crossfade : true,
	            };
	        }
	        clearMeasurements() {
	            this.scroll = undefined;
	            this.layout = undefined;
	            this.snapshot = undefined;
	            this.prevTransformTemplateValue = undefined;
	            this.targetDelta = undefined;
	            this.target = undefined;
	            this.isLayoutDirty = false;
	        }
	        forceRelativeParentToResolveTarget() {
	            if (!this.relativeParent)
	                return;
	            /**
	             * If the parent target isn't up-to-date, force it to update.
	             * This is an unfortunate de-optimisation as it means any updating relative
	             * projection will cause all the relative parents to recalculate back
	             * up the tree.
	             */
	            if (this.relativeParent.resolvedRelativeTargetAt !==
	                frameData.timestamp) {
	                this.relativeParent.resolveTargetDelta(true);
	            }
	        }
	        resolveTargetDelta(forceRecalculation = false) {
	            var _a;
	            /**
	             * Once the dirty status of nodes has been spread through the tree, we also
	             * need to check if we have a shared node of a different depth that has itself
	             * been dirtied.
	             */
	            const lead = this.getLead();
	            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
	            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
	            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
	            const isShared = Boolean(this.resumingFrom) || this !== lead;
	            /**
	             * We don't use transform for this step of processing so we don't
	             * need to check whether any nodes have changed transform.
	             */
	            const canSkip = !(forceRecalculation ||
	                (isShared && this.isSharedProjectionDirty) ||
	                this.isProjectionDirty ||
	                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||
	                this.attemptToResolveRelativeTarget ||
	                this.root.updateBlockedByResize);
	            if (canSkip)
	                return;
	            const { layout, layoutId } = this.options;
	            /**
	             * If we have no layout, we can't perform projection, so early return
	             */
	            if (!this.layout || !(layout || layoutId))
	                return;
	            this.resolvedRelativeTargetAt = frameData.timestamp;
	            /**
	             * If we don't have a targetDelta but do have a layout, we can attempt to resolve
	             * a relativeParent. This will allow a component to perform scale correction
	             * even if no animation has started.
	             */
	            if (!this.targetDelta && !this.relativeTarget) {
	                const relativeParent = this.getClosestProjectingParent();
	                if (relativeParent &&
	                    relativeParent.layout &&
	                    this.animationProgress !== 1) {
	                    this.relativeParent = relativeParent;
	                    this.forceRelativeParentToResolveTarget();
	                    this.relativeTarget = createBox();
	                    this.relativeTargetOrigin = createBox();
	                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
	                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
	                }
	                else {
	                    this.relativeParent = this.relativeTarget = undefined;
	                }
	            }
	            /**
	             * If we have no relative target or no target delta our target isn't valid
	             * for this frame.
	             */
	            if (!this.relativeTarget && !this.targetDelta)
	                return;
	            /**
	             * Lazy-init target data structure
	             */
	            if (!this.target) {
	                this.target = createBox();
	                this.targetWithTransforms = createBox();
	            }
	            /**
	             * If we've got a relative box for this component, resolve it into a target relative to the parent.
	             */
	            if (this.relativeTarget &&
	                this.relativeTargetOrigin &&
	                this.relativeParent &&
	                this.relativeParent.target) {
	                this.forceRelativeParentToResolveTarget();
	                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
	                /**
	                 * If we've only got a targetDelta, resolve it into a target
	                 */
	            }
	            else if (this.targetDelta) {
	                if (Boolean(this.resumingFrom)) {
	                    // TODO: This is creating a new object every frame
	                    this.target = this.applyTransform(this.layout.layoutBox);
	                }
	                else {
	                    copyBoxInto(this.target, this.layout.layoutBox);
	                }
	                applyBoxDelta(this.target, this.targetDelta);
	            }
	            else {
	                /**
	                 * If no target, use own layout as target
	                 */
	                copyBoxInto(this.target, this.layout.layoutBox);
	            }
	            /**
	             * If we've been told to attempt to resolve a relative target, do so.
	             */
	            if (this.attemptToResolveRelativeTarget) {
	                this.attemptToResolveRelativeTarget = false;
	                const relativeParent = this.getClosestProjectingParent();
	                if (relativeParent &&
	                    Boolean(relativeParent.resumingFrom) ===
	                        Boolean(this.resumingFrom) &&
	                    !relativeParent.options.layoutScroll &&
	                    relativeParent.target &&
	                    this.animationProgress !== 1) {
	                    this.relativeParent = relativeParent;
	                    this.forceRelativeParentToResolveTarget();
	                    this.relativeTarget = createBox();
	                    this.relativeTargetOrigin = createBox();
	                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
	                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
	                }
	                else {
	                    this.relativeParent = this.relativeTarget = undefined;
	                }
	            }
	            /**
	             * Increase debug counter for resolved target deltas
	             */
	            if (isDebug) {
	                metrics.resolvedTargetDeltas++;
	            }
	        }
	        getClosestProjectingParent() {
	            if (!this.parent ||
	                hasScale(this.parent.latestValues) ||
	                has2DTranslate(this.parent.latestValues)) {
	                return undefined;
	            }
	            if (this.parent.isProjecting()) {
	                return this.parent;
	            }
	            else {
	                return this.parent.getClosestProjectingParent();
	            }
	        }
	        isProjecting() {
	            return Boolean((this.relativeTarget ||
	                this.targetDelta ||
	                this.options.layoutRoot) &&
	                this.layout);
	        }
	        calcProjection() {
	            var _a;
	            const lead = this.getLead();
	            const isShared = Boolean(this.resumingFrom) || this !== lead;
	            let canSkip = true;
	            /**
	             * If this is a normal layout animation and neither this node nor its nearest projecting
	             * is dirty then we can't skip.
	             */
	            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {
	                canSkip = false;
	            }
	            /**
	             * If this is a shared layout animation and this node's shared projection is dirty then
	             * we can't skip.
	             */
	            if (isShared &&
	                (this.isSharedProjectionDirty || this.isTransformDirty)) {
	                canSkip = false;
	            }
	            /**
	             * If we have resolved the target this frame we must recalculate the
	             * projection to ensure it visually represents the internal calculations.
	             */
	            if (this.resolvedRelativeTargetAt === frameData.timestamp) {
	                canSkip = false;
	            }
	            if (canSkip)
	                return;
	            const { layout, layoutId } = this.options;
	            /**
	             * If this section of the tree isn't animating we can
	             * delete our target sources for the following frame.
	             */
	            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||
	                this.currentAnimation ||
	                this.pendingAnimation);
	            if (!this.isTreeAnimating) {
	                this.targetDelta = this.relativeTarget = undefined;
	            }
	            if (!this.layout || !(layout || layoutId))
	                return;
	            /**
	             * Reset the corrected box with the latest values from box, as we're then going
	             * to perform mutative operations on it.
	             */
	            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
	            /**
	             * Record previous tree scales before updating.
	             */
	            const prevTreeScaleX = this.treeScale.x;
	            const prevTreeScaleY = this.treeScale.y;
	            /**
	             * Apply all the parent deltas to this box to produce the corrected box. This
	             * is the layout box, as it will appear on screen as a result of the transforms of its parents.
	             */
	            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
	            /**
	             * If this layer needs to perform scale correction but doesn't have a target,
	             * use the layout as the target.
	             */
	            if (lead.layout &&
	                !lead.target &&
	                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
	                lead.target = lead.layout.layoutBox;
	                lead.targetWithTransforms = createBox();
	            }
	            const { target } = lead;
	            if (!target) {
	                /**
	                 * If we don't have a target to project into, but we were previously
	                 * projecting, we want to remove the stored transform and schedule
	                 * a render to ensure the elements reflect the removed transform.
	                 */
	                if (this.prevProjectionDelta) {
	                    this.createProjectionDeltas();
	                    this.scheduleRender();
	                }
	                return;
	            }
	            if (!this.projectionDelta || !this.prevProjectionDelta) {
	                this.createProjectionDeltas();
	            }
	            else {
	                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);
	                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);
	            }
	            /**
	             * Update the delta between the corrected box and the target box before user-set transforms were applied.
	             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
	             * for our layout reprojection, but still allow them to be scaled correctly by the user.
	             * It might be that to simplify this we may want to accept that user-set scale is also corrected
	             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
	             * to allow people to choose whether these styles are corrected based on just the
	             * layout reprojection or the final bounding box.
	             */
	            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
	            if (this.treeScale.x !== prevTreeScaleX ||
	                this.treeScale.y !== prevTreeScaleY ||
	                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||
	                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {
	                this.hasProjected = true;
	                this.scheduleRender();
	                this.notifyListeners("projectionUpdate", target);
	            }
	            /**
	             * Increase debug counter for recalculated projections
	             */
	            if (isDebug) {
	                metrics.recalculatedProjection++;
	            }
	        }
	        hide() {
	            this.isVisible = false;
	            // TODO: Schedule render
	        }
	        show() {
	            this.isVisible = true;
	            // TODO: Schedule render
	        }
	        scheduleRender(notifyAll = true) {
	            var _a;
	            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();
	            if (notifyAll) {
	                const stack = this.getStack();
	                stack && stack.scheduleRender();
	            }
	            if (this.resumingFrom && !this.resumingFrom.instance) {
	                this.resumingFrom = undefined;
	            }
	        }
	        createProjectionDeltas() {
	            this.prevProjectionDelta = createDelta();
	            this.projectionDelta = createDelta();
	            this.projectionDeltaWithTransform = createDelta();
	        }
	        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
	            const snapshot = this.snapshot;
	            const snapshotLatestValues = snapshot
	                ? snapshot.latestValues
	                : {};
	            const mixedValues = { ...this.latestValues };
	            const targetDelta = createDelta();
	            if (!this.relativeParent ||
	                !this.relativeParent.options.layoutRoot) {
	                this.relativeTarget = this.relativeTargetOrigin = undefined;
	            }
	            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
	            const relativeLayout = createBox();
	            const snapshotSource = snapshot ? snapshot.source : undefined;
	            const layoutSource = this.layout ? this.layout.source : undefined;
	            const isSharedLayoutAnimation = snapshotSource !== layoutSource;
	            const stack = this.getStack();
	            const isOnlyMember = !stack || stack.members.length <= 1;
	            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&
	                !isOnlyMember &&
	                this.options.crossfade === true &&
	                !this.path.some(hasOpacityCrossfade));
	            this.animationProgress = 0;
	            let prevRelativeTarget;
	            this.mixTargetDelta = (latest) => {
	                const progress = latest / 1000;
	                mixAxisDelta(targetDelta.x, delta.x, progress);
	                mixAxisDelta(targetDelta.y, delta.y, progress);
	                this.setTargetDelta(targetDelta);
	                if (this.relativeTarget &&
	                    this.relativeTargetOrigin &&
	                    this.layout &&
	                    this.relativeParent &&
	                    this.relativeParent.layout) {
	                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
	                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);
	                    /**
	                     * If this is an unchanged relative target we can consider the
	                     * projection not dirty.
	                     */
	                    if (prevRelativeTarget &&
	                        boxEquals(this.relativeTarget, prevRelativeTarget)) {
	                        this.isProjectionDirty = false;
	                    }
	                    if (!prevRelativeTarget)
	                        prevRelativeTarget = createBox();
	                    copyBoxInto(prevRelativeTarget, this.relativeTarget);
	                }
	                if (isSharedLayoutAnimation) {
	                    this.animationValues = mixedValues;
	                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
	                }
	                this.root.scheduleUpdateProjection();
	                this.scheduleRender();
	                this.animationProgress = progress;
	            };
	            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);
	        }
	        startAnimation(options) {
	            this.notifyListeners("animationStart");
	            this.currentAnimation && this.currentAnimation.stop();
	            if (this.resumingFrom && this.resumingFrom.currentAnimation) {
	                this.resumingFrom.currentAnimation.stop();
	            }
	            if (this.pendingAnimation) {
	                cancelFrame(this.pendingAnimation);
	                this.pendingAnimation = undefined;
	            }
	            /**
	             * Start the animation in the next frame to have a frame with progress 0,
	             * where the target is the same as when the animation started, so we can
	             * calculate the relative positions correctly for instant transitions.
	             */
	            this.pendingAnimation = frame.update(() => {
	                globalProjectionState.hasAnimatedSinceResize = true;
	                this.currentAnimation = animateSingleValue(0, animationTarget, {
	                    ...options,
	                    onUpdate: (latest) => {
	                        this.mixTargetDelta(latest);
	                        options.onUpdate && options.onUpdate(latest);
	                    },
	                    onComplete: () => {
	                        options.onComplete && options.onComplete();
	                        this.completeAnimation();
	                    },
	                });
	                if (this.resumingFrom) {
	                    this.resumingFrom.currentAnimation = this.currentAnimation;
	                }
	                this.pendingAnimation = undefined;
	            });
	        }
	        completeAnimation() {
	            if (this.resumingFrom) {
	                this.resumingFrom.currentAnimation = undefined;
	                this.resumingFrom.preserveOpacity = undefined;
	            }
	            const stack = this.getStack();
	            stack && stack.exitAnimationComplete();
	            this.resumingFrom =
	                this.currentAnimation =
	                    this.animationValues =
	                        undefined;
	            this.notifyListeners("animationComplete");
	        }
	        finishAnimation() {
	            if (this.currentAnimation) {
	                this.mixTargetDelta && this.mixTargetDelta(animationTarget);
	                this.currentAnimation.stop();
	            }
	            this.completeAnimation();
	        }
	        applyTransformsToTarget() {
	            const lead = this.getLead();
	            let { targetWithTransforms, target, layout, latestValues } = lead;
	            if (!targetWithTransforms || !target || !layout)
	                return;
	            /**
	             * If we're only animating position, and this element isn't the lead element,
	             * then instead of projecting into the lead box we instead want to calculate
	             * a new target that aligns the two boxes but maintains the layout shape.
	             */
	            if (this !== lead &&
	                this.layout &&
	                layout &&
	                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {
	                target = this.target || createBox();
	                const xLength = calcLength(this.layout.layoutBox.x);
	                target.x.min = lead.target.x.min;
	                target.x.max = target.x.min + xLength;
	                const yLength = calcLength(this.layout.layoutBox.y);
	                target.y.min = lead.target.y.min;
	                target.y.max = target.y.min + yLength;
	            }
	            copyBoxInto(targetWithTransforms, target);
	            /**
	             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
	             * This is the final box that we will then project into by calculating a transform delta and
	             * applying it to the corrected box.
	             */
	            transformBox(targetWithTransforms, latestValues);
	            /**
	             * Update the delta between the corrected box and the final target box, after
	             * user-set transforms are applied to it. This will be used by the renderer to
	             * create a transform style that will reproject the element from its layout layout
	             * into the desired bounding box.
	             */
	            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
	        }
	        registerSharedNode(layoutId, node) {
	            if (!this.sharedNodes.has(layoutId)) {
	                this.sharedNodes.set(layoutId, new NodeStack());
	            }
	            const stack = this.sharedNodes.get(layoutId);
	            stack.add(node);
	            const config = node.options.initialPromotionConfig;
	            node.promote({
	                transition: config ? config.transition : undefined,
	                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity
	                    ? config.shouldPreserveFollowOpacity(node)
	                    : undefined,
	            });
	        }
	        isLead() {
	            const stack = this.getStack();
	            return stack ? stack.lead === this : true;
	        }
	        getLead() {
	            var _a;
	            const { layoutId } = this.options;
	            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
	        }
	        getPrevLead() {
	            var _a;
	            const { layoutId } = this.options;
	            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;
	        }
	        getStack() {
	            const { layoutId } = this.options;
	            if (layoutId)
	                return this.root.sharedNodes.get(layoutId);
	        }
	        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {
	            const stack = this.getStack();
	            if (stack)
	                stack.promote(this, preserveFollowOpacity);
	            if (needsReset) {
	                this.projectionDelta = undefined;
	                this.needsReset = true;
	            }
	            if (transition)
	                this.setOptions({ transition });
	        }
	        relegate() {
	            const stack = this.getStack();
	            if (stack) {
	                return stack.relegate(this);
	            }
	            else {
	                return false;
	            }
	        }
	        resetSkewAndRotation() {
	            const { visualElement } = this.options;
	            if (!visualElement)
	                return;
	            // If there's no detected skew or rotation values, we can early return without a forced render.
	            let hasDistortingTransform = false;
	            /**
	             * An unrolled check for rotation values. Most elements don't have any rotation and
	             * skipping the nested loop and new object creation is 50% faster.
	             */
	            const { latestValues } = visualElement;
	            if (latestValues.z ||
	                latestValues.rotate ||
	                latestValues.rotateX ||
	                latestValues.rotateY ||
	                latestValues.rotateZ ||
	                latestValues.skewX ||
	                latestValues.skewY) {
	                hasDistortingTransform = true;
	            }
	            // If there's no distorting values, we don't need to do any more.
	            if (!hasDistortingTransform)
	                return;
	            const resetValues = {};
	            if (latestValues.z) {
	                resetDistortingTransform("z", visualElement, resetValues, this.animationValues);
	            }
	            // Check the skew and rotate value of all axes and reset to 0
	            for (let i = 0; i < transformAxes.length; i++) {
	                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
	                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
	            }
	            // Force a render of this element to apply the transform with all skews and rotations
	            // set to 0.
	            visualElement.render();
	            // Put back all the values we reset
	            for (const key in resetValues) {
	                visualElement.setStaticValue(key, resetValues[key]);
	                if (this.animationValues) {
	                    this.animationValues[key] = resetValues[key];
	                }
	            }
	            // Schedule a render for the next frame. This ensures we won't visually
	            // see the element with the reset rotate value applied.
	            visualElement.scheduleRender();
	        }
	        getProjectionStyles(styleProp) {
	            var _a, _b;
	            if (!this.instance || this.isSVG)
	                return undefined;
	            if (!this.isVisible) {
	                return hiddenVisibility;
	            }
	            const styles = {
	                visibility: "",
	            };
	            const transformTemplate = this.getTransformTemplate();
	            if (this.needsReset) {
	                this.needsReset = false;
	                styles.opacity = "";
	                styles.pointerEvents =
	                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
	                styles.transform = transformTemplate
	                    ? transformTemplate(this.latestValues, "")
	                    : "none";
	                return styles;
	            }
	            const lead = this.getLead();
	            if (!this.projectionDelta || !this.layout || !lead.target) {
	                const emptyStyles = {};
	                if (this.options.layoutId) {
	                    emptyStyles.opacity =
	                        this.latestValues.opacity !== undefined
	                            ? this.latestValues.opacity
	                            : 1;
	                    emptyStyles.pointerEvents =
	                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
	                }
	                if (this.hasProjected && !hasTransform(this.latestValues)) {
	                    emptyStyles.transform = transformTemplate
	                        ? transformTemplate({}, "")
	                        : "none";
	                    this.hasProjected = false;
	                }
	                return emptyStyles;
	            }
	            const valuesToRender = lead.animationValues || lead.latestValues;
	            this.applyTransformsToTarget();
	            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
	            if (transformTemplate) {
	                styles.transform = transformTemplate(valuesToRender, styles.transform);
	            }
	            const { x, y } = this.projectionDelta;
	            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
	            if (lead.animationValues) {
	                /**
	                 * If the lead component is animating, assign this either the entering/leaving
	                 * opacity
	                 */
	                styles.opacity =
	                    lead === this
	                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1
	                        : this.preserveOpacity
	                            ? this.latestValues.opacity
	                            : valuesToRender.opacityExit;
	            }
	            else {
	                /**
	                 * Or we're not animating at all, set the lead component to its layout
	                 * opacity and other components to hidden.
	                 */
	                styles.opacity =
	                    lead === this
	                        ? valuesToRender.opacity !== undefined
	                            ? valuesToRender.opacity
	                            : ""
	                        : valuesToRender.opacityExit !== undefined
	                            ? valuesToRender.opacityExit
	                            : 0;
	            }
	            /**
	             * Apply scale correction
	             */
	            for (const key in scaleCorrectors) {
	                if (valuesToRender[key] === undefined)
	                    continue;
	                const { correct, applyTo } = scaleCorrectors[key];
	                /**
	                 * Only apply scale correction to the value if we have an
	                 * active projection transform. Otherwise these values become
	                 * vulnerable to distortion if the element changes size without
	                 * a corresponding layout animation.
	                 */
	                const corrected = styles.transform === "none"
	                    ? valuesToRender[key]
	                    : correct(valuesToRender[key], lead);
	                if (applyTo) {
	                    const num = applyTo.length;
	                    for (let i = 0; i < num; i++) {
	                        styles[applyTo[i]] = corrected;
	                    }
	                }
	                else {
	                    styles[key] = corrected;
	                }
	            }
	            /**
	             * Disable pointer events on follow components. This is to ensure
	             * that if a follow component covers a lead component it doesn't block
	             * pointer events on the lead.
	             */
	            if (this.options.layoutId) {
	                styles.pointerEvents =
	                    lead === this
	                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || ""
	                        : "none";
	            }
	            return styles;
	        }
	        clearSnapshot() {
	            this.resumeFrom = this.snapshot = undefined;
	        }
	        // Only run on root
	        resetTree() {
	            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });
	            this.root.nodes.forEach(clearMeasurements);
	            this.root.sharedNodes.clear();
	        }
	    };
	}
	function updateLayout(node) {
	    node.updateLayout();
	}
	function notifyLayoutUpdate(node) {
	    var _a;
	    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;
	    if (node.isLead() &&
	        node.layout &&
	        snapshot &&
	        node.hasListeners("didUpdate")) {
	        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;
	        const { animationType } = node.options;
	        const isShared = snapshot.source !== node.layout.source;
	        // TODO Maybe we want to also resize the layout snapshot so we don't trigger
	        // animations for instance if layout="size" and an element has only changed position
	        if (animationType === "size") {
	            eachAxis((axis) => {
	                const axisSnapshot = isShared
	                    ? snapshot.measuredBox[axis]
	                    : snapshot.layoutBox[axis];
	                const length = calcLength(axisSnapshot);
	                axisSnapshot.min = layout[axis].min;
	                axisSnapshot.max = axisSnapshot.min + length;
	            });
	        }
	        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {
	            eachAxis((axis) => {
	                const axisSnapshot = isShared
	                    ? snapshot.measuredBox[axis]
	                    : snapshot.layoutBox[axis];
	                const length = calcLength(layout[axis]);
	                axisSnapshot.max = axisSnapshot.min + length;
	                /**
	                 * Ensure relative target gets resized and rerendererd
	                 */
	                if (node.relativeTarget && !node.currentAnimation) {
	                    node.isProjectionDirty = true;
	                    node.relativeTarget[axis].max =
	                        node.relativeTarget[axis].min + length;
	                }
	            });
	        }
	        const layoutDelta = createDelta();
	        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);
	        const visualDelta = createDelta();
	        if (isShared) {
	            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
	        }
	        else {
	            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);
	        }
	        const hasLayoutChanged = !isDeltaZero(layoutDelta);
	        let hasRelativeTargetChanged = false;
	        if (!node.resumeFrom) {
	            const relativeParent = node.getClosestProjectingParent();
	            /**
	             * If the relativeParent is itself resuming from a different element then
	             * the relative snapshot is not relavent
	             */
	            if (relativeParent && !relativeParent.resumeFrom) {
	                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
	                if (parentSnapshot && parentLayout) {
	                    const relativeSnapshot = createBox();
	                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
	                    const relativeLayout = createBox();
	                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);
	                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
	                        hasRelativeTargetChanged = true;
	                    }
	                    if (relativeParent.options.layoutRoot) {
	                        node.relativeTarget = relativeLayout;
	                        node.relativeTargetOrigin = relativeSnapshot;
	                        node.relativeParent = relativeParent;
	                    }
	                }
	            }
	        }
	        node.notifyListeners("didUpdate", {
	            layout,
	            snapshot,
	            delta: visualDelta,
	            layoutDelta,
	            hasLayoutChanged,
	            hasRelativeTargetChanged,
	        });
	    }
	    else if (node.isLead()) {
	        const { onExitComplete } = node.options;
	        onExitComplete && onExitComplete();
	    }
	    /**
	     * Clearing transition
	     * TODO: Investigate why this transition is being passed in as {type: false } from Framer
	     * and why we need it at all
	     */
	    node.options.transition = undefined;
	}
	function propagateDirtyNodes(node) {
	    /**
	     * Increase debug counter for nodes encountered this frame
	     */
	    if (isDebug) {
	        metrics.totalNodes++;
	    }
	    if (!node.parent)
	        return;
	    /**
	     * If this node isn't projecting, propagate isProjectionDirty. It will have
	     * no performance impact but it will allow the next child that *is* projecting
	     * but *isn't* dirty to just check its parent to see if *any* ancestor needs
	     * correcting.
	     */
	    if (!node.isProjecting()) {
	        node.isProjectionDirty = node.parent.isProjectionDirty;
	    }
	    /**
	     * Propagate isSharedProjectionDirty and isTransformDirty
	     * throughout the whole tree. A future revision can take another look at
	     * this but for safety we still recalcualte shared nodes.
	     */
	    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||
	        node.parent.isProjectionDirty ||
	        node.parent.isSharedProjectionDirty));
	    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
	}
	function cleanDirtyNodes(node) {
	    node.isProjectionDirty =
	        node.isSharedProjectionDirty =
	            node.isTransformDirty =
	                false;
	}
	function clearSnapshot(node) {
	    node.clearSnapshot();
	}
	function clearMeasurements(node) {
	    node.clearMeasurements();
	}
	function clearIsLayoutDirty(node) {
	    node.isLayoutDirty = false;
	}
	function resetTransformStyle(node) {
	    const { visualElement } = node.options;
	    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
	        visualElement.notify("BeforeLayoutMeasure");
	    }
	    node.resetTransform();
	}
	function finishAnimation(node) {
	    node.finishAnimation();
	    node.targetDelta = node.relativeTarget = node.target = undefined;
	    node.isProjectionDirty = true;
	}
	function resolveTargetDelta(node) {
	    node.resolveTargetDelta();
	}
	function calcProjection(node) {
	    node.calcProjection();
	}
	function resetSkewAndRotation(node) {
	    node.resetSkewAndRotation();
	}
	function removeLeadSnapshots(stack) {
	    stack.removeLeadSnapshot();
	}
	function mixAxisDelta(output, delta, p) {
	    output.translate = mixNumber$1(delta.translate, 0, p);
	    output.scale = mixNumber$1(delta.scale, 1, p);
	    output.origin = delta.origin;
	    output.originPoint = delta.originPoint;
	}
	function mixAxis(output, from, to, p) {
	    output.min = mixNumber$1(from.min, to.min, p);
	    output.max = mixNumber$1(from.max, to.max, p);
	}
	function mixBox(output, from, to, p) {
	    mixAxis(output.x, from.x, to.x, p);
	    mixAxis(output.y, from.y, to.y, p);
	}
	function hasOpacityCrossfade(node) {
	    return (node.animationValues && node.animationValues.opacityExit !== undefined);
	}
	const defaultLayoutTransition = {
	    duration: 0.45,
	    ease: [0.4, 0, 0.1, 1],
	};
	const userAgentContains = (string) => typeof navigator !== "undefined" &&
	    navigator.userAgent &&
	    navigator.userAgent.toLowerCase().includes(string);
	/**
	 * Measured bounding boxes must be rounded in Safari and
	 * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements
	 * can appear to jump.
	 */
	const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/")
	    ? Math.round
	    : noop;
	function roundAxis(axis) {
	    // Round to the nearest .5 pixels to support subpixel layouts
	    axis.min = roundPoint(axis.min);
	    axis.max = roundPoint(axis.max);
	}
	function roundBox(box) {
	    roundAxis(box.x);
	    roundAxis(box.y);
	}
	function shouldAnimatePositionOnly(animationType, snapshot, layout) {
	    return (animationType === "position" ||
	        (animationType === "preserve-aspect" &&
	            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));
	}
	function checkNodeWasScrollRoot(node) {
	    var _a;
	    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);
	}

	const DocumentProjectionNode = createProjectionNode$1({
	    attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
	    measureScroll: () => ({
	        x: document.documentElement.scrollLeft || document.body.scrollLeft,
	        y: document.documentElement.scrollTop || document.body.scrollTop,
	    }),
	    checkIsScrollRoot: () => true,
	});

	const rootProjectionNode = {
	    current: undefined,
	};
	const HTMLProjectionNode = createProjectionNode$1({
	    measureScroll: (instance) => ({
	        x: instance.scrollLeft,
	        y: instance.scrollTop,
	    }),
	    defaultParent: () => {
	        if (!rootProjectionNode.current) {
	            const documentNode = new DocumentProjectionNode({});
	            documentNode.mount(window);
	            documentNode.setOptions({ layoutScroll: true });
	            rootProjectionNode.current = documentNode;
	        }
	        return rootProjectionNode.current;
	    },
	    resetTransform: (instance, value) => {
	        instance.style.transform = value !== undefined ? value : "none";
	    },
	    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed"),
	});

	const drag = {
	    pan: {
	        Feature: PanGesture,
	    },
	    drag: {
	        Feature: DragGesture,
	        ProjectionNode: HTMLProjectionNode,
	        MeasureLayout,
	    },
	};

	function handleHoverEvent(node, event, lifecycle) {
	    const { props } = node;
	    if (node.animationState && props.whileHover) {
	        node.animationState.setActive("whileHover", lifecycle === "Start");
	    }
	    const eventName = ("onHover" + lifecycle);
	    const callback = props[eventName];
	    if (callback) {
	        frame.postRender(() => callback(event, extractEventInfo(event)));
	    }
	}
	class HoverGesture extends Feature {
	    mount() {
	        const { current } = this.node;
	        if (!current)
	            return;
	        this.unmount = hover(current, (startEvent) => {
	            handleHoverEvent(this.node, startEvent, "Start");
	            return (endEvent) => handleHoverEvent(this.node, endEvent, "End");
	        });
	    }
	    unmount() { }
	}

	class FocusGesture extends Feature {
	    constructor() {
	        super(...arguments);
	        this.isActive = false;
	    }
	    onFocus() {
	        let isFocusVisible = false;
	        /**
	         * If this element doesn't match focus-visible then don't
	         * apply whileHover. But, if matches throws that focus-visible
	         * is not a valid selector then in that browser outline styles will be applied
	         * to the element by default and we want to match that behaviour with whileFocus.
	         */
	        try {
	            isFocusVisible = this.node.current.matches(":focus-visible");
	        }
	        catch (e) {
	            isFocusVisible = true;
	        }
	        if (!isFocusVisible || !this.node.animationState)
	            return;
	        this.node.animationState.setActive("whileFocus", true);
	        this.isActive = true;
	    }
	    onBlur() {
	        if (!this.isActive || !this.node.animationState)
	            return;
	        this.node.animationState.setActive("whileFocus", false);
	        this.isActive = false;
	    }
	    mount() {
	        this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
	    }
	    unmount() { }
	}

	function handlePressEvent(node, event, lifecycle) {
	    const { props } = node;
	    if (node.animationState && props.whileTap) {
	        node.animationState.setActive("whileTap", lifecycle === "Start");
	    }
	    const eventName = ("onTap" + (lifecycle === "End" ? "" : lifecycle));
	    const callback = props[eventName];
	    if (callback) {
	        frame.postRender(() => callback(event, extractEventInfo(event)));
	    }
	}
	class PressGesture extends Feature {
	    mount() {
	        const { current } = this.node;
	        if (!current)
	            return;
	        this.unmount = press(current, (startEvent) => {
	            handlePressEvent(this.node, startEvent, "Start");
	            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? "End" : "Cancel");
	        }, { useGlobalTarget: this.node.props.globalTapTarget });
	    }
	    unmount() { }
	}

	/**
	 * Map an IntersectionHandler callback to an element. We only ever make one handler for one
	 * element, so even though these handlers might all be triggered by different
	 * observers, we can keep them in the same map.
	 */
	const observerCallbacks = new WeakMap();
	/**
	 * Multiple observers can be created for multiple element/document roots. Each with
	 * different settings. So here we store dictionaries of observers to each root,
	 * using serialised settings (threshold/margin) as lookup keys.
	 */
	const observers = new WeakMap();
	const fireObserverCallback = (entry) => {
	    const callback = observerCallbacks.get(entry.target);
	    callback && callback(entry);
	};
	const fireAllObserverCallbacks = (entries) => {
	    entries.forEach(fireObserverCallback);
	};
	function initIntersectionObserver({ root, ...options }) {
	    const lookupRoot = root || document;
	    /**
	     * If we don't have an observer lookup map for this root, create one.
	     */
	    if (!observers.has(lookupRoot)) {
	        observers.set(lookupRoot, {});
	    }
	    const rootObservers = observers.get(lookupRoot);
	    const key = JSON.stringify(options);
	    /**
	     * If we don't have an observer for this combination of root and settings,
	     * create one.
	     */
	    if (!rootObservers[key]) {
	        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
	    }
	    return rootObservers[key];
	}
	function observeIntersection(element, options, callback) {
	    const rootInteresectionObserver = initIntersectionObserver(options);
	    observerCallbacks.set(element, callback);
	    rootInteresectionObserver.observe(element);
	    return () => {
	        observerCallbacks.delete(element);
	        rootInteresectionObserver.unobserve(element);
	    };
	}

	const thresholdNames = {
	    some: 0,
	    all: 1,
	};
	class InViewFeature extends Feature {
	    constructor() {
	        super(...arguments);
	        this.hasEnteredView = false;
	        this.isInView = false;
	    }
	    startObserver() {
	        this.unmount();
	        const { viewport = {} } = this.node.getProps();
	        const { root, margin: rootMargin, amount = "some", once } = viewport;
	        const options = {
	            root: root ? root.current : undefined,
	            rootMargin,
	            threshold: typeof amount === "number" ? amount : thresholdNames[amount],
	        };
	        const onIntersectionUpdate = (entry) => {
	            const { isIntersecting } = entry;
	            /**
	             * If there's been no change in the viewport state, early return.
	             */
	            if (this.isInView === isIntersecting)
	                return;
	            this.isInView = isIntersecting;
	            /**
	             * Handle hasEnteredView. If this is only meant to run once, and
	             * element isn't visible, early return. Otherwise set hasEnteredView to true.
	             */
	            if (once && !isIntersecting && this.hasEnteredView) {
	                return;
	            }
	            else if (isIntersecting) {
	                this.hasEnteredView = true;
	            }
	            if (this.node.animationState) {
	                this.node.animationState.setActive("whileInView", isIntersecting);
	            }
	            /**
	             * Use the latest committed props rather than the ones in scope
	             * when this observer is created
	             */
	            const { onViewportEnter, onViewportLeave } = this.node.getProps();
	            const callback = isIntersecting ? onViewportEnter : onViewportLeave;
	            callback && callback(entry);
	        };
	        return observeIntersection(this.node.current, options, onIntersectionUpdate);
	    }
	    mount() {
	        this.startObserver();
	    }
	    update() {
	        if (typeof IntersectionObserver === "undefined")
	            return;
	        const { props, prevProps } = this.node;
	        const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
	        if (hasOptionsChanged) {
	            this.startObserver();
	        }
	    }
	    unmount() { }
	}
	function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
	    return (name) => viewport[name] !== prevViewport[name];
	}

	const gestureAnimations = {
	    inView: {
	        Feature: InViewFeature,
	    },
	    tap: {
	        Feature: PressGesture,
	    },
	    focus: {
	        Feature: FocusGesture,
	    },
	    hover: {
	        Feature: HoverGesture,
	    },
	};

	const layout = {
	    layout: {
	        ProjectionNode: HTMLProjectionNode,
	        MeasureLayout,
	    },
	};

	/**
	 * @public
	 */
	const MotionConfigContext = reactExports.createContext({
	    transformPagePoint: (p) => p,
	    isStatic: false,
	    reducedMotion: "never",
	});

	const MotionContext = reactExports.createContext({});

	const isBrowser = typeof window !== "undefined";

	const useIsomorphicLayoutEffect = isBrowser ? reactExports.useLayoutEffect : reactExports.useEffect;

	const LazyContext = reactExports.createContext({ strict: false });

	function useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {
	    var _a, _b;
	    const { visualElement: parent } = reactExports.useContext(MotionContext);
	    const lazyContext = reactExports.useContext(LazyContext);
	    const presenceContext = reactExports.useContext(PresenceContext);
	    const reducedMotionConfig = reactExports.useContext(MotionConfigContext).reducedMotion;
	    const visualElementRef = reactExports.useRef(null);
	    /**
	     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
	     */
	    createVisualElement = createVisualElement || lazyContext.renderer;
	    if (!visualElementRef.current && createVisualElement) {
	        visualElementRef.current = createVisualElement(Component, {
	            visualState,
	            parent,
	            props,
	            presenceContext,
	            blockInitialAnimation: presenceContext
	                ? presenceContext.initial === false
	                : false,
	            reducedMotionConfig,
	        });
	    }
	    const visualElement = visualElementRef.current;
	    /**
	     * Load Motion gesture and animation features. These are rendered as renderless
	     * components so each feature can optionally make use of React lifecycle methods.
	     */
	    const initialLayoutGroupConfig = reactExports.useContext(SwitchLayoutGroupContext);
	    if (visualElement &&
	        !visualElement.projection &&
	        ProjectionNodeConstructor &&
	        (visualElement.type === "html" || visualElement.type === "svg")) {
	        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);
	    }
	    const isMounted = reactExports.useRef(false);
	    reactExports.useInsertionEffect(() => {
	        /**
	         * Check the component has already mounted before calling
	         * `update` unnecessarily. This ensures we skip the initial update.
	         */
	        if (visualElement && isMounted.current) {
	            visualElement.update(props, presenceContext);
	        }
	    });
	    /**
	     * Cache this value as we want to know whether HandoffAppearAnimations
	     * was present on initial render - it will be deleted after this.
	     */
	    const optimisedAppearId = props[optimizedAppearDataAttribute];
	    const wantsHandoff = reactExports.useRef(Boolean(optimisedAppearId) &&
	        !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) &&
	        ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));
	    useIsomorphicLayoutEffect(() => {
	        if (!visualElement)
	            return;
	        isMounted.current = true;
	        window.MotionIsMounted = true;
	        visualElement.updateFeatures();
	        microtask.render(visualElement.render);
	        /**
	         * Ideally this function would always run in a useEffect.
	         *
	         * However, if we have optimised appear animations to handoff from,
	         * it needs to happen synchronously to ensure there's no flash of
	         * incorrect styles in the event of a hydration error.
	         *
	         * So if we detect a situtation where optimised appear animations
	         * are running, we use useLayoutEffect to trigger animations.
	         */
	        if (wantsHandoff.current && visualElement.animationState) {
	            visualElement.animationState.animateChanges();
	        }
	    });
	    reactExports.useEffect(() => {
	        if (!visualElement)
	            return;
	        if (!wantsHandoff.current && visualElement.animationState) {
	            visualElement.animationState.animateChanges();
	        }
	        if (wantsHandoff.current) {
	            // This ensures all future calls to animateChanges() in this component will run in useEffect
	            queueMicrotask(() => {
	                var _a;
	                (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);
	            });
	            wantsHandoff.current = false;
	        }
	    });
	    return visualElement;
	}
	function createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {
	    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;
	    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props["data-framer-portal-id"]
	        ? undefined
	        : getClosestProjectingNode(visualElement.parent));
	    visualElement.projection.setOptions({
	        layoutId,
	        layout,
	        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),
	        visualElement,
	        /**
	         * TODO: Update options in an effect. This could be tricky as it'll be too late
	         * to update by the time layout animations run.
	         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
	         * ensuring it gets called if there's no potential layout animations.
	         *
	         */
	        animationType: typeof layout === "string" ? layout : "both",
	        initialPromotionConfig,
	        layoutScroll,
	        layoutRoot,
	    });
	}
	function getClosestProjectingNode(visualElement) {
	    if (!visualElement)
	        return undefined;
	    return visualElement.options.allowProjection !== false
	        ? visualElement.projection
	        : getClosestProjectingNode(visualElement.parent);
	}

	/**
	 * Creates a ref function that, when called, hydrates the provided
	 * external ref and VisualElement.
	 */
	function useMotionRef(visualState, visualElement, externalRef) {
	    return reactExports.useCallback((instance) => {
	        instance && visualState.mount && visualState.mount(instance);
	        if (visualElement) {
	            if (instance) {
	                visualElement.mount(instance);
	            }
	            else {
	                visualElement.unmount();
	            }
	        }
	        if (externalRef) {
	            if (typeof externalRef === "function") {
	                externalRef(instance);
	            }
	            else if (isRefObject(externalRef)) {
	                externalRef.current = instance;
	            }
	        }
	    }, 
	    /**
	     * Only pass a new ref callback to React if we've received a visual element
	     * factory. Otherwise we'll be mounting/remounting every time externalRef
	     * or other dependencies change.
	     */
	    [visualElement]);
	}

	function isControllingVariants(props) {
	    return (isAnimationControls(props.animate) ||
	        variantProps.some((name) => isVariantLabel(props[name])));
	}
	function isVariantNode(props) {
	    return Boolean(isControllingVariants(props) || props.variants);
	}

	function getCurrentTreeVariants(props, context) {
	    if (isControllingVariants(props)) {
	        const { initial, animate } = props;
	        return {
	            initial: initial === false || isVariantLabel(initial)
	                ? initial
	                : undefined,
	            animate: isVariantLabel(animate) ? animate : undefined,
	        };
	    }
	    return props.inherit !== false ? context : {};
	}

	function useCreateMotionContext(props) {
	    const { initial, animate } = getCurrentTreeVariants(props, reactExports.useContext(MotionContext));
	    return reactExports.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
	}
	function variantLabelsAsDependency(prop) {
	    return Array.isArray(prop) ? prop.join(" ") : prop;
	}

	const featureProps = {
	    animation: [
	        "animate",
	        "variants",
	        "whileHover",
	        "whileTap",
	        "exit",
	        "whileInView",
	        "whileFocus",
	        "whileDrag",
	    ],
	    exit: ["exit"],
	    drag: ["drag", "dragControls"],
	    focus: ["whileFocus"],
	    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
	    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
	    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
	    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
	    layout: ["layout", "layoutId"],
	};
	const featureDefinitions = {};
	for (const key in featureProps) {
	    featureDefinitions[key] = {
	        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),
	    };
	}

	function loadFeatures(features) {
	    for (const key in features) {
	        featureDefinitions[key] = {
	            ...featureDefinitions[key],
	            ...features[key],
	        };
	    }
	}

	const motionComponentSymbol = Symbol.for("motionComponentSymbol");

	/**
	 * Create a `motion` component.
	 *
	 * This function accepts a Component argument, which can be either a string (ie "div"
	 * for `motion.div`), or an actual React component.
	 *
	 * Alongside this is a config option which provides a way of rendering the provided
	 * component "offline", or outside the React render cycle.
	 */
	function createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {
	    preloadedFeatures && loadFeatures(preloadedFeatures);
	    function MotionComponent(props, externalRef) {
	        /**
	         * If we need to measure the element we load this functionality in a
	         * separate class component in order to gain access to getSnapshotBeforeUpdate.
	         */
	        let MeasureLayout;
	        const configAndProps = {
	            ...reactExports.useContext(MotionConfigContext),
	            ...props,
	            layoutId: useLayoutId(props),
	        };
	        const { isStatic } = configAndProps;
	        const context = useCreateMotionContext(props);
	        const visualState = useVisualState(props, isStatic);
	        if (!isStatic && isBrowser) {
	            useStrictMode(configAndProps, preloadedFeatures);
	            const layoutProjection = getProjectionFunctionality(configAndProps);
	            MeasureLayout = layoutProjection.MeasureLayout;
	            /**
	             * Create a VisualElement for this component. A VisualElement provides a common
	             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as
	             * providing a way of rendering to these APIs outside of the React render loop
	             * for more performant animations and interactions
	             */
	            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);
	        }
	        /**
	         * The mount order and hierarchy is specific to ensure our element ref
	         * is hydrated by the time features fire their effects.
	         */
	        return (jsxRuntimeExports.jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsxRuntimeExports.jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));
	    }
	    const ForwardRefMotionComponent = reactExports.forwardRef(MotionComponent);
	    ForwardRefMotionComponent[motionComponentSymbol] = Component;
	    return ForwardRefMotionComponent;
	}
	function useLayoutId({ layoutId }) {
	    const layoutGroupId = reactExports.useContext(LayoutGroupContext).id;
	    return layoutGroupId && layoutId !== undefined
	        ? layoutGroupId + "-" + layoutId
	        : layoutId;
	}
	function useStrictMode(configAndProps, preloadedFeatures) {
	    const isStrict = reactExports.useContext(LazyContext).strict;
	    /**
	     * If we're in development mode, check to make sure we're not rendering a motion component
	     * as a child of LazyMotion, as this will break the file-size benefits of using it.
	     */
	    if (process.env.NODE_ENV !== "production" &&
	        preloadedFeatures &&
	        isStrict) {
	        const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
	        configAndProps.ignoreStrict
	            ? warning(false, strictMessage)
	            : invariant(false, strictMessage);
	    }
	}
	function getProjectionFunctionality(props) {
	    const { drag, layout } = featureDefinitions;
	    if (!drag && !layout)
	        return {};
	    const combined = { ...drag, ...layout };
	    return {
	        MeasureLayout: (drag === null || drag === void 0 ? void 0 : drag.isEnabled(props)) || (layout === null || layout === void 0 ? void 0 : layout.isEnabled(props))
	            ? combined.MeasureLayout
	            : undefined,
	        ProjectionNode: combined.ProjectionNode,
	    };
	}

	/**
	 * We keep these listed separately as we use the lowercase tag names as part
	 * of the runtime bundle to detect SVG components
	 */
	const lowercaseSVGElements = [
	    "animate",
	    "circle",
	    "defs",
	    "desc",
	    "ellipse",
	    "g",
	    "image",
	    "line",
	    "filter",
	    "marker",
	    "mask",
	    "metadata",
	    "path",
	    "pattern",
	    "polygon",
	    "polyline",
	    "rect",
	    "stop",
	    "switch",
	    "symbol",
	    "svg",
	    "text",
	    "tspan",
	    "use",
	    "view",
	];

	function isSVGComponent(Component) {
	    if (
	    /**
	     * If it's not a string, it's a custom React component. Currently we only support
	     * HTML custom React components.
	     */
	    typeof Component !== "string" ||
	        /**
	         * If it contains a dash, the element is a custom HTML webcomponent.
	         */
	        Component.includes("-")) {
	        return false;
	    }
	    else if (
	    /**
	     * If it's in our list of lowercase SVG tags, it's an SVG component
	     */
	    lowercaseSVGElements.indexOf(Component) > -1 ||
	        /**
	         * If it contains a capital letter, it's an SVG component
	         */
	        /[A-Z]/u.test(Component)) {
	        return true;
	    }
	    return false;
	}

	function renderHTML(element, { style, vars }, styleProp, projection) {
	    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
	    // Loop over any CSS variables and assign those.
	    for (const key in vars) {
	        element.style.setProperty(key, vars[key]);
	    }
	}

	/**
	 * A set of attribute names that are always read/written as camel case.
	 */
	const camelCaseAttributes = new Set([
	    "baseFrequency",
	    "diffuseConstant",
	    "kernelMatrix",
	    "kernelUnitLength",
	    "keySplines",
	    "keyTimes",
	    "limitingConeAngle",
	    "markerHeight",
	    "markerWidth",
	    "numOctaves",
	    "targetX",
	    "targetY",
	    "surfaceScale",
	    "specularConstant",
	    "specularExponent",
	    "stdDeviation",
	    "tableValues",
	    "viewBox",
	    "gradientTransform",
	    "pathLength",
	    "startOffset",
	    "textLength",
	    "lengthAdjust",
	]);

	function renderSVG(element, renderState, _styleProp, projection) {
	    renderHTML(element, renderState, undefined, projection);
	    for (const key in renderState.attrs) {
	        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
	    }
	}

	function isForcedMotionValue(key, { layout, layoutId }) {
	    return (transformProps.has(key) ||
	        key.startsWith("origin") ||
	        ((layout || layoutId !== undefined) &&
	            (!!scaleCorrectors[key] || key === "opacity")));
	}

	function scrapeMotionValuesFromProps$1(props, prevProps, visualElement) {
	    var _a;
	    const { style } = props;
	    const newValues = {};
	    for (const key in style) {
	        if (isMotionValue(style[key]) ||
	            (prevProps.style &&
	                isMotionValue(prevProps.style[key])) ||
	            isForcedMotionValue(key, props) ||
	            ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== undefined) {
	            newValues[key] = style[key];
	        }
	    }
	    return newValues;
	}

	function scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
	    for (const key in props) {
	        if (isMotionValue(props[key]) ||
	            isMotionValue(prevProps[key])) {
	            const targetKey = transformPropOrder.indexOf(key) !== -1
	                ? "attr" + key.charAt(0).toUpperCase() + key.substring(1)
	                : key;
	            newValues[targetKey] = props[key];
	        }
	    }
	    return newValues;
	}

	/**
	 * Creates a constant value over the lifecycle of a component.
	 *
	 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
	 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
	 * you can ensure that initialisers don't execute twice or more.
	 */
	function useConstant(init) {
	    const ref = reactExports.useRef(null);
	    if (ref.current === null) {
	        ref.current = init();
	    }
	    return ref.current;
	}

	function makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {
	    const state = {
	        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
	        renderState: createRenderState(),
	    };
	    if (onMount) {
	        state.mount = (instance) => onMount(props, instance, state);
	    }
	    return state;
	}
	const makeUseVisualState = (config) => (props, isStatic) => {
	    const context = reactExports.useContext(MotionContext);
	    const presenceContext = reactExports.useContext(PresenceContext);
	    const make = () => makeState(config, props, context, presenceContext);
	    return isStatic ? make() : useConstant(make);
	};
	function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
	    const values = {};
	    const motionValues = scrapeMotionValues(props, {});
	    for (const key in motionValues) {
	        values[key] = resolveMotionValue(motionValues[key]);
	    }
	    let { initial, animate } = props;
	    const isControllingVariants$1 = isControllingVariants(props);
	    const isVariantNode$1 = isVariantNode(props);
	    if (context &&
	        isVariantNode$1 &&
	        !isControllingVariants$1 &&
	        props.inherit !== false) {
	        if (initial === undefined)
	            initial = context.initial;
	        if (animate === undefined)
	            animate = context.animate;
	    }
	    let isInitialAnimationBlocked = presenceContext
	        ? presenceContext.initial === false
	        : false;
	    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
	    const variantToSet = isInitialAnimationBlocked ? animate : initial;
	    if (variantToSet &&
	        typeof variantToSet !== "boolean" &&
	        !isAnimationControls(variantToSet)) {
	        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
	        for (let i = 0; i < list.length; i++) {
	            const resolved = resolveVariantFromProps(props, list[i]);
	            if (resolved) {
	                const { transitionEnd, transition, ...target } = resolved;
	                for (const key in target) {
	                    let valueTarget = target[key];
	                    if (Array.isArray(valueTarget)) {
	                        /**
	                         * Take final keyframe if the initial animation is blocked because
	                         * we want to initialise at the end of that blocked animation.
	                         */
	                        const index = isInitialAnimationBlocked
	                            ? valueTarget.length - 1
	                            : 0;
	                        valueTarget = valueTarget[index];
	                    }
	                    if (valueTarget !== null) {
	                        values[key] = valueTarget;
	                    }
	                }
	                for (const key in transitionEnd) {
	                    values[key] = transitionEnd[key];
	                }
	            }
	        }
	    }
	    return values;
	}

	const createHtmlRenderState = () => ({
	    style: {},
	    transform: {},
	    transformOrigin: {},
	    vars: {},
	});

	const createSvgRenderState = () => ({
	    ...createHtmlRenderState(),
	    attrs: {},
	});

	/**
	 * Provided a value and a ValueType, returns the value as that value type.
	 */
	const getValueAsType = (value, type) => {
	    return type && typeof value === "number"
	        ? type.transform(value)
	        : value;
	};

	const translateAlias = {
	    x: "translateX",
	    y: "translateY",
	    z: "translateZ",
	    transformPerspective: "perspective",
	};
	const numTransforms = transformPropOrder.length;
	/**
	 * Build a CSS transform style from individual x/y/scale etc properties.
	 *
	 * This outputs with a default order of transforms/scales/rotations, this can be customised by
	 * providing a transformTemplate function.
	 */
	function buildTransform(latestValues, transform, transformTemplate) {
	    // The transform string we're going to build into.
	    let transformString = "";
	    let transformIsDefault = true;
	    /**
	     * Loop over all possible transforms in order, adding the ones that
	     * are present to the transform string.
	     */
	    for (let i = 0; i < numTransforms; i++) {
	        const key = transformPropOrder[i];
	        const value = latestValues[key];
	        if (value === undefined)
	            continue;
	        let valueIsDefault = true;
	        if (typeof value === "number") {
	            valueIsDefault = value === (key.startsWith("scale") ? 1 : 0);
	        }
	        else {
	            valueIsDefault = parseFloat(value) === 0;
	        }
	        if (!valueIsDefault || transformTemplate) {
	            const valueAsType = getValueAsType(value, numberValueTypes[key]);
	            if (!valueIsDefault) {
	                transformIsDefault = false;
	                const transformName = translateAlias[key] || key;
	                transformString += `${transformName}(${valueAsType}) `;
	            }
	            if (transformTemplate) {
	                transform[key] = valueAsType;
	            }
	        }
	    }
	    transformString = transformString.trim();
	    // If we have a custom `transform` template, pass our transform values and
	    // generated transformString to that before returning
	    if (transformTemplate) {
	        transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
	    }
	    else if (transformIsDefault) {
	        transformString = "none";
	    }
	    return transformString;
	}

	function buildHTMLStyles(state, latestValues, transformTemplate) {
	    const { style, vars, transformOrigin } = state;
	    // Track whether we encounter any transform or transformOrigin values.
	    let hasTransform = false;
	    let hasTransformOrigin = false;
	    /**
	     * Loop over all our latest animated values and decide whether to handle them
	     * as a style or CSS variable.
	     *
	     * Transforms and transform origins are kept separately for further processing.
	     */
	    for (const key in latestValues) {
	        const value = latestValues[key];
	        if (transformProps.has(key)) {
	            // If this is a transform, flag to enable further transform processing
	            hasTransform = true;
	            continue;
	        }
	        else if (isCSSVariableName(key)) {
	            vars[key] = value;
	            continue;
	        }
	        else {
	            // Convert the value to its default value type, ie 0 -> "0px"
	            const valueAsType = getValueAsType(value, numberValueTypes[key]);
	            if (key.startsWith("origin")) {
	                // If this is a transform origin, flag and enable further transform-origin processing
	                hasTransformOrigin = true;
	                transformOrigin[key] =
	                    valueAsType;
	            }
	            else {
	                style[key] = valueAsType;
	            }
	        }
	    }
	    if (!latestValues.transform) {
	        if (hasTransform || transformTemplate) {
	            style.transform = buildTransform(latestValues, state.transform, transformTemplate);
	        }
	        else if (style.transform) {
	            /**
	             * If we have previously created a transform but currently don't have any,
	             * reset transform style to none.
	             */
	            style.transform = "none";
	        }
	    }
	    /**
	     * Build a transformOrigin style. Uses the same defaults as the browser for
	     * undefined origins.
	     */
	    if (hasTransformOrigin) {
	        const { originX = "50%", originY = "50%", originZ = 0, } = transformOrigin;
	        style.transformOrigin = `${originX} ${originY} ${originZ}`;
	    }
	}

	function calcOrigin(origin, offset, size) {
	    return typeof origin === "string"
	        ? origin
	        : px.transform(offset + size * origin);
	}
	/**
	 * The SVG transform origin defaults are different to CSS and is less intuitive,
	 * so we use the measured dimensions of the SVG to reconcile these.
	 */
	function calcSVGTransformOrigin(dimensions, originX, originY) {
	    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
	    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
	    return `${pxOriginX} ${pxOriginY}`;
	}

	const dashKeys = {
	    offset: "stroke-dashoffset",
	    array: "stroke-dasharray",
	};
	const camelKeys = {
	    offset: "strokeDashoffset",
	    array: "strokeDasharray",
	};
	/**
	 * Build SVG path properties. Uses the path's measured length to convert
	 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
	 * and stroke-dasharray attributes.
	 *
	 * This function is mutative to reduce per-frame GC.
	 */
	function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
	    // Normalise path length by setting SVG attribute pathLength to 1
	    attrs.pathLength = 1;
	    // We use dash case when setting attributes directly to the DOM node and camel case
	    // when defining props on a React component.
	    const keys = useDashCase ? dashKeys : camelKeys;
	    // Build the dash offset
	    attrs[keys.offset] = px.transform(-offset);
	    // Build the dash array
	    const pathLength = px.transform(length);
	    const pathSpacing = px.transform(spacing);
	    attrs[keys.array] = `${pathLength} ${pathSpacing}`;
	}

	/**
	 * Build SVG visual attrbutes, like cx and style.transform
	 */
	function buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, 
	// This is object creation, which we try to avoid per-frame.
	...latest }, isSVGTag, transformTemplate) {
	    buildHTMLStyles(state, latest, transformTemplate);
	    /**
	     * For svg tags we just want to make sure viewBox is animatable and treat all the styles
	     * as normal HTML tags.
	     */
	    if (isSVGTag) {
	        if (state.style.viewBox) {
	            state.attrs.viewBox = state.style.viewBox;
	        }
	        return;
	    }
	    state.attrs = state.style;
	    state.style = {};
	    const { attrs, style, dimensions } = state;
	    /**
	     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs
	     * and copy it into style.
	     */
	    if (attrs.transform) {
	        if (dimensions)
	            style.transform = attrs.transform;
	        delete attrs.transform;
	    }
	    // Parse transformOrigin
	    if (dimensions &&
	        (originX !== undefined || originY !== undefined || style.transform)) {
	        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);
	    }
	    // Render attrX/attrY/attrScale as attributes
	    if (attrX !== undefined)
	        attrs.x = attrX;
	    if (attrY !== undefined)
	        attrs.y = attrY;
	    if (attrScale !== undefined)
	        attrs.scale = attrScale;
	    // Build SVG path if one has been defined
	    if (pathLength !== undefined) {
	        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
	    }
	}

	const isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

	const svgMotionConfig = {
	    useVisualState: makeUseVisualState({
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
	        createRenderState: createSvgRenderState,
	        onMount: (props, instance, { renderState, latestValues }) => {
	            frame.read(() => {
	                try {
	                    renderState.dimensions =
	                        typeof instance.getBBox ===
	                            "function"
	                            ? instance.getBBox()
	                            : instance.getBoundingClientRect();
	                }
	                catch (e) {
	                    // Most likely trying to measure an unrendered element under Firefox
	                    renderState.dimensions = {
	                        x: 0,
	                        y: 0,
	                        width: 0,
	                        height: 0,
	                    };
	                }
	            });
	            frame.render(() => {
	                buildSVGAttrs(renderState, latestValues, isSVGTag(instance.tagName), props.transformTemplate);
	                renderSVG(instance, renderState);
	            });
	        },
	    }),
	};

	const htmlMotionConfig = {
	    useVisualState: makeUseVisualState({
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
	        createRenderState: createHtmlRenderState,
	    }),
	};

	function copyRawValuesOnly(target, source, props) {
	    for (const key in source) {
	        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
	            target[key] = source[key];
	        }
	    }
	}
	function useInitialMotionValues({ transformTemplate }, visualState) {
	    return reactExports.useMemo(() => {
	        const state = createHtmlRenderState();
	        buildHTMLStyles(state, visualState, transformTemplate);
	        return Object.assign({}, state.vars, state.style);
	    }, [visualState]);
	}
	function useStyle(props, visualState) {
	    const styleProp = props.style || {};
	    const style = {};
	    /**
	     * Copy non-Motion Values straight into style
	     */
	    copyRawValuesOnly(style, styleProp, props);
	    Object.assign(style, useInitialMotionValues(props, visualState));
	    return style;
	}
	function useHTMLProps(props, visualState) {
	    // The `any` isn't ideal but it is the type of createElement props argument
	    const htmlProps = {};
	    const style = useStyle(props, visualState);
	    if (props.drag && props.dragListener !== false) {
	        // Disable the ghost element when a user drags
	        htmlProps.draggable = false;
	        // Disable text selection
	        style.userSelect =
	            style.WebkitUserSelect =
	                style.WebkitTouchCallout =
	                    "none";
	        // Disable scrolling on the draggable direction
	        style.touchAction =
	            props.drag === true
	                ? "none"
	                : `pan-${props.drag === "x" ? "y" : "x"}`;
	    }
	    if (props.tabIndex === undefined &&
	        (props.onTap || props.onTapStart || props.whileTap)) {
	        htmlProps.tabIndex = 0;
	    }
	    htmlProps.style = style;
	    return htmlProps;
	}

	/**
	 * A list of all valid MotionProps.
	 *
	 * @privateRemarks
	 * This doesn't throw if a `MotionProp` name is missing - it should.
	 */
	const validMotionProps = new Set([
	    "animate",
	    "exit",
	    "variants",
	    "initial",
	    "style",
	    "values",
	    "variants",
	    "transition",
	    "transformTemplate",
	    "custom",
	    "inherit",
	    "onBeforeLayoutMeasure",
	    "onAnimationStart",
	    "onAnimationComplete",
	    "onUpdate",
	    "onDragStart",
	    "onDrag",
	    "onDragEnd",
	    "onMeasureDragConstraints",
	    "onDirectionLock",
	    "onDragTransitionEnd",
	    "_dragX",
	    "_dragY",
	    "onHoverStart",
	    "onHoverEnd",
	    "onViewportEnter",
	    "onViewportLeave",
	    "globalTapTarget",
	    "ignoreStrict",
	    "viewport",
	]);
	/**
	 * Check whether a prop name is a valid `MotionProp` key.
	 *
	 * @param key - Name of the property to check
	 * @returns `true` is key is a valid `MotionProp`.
	 *
	 * @public
	 */
	function isValidMotionProp(key) {
	    return (key.startsWith("while") ||
	        (key.startsWith("drag") && key !== "draggable") ||
	        key.startsWith("layout") ||
	        key.startsWith("onTap") ||
	        key.startsWith("onPan") ||
	        key.startsWith("onLayout") ||
	        validMotionProps.has(key));
	}

	let shouldForward = (key) => !isValidMotionProp(key);
	function loadExternalIsValidProp(isValidProp) {
	    if (!isValidProp)
	        return;
	    // Explicitly filter our events
	    shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
	}
	/**
	 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
	 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
	 * of these should be passed to the underlying DOM node.
	 *
	 * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
	 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
	 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
	 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
	 *
	 * By making it an optionalDependency we can offer this functionality only in the situations where it's
	 * actually required.
	 */
	try {
	    /**
	     * We attempt to import this package but require won't be defined in esm environments, in that case
	     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed
	     * in favour of explicit injection.
	     */
	    loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
	}
	catch (_a) {
	    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.
	}
	function filterProps(props, isDom, forwardMotionProps) {
	    const filteredProps = {};
	    for (const key in props) {
	        /**
	         * values is considered a valid prop by Emotion, so if it's present
	         * this will be rendered out to the DOM unless explicitly filtered.
	         *
	         * We check the type as it could be used with the `feColorMatrix`
	         * element, which we support.
	         */
	        if (key === "values" && typeof props.values === "object")
	            continue;
	        if (shouldForward(key) ||
	            (forwardMotionProps === true && isValidMotionProp(key)) ||
	            (!isDom && !isValidMotionProp(key)) ||
	            // If trying to use native HTML drag events, forward drag listeners
	            (props["draggable"] &&
	                key.startsWith("onDrag"))) {
	            filteredProps[key] =
	                props[key];
	        }
	    }
	    return filteredProps;
	}

	function useSVGProps(props, visualState, _isStatic, Component) {
	    const visualProps = reactExports.useMemo(() => {
	        const state = createSvgRenderState();
	        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate);
	        return {
	            ...state.attrs,
	            style: { ...state.style },
	        };
	    }, [visualState]);
	    if (props.style) {
	        const rawStyles = {};
	        copyRawValuesOnly(rawStyles, props.style, props);
	        visualProps.style = { ...rawStyles, ...visualProps.style };
	    }
	    return visualProps;
	}

	function createUseRender(forwardMotionProps = false) {
	    const useRender = (Component, props, ref, { latestValues }, isStatic) => {
	        const useVisualProps = isSVGComponent(Component)
	            ? useSVGProps
	            : useHTMLProps;
	        const visualProps = useVisualProps(props, latestValues, isStatic, Component);
	        const filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
	        const elementProps = Component !== reactExports.Fragment
	            ? { ...filteredProps, ...visualProps, ref }
	            : {};
	        /**
	         * If component has been handed a motion value as its child,
	         * memoise its initial value and render that. Subsequent updates
	         * will be handled by the onChange handler
	         */
	        const { children } = props;
	        const renderedChildren = reactExports.useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);
	        return reactExports.createElement(Component, {
	            ...elementProps,
	            children: renderedChildren,
	        });
	    };
	    return useRender;
	}

	function createMotionComponentFactory(preloadedFeatures, createVisualElement) {
	    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {
	        const baseConfig = isSVGComponent(Component)
	            ? svgMotionConfig
	            : htmlMotionConfig;
	        const config = {
	            ...baseConfig,
	            preloadedFeatures,
	            useRender: createUseRender(forwardMotionProps),
	            createVisualElement,
	            Component,
	        };
	        return createRendererMotionComponent(config);
	    };
	}

	// Does this device prefer reduced motion? Returns `null` server-side.
	const prefersReducedMotion = { current: null };
	const hasReducedMotionListener = { current: false };

	function initPrefersReducedMotion() {
	    hasReducedMotionListener.current = true;
	    if (!isBrowser)
	        return;
	    if (window.matchMedia) {
	        const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
	        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);
	        motionMediaQuery.addListener(setReducedMotionPreferences);
	        setReducedMotionPreferences();
	    }
	    else {
	        prefersReducedMotion.current = false;
	    }
	}

	function updateMotionValuesFromProps(element, next, prev) {
	    for (const key in next) {
	        const nextValue = next[key];
	        const prevValue = prev[key];
	        if (isMotionValue(nextValue)) {
	            /**
	             * If this is a motion value found in props or style, we want to add it
	             * to our visual element's motion value map.
	             */
	            element.addValue(key, nextValue);
	            /**
	             * Check the version of the incoming motion value with this version
	             * and warn against mismatches.
	             */
	            if (process.env.NODE_ENV === "development") {
	                warnOnce(nextValue.version === "11.15.0", `Attempting to mix Motion versions ${nextValue.version} with 11.15.0 may not work as expected.`);
	            }
	        }
	        else if (isMotionValue(prevValue)) {
	            /**
	             * If we're swapping from a motion value to a static value,
	             * create a new motion value from that
	             */
	            element.addValue(key, motionValue(nextValue, { owner: element }));
	        }
	        else if (prevValue !== nextValue) {
	            /**
	             * If this is a flat value that has changed, update the motion value
	             * or create one if it doesn't exist. We only want to do this if we're
	             * not handling the value with our animation state.
	             */
	            if (element.hasValue(key)) {
	                const existingValue = element.getValue(key);
	                if (existingValue.liveStyle === true) {
	                    existingValue.jump(nextValue);
	                }
	                else if (!existingValue.hasAnimated) {
	                    existingValue.set(nextValue);
	                }
	            }
	            else {
	                const latestValue = element.getStaticValue(key);
	                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));
	            }
	        }
	    }
	    // Handle removed values
	    for (const key in prev) {
	        if (next[key] === undefined)
	            element.removeValue(key);
	    }
	    return next;
	}

	const visualElementStore = new WeakMap();

	/**
	 * A list of all ValueTypes
	 */
	const valueTypes = [...dimensionValueTypes, color, complex];
	/**
	 * Tests a value against the list of ValueTypes
	 */
	const findValueType = (v) => valueTypes.find(testValueType(v));

	const propEventHandlers = [
	    "AnimationStart",
	    "AnimationComplete",
	    "Update",
	    "BeforeLayoutMeasure",
	    "LayoutMeasure",
	    "LayoutAnimationStart",
	    "LayoutAnimationComplete",
	];
	/**
	 * A VisualElement is an imperative abstraction around UI elements such as
	 * HTMLElement, SVGElement, Three.Object3D etc.
	 */
	class VisualElement {
	    /**
	     * This method takes React props and returns found MotionValues. For example, HTML
	     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
	     *
	     * This isn't an abstract method as it needs calling in the constructor, but it is
	     * intended to be one.
	     */
	    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
	        return {};
	    }
	    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {
	        /**
	         * A reference to the current underlying Instance, e.g. a HTMLElement
	         * or Three.Mesh etc.
	         */
	        this.current = null;
	        /**
	         * A set containing references to this VisualElement's children.
	         */
	        this.children = new Set();
	        /**
	         * Determine what role this visual element should take in the variant tree.
	         */
	        this.isVariantNode = false;
	        this.isControllingVariants = false;
	        /**
	         * Decides whether this VisualElement should animate in reduced motion
	         * mode.
	         *
	         * TODO: This is currently set on every individual VisualElement but feels
	         * like it could be set globally.
	         */
	        this.shouldReduceMotion = null;
	        /**
	         * A map of all motion values attached to this visual element. Motion
	         * values are source of truth for any given animated value. A motion
	         * value might be provided externally by the component via props.
	         */
	        this.values = new Map();
	        this.KeyframeResolver = KeyframeResolver;
	        /**
	         * Cleanup functions for active features (hover/tap/exit etc)
	         */
	        this.features = {};
	        /**
	         * A map of every subscription that binds the provided or generated
	         * motion values onChange listeners to this visual element.
	         */
	        this.valueSubscriptions = new Map();
	        /**
	         * A reference to the previously-provided motion values as returned
	         * from scrapeMotionValuesFromProps. We use the keys in here to determine
	         * if any motion values need to be removed after props are updated.
	         */
	        this.prevMotionValues = {};
	        /**
	         * An object containing a SubscriptionManager for each active event.
	         */
	        this.events = {};
	        /**
	         * An object containing an unsubscribe function for each prop event subscription.
	         * For example, every "Update" event can have multiple subscribers via
	         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.
	         */
	        this.propEventSubscriptions = {};
	        this.notifyUpdate = () => this.notify("Update", this.latestValues);
	        this.render = () => {
	            if (!this.current)
	                return;
	            this.triggerBuild();
	            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
	        };
	        this.renderScheduledAt = 0.0;
	        this.scheduleRender = () => {
	            const now = time.now();
	            if (this.renderScheduledAt < now) {
	                this.renderScheduledAt = now;
	                frame.render(this.render, false, true);
	            }
	        };
	        const { latestValues, renderState } = visualState;
	        this.latestValues = latestValues;
	        this.baseTarget = { ...latestValues };
	        this.initialValues = props.initial ? { ...latestValues } : {};
	        this.renderState = renderState;
	        this.parent = parent;
	        this.props = props;
	        this.presenceContext = presenceContext;
	        this.depth = parent ? parent.depth + 1 : 0;
	        this.reducedMotionConfig = reducedMotionConfig;
	        this.options = options;
	        this.blockInitialAnimation = Boolean(blockInitialAnimation);
	        this.isControllingVariants = isControllingVariants(props);
	        this.isVariantNode = isVariantNode(props);
	        if (this.isVariantNode) {
	            this.variantChildren = new Set();
	        }
	        this.manuallyAnimateOnMount = Boolean(parent && parent.current);
	        /**
	         * Any motion values that are provided to the element when created
	         * aren't yet bound to the element, as this would technically be impure.
	         * However, we iterate through the motion values and set them to the
	         * initial values for this component.
	         *
	         * TODO: This is impure and we should look at changing this to run on mount.
	         * Doing so will break some tests but this isn't necessarily a breaking change,
	         * more a reflection of the test.
	         */
	        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);
	        for (const key in initialMotionValues) {
	            const value = initialMotionValues[key];
	            if (latestValues[key] !== undefined && isMotionValue(value)) {
	                value.set(latestValues[key], false);
	            }
	        }
	    }
	    mount(instance) {
	        this.current = instance;
	        visualElementStore.set(instance, this);
	        if (this.projection && !this.projection.instance) {
	            this.projection.mount(instance);
	        }
	        if (this.parent && this.isVariantNode && !this.isControllingVariants) {
	            this.removeFromVariantTree = this.parent.addVariantChild(this);
	        }
	        this.values.forEach((value, key) => this.bindToMotionValue(key, value));
	        if (!hasReducedMotionListener.current) {
	            initPrefersReducedMotion();
	        }
	        this.shouldReduceMotion =
	            this.reducedMotionConfig === "never"
	                ? false
	                : this.reducedMotionConfig === "always"
	                    ? true
	                    : prefersReducedMotion.current;
	        if (process.env.NODE_ENV !== "production") {
	            warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
	        }
	        if (this.parent)
	            this.parent.children.add(this);
	        this.update(this.props, this.presenceContext);
	    }
	    unmount() {
	        visualElementStore.delete(this.current);
	        this.projection && this.projection.unmount();
	        cancelFrame(this.notifyUpdate);
	        cancelFrame(this.render);
	        this.valueSubscriptions.forEach((remove) => remove());
	        this.valueSubscriptions.clear();
	        this.removeFromVariantTree && this.removeFromVariantTree();
	        this.parent && this.parent.children.delete(this);
	        for (const key in this.events) {
	            this.events[key].clear();
	        }
	        for (const key in this.features) {
	            const feature = this.features[key];
	            if (feature) {
	                feature.unmount();
	                feature.isMounted = false;
	            }
	        }
	        this.current = null;
	    }
	    bindToMotionValue(key, value) {
	        if (this.valueSubscriptions.has(key)) {
	            this.valueSubscriptions.get(key)();
	        }
	        const valueIsTransform = transformProps.has(key);
	        const removeOnChange = value.on("change", (latestValue) => {
	            this.latestValues[key] = latestValue;
	            this.props.onUpdate && frame.preRender(this.notifyUpdate);
	            if (valueIsTransform && this.projection) {
	                this.projection.isTransformDirty = true;
	            }
	        });
	        const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
	        let removeSyncCheck;
	        if (window.MotionCheckAppearSync) {
	            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);
	        }
	        this.valueSubscriptions.set(key, () => {
	            removeOnChange();
	            removeOnRenderRequest();
	            if (removeSyncCheck)
	                removeSyncCheck();
	            if (value.owner)
	                value.stop();
	        });
	    }
	    sortNodePosition(other) {
	        /**
	         * If these nodes aren't even of the same type we can't compare their depth.
	         */
	        if (!this.current ||
	            !this.sortInstanceNodePosition ||
	            this.type !== other.type) {
	            return 0;
	        }
	        return this.sortInstanceNodePosition(this.current, other.current);
	    }
	    updateFeatures() {
	        let key = "animation";
	        for (key in featureDefinitions) {
	            const featureDefinition = featureDefinitions[key];
	            if (!featureDefinition)
	                continue;
	            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;
	            /**
	             * If this feature is enabled but not active, make a new instance.
	             */
	            if (!this.features[key] &&
	                FeatureConstructor &&
	                isEnabled(this.props)) {
	                this.features[key] = new FeatureConstructor(this);
	            }
	            /**
	             * If we have a feature, mount or update it.
	             */
	            if (this.features[key]) {
	                const feature = this.features[key];
	                if (feature.isMounted) {
	                    feature.update();
	                }
	                else {
	                    feature.mount();
	                    feature.isMounted = true;
	                }
	            }
	        }
	    }
	    triggerBuild() {
	        this.build(this.renderState, this.latestValues, this.props);
	    }
	    /**
	     * Measure the current viewport box with or without transforms.
	     * Only measures axis-aligned boxes, rotate and skew must be manually
	     * removed with a re-render to work.
	     */
	    measureViewportBox() {
	        return this.current
	            ? this.measureInstanceViewportBox(this.current, this.props)
	            : createBox();
	    }
	    getStaticValue(key) {
	        return this.latestValues[key];
	    }
	    setStaticValue(key, value) {
	        this.latestValues[key] = value;
	    }
	    /**
	     * Update the provided props. Ensure any newly-added motion values are
	     * added to our map, old ones removed, and listeners updated.
	     */
	    update(props, presenceContext) {
	        if (props.transformTemplate || this.props.transformTemplate) {
	            this.scheduleRender();
	        }
	        this.prevProps = this.props;
	        this.props = props;
	        this.prevPresenceContext = this.presenceContext;
	        this.presenceContext = presenceContext;
	        /**
	         * Update prop event handlers ie onAnimationStart, onAnimationComplete
	         */
	        for (let i = 0; i < propEventHandlers.length; i++) {
	            const key = propEventHandlers[i];
	            if (this.propEventSubscriptions[key]) {
	                this.propEventSubscriptions[key]();
	                delete this.propEventSubscriptions[key];
	            }
	            const listenerName = ("on" + key);
	            const listener = props[listenerName];
	            if (listener) {
	                this.propEventSubscriptions[key] = this.on(key, listener);
	            }
	        }
	        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);
	        if (this.handleChildMotionValue) {
	            this.handleChildMotionValue();
	        }
	    }
	    getProps() {
	        return this.props;
	    }
	    /**
	     * Returns the variant definition with a given name.
	     */
	    getVariant(name) {
	        return this.props.variants ? this.props.variants[name] : undefined;
	    }
	    /**
	     * Returns the defined default transition on this component.
	     */
	    getDefaultTransition() {
	        return this.props.transition;
	    }
	    getTransformPagePoint() {
	        return this.props.transformPagePoint;
	    }
	    getClosestVariantNode() {
	        return this.isVariantNode
	            ? this
	            : this.parent
	                ? this.parent.getClosestVariantNode()
	                : undefined;
	    }
	    /**
	     * Add a child visual element to our set of children.
	     */
	    addVariantChild(child) {
	        const closestVariantNode = this.getClosestVariantNode();
	        if (closestVariantNode) {
	            closestVariantNode.variantChildren &&
	                closestVariantNode.variantChildren.add(child);
	            return () => closestVariantNode.variantChildren.delete(child);
	        }
	    }
	    /**
	     * Add a motion value and bind it to this visual element.
	     */
	    addValue(key, value) {
	        // Remove existing value if it exists
	        const existingValue = this.values.get(key);
	        if (value !== existingValue) {
	            if (existingValue)
	                this.removeValue(key);
	            this.bindToMotionValue(key, value);
	            this.values.set(key, value);
	            this.latestValues[key] = value.get();
	        }
	    }
	    /**
	     * Remove a motion value and unbind any active subscriptions.
	     */
	    removeValue(key) {
	        this.values.delete(key);
	        const unsubscribe = this.valueSubscriptions.get(key);
	        if (unsubscribe) {
	            unsubscribe();
	            this.valueSubscriptions.delete(key);
	        }
	        delete this.latestValues[key];
	        this.removeValueFromRenderState(key, this.renderState);
	    }
	    /**
	     * Check whether we have a motion value for this key
	     */
	    hasValue(key) {
	        return this.values.has(key);
	    }
	    getValue(key, defaultValue) {
	        if (this.props.values && this.props.values[key]) {
	            return this.props.values[key];
	        }
	        let value = this.values.get(key);
	        if (value === undefined && defaultValue !== undefined) {
	            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });
	            this.addValue(key, value);
	        }
	        return value;
	    }
	    /**
	     * If we're trying to animate to a previously unencountered value,
	     * we need to check for it in our state and as a last resort read it
	     * directly from the instance (which might have performance implications).
	     */
	    readValue(key, target) {
	        var _a;
	        let value = this.latestValues[key] !== undefined || !this.current
	            ? this.latestValues[key]
	            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);
	        if (value !== undefined && value !== null) {
	            if (typeof value === "string" &&
	                (isNumericalString(value) || isZeroValueString(value))) {
	                // If this is a number read as a string, ie "0" or "200", convert it to a number
	                value = parseFloat(value);
	            }
	            else if (!findValueType(value) && complex.test(target)) {
	                value = getAnimatableNone(key, target);
	            }
	            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
	        }
	        return isMotionValue(value) ? value.get() : value;
	    }
	    /**
	     * Set the base target to later animate back to. This is currently
	     * only hydrated on creation and when we first read a value.
	     */
	    setBaseTarget(key, value) {
	        this.baseTarget[key] = value;
	    }
	    /**
	     * Find the base target for a value thats been removed from all animation
	     * props.
	     */
	    getBaseTarget(key) {
	        var _a;
	        const { initial } = this.props;
	        let valueFromInitial;
	        if (typeof initial === "string" || typeof initial === "object") {
	            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);
	            if (variant) {
	                valueFromInitial = variant[key];
	            }
	        }
	        /**
	         * If this value still exists in the current initial variant, read that.
	         */
	        if (initial && valueFromInitial !== undefined) {
	            return valueFromInitial;
	        }
	        /**
	         * Alternatively, if this VisualElement config has defined a getBaseTarget
	         * so we can read the value from an alternative source, try that.
	         */
	        const target = this.getBaseTargetFromProps(this.props, key);
	        if (target !== undefined && !isMotionValue(target))
	            return target;
	        /**
	         * If the value was initially defined on initial, but it doesn't any more,
	         * return undefined. Otherwise return the value as initially read from the DOM.
	         */
	        return this.initialValues[key] !== undefined &&
	            valueFromInitial === undefined
	            ? undefined
	            : this.baseTarget[key];
	    }
	    on(eventName, callback) {
	        if (!this.events[eventName]) {
	            this.events[eventName] = new SubscriptionManager();
	        }
	        return this.events[eventName].add(callback);
	    }
	    notify(eventName, ...args) {
	        if (this.events[eventName]) {
	            this.events[eventName].notify(...args);
	        }
	    }
	}

	class DOMVisualElement extends VisualElement {
	    constructor() {
	        super(...arguments);
	        this.KeyframeResolver = DOMKeyframesResolver;
	    }
	    sortInstanceNodePosition(a, b) {
	        /**
	         * compareDocumentPosition returns a bitmask, by using the bitwise &
	         * we're returning true if 2 in that bitmask is set to true. 2 is set
	         * to true if b preceeds a.
	         */
	        return a.compareDocumentPosition(b) & 2 ? 1 : -1;
	    }
	    getBaseTargetFromProps(props, key) {
	        return props.style
	            ? props.style[key]
	            : undefined;
	    }
	    removeValueFromRenderState(key, { vars, style }) {
	        delete vars[key];
	        delete style[key];
	    }
	    handleChildMotionValue() {
	        if (this.childSubscription) {
	            this.childSubscription();
	            delete this.childSubscription;
	        }
	        const { children } = this.props;
	        if (isMotionValue(children)) {
	            this.childSubscription = children.on("change", (latest) => {
	                if (this.current) {
	                    this.current.textContent = `${latest}`;
	                }
	            });
	        }
	    }
	}

	function getComputedStyle(element) {
	    return window.getComputedStyle(element);
	}
	class HTMLVisualElement extends DOMVisualElement {
	    constructor() {
	        super(...arguments);
	        this.type = "html";
	        this.renderInstance = renderHTML;
	    }
	    readValueFromInstance(instance, key) {
	        if (transformProps.has(key)) {
	            const defaultType = getDefaultValueType(key);
	            return defaultType ? defaultType.default || 0 : 0;
	        }
	        else {
	            const computedStyle = getComputedStyle(instance);
	            const value = (isCSSVariableName(key)
	                ? computedStyle.getPropertyValue(key)
	                : computedStyle[key]) || 0;
	            return typeof value === "string" ? value.trim() : value;
	        }
	    }
	    measureInstanceViewportBox(instance, { transformPagePoint }) {
	        return measureViewportBox(instance, transformPagePoint);
	    }
	    build(renderState, latestValues, props) {
	        buildHTMLStyles(renderState, latestValues, props.transformTemplate);
	    }
	    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	        return scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
	    }
	}

	class SVGVisualElement extends DOMVisualElement {
	    constructor() {
	        super(...arguments);
	        this.type = "svg";
	        this.isSVGTag = false;
	        this.measureInstanceViewportBox = createBox;
	    }
	    getBaseTargetFromProps(props, key) {
	        return props[key];
	    }
	    readValueFromInstance(instance, key) {
	        if (transformProps.has(key)) {
	            const defaultType = getDefaultValueType(key);
	            return defaultType ? defaultType.default || 0 : 0;
	        }
	        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
	        return instance.getAttribute(key);
	    }
	    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	        return scrapeMotionValuesFromProps(props, prevProps, visualElement);
	    }
	    build(renderState, latestValues, props) {
	        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);
	    }
	    renderInstance(instance, renderState, styleProp, projection) {
	        renderSVG(instance, renderState, styleProp, projection);
	    }
	    mount(instance) {
	        this.isSVGTag = isSVGTag(instance.tagName);
	        super.mount(instance);
	    }
	}

	const createDomVisualElement = (Component, options) => {
	    return isSVGComponent(Component)
	        ? new SVGVisualElement(options)
	        : new HTMLVisualElement(options, {
	            allowProjection: Component !== reactExports.Fragment,
	        });
	};

	const createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({
	    ...animations,
	    ...gestureAnimations,
	    ...drag,
	    ...layout,
	}, createDomVisualElement);

	const motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);

	function SecuritySetup(_ref) {
	  let {
	    onComplete
	  } = _ref;
	  const [pin, setPin] = reactExports.useState('');
	  const [securityMethod, setSecurityMethod] = reactExports.useState(null);
	  const [pinRequirements, setPinRequirements] = reactExports.useState({
	    length: false,
	    capital: false,
	    number: false,
	    symbol: false
	  });
	  reactExports.useEffect(() => {
	    // Check PIN requirements
	    setPinRequirements({
	      length: pin.length >= 8,
	      capital: /[A-Z]/.test(pin),
	      number: /[0-9]/.test(pin),
	      symbol: /[!@#$%^&*(),.?":{}|<>]/.test(pin)
	    });
	  }, [pin]);
	  const allRequirementsMet = Object.values(pinRequirements).every(req => req);
	  const handlePinSubmit = async () => {
	    if (allRequirementsMet) {
	      // Here you would typically hash the PIN and store it
	      onComplete({
	        method: 'pin',
	        value: pin
	      });
	    }
	  };
	  const handleOthentSetup = () => {
	    onComplete({
	      method: 'othent'
	    });
	  };
	  return /*#__PURE__*/React$1.createElement(motion.div, {
	    initial: {
	      opacity: 0,
	      y: 20
	    },
	    animate: {
	      opacity: 1,
	      y: 0
	    },
	    className: "flex flex-col items-center space-y-6 p-6"
	  }, /*#__PURE__*/React$1.createElement("h2", {
	    className: "text-xl font-semibold text-gray-900"
	  }, "Secure Your Account"), /*#__PURE__*/React$1.createElement("p", {
	    className: "text-gray-600 text-center"
	  }, "Choose how you want to secure your data"), !securityMethod ? /*#__PURE__*/React$1.createElement("div", {
	    className: "grid grid-cols-1 gap-4 w-full max-w-md"
	  }, /*#__PURE__*/React$1.createElement(motion.button, {
	    whileHover: {
	      scale: 1.02
	    },
	    whileTap: {
	      scale: 0.98
	    },
	    onClick: () => setSecurityMethod('othent'),
	    className: "flex items-center justify-center p-6 rounded-lg border border-gray-300 hover:border-blue-500 bg-white"
	  }, /*#__PURE__*/React$1.createElement("img", {
	    src: "https://onairos.sirv.com/Images/othent-icon.png",
	    alt: "Othent",
	    className: "w-8 h-8 mr-3"
	  }), /*#__PURE__*/React$1.createElement("span", {
	    className: "text-gray-700"
	  }, "Secure with Google (Othent)")), /*#__PURE__*/React$1.createElement(motion.button, {
	    whileHover: {
	      scale: 1.02
	    },
	    whileTap: {
	      scale: 0.98
	    },
	    onClick: () => setSecurityMethod('pin'),
	    className: "flex items-center justify-center p-6 rounded-lg border border-gray-300 hover:border-blue-500 bg-white"
	  }, /*#__PURE__*/React$1.createElement("span", {
	    className: "material-icons mr-3"
	  }, "lock"), /*#__PURE__*/React$1.createElement("span", {
	    className: "text-gray-700"
	  }, "Set up PIN"))) : securityMethod === 'pin' ? /*#__PURE__*/React$1.createElement(motion.div, {
	    initial: {
	      opacity: 0
	    },
	    animate: {
	      opacity: 1
	    },
	    className: "w-full max-w-md space-y-4"
	  }, /*#__PURE__*/React$1.createElement("input", {
	    type: "password",
	    value: pin,
	    onChange: e => setPin(e.target.value),
	    placeholder: "Enter your PIN",
	    className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
	  }), /*#__PURE__*/React$1.createElement("div", {
	    className: "space-y-2"
	  }, Object.entries(pinRequirements).map(_ref2 => {
	    let [req, met] = _ref2;
	    return /*#__PURE__*/React$1.createElement("div", {
	      key: req,
	      className: "flex items-center"
	    }, /*#__PURE__*/React$1.createElement("span", {
	      className: `material-icons text-sm ${met ? 'text-green-500' : 'text-gray-400'}`
	    }, met ? 'check_circle' : 'radio_button_unchecked'), /*#__PURE__*/React$1.createElement("span", {
	      className: `ml-2 text-sm ${met ? 'text-green-600' : 'text-gray-600'}`
	    }, req === 'length' ? 'At least 8 characters' : req === 'capital' ? 'One capital letter' : req === 'number' ? 'One number' : 'One special character'));
	  })), /*#__PURE__*/React$1.createElement("button", {
	    onClick: handlePinSubmit,
	    disabled: !allRequirementsMet,
	    className: `w-full py-3 px-4 rounded-lg font-semibold ${allRequirementsMet ? 'bg-blue-500 text-white hover:bg-blue-600' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`
	  }, "Set PIN")) : /*#__PURE__*/React$1.createElement(motion.div, {
	    initial: {
	      opacity: 0
	    },
	    animate: {
	      opacity: 1
	    },
	    className: "w-full max-w-md"
	  }, /*#__PURE__*/React$1.createElement("button", {
	    onClick: handleOthentSetup,
	    className: "w-full py-3 px-4 rounded-lg font-semibold bg-blue-500 text-white hover:bg-blue-600"
	  }, "Continue with Othent")));
	}

	const socialPlatforms = [{
	  name: 'YouTube',
	  icon: 'https://onairos.sirv.com/Images/youtube-icon.png',
	  connected: false
	}, {
	  name: 'Reddit',
	  icon: 'https://onairos.sirv.com/Images/reddit-icon.png',
	  connected: false
	}, {
	  name: 'Instagram',
	  icon: 'https://onairos.sirv.com/Images/instagram-icon.png',
	  connected: false
	}, {
	  name: 'Pinterest',
	  icon: 'https://onairos.sirv.com/Images/pinterest-icon.png',
	  connected: false
	}];
	function UniversalOnboarding(_ref) {
	  let {
	    onComplete
	  } = _ref;
	  const [platforms, setPlatforms] = reactExports.useState(socialPlatforms);
	  const [isUnifying, setIsUnifying] = reactExports.useState(false);
	  const [unifyProgress, setUnifyProgress] = reactExports.useState(0);
	  reactExports.useEffect(() => {
	    if (isUnifying) {
	      const interval = setInterval(() => {
	        setUnifyProgress(prev => {
	          if (prev >= 100) {
	            clearInterval(interval);
	            setIsUnifying(false);
	            onComplete();
	            return 100;
	          }
	          return prev + 2;
	        });
	      }, 100);
	      return () => clearInterval(interval);
	    }
	  }, [isUnifying, onComplete]);
	  const handleConnect = async platformName => {
	    // Implement OAuth flow for each platform
	    try {
	      const response = await fetch(`https://api2.onairos.uk/connect/${platformName.toLowerCase()}`, {
	        method: 'POST',
	        headers: {
	          'Authorization': `Bearer ${localStorage.getItem('onairosToken')}`,
	          'Content-Type': 'application/json'
	        }
	      });
	      if (response.ok) {
	        setPlatforms(platforms.map(p => p.name === platformName ? {
	          ...p,
	          connected: true
	        } : p));
	      }
	    } catch (error) {
	      console.error(`Failed to connect to ${platformName}:`, error);
	    }
	  };
	  const handleUnify = async () => {
	    if (platforms.some(p => p.connected)) {
	      setIsUnifying(true);
	      try {
	        const response = await fetch('https://api2.onairos.uk/unify', {
	          method: 'POST',
	          headers: {
	            'Authorization': `Bearer ${localStorage.getItem('onairosToken')}`,
	            'Content-Type': 'application/json'
	          }
	        });
	        if (response.ok) {
	          onComplete();
	        }
	      } catch (error) {
	        console.error('Failed to unify data:', error);
	      }
	    }
	  };
	  if (isUnifying) {
	    return /*#__PURE__*/React$1.createElement(motion.div, {
	      initial: {
	        opacity: 0
	      },
	      animate: {
	        opacity: 1
	      },
	      className: "flex flex-col items-center justify-center space-y-6 p-6"
	    }, /*#__PURE__*/React$1.createElement("h2", {
	      className: "text-xl font-semibold text-gray-900"
	    }, "Unifying Your Data"), /*#__PURE__*/React$1.createElement("p", {
	      className: "text-gray-600 text-center"
	    }, "Please wait while we process your information"), /*#__PURE__*/React$1.createElement("div", {
	      className: "w-full max-w-md"
	    }, /*#__PURE__*/React$1.createElement("div", {
	      className: "relative pt-1"
	    }, /*#__PURE__*/React$1.createElement("div", {
	      className: "flex mb-2 items-center justify-between"
	    }, /*#__PURE__*/React$1.createElement("div", null, /*#__PURE__*/React$1.createElement("span", {
	      className: "text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200"
	    }, "Progress")), /*#__PURE__*/React$1.createElement("div", {
	      className: "text-right"
	    }, /*#__PURE__*/React$1.createElement("span", {
	      className: "text-xs font-semibold inline-block text-blue-600"
	    }, unifyProgress, "%"))), /*#__PURE__*/React$1.createElement(motion.div, {
	      className: "overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200"
	    }, /*#__PURE__*/React$1.createElement(motion.div, {
	      initial: {
	        width: 0
	      },
	      animate: {
	        width: `${unifyProgress}%`
	      },
	      transition: {
	        duration: 0.5
	      },
	      className: "shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
	    })))), /*#__PURE__*/React$1.createElement(motion.div, {
	      animate: {
	        rotate: 360
	      },
	      transition: {
	        duration: 2,
	        repeat: Infinity,
	        ease: "linear"
	      },
	      className: "w-12 h-12"
	    }, /*#__PURE__*/React$1.createElement("svg", {
	      className: "w-full h-full text-blue-500",
	      viewBox: "0 0 24 24"
	    }, /*#__PURE__*/React$1.createElement("path", {
	      fill: "currentColor",
	      d: "M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z"
	    }))));
	  }
	  return /*#__PURE__*/React$1.createElement("div", {
	    className: "flex flex-col items-center space-y-6 p-6"
	  }, /*#__PURE__*/React$1.createElement("h2", {
	    className: "text-xl font-semibold text-gray-900"
	  }, "Connect Your Accounts"), /*#__PURE__*/React$1.createElement("p", {
	    className: "text-gray-600 text-center"
	  }, "Connect at least one account to create your personality model"), /*#__PURE__*/React$1.createElement("div", {
	    className: "grid grid-cols-2 gap-4 w-full max-w-md"
	  }, platforms.map(platform => /*#__PURE__*/React$1.createElement("button", {
	    key: platform.name,
	    onClick: () => handleConnect(platform.name),
	    className: `flex items-center justify-center p-4 rounded-lg border ${platform.connected ? 'bg-green-50 border-green-500' : 'border-gray-300 hover:border-blue-500'}`
	  }, /*#__PURE__*/React$1.createElement("img", {
	    src: platform.icon,
	    alt: platform.name,
	    className: "w-8 h-8 mr-2"
	  }), /*#__PURE__*/React$1.createElement("span", {
	    className: platform.connected ? 'text-green-600' : 'text-gray-700'
	  }, platform.connected ? 'Connected' : `Connect ${platform.name}`)))), /*#__PURE__*/React$1.createElement("button", {
	    onClick: handleUnify,
	    disabled: !platforms.some(p => p.connected),
	    className: `w-full max-w-md py-3 px-4 rounded-lg font-semibold ${platforms.some(p => p.connected) ? 'bg-blue-500 text-white hover:bg-blue-600' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`
	  }, "Unify and Create Model"));
	}

	function SignUp(_ref) {
	  let {
	    onSignUpSuccess,
	    setOthent,
	    setHashedOthentSub,
	    setEncryptedPin
	  } = _ref;
	  const [formData, setFormData] = reactExports.useState({
	    email: '',
	    username: '',
	    password: '',
	    confirmPassword: ''
	  });
	  const [error, setError] = reactExports.useState(null);
	  const handleInputChange = e => {
	    setFormData({
	      ...formData,
	      [e.target.name]: e.target.value
	    });
	  };
	  const handleSubmit = async e => {
	    e.preventDefault();
	    if (formData.password !== formData.confirmPassword) {
	      setError("Passwords don't match");
	      return;
	    }
	    try {
	      const response = await fetch('https://api2.onairos.uk/signup', {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify({
	          email: formData.email,
	          username: formData.username,
	          password: formData.password
	        })
	      });
	      const data = await response.json();
	      if (response.ok) {
	        localStorage.setItem('onairosToken', data.token);
	        localStorage.setItem('username', formData.username);
	        onSignUpSuccess(formData.username);
	      } else {
	        setError(data.message || 'Sign up failed');
	      }
	    } catch (error) {
	      setError('Sign up failed. Please try again.');
	    }
	  };
	  return /*#__PURE__*/React$1.createElement("div", {
	    className: "flex flex-col items-center justify-start max-w-sm mx-auto space-y-6 pt-4"
	  }, error && /*#__PURE__*/React$1.createElement("div", {
	    className: "w-full bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg"
	  }, error), /*#__PURE__*/React$1.createElement(AuthButtons, {
	    onLoginSuccess: onSignUpSuccess,
	    setOthent: setOthent,
	    setHashedOthentSub: setHashedOthentSub,
	    setEncryptedPin: setEncryptedPin
	  }), /*#__PURE__*/React$1.createElement("div", {
	    className: "w-full flex items-center justify-center space-x-4"
	  }, /*#__PURE__*/React$1.createElement("hr", {
	    className: "flex-grow border-gray-300"
	  }), /*#__PURE__*/React$1.createElement("span", {
	    className: "text-gray-500"
	  }, "or"), /*#__PURE__*/React$1.createElement("hr", {
	    className: "flex-grow border-gray-300"
	  })), /*#__PURE__*/React$1.createElement("form", {
	    onSubmit: handleSubmit,
	    className: "w-full space-y-4"
	  }, /*#__PURE__*/React$1.createElement("input", {
	    type: "email",
	    name: "email",
	    value: formData.email,
	    onChange: handleInputChange,
	    placeholder: "Email",
	    className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	    required: true
	  }), /*#__PURE__*/React$1.createElement("input", {
	    type: "text",
	    name: "username",
	    value: formData.username,
	    onChange: handleInputChange,
	    placeholder: "Username",
	    className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	    required: true
	  }), /*#__PURE__*/React$1.createElement("input", {
	    type: "password",
	    name: "password",
	    value: formData.password,
	    onChange: handleInputChange,
	    placeholder: "Password",
	    className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	    required: true
	  }), /*#__PURE__*/React$1.createElement("input", {
	    type: "password",
	    name: "confirmPassword",
	    value: formData.confirmPassword,
	    onChange: handleInputChange,
	    placeholder: "Confirm Password",
	    className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	    required: true
	  }), /*#__PURE__*/React$1.createElement("button", {
	    type: "submit",
	    className: "w-full bg-blue-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-600 transition-colors"
	  }, "Sign Up")));
	}

	function Overlay(_ref) {
	  let {
	    setOthentConnected,
	    dataRequester,
	    NoAccount,
	    NoModel,
	    activeModels,
	    avatar,
	    setAvatar,
	    traits,
	    setTraits,
	    requestData,
	    handleConnectionSelection,
	    changeGranted,
	    granted,
	    allowSubmit,
	    rejectDataRequest,
	    sendDataRequest,
	    isAuthenticated,
	    onClose,
	    onLoginSuccess,
	    setOthentUser,
	    setHashedOthentSub,
	    setEncryptedPin,
	    accountInfo
	  } = _ref;
	  const [loginError, setLoginError] = reactExports.useState(null);
	  const [loading, setLoading] = reactExports.useState(false);
	  const overlayRef = reactExports.useRef(null);

	  // Manages Checkboxes
	  // Maintain the `isChecked` state for all checkboxes in the parent
	  const [checkedStates, setCheckedStates] = reactExports.useState({});
	  const handleCheckboxChange = (key, isChecked) => {
	    console.log(key, " is being changed check to:", isChecked);
	    setCheckedStates(prevState => ({
	      ...prevState,
	      [key]: isChecked
	    }));
	    // Call the `changeGranted` function accordingly
	    changeGranted(isChecked ? 1 : -1);

	    // Call the `handleConnectionSelection` function
	    const product = requestData[key];
	    handleConnectionSelection(dataRequester, key, product.index, product.type, product.reward, isChecked);
	    console.log(product, " Selection registered");
	    handleConnectionSelection(dataRequester, key, product.index, product.type, product.reward, true);
	  };
	  const [currentView, setCurrentView] = reactExports.useState(() => {
	    if (isAuthenticated) {
	      if (accountInfo && accountInfo.models?.length > 0) {
	        return 'datarequests';
	      }
	      return 'onboarding';
	    }
	    return 'login';
	  });
	  const [formData, setFormData] = reactExports.useState({
	    username: '',
	    password: ''
	  });
	  const [loginCompleted, setLoginCompleted] = reactExports.useState(false);
	  const API_URL = 'https://api2.onairos.uk';

	  // Set dynamic viewport height
	  reactExports.useEffect(() => {
	    const setVH = () => {
	      const vh = window.innerHeight * 0.01;
	      document.documentElement.style.setProperty('--vh', `${vh}px`);
	    };
	    setVH();
	    window.addEventListener('resize', setVH);
	    window.addEventListener('orientationchange', setVH);
	    return () => {
	      window.removeEventListener('resize', setVH);
	      window.removeEventListener('orientationchange', setVH);
	    };
	  }, []);
	  const handleClose = () => {
	    onClose();
	  };

	  // Handle click outside
	  reactExports.useEffect(() => {
	    const handleClickOutside = event => {
	      if (overlayRef.current && !overlayRef.current.contains(event.target)) {
	        handleClose?.();
	      }
	    };
	    document.addEventListener('mousedown', handleClickOutside);
	    document.addEventListener('touchstart', handleClickOutside);
	    return () => {
	      document.removeEventListener('mousedown', handleClickOutside);
	      document.removeEventListener('touchstart', handleClickOutside);
	    };
	  }, [handleClose]);
	  const handleInputChange = e => {
	    setFormData({
	      ...formData,
	      [e.target.name]: e.target.value
	    });
	  };
	  const handleOnairosLogin = async e => {
	    e.preventDefault();
	    try {
	      setLoginError(null);
	      const loginAttempt = {
	        details: {
	          username: formData.username,
	          password: formData.password
	        }
	      };
	      const response = await fetch(`${API_URL}/login`, {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify(loginAttempt)
	      });
	      const data = await response.json();
	      if (data.authentication === 'Accepted') {
	        localStorage.setItem('onairosToken', data.token);
	        localStorage.setItem('username', formData.username);
	        await handleLoginSuccess(formData.username);
	      } else {
	        throw new Error('Invalid credentials');
	      }
	    } catch (error) {
	      console.error('Login failed:', error);
	      setLoginError('Invalid username or password');
	    }
	  };
	  const handleLoginSuccess = async function (identifier) {
	    let isEmail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	    setLoading(true);
	    try {
	      const result = await onLoginSuccess(identifier, isEmail);
	      setLoginError(null);
	    } catch (error) {
	      console.error('Login process failed:', error);
	      setLoginError('Failed to complete login process');
	    } finally {
	      setLoading(false);
	    }
	  };
	  const handleOnboardingComplete = () => {
	    setCurrentView('security');
	  };
	  const handleSecurityComplete = securityDetails => {
	    // Handle security setup completion
	    if (securityDetails.method === 'othent') {
	      setOthentUser(true);
	    } else if (securityDetails.method === 'pin') {
	      setEncryptedPin(securityDetails.value);
	    }
	    setCurrentView('datarequests');
	  };
	  const DataRequestsSection = _ref2 => {
	    let {
	      dataRequester,
	      granted,
	      allowSubmit,
	      rejectDataRequest,
	      sendDataRequest,
	      activeModels,
	      requestData,
	      handleConnectionSelection,
	      changeGranted,
	      avatar,
	      traits
	    } = _ref2;
	    return /*#__PURE__*/React.createElement("div", {
	      className: "flex flex-col h-full"
	    }, /*#__PURE__*/React.createElement("div", {
	      className: "px-6"
	    }, /*#__PURE__*/React.createElement("h1", {
	      className: "text-lg font-semibold text-gray-900 mb-6"
	    }, "Data Requests from ", dataRequester), /*#__PURE__*/React.createElement("div", {
	      className: "flex items-center justify-between mb-6"
	    }, /*#__PURE__*/React.createElement("button", {
	      className: "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-8 rounded-full",
	      onClick: rejectDataRequest
	    }, "Reject All"), /*#__PURE__*/React.createElement("button", {
	      disabled: !allowSubmit || granted === 0,
	      className: `${allowSubmit && granted > 0 ? 'bg-blue-500 hover:bg-blue-600' : 'bg-gray-300 cursor-not-allowed'} text-white font-bold py-2 px-8 rounded-full`,
	      onClick: sendDataRequest
	    }, "Confirm (", granted, ")"))), /*#__PURE__*/React.createElement("div", {
	      className: "flex-1 overflow-y-auto px-6"
	    }, activeModels.length === 0 ? /*#__PURE__*/React.createElement("div", {
	      className: "flex flex-col items-center justify-center py-8"
	    }, /*#__PURE__*/React.createElement("img", {
	      src: "https://onairos.sirv.com/Images/OnairosWhite.png",
	      alt: "Onairos Logo",
	      className: "w-24 h-24 mb-4"
	    }), /*#__PURE__*/React.createElement("p", {
	      className: "text-center text-gray-800 font-medium"
	    }, "Please connect ", /*#__PURE__*/React.createElement("a", {
	      href: "https://onairos.uk/connections",
	      className: "text-blue-500 hover:underline"
	    }, "Onairos"), " Personality to send ", dataRequester, " your data")) : /*#__PURE__*/React.createElement("div", {
	      className: "space-y-4"
	    }, Object.keys(requestData).sort((a, b) => {
	      const aIsActive = activeModels.includes(requestData[a].type);
	      const bIsActive = activeModels.includes(requestData[b].type);
	      if (requestData[a].type === "Avatar") return 1;
	      if (requestData[b].type === "Avatar") return -1;
	      if (requestData[b].type === "Traits") return 1;
	      if (requestData[a].type === "Traits") return -1;
	      if (aIsActive && !bIsActive) return -1;
	      if (bIsActive && !aIsActive) return 1;
	      return 0;
	    }).map((key, index) => {
	      const product = requestData[key];
	      const active = product.type === 'Personality' ? activeModels.includes(product.type) : product.type === 'Avatar' ? avatar : product.type === 'Traits' ? traits : false;
	      return /*#__PURE__*/React.createElement(IndividualConnection, {
	        key: key,
	        active: active,
	        title: product.type,
	        id: product,
	        number: index,
	        descriptions: product.descriptions,
	        rewards: product.reward,
	        size: key,
	        isChecked: !!checkedStates[key] // Pass the state from the parent
	        ,
	        onCheckboxChange: isChecked => handleCheckboxChange(key, isChecked) // Handle the change
	      });
	    }))));
	  };
	  const renderContent = () => {
	    switch (currentView) {
	      case 'signup':
	        return /*#__PURE__*/React.createElement(SignUp, {
	          onSignUpSuccess: handleLoginSuccess,
	          setOthentUser: setOthentUser,
	          setHashedOthentSub: setHashedOthentSub,
	          setEncryptedPin: setEncryptedPin
	        });
	      case 'onboarding':
	        return /*#__PURE__*/React.createElement(UniversalOnboarding, {
	          onComplete: handleOnboardingComplete
	        });
	      case 'security':
	        return /*#__PURE__*/React.createElement(SecuritySetup, {
	          onComplete: handleSecurityComplete
	        });
	      case 'datarequests':
	        return /*#__PURE__*/React.createElement(DataRequestsSection, {
	          dataRequester: dataRequester,
	          granted: granted,
	          allowSubmit: allowSubmit,
	          rejectDataRequest: rejectDataRequest,
	          sendDataRequest: sendDataRequest,
	          activeModels: activeModels,
	          requestData: requestData,
	          handleConnectionSelection: handleConnectionSelection,
	          changeGranted: changeGranted,
	          avatar: avatar,
	          traits: traits
	        });
	      default:
	        return /*#__PURE__*/React.createElement("div", {
	          className: "flex flex-col items-center justify-start max-w-sm mx-auto space-y-6 pt-4"
	        }, loginError && /*#__PURE__*/React.createElement("div", {
	          className: "w-full bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg"
	        }, loginError), /*#__PURE__*/React.createElement(AuthButtons, {
	          onLoginSuccess: handleLoginSuccess,
	          setOthentUser: setOthentUser,
	          setHashedOthentSub: setHashedOthentSub,
	          setEncryptedPin: setEncryptedPin
	        }), /*#__PURE__*/React.createElement("div", {
	          className: "w-full flex items-center justify-center space-x-4"
	        }, /*#__PURE__*/React.createElement("hr", {
	          className: "flex-grow border-gray-300"
	        }), /*#__PURE__*/React.createElement("span", {
	          className: "text-gray-500"
	        }, "or"), /*#__PURE__*/React.createElement("hr", {
	          className: "flex-grow border-gray-300"
	        })), /*#__PURE__*/React.createElement("form", {
	          onSubmit: handleOnairosLogin,
	          className: "w-full space-y-4"
	        }, /*#__PURE__*/React.createElement("input", {
	          type: "text",
	          name: "username",
	          value: formData.username,
	          onChange: handleInputChange,
	          placeholder: "Username",
	          className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	          required: true
	        }), /*#__PURE__*/React.createElement("input", {
	          type: "password",
	          name: "password",
	          value: formData.password,
	          onChange: handleInputChange,
	          placeholder: "Password",
	          className: "w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
	          required: true
	        }), /*#__PURE__*/React.createElement("button", {
	          type: "submit",
	          className: "w-full bg-blue-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-600 transition-colors"
	        }, "Sign In")), /*#__PURE__*/React.createElement("button", {
	          onClick: () => setCurrentView('signup'),
	          className: "w-full text-center text-blue-500 hover:text-blue-600"
	        }, "Don't have an account? Sign up"));
	    }
	  };
	  reactExports.useEffect(() => {
	    if (isAuthenticated && accountInfo) {
	      if (accountInfo.models?.length > 0) {
	        setCurrentView('datarequests');
	      } else {
	        setCurrentView('onboarding');
	      }
	    }
	  }, [isAuthenticated, accountInfo]);
	  reactExports.useEffect(() => {
	    return () => {
	      setLoginCompleted(false);
	    };
	  }, []);
	  reactExports.useEffect(() => {}, [isAuthenticated, accountInfo]);

	  // if (loading) {
	  //   return (
	  //     <>
	  //       <div className="fixed inset-0 bg-black bg-opacity-50" />
	  //       <div 
	  //         ref={overlayRef} 
	  //         className="fixed bottom-0 left-0 right-0 w-full bg-white rounded-t-3xl shadow-2xl transform transition-transform duration-300 ease-out flex items-center justify-center"
	  //         style={{ height: 'calc(var(--vh, 1vh) * 50)' }}
	  //       >
	  //         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
	  //       </div>
	  //     </>
	  //   );
	  // }

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
	    className: "fixed inset-0 bg-black bg-opacity-50",
	    onClick: handleClose,
	    style: {
	      touchAction: 'none'
	    }
	  }), /*#__PURE__*/React.createElement("div", {
	    ref: overlayRef,
	    className: "fixed bottom-0 left-0 right-0 w-full bg-white rounded-t-3xl shadow-2xl transform transition-transform duration-300 ease-out flex flex-col",
	    style: {
	      maxHeight: '60vh',
	      minHeight: '45vh',
	      height: 'auto',
	      touchAction: 'none'
	    }
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "sticky top-0 bg-white z-10 px-6 pt-3 pb-2"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "w-12 h-1.5 bg-gray-300 rounded-full mx-auto"
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "flex-1 overflow-y-auto px-6 pb-8",
	    style: {
	      touchAction: 'pan-y'
	    }
	  }, renderContent())));
	}

	class z extends Error {
	  constructor(t, n, r) {
	    super(typeof n == "object" ? n.message : n || t, {
	      cause: typeof n == "object" ? n.cause : r
	    }), this.type = t, this.name = "TypedError", Object.setPrototypeOf(this, z.prototype);
	  }
	}
	function Do(e) {
	  return e.replace(/_[a-z]/g, t => t[1].toUpperCase());
	}
	const xo = "ERR_INVALID_VALUE",
	  Mo = "ERR_UNEXPECTED_VALUE",
	  jo = "ERR_UNEXPECTED_TYPE",
	  Jn = "ERR_PARSE";
	function Yn(e, t) {
	  const n = {};
	  for (const r in e) {
	    const o = e[r];
	    if (!o) continue;
	    let s, a;
	    typeof o == "function" ? (s = r, a = o) : [s, a] = o;
	    try {
	      const i = a(t(s));
	      i !== void 0 && (n[r] = i);
	    } catch (i) {
	      throw new z(Jn, `Parser for "${r}" property failed${s === r ? "" : `. Source field: "${s}"`}`, i);
	    }
	  }
	  return n;
	}
	function Qn(e) {
	  let t = e;
	  if (typeof t == "string") try {
	    t = JSON.parse(t);
	  } catch (n) {
	    throw new z(xo, {
	      cause: n
	    });
	  }
	  if (typeof t != "object" || !t || Array.isArray(t)) throw new z(Mo);
	  return t;
	}
	function q(e, t) {
	  return n => {
	    const r = o => {
	      if (!(n && o === void 0)) try {
	        return t(o);
	      } catch (s) {
	        throw new z(Jn, {
	          message: `"${e}" transformer failed to parse the value`,
	          cause: s
	        });
	      }
	    };
	    return /* @__PURE__ */Object.assign(r, {
	      isValid(o) {
	        try {
	          return r(o), !0;
	        } catch {
	          return !1;
	        }
	      }
	    });
	  };
	}
	function Ue(e, t) {
	  return q(t || "object", n => {
	    const r = Qn(n);
	    return Yn(e, o => r[o]);
	  });
	}
	function Re(e) {
	  throw new z(jo, `Unexpected value received: ${JSON.stringify(e)}`);
	}
	const N = q("string", e => {
	    if (typeof e == "string" || typeof e == "number") return e.toString();
	    Re(e);
	  });
	function _e(e) {
	  return /^#[\da-f]{6}$/i.test(e);
	}
	function No(e) {
	  return /^#[\da-f]{3}$/i.test(e);
	}
	function Zn(e) {
	  const t = e.replace(/\s/g, "").toLowerCase();
	  if (_e(t)) return t;
	  if (No(t)) {
	    let r = "#";
	    for (let o = 0; o < 3; o += 1) r += t[1 + o].repeat(2);
	    return r;
	  }
	  const n = t.match(/^rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)$/) || t.match(/^rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),\d{1,3}\)$/);
	  if (!n) throw new Error(`Value "${e}" does not satisfy any of known RGB formats.`);
	  return n.slice(1).reduce((r, o) => {
	    const s = parseInt(o, 10).toString(16);
	    return r + (s.length === 1 ? "0" : "") + s;
	  }, "#");
	}
	const qo = q("rgb", e => Zn(N()(e))),
	  Uo = q("themeParams", e => {
	    const t = qo(!0);
	    return Object.entries(Qn(e)).reduce((n, [r, o]) => (n[Do(r)] = t(o), n), {});
	  });
	function $o(e, t) {
	  return q("array", n => {
	    let r;
	    if (Array.isArray(n)) r = n;else if (typeof n == "string") try {
	      const o = JSON.parse(n);
	      Array.isArray(o) && (r = o);
	    } catch {}
	    return r || Re(n), r.map(e);
	  });
	}
	class G extends Error {
	  constructor(t, n, r) {
	    super(typeof n == "object" ? n.message : n || t, {
	      cause: typeof n == "object" ? n.cause : r
	    }), this.type = t, this.name = "TypedError", Object.setPrototypeOf(this, G.prototype);
	  }
	}
	function er(e) {
	  return e.replace(/[A-Z]/g, t => `_${t.toLowerCase()}`);
	}
	function Fo(e) {
	  return e.replace(/_[a-z]/g, t => t[1].toUpperCase());
	}
	const Ho = "ERR_INVALID_VALUE",
	  Wo = "ERR_UNEXPECTED_VALUE",
	  zo = "ERR_UNEXPECTED_TYPE",
	  tr = "ERR_PARSE";
	function nr(e, t) {
	  const n = {};
	  for (const r in e) {
	    const o = e[r];
	    if (!o) continue;
	    let s, a;
	    typeof o == "function" ? (s = r, a = o) : [s, a] = o;
	    try {
	      const i = a(t(s));
	      i !== void 0 && (n[r] = i);
	    } catch (i) {
	      throw new G(tr, `Parser for "${r}" property failed${s === r ? "" : `. Source field: "${s}"`}`, i);
	    }
	  }
	  return n;
	}
	function rr(e) {
	  let t = e;
	  if (typeof t == "string") try {
	    t = JSON.parse(t);
	  } catch (n) {
	    throw new G(Ho, {
	      cause: n
	    });
	  }
	  if (typeof t != "object" || !t || Array.isArray(t)) throw new G(Wo);
	  return t;
	}
	function D(e, t) {
	  return n => {
	    const r = o => {
	      if (!(n && o === void 0)) try {
	        return t(o);
	      } catch (s) {
	        throw new G(tr, {
	          message: `"${e}" transformer failed to parse the value`,
	          cause: s
	        });
	      }
	    };
	    return /* @__PURE__ */Object.assign(r, {
	      isValid(o) {
	        try {
	          return r(o), !0;
	        } catch {
	          return !1;
	        }
	      }
	    });
	  };
	}
	function O(e, t) {
	  return D(t || "object", n => {
	    const r = rr(n);
	    return nr(e, o => r[o]);
	  });
	}
	function Te(e) {
	  throw new G(zo, `Unexpected value received: ${JSON.stringify(e)}`);
	}
	const Fe = D("boolean", e => {
	    if (typeof e == "boolean") return e;
	    const t = String(e);
	    if (t === "1" || t === "true") return !0;
	    if (t === "0" || t === "false") return !1;
	    Te(e);
	  }),
	  B = D("string", e => {
	    if (typeof e == "string" || typeof e == "number") return e.toString();
	    Te(e);
	  }),
	  fe = D("number", e => {
	    if (typeof e == "number") return e;
	    if (typeof e == "string") {
	      const t = Number(e);
	      if (!Number.isNaN(t)) return t;
	    }
	    Te(e);
	  }),
	  Go = D("date", e => e instanceof Date ? e : new Date(fe()(e) * 1e3));
	function or(e, t) {
	  return D(t || "searchParams", n => {
	    typeof n != "string" && !(n instanceof URLSearchParams) && Te(n);
	    const r = typeof n == "string" ? new URLSearchParams(n) : n;
	    return nr(e, o => {
	      const s = r.get(o);
	      return s === null ? void 0 : s;
	    });
	  });
	}
	function ht(e) {
	  for (const t in e) e[t] = [er(t), e[t]];
	  return e;
	}
	const Jo = e => {
	  const t = fe(),
	    n = fe(!0),
	    r = B(),
	    o = B(!0),
	    s = Fe(!0),
	    a = O(ht({
	      addedToAttachmentMenu: s,
	      allowsWriteToPm: s,
	      firstName: r,
	      id: t,
	      isBot: s,
	      isPremium: s,
	      languageCode: o,
	      lastName: o,
	      photoUrl: o,
	      username: o
	    }), "User")(!0);
	  return or(ht({
	    authDate: Go(),
	    canSendAfter: n,
	    chat: O(ht({
	      id: t,
	      type: r,
	      title: r,
	      photoUrl: o,
	      username: o
	    }), "Chat")(!0),
	    chatInstance: o,
	    chatType: o,
	    hash: r,
	    queryId: o,
	    receiver: a,
	    startParam: o,
	    signature: r,
	    user: a
	  }), "initData")(e);
	};
	function Yo(e) {
	  return /^#[\da-f]{6}$/i.test(e);
	}
	function Qo(e) {
	  return /^#[\da-f]{3}$/i.test(e);
	}
	function Ko(e) {
	  const t = e.replace(/\s/g, "").toLowerCase();
	  if (Yo(t)) return t;
	  if (Qo(t)) {
	    let r = "#";
	    for (let o = 0; o < 3; o += 1) r += t[1 + o].repeat(2);
	    return r;
	  }
	  const n = t.match(/^rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)$/) || t.match(/^rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),\d{1,3}\)$/);
	  if (!n) throw new Error(`Value "${e}" does not satisfy any of known RGB formats.`);
	  return n.slice(1).reduce((r, o) => {
	    const s = parseInt(o, 10).toString(16);
	    return r + (s.length === 1 ? "0" : "") + s;
	  }, "#");
	}
	const Zo = D("rgb", e => Ko(B()(e))),
	  Rn = D("themeParams", e => {
	    const t = Zo(!0);
	    return Object.entries(rr(e)).reduce((n, [r, o]) => (n[Fo(r)] = t(o), n), {});
	  });
	// @__NO_SIDE_EFFECTS__
	function vt(e) {
	  return JSON.stringify(Object.fromEntries(Object.entries(e).map(([t, n]) => [er(t), n])));
	}
	const Xo = e => {
	  const t = B(),
	    n = B(!0),
	    r = Fe(!0);
	  return or({
	    botInline: ["tgWebAppBotInline", r],
	    defaultColors: ["tgWebAppDefaultColors", Rn(!0)],
	    fullscreen: ["tgWebAppFullscreen", r],
	    initData: ["tgWebAppData", Jo(!0)],
	    initDataRaw: ["tgWebAppData", n],
	    platform: ["tgWebAppPlatform", t],
	    showSettings: ["tgWebAppShowSettings", r],
	    startParam: ["tgWebAppStartParam", n],
	    themeParams: ["tgWebAppThemeParams", Rn()],
	    version: ["tgWebAppVersion", t]
	  }, "launchParams")(e);
	};
	// @__NO_SIDE_EFFECTS__
	function es(e) {
	  const {
	      initDataRaw: t,
	      startParam: n,
	      showSettings: r,
	      botInline: o,
	      fullscreen: s,
	      defaultColors: a
	    } = e,
	    i = new URLSearchParams();
	  return i.set("tgWebAppPlatform", e.platform), i.set("tgWebAppThemeParams", /* @__PURE__ */vt(e.themeParams)), i.set("tgWebAppVersion", e.version), t && i.set("tgWebAppData", t), n && i.set("tgWebAppStartParam", n), typeof r == "boolean" && i.set("tgWebAppShowSettings", r ? "1" : "0"), typeof o == "boolean" && i.set("tgWebAppBotInline", o ? "1" : "0"), typeof s == "boolean" && i.set("tgWebAppFullscreen", s ? "1" : "0"), a && i.set("tgWebAppDefaultColors", /* @__PURE__ */vt(a)), i.toString();
	}
	const sr = O({
	    eventType: B(),
	    eventData: e => e
	  }, "miniAppsMessage"),
	  ar = D("fn", e => {
	    if (typeof e == "function") return e;
	    Te(e);
	  });
	const ns = O({
	  TelegramWebviewProxy: O({
	    postEvent: ar()
	  })()
	});
	function ir(e) {
	  return ns().isValid(e);
	}
	function rs() {
	  try {
	    return window.self !== window.top;
	  } catch {
	    return !0;
	  }
	}
	var os = Object.defineProperty,
	  ss = (e, t, n) => t in e ? os(e, t, {
	    enumerable: !0,
	    configurable: !0,
	    writable: !0,
	    value: n
	  }) : e[t] = n,
	  cr = (e, t, n) => ss(e, typeof t != "symbol" ? t + "" : t, n);
	let p = class ur extends Error {
	  constructor(t, n, r) {
	    super(typeof n == "object" ? n.message : n || t, {
	      cause: typeof n == "object" ? n.cause : r
	    }), this.type = t, this.name = "TypedError", Object.setPrototypeOf(this, ur.prototype);
	  }
	};
	function pr(e, t, n) {
	  return e.addEventListener(t, n), () => e.removeEventListener(t, n);
	}
	function ne(...e) {
	  const t = e.flat(1);
	  return [t.push.bind(t), () => {
	    t.forEach(n => {
	      n();
	    });
	  }];
	}
	const lr = "ERR_ABORTED",
	  dr = "ERR_CANCELED",
	  _r = "ERR_TIMED_OUT";
	function Tn(e) {
	  return new p(lr, {
	    cause: e
	  });
	}
	function Bn(e, t) {
	  return e.reject = t.reject, e;
	}
	class b extends Promise {
	  constructor(t, n) {
	    let r, o;
	    typeof t == "function" ? (r = t, o = n) : o = t;
	    let s, a;
	    super((i, l) => {
	      o || (o = {});
	      const {
	        abortSignal: u
	      } = o;
	      if (u && u.aborted) return l(Tn(u.reason));
	      const [f, y] = ne(),
	        v = m => (...W) => (y(), m(...W)),
	        L = new AbortController(),
	        {
	          signal: R
	        } = L;
	      a = v(m => {
	        L.abort(m), l(m);
	      }), s = v(i), u && f(pr(u, "abort", () => {
	        a(Tn(u.reason));
	      }));
	      const {
	        timeout: g
	      } = o;
	      if (g) {
	        const m = setTimeout(() => {
	          a(new p(_r, `Timeout reached: ${g}ms`));
	        }, g);
	        f(() => {
	          clearTimeout(m);
	        });
	      }
	      r && r(s, a, R);
	    }), cr(this, "reject"), this.reject = a;
	  }
	  /**
	   * Creates a new BetterPromise instance using executor, resolving promise when a result
	   * was returned.
	   * @param fn - function returning promise result.
	   * @param options - additional options.
	   */
	  static withFn(t, n) {
	    return new b((r, o, s) => {
	      try {
	        const a = t(s);
	        return a instanceof Promise ? a.then(r, o) : r(a);
	      } catch (a) {
	        o(a);
	      }
	    }, n);
	  }
	  /**
	   * @see Promise.resolve
	   */
	  static resolve(t) {
	    return new b(n => {
	      n(t);
	    });
	  }
	  /**
	   * @see Promise.reject
	   */
	  static reject(t) {
	    return new b((n, r) => {
	      r(t);
	    });
	  }
	  /**
	   * Cancels the promise execution.
	   */
	  cancel() {
	    this.reject(new p(dr));
	  }
	  /**
	   * @see Promise.catch
	   */
	  catch(t) {
	    return this.then(void 0, t);
	  }
	  /**
	   * @see Promise.finally
	   */
	  finally(t) {
	    return Bn(super.finally(t), this);
	  }
	  /**
	   * @see Promise.then
	   */
	  then(t, n) {
	    return Bn(super.then(t, n), this);
	  }
	}
	function Pn(e, t) {
	  return e.resolve = t.resolve, e;
	}
	let is = class Oe extends b {
	  constructor(t, n) {
	    let r, o;
	    typeof t == "function" ? (r = t, o = n) : o = t;
	    let s;
	    super((a, i, l) => {
	      s = a, r && r(a, i, l);
	    }, o), cr(this, "resolve"), this.resolve = s;
	  }
	  /**
	   * Creates a new EnhancedPromise instance using executor, resolving promise when a result
	   * was returned.
	   * @param fn - function returning promise result.
	   * @param options - additional options.
	   */
	  static withFn(t, n) {
	    return new Oe((r, o, s) => b.withFn(t, {
	      abortSignal: s
	    }).then(r, o), n);
	  }
	  /**
	   * @see Promise.resolve
	   */
	  static resolve(t) {
	    return new Oe(n => {
	      n(t);
	    });
	  }
	  /**
	   * @see Promise.reject
	   */
	  static reject(t) {
	    return new Oe((n, r) => {
	      r(t);
	    });
	  }
	  /**
	   * @see Promise.catch
	   */
	  catch(t) {
	    return this.then(void 0, t);
	  }
	  /**
	   * @see Promise.finally
	   */
	  finally(t) {
	    return Pn(super.finally(t), this);
	  }
	  /**
	   * @see Promise.then
	   */
	  then(t, n) {
	    return Pn(super.then(t, n), this);
	  }
	};
	function fr(e) {
	  return `tapps/${e}`;
	}
	function P(e, t) {
	  sessionStorage.setItem(fr(e), JSON.stringify(t));
	}
	function k(e) {
	  const t = sessionStorage.getItem(fr(e));
	  try {
	    return t ? JSON.parse(t) : void 0;
	  } catch {}
	}
	function Lt(e) {
	  return e.replace(/[A-Z]/g, t => `-${t.toLowerCase()}`);
	}
	// @__NO_SIDE_EFFECTS__
	function us(e, t) {
	  t || (t = {});
	  const {
	    textColor: n,
	    bgColor: r,
	    shouldLog: o = !0
	  } = t;
	  function s(a, ...i) {
	    if (!o || typeof o == "function" && !o()) return;
	    const l = "font-weight:bold;padding:0 5px;border-radius:5px";
	    console[a](`%c${Intl.DateTimeFormat("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      fractionalSecondDigits: 3,
      timeZone: "UTC"
    }).format(new Date())}%c / %c${e}`, `${l};background-color: lightblue;color:black`, "", `${l};${n ? `color:${n};` : ""}${r ? `background-color:${r}` : ""}`, ...i);
	  }
	  return [function (...a) {
	    s("log", ...a);
	  }, function (...a) {
	    s("error", ...a);
	  }];
	}
	function Vt(e, t) {
	  document.documentElement.style.setProperty(e, t);
	}
	function Nt(e) {
	  document.documentElement.style.removeProperty(e);
	}
	function ps(e, t) {
	  t();
	}
	// @__NO_SIDE_EFFECTS__
	function re(e, t) {
	  t || (t = {});
	  const n = t.equals || Object.is;
	  let r = [],
	    o = e;
	  const s = u => {
	    if (!n(o, u)) {
	      const f = o;
	      o = u, ps(l, () => {
	        [...r].forEach(([y, v]) => {
	          y(u, f), v && i(y, !0);
	        });
	      });
	    }
	  };
	  function a(u) {
	    const f = typeof u != "object" ? {
	      once: u
	    } : u;
	    return {
	      once: f.once || !1,
	      signal: f.signal || !1
	    };
	  }
	  const i = (u, f) => {
	      const y = a(f),
	        v = r.findIndex(([L, R]) => L === u && R.once === y.once && R.signal === y.signal);
	      v >= 0 && r.splice(v, 1);
	    },
	    l = Object.assign(function () {
	      return ls(l), o;
	    }, {
	      destroy() {
	        r = [];
	      },
	      set: s,
	      reset() {
	        s(e);
	      },
	      sub(u, f) {
	        return r.push([u, a(f)]), () => i(u, f);
	      },
	      unsub: i,
	      unsubAll() {
	        r = r.filter(u => u[1].signal);
	      }
	    });
	  return l;
	}
	const bt = [];
	function ls(e) {
	  bt.length && bt[bt.length - 1].add(e);
	}
	const ds = /* @__PURE__ */re(!1),
	  [qt, _s] = /* @__PURE__ */us("Bridge", {
	    bgColor: "#9147ff",
	    textColor: "white",
	    shouldLog: ds
	  }),
	  fs = {
	    clipboard_text_received: O({
	      req_id: B(),
	      data: e => e === null ? e : B(!0)(e)
	    }, "clipboard_text_received"),
	    custom_method_invoked: O({
	      req_id: B(),
	      result: e => e,
	      error: B(!0)
	    }, "custom_method_invoked"),
	    popup_closed: D("popup_closed", e => e ? O({
	      button_id: t => t == null ? void 0 : B()(t)
	    })()(e) : {}),
	    viewport_changed: O({
	      height: fe(),
	      width: e => e == null ? window.innerWidth : fe()(e),
	      is_state_stable: Fe(),
	      is_expanded: Fe()
	    }, "viewport_changed")
	  };
	function ms(e) {
	  const t = window,
	    [, n] = ne(
	    // Add listener, which handles events sent from the Telegram web application and also events
	    // generated by the local emitEvent function.
	    pr(t, "message", r => {
	      if (r.source !== t.parent) return;
	      let o;
	      try {
	        o = sr()(r.data);
	      } catch {
	        return;
	      }
	      const {
	          eventType: s,
	          eventData: a
	        } = o,
	        i = fs[s];
	      try {
	        const l = i ? i()(a) : a;
	        qt("Event received:", l ? {
	          eventType: s,
	          eventData: l
	        } : {
	          eventType: s
	        }), e([s, l]);
	      } catch (l) {
	        _s([`An error occurred processing the "${s}" event from the Telegram application.`, "Please, file an issue here:", "https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose"].join(`
`), o, l);
	      }
	    }));
	  return n;
	}
	const At = /* @__PURE__ */re(),
	  kn = /* @__PURE__ */re();
	function mr() {
	  return kn() || kn.set(ms(At.set)), At;
	}
	const gt = /* @__PURE__ */re({});
	function hr(e) {
	  let t = gt()[e];
	  return t || (t = /* @__PURE__ */re(void 0, {
	    equals() {
	      return !1;
	    }
	  }), mr().sub(n => {
	    n && n[0] === e && t.set(n[1]);
	  }), gt.set({
	    ...gt(),
	    [e]: t
	  })), t;
	}
	function w(e, t, n) {
	  return hr(e).sub(t, n);
	}
	const bs = "ERR_RETRIEVE_LP_FAILED",
	  br = "ERR_UNKNOWN_ENV",
	  ws = "ERR_INVOKE_CUSTOM_METHOD_RESPONSE",
	  ys = /* @__PURE__ */re("https://web.telegram.org");
	function Ut(e, t) {
	  qt("Posting event:", t ? {
	    eventType: e,
	    eventData: t
	  } : {
	    eventType: e
	  });
	  const n = window;
	  if (ir(n)) {
	    n.TelegramWebviewProxy.postEvent(e, JSON.stringify(t));
	    return;
	  }
	  const r = JSON.stringify({
	    eventType: e,
	    eventData: t
	  });
	  if (rs()) return n.parent.postMessage(r, ys());
	  const {
	    external: o
	  } = n;
	  if (O({
	    notify: ar()
	  })().isValid(o)) {
	    o.notify(r);
	    return;
	  }
	  throw new p(br);
	}
	function $t(e, t, n) {
	  n || (n = {});
	  const {
	      capture: r
	    } = n,
	    [o, s] = ne();
	  return new b(a => {
	    (Array.isArray(t) ? t : [t]).forEach(i => {
	      o(w(i, l => {
	        (!r || (Array.isArray(t) ? r({
	          event: i,
	          payload: l
	        }) : r(l))) && a(l);
	      }));
	    }), (n.postEvent || Ut)(e, n.params);
	  }, n).finally(s);
	}
	function Ft(e) {
	  return Xo()(e);
	}
	function gr(e) {
	  return Ft(e.replace(/^[^?#]*[?#]/, "").replace(/[?#]/g, "&"));
	}
	function Ss() {
	  return gr(window.location.href);
	}
	function Es() {
	  const e = performance.getEntriesByType("navigation")[0];
	  if (!e) throw new Error("Unable to get first navigation entry.");
	  return gr(e.name);
	}
	const vs = "launchParams";
	function As() {
	  return Ft(k(vs) || "");
	}
	function wr(e) {
	  P("launchParams", /* @__PURE__ */es(e));
	}
	function yr(e) {
	  return e instanceof Error ? e.message + (e.cause ? `
  ${yr(e.cause)}` : "") : JSON.stringify(e);
	}
	function Y() {
	  const e = [];
	  for (const t of [
	  // Try to retrieve launch parameters from the current location. This method can return
	  // nothing in case, location was changed, and then the page was reloaded.
	  Ss,
	  // Then, try using the lower level API - window.performance.
	  Es,
	  // Finally, try to extract launch parameters from the session storage.
	  As]) try {
	    const n = t();
	    return wr(n), n;
	  } catch (n) {
	    e.push(n);
	  }
	  throw new p(bs, ["Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?", "📖 Refer to docs for more information:", "https://docs.telegram-mini-apps.com/packages/telegram-apps-bridge/environment", "Collected errors:", ...e.map(t => `— ${yr(t)}`)].join(`
`));
	}
	function In(e) {
	  if (e === "simple") try {
	    return Y(), !0;
	  } catch {
	    return !1;
	  }
	  return b.withFn(async () => {
	    if (ir(window)) return !0;
	    try {
	      return await $t("web_app_request_theme", "theme_changed", {
	        timeout: 100
	      }), !0;
	    } catch {
	      return !1;
	    }
	  }, e);
	}
	function C(e, t, n) {
	  hr(e).unsub(t, n);
	}
	function Sr(e) {
	  return ({
	    req_id: t
	  }) => t === e;
	}
	function On(e) {
	  return e.split(".").map(Number);
	}
	function Bs(e, t) {
	  const n = On(e),
	    r = On(t),
	    o = Math.max(n.length, r.length);
	  for (let s = 0; s < o; s += 1) {
	    const a = n[s] || 0,
	      i = r[s] || 0;
	    if (a !== i) return a > i ? 1 : -1;
	  }
	  return 0;
	}
	function S(e, t) {
	  return Bs(e, t) <= 0;
	}
	function J(e, t, n) {
	  if (typeof n == "string") {
	    if (e === "web_app_open_link") {
	      if (t === "try_instant_view") return S("6.4", n);
	      if (t === "try_browser") return S("7.6", n);
	    }
	    if (e === "web_app_set_header_color" && t === "color") return S("6.9", n);
	    if (e === "web_app_close" && t === "return_back") return S("7.6", n);
	    if (e === "web_app_setup_main_button" && t === "has_shine_effect") return S("7.10", n);
	  }
	  switch (e) {
	    case "web_app_open_tg_link":
	    case "web_app_open_invoice":
	    case "web_app_setup_back_button":
	    case "web_app_set_background_color":
	    case "web_app_set_header_color":
	    case "web_app_trigger_haptic_feedback":
	      return S("6.1", t);
	    case "web_app_open_popup":
	      return S("6.2", t);
	    case "web_app_close_scan_qr_popup":
	    case "web_app_open_scan_qr_popup":
	    case "web_app_read_text_from_clipboard":
	      return S("6.4", t);
	    case "web_app_switch_inline_query":
	      return S("6.7", t);
	    case "web_app_invoke_custom_method":
	    case "web_app_request_write_access":
	    case "web_app_request_phone":
	      return S("6.9", t);
	    case "web_app_setup_settings_button":
	      return S("6.10", t);
	    case "web_app_biometry_get_info":
	    case "web_app_biometry_open_settings":
	    case "web_app_biometry_request_access":
	    case "web_app_biometry_request_auth":
	    case "web_app_biometry_update_token":
	      return S("7.2", t);
	    case "web_app_setup_swipe_behavior":
	      return S("7.7", t);
	    case "web_app_share_to_story":
	      return S("7.8", t);
	    case "web_app_setup_secondary_button":
	    case "web_app_set_bottom_bar_color":
	      return S("7.10", t);
	    case "web_app_request_safe_area":
	    case "web_app_request_content_safe_area":
	    case "web_app_request_fullscreen":
	    case "web_app_exit_fullscreen":
	    case "web_app_set_emoji_status":
	    case "web_app_add_to_home_screen":
	    case "web_app_check_home_screen":
	    case "web_app_request_emoji_status_access":
	      return S("8.0", t);
	    default:
	      return ["iframe_ready", "iframe_will_reload", "web_app_close", "web_app_data_send", "web_app_expand", "web_app_open_link", "web_app_ready", "web_app_request_theme", "web_app_request_viewport", "web_app_setup_main_button", "web_app_setup_closing_behavior"].includes(e);
	  }
	}
	function ks(e, t, n, r) {
	  return $t("web_app_invoke_custom_method", "custom_method_invoked", {
	    ...(r || {}),
	    params: {
	      method: e,
	      params: t,
	      req_id: n
	    },
	    capture: Sr(n)
	  }).then(({
	    result: o,
	    error: s
	  }) => {
	    if (s) throw new p(ws, s);
	    return o;
	  });
	}
	function Is() {
	  return performance.getEntriesByType("navigation")[0];
	}
	function x() {
	  const e = Is();
	  return !!e && e.type === "reload";
	}
	let X;
	function Os(e, t) {
	  X && X.set(e, t) || t();
	}
	function Rt(e) {
	  if (X) return e();
	  X = /* @__PURE__ */new Map();
	  try {
	    e();
	  } finally {
	    X.forEach(t => t()), X = void 0;
	  }
	}
	// @__NO_SIDE_EFFECTS__
	function c(e, t) {
	  t || (t = {});
	  const n = t.equals || Object.is;
	  let r = [],
	    o = e;
	  const s = u => {
	    if (!n(o, u)) {
	      const f = o;
	      o = u, Os(l, () => {
	        [...r].forEach(([y, v]) => {
	          y(u, f), v && i(y, !0);
	        });
	      });
	    }
	  };
	  function a(u) {
	    const f = typeof u != "object" ? {
	      once: u
	    } : u;
	    return {
	      once: f.once || !1,
	      signal: f.signal || !1
	    };
	  }
	  const i = (u, f) => {
	      const y = a(f),
	        v = r.findIndex(([L, R]) => L === u && R.once === y.once && R.signal === y.signal);
	      v >= 0 && r.splice(v, 1);
	    },
	    l = Object.assign(function () {
	      return Ds(l), o;
	    }, {
	      destroy() {
	        r = [];
	      },
	      set: s,
	      reset() {
	        s(e);
	      },
	      sub(u, f) {
	        return r.push([u, a(f)]), () => i(u, f);
	      },
	      unsub: i,
	      unsubAll() {
	        r = r.filter(u => u[1].signal);
	      }
	    });
	  return l;
	}
	const ue = [];
	function Ds(e) {
	  ue.length && ue[ue.length - 1].add(e);
	}
	// @__NO_SIDE_EFFECTS__
	function d(e, t) {
	  let n = /* @__PURE__ */new Set(),
	    r;
	  function o() {
	    return r || (r = /* @__PURE__ */c(a(), t));
	  }
	  function s() {
	    o().set(a());
	  }
	  function a() {
	    n.forEach(u => {
	      u.unsub(s, {
	        signal: !0
	      });
	    });
	    const i = /* @__PURE__ */new Set();
	    let l;
	    ue.push(i);
	    try {
	      l = e();
	    } finally {
	      ue.pop();
	    }
	    return i.forEach(u => {
	      u.sub(s, {
	        signal: !0
	      });
	    }), n = i, l;
	  }
	  return Object.assign(function () {
	    return o()();
	  }, {
	    destroy() {
	      o().destroy();
	    },
	    sub(...i) {
	      return o().sub(...i);
	    },
	    unsub(...i) {
	      o().unsub(...i);
	    },
	    unsubAll(...i) {
	      o().unsubAll(...i);
	    }
	  });
	}
	const xs = /* @__PURE__ */c(/* @__PURE__ */(() => {
	    let e = 0;
	    return () => (e += 1).toString();
	  })()),
	  Er = /* @__PURE__ */c(Ut),
	  V = /* @__PURE__ */c("0.0");
	function vr() {
	  return xs()();
	}
	function oe(e, t, n) {
	  return ks(e, t, vr(), {
	    ...(n || {}),
	    postEvent: _
	  });
	}
	const E = (e, t, n) => (n || (n = {}), n.postEvent || (n.postEvent = _), $t(e, t, n)),
	  _ = (e, t) => Er()(e, t);
	const ce = "ERR_POPUP_INVALID_PARAMS",
	  Ht = "ERR_INVALID_URL",
	  js = "ERR_INVALID_SLUG",
	  F = "ERR_ALREADY_REQUESTING",
	  Wt = "ERR_ALREADY_OPENED",
	  Ns = "ERR_ALREADY_MOUNTING",
	  qs = "ERR_VARS_ALREADY_BOUND",
	  Us = "ERR_NOT_AVAILABLE",
	  $s = "ERR_NOT_INITIALIZED",
	  Dn = "ERR_NOT_SUPPORTED",
	  Fs = "ERR_NOT_MOUNTED",
	  Hs = "ERR_FULLSCREEN_FAILED";
	function xn() {
	  return typeof window > "u";
	}
	// @__NO_SIDE_EFFECTS__
	function h(e, t, {
	  isSupported: n,
	  isMounted: r,
	  component: o,
	  supports: s
	} = {}) {
	  const a = `${o ? `${o}.` : ""}${e}()`;
	  n = n ? Array.isArray(n) || typeof n == "object" && "any" in n ? n : [n] : void 0;
	  function i(g) {
	    if (s) {
	      const m = s[g];
	      return J(m[0], m[1], V());
	    }
	    return !0;
	  }
	  const l = () => {
	      if (!n) return;
	      const g = `it is unsupported in Mini Apps version ${V()}`;
	      function m(T) {
	        return typeof T == "string" ? J(T, V()) ? void 0 : g : T.fn() ? void 0 : T.error;
	      }
	      if (Array.isArray(n)) {
	        for (const T of n) {
	          const An = m(T);
	          if (An) return An;
	        }
	        return;
	      }
	      let W;
	      for (const T of n.any) if (W = m(T), !W) return;
	      return g;
	    },
	    u = (...g) => {
	      if (s) {
	        for (const m in s) if (s[m][2](...g) && !i(m)) return `option ${m} is not supported in Mini Apps version ${V()}`;
	      }
	    },
	    f = /* @__PURE__ */d(() => !l()),
	    y = /* @__PURE__ */d(() => V() !== "0.0"),
	    v = /* @__PURE__ */d(() => !r || r()),
	    L = /* @__PURE__ */d(() => In("simple") && !xn() && y() && f() && v());
	  let R;
	  if (s) {
	    R = {};
	    for (const g in s) R[g] = /* @__PURE__ */d(() => i(g));
	  }
	  return Object.assign((...g) => {
	    const m = `Unable to call the ${a} ${o ? "method" : "function"}:`;
	    if (xn() || !In("simple")) throw new p(br, `${m} it can't be called outside Mini Apps`);
	    if (!y()) throw new p($s, `${m} the SDK was not initialized. Use the SDK init() function`);
	    const W = l();
	    if (W) throw new p(Dn, `${m} ${W}`);
	    const T = u(...g);
	    if (T) throw new p(Dn, `${m} ${T}`);
	    if (!v()) throw new p(Fs, `${m} the component is not mounted. Use the ${o}.mount() method`);
	    return t(...g);
	  }, t, {
	    isAvailable: L,
	    ifAvailable(...g) {
	      return L() ? t(...g) : void 0;
	    }
	  }, n ? {
	    isSupported: f
	  } : {}, R ? {
	    supports: R
	  } : {});
	}
	function We(e, t) {
	  return t || (t = {}), (n, r, o, s) => /* @__PURE__ */h(n, r, {
	    ...t,
	    isSupported: o || t.isSupported,
	    supports: s,
	    component: e
	  });
	}
	function Q(e, t, n) {
	  return We(e, {
	    isSupported: n,
	    isMounted: t
	  });
	}
	function I(e, t) {
	  return We(e, {
	    isSupported: t
	  });
	}
	const ze = "web_app_setup_back_button",
	  Ar = "back_button_pressed",
	  Ge = "backButton",
	  Tt = /* @__PURE__ */c(!1),
	  me = /* @__PURE__ */c(!1),
	  Cr = Q(Ge, me, ze),
	  zt = I(Ge, ze);
	  Cr("hide", () => {
	    Gt(!1);
	  });
	  zt("mount", () => {
	    me() || (Gt(x() && k(Ge) || !1), me.set(!0));
	  });
	function Gt(e) {
	  e !== Tt() && (_(ze, {
	    is_visible: e
	  }), P(Ge, e), Tt.set(e));
	}
	zt("onClick", e => w(Ar, e));
	  zt("offClick", e => {
	    C(Ar, e);
	  });
	  Cr("show", () => {
	    Gt(!0);
	  });
	// @__NO_SIDE_EFFECTS__
	function Be(e, t, n, r, o) {
	  const s = o === void 0 || o ? b : Promise;
	  return Object.assign((...a) => s.resolve().then(async () => {
	    if (n()) {
	      const l = t();
	      throw r.set(l), l;
	    }
	    Rt(() => {
	      n.set(s.resolve(e(...a))), r.set(void 0);
	    });
	    let i;
	    try {
	      i = [!0, await n()];
	    } catch (l) {
	      i = [!1, l];
	    }
	    if (Rt(() => {
	      n.set(void 0), r.set(i[0] ? void 0 : i[1]);
	    }), !i[0]) throw i[1];
	    return i[1];
	  }), e);
	}
	// @__NO_SIDE_EFFECTS__
	function Rr(e, t, n, r, o, s) {
	  const a = /* @__PURE__ */Be(t, () => new p(Ns, `The ${e} component is already mounting`), o, s);
	  return i => b.resolve().then(async () => {
	    if (!r()) {
	      const l = await a(i);
	      Rt(() => {
	        r.set(!0), n(l);
	      });
	    }
	  });
	}
	const U = We,
	  Je = /* @__PURE__ */c({
	    available: !1
	  }),
	  De = /* @__PURE__ */c(!1),
	  xe = /* @__PURE__ */c(!1),
	  Ye = /* @__PURE__ */c(!1),
	  Tr = /* @__PURE__ */c(),
	  Jt = /* @__PURE__ */c();
	function Yt(e) {
	  return e.available ? {
	    available: !0,
	    tokenSaved: e.token_saved,
	    deviceId: e.device_id,
	    accessRequested: e.access_requested,
	    type: e.type,
	    accessGranted: e.access_granted
	  } : {
	    available: !1
	  };
	}
	const Mn = "web_app_biometry_get_info",
	  ta = /* @__PURE__ */h("requestBiometry", e => E(Mn, "biometry_info_received", e).then(Yt), {
	    isSupported: Mn
	  }),
	  Qe = "web_app_biometry_request_auth",
	  na = "web_app_biometry_request_access",
	  ra = "web_app_biometry_open_settings",
	  oa = "web_app_biometry_update_token",
	  Qt = "biometry_info_received",
	  te = "biometry",
	  aa = U(te),
	  ia = I(te, Qe),
	  Kt = Q(te, Ye, Qe);
	function Br() {
	  throw new p(Us, "Biometry is not available");
	}
	Kt("authenticate", e => b.withFn(async t => {
	    if (De()) throw new p(F, "Authentication is already in progress");
	    const n = Je();
	    (!n || !n.available) && Br(), De.set(!0);
	    try {
	      const r = await E(Qe, "biometry_auth_requested", {
	          abortSignal: t,
	          params: {
	            reason: ((e || {}).reason || "").trim()
	          }
	        }),
	        {
	          token: o
	        } = r;
	      return typeof o == "string" && Ke({
	        ...n,
	        token: o
	      }), r;
	    } finally {
	      De.set(!1);
	    }
	  }, e));
	  ia("openSettings", () => {
	    _(ra);
	  });
	  Kt("requestAccess", e => b.withFn(async t => {
	    if (xe()) throw new p(F, "Access request is already in progress");
	    xe.set(!0);
	    try {
	      const n = await E(na, Qt, {
	        abortSignal: t,
	        params: {
	          reason: (e || {}).reason || ""
	        }
	      }).then(Yt);
	      return n.available || Br(), Ke(n), n.accessGranted;
	    } finally {
	      xe.set(!1);
	    }
	  }, e));
	  aa("mount", /* @__PURE__ */Rr(te, e => x() && k(te) || ta(e), e => {
	    w(Qt, Pr), Ke(e);
	  }, Ye, Jt, Tr));
	  const Pr = e => {
	    Ke(Yt(e));
	  };
	function Ke(e) {
	  Je.set(e), P(te, e);
	}
	Kt("updateToken", e => (e || (e = {}), E(oa, "biometry_token_updated", {
	    ...e,
	    params: {
	      token: e.token || "",
	      reason: e.reason
	    }
	  }).then(t => t.status)));
	function Ze(e, t) {
	  return We(e, {
	    isMounted: t
	  });
	}
	const Xe = "closingBehavior",
	  Bt = /* @__PURE__ */c(!1),
	  he = /* @__PURE__ */c(!1),
	  kr = Ze(Xe, he),
	  fa = U(Xe);
	  kr("disableConfirmation", () => {
	    Zt(!1);
	  });
	  kr("enableConfirmation", () => {
	    Zt(!0);
	  });
	  fa("mount", () => {
	    he() || (Zt(x() && k(Xe) || !1), he.set(!0));
	  });
	function Zt(e) {
	  e !== Bt() && (_("web_app_setup_closing_behavior", {
	    need_confirmation: e
	  }), P(Xe, e), Bt.set(e));
	}
	const Ir = "web_app_invoke_custom_method",
	  et = I("cloudStorage", Ir);
	  et("deleteItem", (e, t) => {
	    const n = Array.isArray(e) ? e : [e];
	    return n.length ? oe("deleteStorageValues", {
	      keys: n
	    }, t).then() : b.resolve();
	  });
	function Sa(e, t) {
	  const n = Array.isArray(e) ? e : [e];
	  return n.length ? oe("getStorageValues", {
	    keys: n
	  }, t).then(r => {
	    const o = Ue(Object.fromEntries(n.map(s => [s, N()])))()(r);
	    return Array.isArray(e) ? o : o[e];
	  }) : b.resolve(typeof e == "string" ? "" : {});
	}
	et("getItem", Sa);
	  et("getKeys", e => oe("getStorageKeys", {}, e).then($o(N())()));
	  et("setItem", (e, t, n) => oe("saveStorageValue", {
	    key: e,
	    value: t
	  }, n).then());
	  const Pe = "web_app_trigger_haptic_feedback",
	  Xt = I("hapticFeedback", Pe);
	  Xt("impactOccurred", e => {
	    _(Pe, {
	      type: "impact",
	      impact_style: e
	    });
	  });
	  Xt("notificationOccurred", e => {
	    _(Pe, {
	      type: "notification",
	      notification_type: e
	    });
	  });
	  Xt("selectionChanged", () => {
	    _(Pe, {
	      type: "selection_change"
	    });
	  });
	const tn = "web_app_open_invoice",
	  Na = I("invoice", tn),
	  Me = /* @__PURE__ */c(!1);
	async function Mr(e, t, n) {
	  if (Me()) throw new p(Wt, "An invoice is already opened");
	  let r;
	  if (t === "url") {
	    const {
	      hostname: o,
	      pathname: s
	    } = new URL(e, window.location.href);
	    if (o !== "t.me") throw new p(Ht, `Link has unexpected hostname: ${o}`);
	    const a = s.match(/^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/);
	    if (!a) throw new p(js, 'Expected to receive a link with a pathname in format "/invoice/{slug}" or "/${slug}"');
	    [,, r] = a;
	  } else r = e, n = t;
	  return Me.set(!0), E(tn, "invoice_closed", {
	    ...n,
	    params: {
	      slug: r
	    },
	    capture: o => r === o.slug
	  }).then(o => o.status).finally(() => {
	    Me.set(!1);
	  });
	}
	Na("open", Mr);
	function jr(e) {
	  return Object.fromEntries(Object.entries(e).filter(t => t[1] !== void 0));
	}
	const be = /* @__PURE__ */c(!1),
	  je = /* @__PURE__ */c(!1),
	  $ = /* @__PURE__ */c({});
	function A(e) {
	  return /* @__PURE__ */d(() => $()[e]);
	}
	const nn = A("bgColor"),
	  rn = A("buttonColor"),
	  Vr = A("buttonTextColor"),
	  Nr = A("bottomBarBgColor"),
	  He = A("secondaryBgColor");
	const pe = /* @__PURE__ */c({
	    hasShineEffect: !1,
	    isEnabled: !0,
	    isLoaderVisible: !1,
	    isVisible: !1,
	    text: "Continue"
	  }),
	  on = /* @__PURE__ */d(() => {
	    const e = pe();
	    return {
	      ...e,
	      backgroundColor: e.backgroundColor || rn() || "#2481cc",
	      textColor: e.textColor || Vr() || "#ffffff"
	    };
	  }),
	  ge = /* @__PURE__ */c(!1),
	  ai = "web_app_setup_main_button",
	  qr = "main_button_pressed",
	  tt = "mainButton",
	  sn = U(tt),
	  ii = Ze(tt, ge);
	  sn("mount", () => {
	    if (!ge()) {
	      const e = x() && k(tt);
	      e && pe.set(e), ge.set(!0);
	    }
	  });
	  sn("onClick", e => w(qr, e));
	  sn("offClick", e => {
	    C(qr, e);
	  });
	  ii("setParams", e => {
	    pe.set({
	      ...pe(),
	      ...jr(e)
	    }), P(tt, pe());
	    const t = on();
	    t.text && _(ai, {
	      color: t.backgroundColor,
	      has_shine_effect: t.hasShineEffect,
	      is_active: t.isEnabled,
	      is_progress_visible: t.isLoaderVisible,
	      is_visible: t.isVisible,
	      text: t.text,
	      text_color: t.textColor
	    });
	  });
	function an() {
	  throw new p(qs, "CSS variables are already bound");
	}
	function _i(e) {
	  return Uo()(e);
	}
	const nt = "themeParams",
	  Ur = "theme_changed",
	  fi = U(nt),
	  mi = Ze(nt, be);
	  mi("bindCssVars", e => {
	    je() && an(), e || (e = r => `--tg-theme-${Lt(r)}`);
	    function t(r) {
	      Object.entries($()).forEach(([o, s]) => {
	        s && r(o, s);
	      });
	    }
	    function n() {
	      t((r, o) => {
	        Vt(e(r), o);
	      });
	    }
	    return n(), $.sub(n), je.set(!0), () => {
	      t(Nt), $.unsub(n), je.set(!1);
	    };
	  });
	  const $r = fi("mount", () => {
	    be() || (w(Ur, Fr), $.set(x() && k(nt) || Y().themeParams), be.set(!0));
	  }),
	  Fr = e => {
	    const t = _i(e.theme_params);
	    $.set(t), P(nt, t);
	  };
	// @__NO_SIDE_EFFECTS__
	function Hr(e) {
	  return /* @__PURE__ */d(() => {
	    const t = e();
	    return _e(t) ? t : t === "bg_color" ? nn() : He();
	  });
	}
	const we = /* @__PURE__ */c("bg_color"),
	  cn = /* @__PURE__ */Hr(we),
	  ye = /* @__PURE__ */c("bottom_bar_bg_color"),
	  un = /* @__PURE__ */d(() => {
	    const e = ye();
	    return _e(e) ? e : e === "bottom_bar_bg_color" ? Nr() || He() : e === "secondary_bg_color" ? He() : nn();
	  }),
	  Se = /* @__PURE__ */c("bg_color"),
	  Wr = /* @__PURE__ */Hr(Se),
	  Ee = /* @__PURE__ */c(!1),
	  Le = /* @__PURE__ */c(!1),
	  rt = /* @__PURE__ */c(!0),
	  zr = /* @__PURE__ */d(() => ({
	    backgroundColor: we(),
	    bottomBarColor: ye(),
	    headerColor: Se(),
	    isActive: rt()
	  })),
	  Pt = "web_app_set_background_color",
	  kt = "web_app_set_bottom_bar_color",
	  Ve = "web_app_set_header_color",
	  Gr = "visibility_changed",
	  ke = "miniApp",
	  pn = {
	    any: [Pt, kt, Ve]
	  },
	  Jr = U(ke),
	  yi = I(ke, pn),
	  ot = Q(ke, Ee, pn);
	  ot("bindCssVars", e => {
	    Le() && an();
	    const [t, n] = ne();
	    function r(o, s) {
	      function a() {
	        Vt(o, s() || null);
	      }
	      a(), t(s.sub(a), Nt.bind(null, o));
	    }
	    return e || (e = o => `--tg-${Lt(o)}`), r(e("bgColor"), cn), r(e("bottomBarColor"), un), r(e("headerColor"), Wr), t(() => {
	      Le.set(!1);
	    }), Le.set(!0), n;
	  });
	  Jr("close", e => {
	    _("web_app_close", {
	      return_back: e
	    });
	  });
	  const Yr = e => {
	    rt.set(e.is_visible), st();
	  };
	  yi("mount", () => {
	    if (!Ee()) {
	      const e = x() && k(ke);
	      $r(), Qr.ifAvailable(e ? e.backgroundColor : "bg_color"), Kr.ifAvailable(e ? e.bottomBarColor : "bottom_bar_bg_color"), Zr.ifAvailable(e ? e.headerColor : "bg_color"), rt.set(e ? e.isActive : !0), w(Gr, Yr), Ee.set(!0);
	    }
	  });
	  Jr("ready", () => {
	    _("web_app_ready");
	  });
	function st() {
	  P(ke, zr());
	}
	const Qr = ot("setBackgroundColor", e => {
	    e !== we() && (_(Pt, {
	      color: e
	    }), we.set(e), st());
	  }, Pt),
	  Kr = ot("setBottomBarColor", e => {
	    e !== ye() && (_(kt, {
	      color: e
	    }), ye.set(e), st());
	  }, kt),
	  Zr = ot("setHeaderColor", e => {
	    e !== Se() && (_(Ve, _e(e) ? {
	      color: e
	    } : {
	      color_key: e
	    }), Se.set(e), st());
	  }, Ve, {
	    rgb: [Ve, "color", _e]
	  });
	function Ri(e) {
	  const t = e.message.trim(),
	    n = (e.title || "").trim(),
	    r = e.buttons || [];
	  if (n.length > 64) throw new p(ce, `Invalid title: ${n}`);
	  if (!t || t.length > 256) throw new p(ce, `Invalid message: ${t}`);
	  if (r.length > 3) throw new p(ce, `Invalid buttons count: ${r.length}`);
	  return {
	    title: n,
	    message: t,
	    buttons: r.length ? r.map((o, s) => {
	      const a = o.id || "";
	      if (a.length > 64) throw new p(ce, `Button with index ${s} has invalid id: ${a}`);
	      if (!o.type || o.type === "default" || o.type === "destructive") {
	        const i = o.text.trim();
	        if (!i || i.length > 64) throw new p(ce, `Button with index ${s} has invalid text: ${i}`);
	        return {
	          type: o.type,
	          text: i,
	          id: a
	        };
	      }
	      return {
	        type: o.type,
	        id: a
	      };
	    }) : [{
	      type: "close",
	      id: ""
	    }]
	  };
	}
	const ln = "web_app_open_popup",
	  Ti = I("popup", ln),
	  Ne = /* @__PURE__ */c(!1);
	  Ti("open", async e => {
	    if (Ne()) throw new p(Wt, "A popup is already opened");
	    Ne.set(!0);
	    try {
	      const {
	        button_id: t = null
	      } = await E(ln, "popup_closed", {
	        ...e,
	        params: Ri(e)
	      });
	      return t;
	    } finally {
	      Ne.set(!1);
	    }
	  });
	  const ki = "web_app_close_scan_qr_popup",
	  dn = "web_app_open_scan_qr_popup",
	  Ii = "scan_qr_popup_closed",
	  Oi = "qr_text_received",
	  Xr = I("qrScanner", dn),
	  It = Xr("close", () => {
	    ee.set(!1), _(ki);
	  }),
	  ee = /* @__PURE__ */c(!1);
	function xi(e) {
	  return b.withFn(t => {
	    if (ee()) throw new p(Wt, "The QR Scanner is already opened");
	    ee.set(!0), e || (e = {});
	    const {
	        onCaptured: n,
	        text: r,
	        capture: o
	      } = e,
	      [, s] = ne(
	      // Whenever the scanner was closed for some reason (by a developer or a
	      // user), we should resolve the promise with undefined.
	      ee.sub(() => {
	        a.resolve();
	      }),
	      // Whenever user closed the scanner, update the isOpened signal state.
	      w(Ii, () => {
	        ee.set(!1);
	      }),
	      // Whenever some QR was scanned, we should check if it must be captured.
	      w(Oi, i => {
	        n ? n(i.data) : (!o || o(i.data)) && (a.resolve(i.data), It());
	      })),
	      a = new is({
	        abortSignal: t
	      }).catch(It).finally(s);
	    return (e.postEvent || _)(dn, {
	      text: r
	    }), a;
	  }, e);
	}
	Xr("open", xi);
	const le = /* @__PURE__ */c({
	    hasShineEffect: !1,
	    isEnabled: !0,
	    isLoaderVisible: !1,
	    isVisible: !1,
	    position: "left",
	    text: "Cancel"
	  }),
	  _n = /* @__PURE__ */d(() => {
	    const e = le();
	    return {
	      ...e,
	      backgroundColor: e.backgroundColor || un() || "#000000",
	      textColor: e.textColor || rn() || "#2481cc"
	    };
	  }),
	  ve = /* @__PURE__ */c(!1),
	  at = "web_app_setup_secondary_button",
	  eo = "secondary_button_pressed",
	  it = "secondaryButton",
	  fn = I(it, at),
	  Hi = Q(it, ve, at);
	  fn("mount", () => {
	    if (!ve()) {
	      const e = x() && k(it);
	      e && le.set(e), ve.set(!0);
	    }
	  });
	  fn("onClick", e => w(eo, e));
	  fn("offClick", e => {
	    C(eo, e);
	  });
	  Hi("setParams", e => {
	    le.set({
	      ...le(),
	      ...Object.fromEntries(Object.entries(e).filter(([, n]) => n !== void 0))
	    }), P(it, le());
	    const t = _n();
	    t.text && _(at, {
	      color: t.backgroundColor,
	      has_shine_effect: t.hasShineEffect,
	      is_active: t.isEnabled,
	      is_progress_visible: t.isLoaderVisible,
	      is_visible: t.isVisible,
	      position: t.position,
	      text: t.text,
	      text_color: t.textColor
	    });
	  });
	const ct = "web_app_setup_settings_button",
	  to = "settings_button_pressed",
	  ut = "settingsButton",
	  Ot = /* @__PURE__ */c(!1),
	  Ae = /* @__PURE__ */c(!1),
	  mn = I(ut, ct),
	  no = Q(ut, Ae, ct);
	  no("hide", () => {
	    hn(!1);
	  });
	  mn("mount", () => {
	    Ae() || (hn(x() && k(ut) || !1), Ae.set(!0));
	  });
	function hn(e) {
	  e !== Ot() && (_(ct, {
	    is_visible: e
	  }), P(ut, e), Ot.set(e));
	}
	mn("onClick", e => w(to, e));
	  mn("offClick", e => {
	    C(to, e);
	  });
	  no("show", () => {
	    hn(!0);
	  });
	const pt = "web_app_setup_swipe_behavior",
	  lt = "swipeBehavior",
	  Ce = /* @__PURE__ */c(!1),
	  Dt = /* @__PURE__ */c(!0),
	  sc = I(lt, pt),
	  ro = Q(lt, Ce, pt);
	  ro("disableVertical", () => {
	    bn(!1);
	  });
	  ro("enableVertical", () => {
	    bn(!0);
	  });
	  sc("mount", () => {
	    Ce() || (bn(x() && k(lt) || !1, !0), Ce.set(!0));
	  });
	function bn(e, t) {
	  (e !== Dt() || t) && (_(pt, {
	    allow_vertical_swipe: e
	  }), P(lt, e), Dt.set(e));
	}
	const se = "viewport",
	  oo = "web_app_request_fullscreen",
	  pc = "fullscreen_failed",
	  gn = "fullscreen_changed",
	  so = "safe_area_changed",
	  ao = "content_safe_area_changed",
	  io = "viewport_changed",
	  jn = "web_app_request_safe_area",
	  Ln = "web_app_request_content_safe_area",
	  Vn = {
	    left: 0,
	    top: 0,
	    bottom: 0,
	    right: 0
	  };
	function wt(e) {
	  return Math.max(e, 0);
	}
	const de = /* @__PURE__ */c({
	  contentSafeAreaInsets: Vn,
	  height: 0,
	  isExpanded: !1,
	  isFullscreen: !1,
	  safeAreaInsets: Vn,
	  stableHeight: 0,
	  width: 0
	});
	function Z(e) {
	  return /* @__PURE__ */d(() => de()[e]);
	}
	function ae(e) {
	  const {
	    height: t,
	    stableHeight: n,
	    width: r
	  } = e;
	  de.set({
	    ...de(),
	    ...jr({
	      ...e,
	      height: t ? wt(t) : void 0,
	      width: r ? wt(r) : void 0,
	      stableHeight: n ? wt(n) : void 0
	    })
	  }), P(se, de());
	}
	function lc() {
	  return k(se);
	}
	const co = Z("isFullscreen"),
	  wn = /* @__PURE__ */c(),
	  uo = /* @__PURE__ */c(),
	  Ie = /* @__PURE__ */c(!1),
	  po = /* @__PURE__ */c(void 0),
	  dt = /* @__PURE__ */c(),
	  fc = Q(se, Ie, oo);
	function lo(e, t) {
	  return fc(e, /* @__PURE__ */Be(n => E(t, [gn, pc], n).then(r => {
	    if ("error" in r) {
	      if (r.error === "ALREADY_FULLSCREEN") return !0;
	      throw new p(Hs, "Fullscreen request failed", r.error);
	    }
	    return r.is_fullscreen;
	  }).then(r => {
	    r !== co() && ae({
	      isFullscreen: r
	    });
	  }), () => new p(F, "Fullscreen mode change is already being requested"), wn, uo));
	}
	lo("requestFullscreen", oo);
	  lo("exitFullscreen", "web_app_exit_fullscreen");
	  const _o = U(se),
	  bc = Ze(se, Ie);
	function _t(e) {
	  return /* @__PURE__ */d(() => yn()[e]);
	}
	const yn = Z("safeAreaInsets"),
	  fo = _t("bottom"),
	  mo = _t("left"),
	  ho = _t("right"),
	  bo = _t("top");
	function ft(e) {
	  return /* @__PURE__ */d(() => Sn()[e]);
	}
	const Sn = Z("contentSafeAreaInsets"),
	  go = ft("bottom"),
	  wo = ft("left"),
	  yo = ft("right"),
	  So = ft("top"),
	  gc = /* @__PURE__ */h("requestContentSafeAreaInsets", e => E(Ln, "content_safe_area_changed", e), {
	    isSupported: Ln
	  }),
	  wc = /* @__PURE__ */h("requestSafeAreaInsets", e => E(jn, "safe_area_changed", e), {
	    isSupported: jn
	  });
	function yc(e) {
	  return E("web_app_request_viewport", "viewport_changed", e).then(t => ({
	    height: t.height,
	    width: t.width,
	    isExpanded: t.is_expanded,
	    isStable: t.is_state_stable
	  }));
	}
	const Eo = e => {
	    const {
	      height: t
	    } = e;
	    ae({
	      isExpanded: e.is_expanded,
	      height: t,
	      width: e.width,
	      stableHeight: e.is_state_stable ? t : void 0
	    });
	  },
	  vo = e => {
	    ae({
	      isFullscreen: e.is_fullscreen
	    });
	  },
	  Ao = e => {
	    ae({
	      safeAreaInsets: e
	    });
	  },
	  Co = e => {
	    ae({
	      contentSafeAreaInsets: e
	    });
	  };
	  _o("mount", /* @__PURE__ */Rr(se, e => b.resolve().then(async () => {
	    const t = x() && lc();
	    if (t) return t;
	    const [n, r] = await b.all([wc.ifAvailable(e) || yn(), gc.ifAvailable(e) || Sn()]),
	      o = Y(),
	      s = {
	        contentSafeAreaInsets: r,
	        isFullscreen: !!o.fullscreen,
	        safeAreaInsets: n
	      };
	    if (["macos", "tdesktop", "unigram", "webk", "weba", "web"].includes(o.platform)) {
	      const a = window;
	      return {
	        ...s,
	        height: a.innerHeight,
	        isExpanded: !0,
	        stableHeight: a.innerHeight,
	        width: a.innerWidth
	      };
	    }
	    return yc(e).then(a => ({
	      ...s,
	      height: a.height,
	      isExpanded: a.isExpanded,
	      stableHeight: a.isStable ? a.height : 0,
	      width: a.width
	    }));
	  }), e => {
	    w(io, Eo), w(gn, vo), w(so, Ao), w(ao, Co), ae(e);
	  }, Ie, dt, po));
	const qe = /* @__PURE__ */c(!1),
	  En = Z("height"),
	  vn = Z("stableHeight"),
	  Ro = Z("width");
	  bc("bindCssVars", e => {
	    qe() && an(), e || (e = n => `--tg-viewport-${Lt(n)}`);
	    const t = [["height", En], ["stableHeight", vn], ["width", Ro], ["safeAreaInsetTop", bo], ["safeAreaInsetBottom", fo], ["safeAreaInsetLeft", mo], ["safeAreaInsetRight", ho], ["contentSafeAreaInsetTop", So], ["contentSafeAreaInsetBottom", go], ["contentSafeAreaInsetLeft", wo], ["contentSafeAreaInsetRight", yo]].reduce((n, [r, o]) => {
	      const s = e(r);
	      if (s) {
	        const a = () => {
	          Vt(s, `${o()}px`);
	        };
	        n.push([a, o.sub(a), s]);
	      }
	      return n;
	    }, []);
	    return t.forEach(n => {
	      n[0]();
	    }), qe.set(!0), () => {
	      t.forEach(n => {
	        n[1](), Nt(n[2]);
	      }), qe.set(!1);
	    };
	  });
	  _o("expand", () => {
	    _("web_app_expand");
	  });
	  const kc = U();
	  kc("openLink", (e, t) => {
	    if (typeof e == "string") try {
	      e = new URL(e);
	    } catch (n) {
	      throw new p(Ht, `"${e.toString()}" is invalid URL`, n);
	    }
	    t || (t = {}), _("web_app_open_link", {
	      url: e.toString(),
	      try_browser: t.tryBrowser,
	      try_instant_view: t.tryInstantView
	    });
	  });
	  const Un = "web_app_open_tg_link",
	  Ic = U(),
	  Oc = Ic("openTelegramLink", e => {
	    const t = e.toString();
	    if (!t.match(/^https:\/\/t.me\/.+/)) throw new p(Ht, `"${t}" is invalid URL`);
	    if (!J(Un, V())) {
	      window.location.href = t;
	      return;
	    }
	    e = new URL(e), _(Un, {
	      path_full: e.pathname + e.search
	    });
	  }),
	  Dc = U();
	  Dc("shareURL", (e, t) => {
	    Oc("https://t.me/share/url?" + new URLSearchParams({
	      url: e,
	      text: t || ""
	    }).toString().replace(/\+/g, "%20"));
	  });
	function Pu() {
	  return reactExports.useMemo(Y, []);
	}

	// Dynamic import for crypto-js's sha256
	const loadSha256 = async () => {
	  const module = await Promise.resolve().then(function () { return sha256$1; });
	  return module.default;
	};

	// // Dynamic import for @othent/kms
	// const loadOthentKms = async () => {
	//   try{
	//     console.log("Entering Dynamic Othent Load")
	//     const module = await import(/* webpackChunkName: "othent-kms" */ '@othent/kms');
	//     console.log("DYNAMICALLY LOADED OTHENT")
	//     return module;
	//   }catch(e){
	//     console.error("Error loading Othent DYnamically : ", e)
	//   }
	// };

	// import Buffer
	function OnairosButton(_ref) {
	  let {
	    requestData,
	    webpageName,
	    inferenceData = null,
	    onComplete = null,
	    autoFetch = true,
	    proofMode = false,
	    textLayout = 'below',
	    textColor = 'white',
	    login = false,
	    buttonType = 'pill',
	    loginReturn = null,
	    loginType = 'signIn',
	    visualType = 'full'
	  } = _ref;
	  const isTelegramMiniApp = () => {
	    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
	    return typeof window.Telegram !== 'undefined' && /telegram/i.test(userAgent) && /mobile/i.test(navigator.userAgent);
	  };
	  const [launchParams, setLaunchParams] = reactExports.useState(null);

	  // Modified useEffect for launch params
	  reactExports.useEffect(() => {
	    let mounted = true;
	    if (isTelegramMiniApp()) {
	      const params = Pu();
	      if (mounted) {
	        setLaunchParams(params);
	      }
	    }
	    return () => {
	      mounted = false;
	    };
	  }, []);

	  // Modified useEffect for handling launch parameters
	  reactExports.useEffect(() => {
	    if (!launchParams) return;
	    console.log('Launch Params:', launchParams);
	    if (launchParams.startParam) {
	      try {
	        setMessage(`Received parameters: ${launchParams.startParam}`);
	        setAuthDialog({
	          show: true,
	          type: 'callback',
	          data: {
	            startParam: launchParams.startParam
	          }
	        });
	      } catch (err) {
	        console.error('Error parsing launch params:', err);
	      }
	    }
	  }, [launchParams]);

	  // Modified Telegram initialization
	  reactExports.useEffect(() => {
	    if (!isTelegramMiniApp()) return;
	    try {
	      const webApp = window.Telegram?.WebApp;
	      if (webApp) {
	        webApp.ready();
	      }
	    } catch (err) {
	      console.error('Error initializing Telegram WebApp:', err);
	    }
	  }, []);
	  reactExports.useState(null);
	  const [showOverlay, setShowOverlay] = reactExports.useState(false);
	  const [activeModels, setActiveModels] = reactExports.useState([]);
	  const [granted, setGranted] = reactExports.useState(0);
	  const [selectedRequests, setSelectedRequests] = reactExports.useState({});
	  const [avatar, setAvatar] = reactExports.useState(false);
	  const [traits, setTraits] = reactExports.useState(false);
	  const [othentUser, setOthentUser] = reactExports.useState(false);
	  const [othentConnected, setOthentConnected] = reactExports.useState(false);
	  const NoAccount = reactExports.useRef(false);
	  const NoModel = reactExports.useRef(false);
	  const [isAuthenticated, setIsAuthenticated] = reactExports.useState(false);
	  const [authToken, setAuthToken] = reactExports.useState(null);
	  const [loading, setLoading] = reactExports.useState(true);
	  const [hashedOthentSub, setHashedOthentSub] = reactExports.useState(null);
	  const [encryptedPin, setEncryptedPin] = reactExports.useState(null);
	  const [authDialog, setAuthDialog] = reactExports.useState({
	    show: false,
	    type: null,
	    data: null
	  });
	  const [accountInfo, setAccountInfo] = reactExports.useState(null);
	  const [isLoading, setIsLoading] = reactExports.useState(false);
	  const [isProcessingAuth, setIsProcessingAuth] = reactExports.useState(false);
	  const hasProcessedCallback = reactExports.useRef(false);
	  const [authError, setAuthError] = reactExports.useState(null);
	  const [notif, setNotif] = reactExports.useState({
	    show: false,
	    color: null,
	    message: null
	  });
	  reactExports.useState(null);
	  const [message, setMessage] = reactExports.useState("Initializing...");

	  // const telegram = useTelegram();
	  // const { webApp } = telegram; 
	  const API_URL = 'https://api2.onairos.uk';
	  // const API_URL = 'http://localhost:8080';

	  // Modified callback handling
	  reactExports.useEffect(() => {
	    if (!isTelegramMiniApp()) return;
	    const handleCallback = async () => {
	      const callbackURL = new URL(window.location.href);
	      const code = callbackURL.searchParams.get("code");
	      const state = callbackURL.searchParams.get("state");
	      if (code && state && !hasProcessedCallback.current && !isProcessingAuth) {
	        hasProcessedCallback.current = true;
	        setIsProcessingAuth(true);
	        try {
	          await completeAuth(callbackURL.toString());
	          setOthentConnected(true);
	          window.history.replaceState({}, document.title, window.location.pathname);
	        } catch (error) {
	          console.error("Auth callback processing failed:", error);
	          setAuthError(error.message);
	        } finally {
	          setIsProcessingAuth(false);
	        }
	      }
	    };
	    handleCallback();
	  }, []);
	  const completeAuth = async callbackURL => {
	    try {
	      const appInfo = {
	        name: "Onairos",
	        version: "1.0.0",
	        env: "production"
	      };
	      setAuthDialog({
	        show: true,
	        type: 'callback',
	        data: {
	          code: callbackURL,
	          state: 'Completing Callback'
	        }
	      });
	      const othent = new Othent({
	        appInfo,
	        throwErrors: true,
	        // Enable error throwing for better error handling
	        auth0LogInMethod: "redirect",
	        auth0RedirectURI: window.location.href,
	        auth0ReturnToURI: window.location.href
	      });
	      // Complete authentication using the callback URL with code and state params
	      // const userDetails = await othent.completeConnectionAfterRedirect(callbackURL);
	      // setAuthDialog({
	      //   show: true,
	      //   type: 'callback',
	      //   data: {
	      //     code: userDetails.email,
	      //     state: 'approved'
	      //   }
	      // });
	      // Add error handling for Othent initialization
	      if (!othent) {
	        throw new Error("Failed to initialize Othent");
	      }
	      if (!userDetails || !userDetails.sub) {
	        throw new Error("Invalid user details received from Othent");
	      }
	      setIsAuthenticated(true);
	      const sha256 = await loadSha256();
	      const hashedOthentSub = sha256(userDetails.sub).toString();
	      setHashedOthentSub(hashedOthentSub);
	      const userOnairosPin = await getPin(hashedOthentSub);
	      setEncryptedPin(userOnairosPin.result);
	      setAuthToken(userOnairosPin.token);
	      // Wait for account info before showing overlay
	      await fetchAccountInfo(userDetails.email, true);
	      setShowOverlay(true);

	      // Store Othent token
	      localStorage.setItem('othentToken', JSON.stringify(userDetails));
	      localStorage.setItem('onairosToken', userDetails.token); // If Othent provides a token
	    } catch (error) {
	      setNotif({
	        show: true,
	        color: 'red',
	        message: 'An error has occured, please try again'
	      });
	      // setAuthDialog({
	      //   show: true,
	      //   type: 'auth',
	      //   data: {
	      //     success: false,
	      //     error: error.message
	      //   }
	      // });
	      console.error("Authentication failed:", error);
	      throw error; // Rethrow for the useEffect to handle
	    }
	  };

	  // Add error display
	  reactExports.useEffect(() => {
	    if (authError) {
	      // Show error to user (implement your error UI here)
	      console.error("Authentication error:", authError);
	    }
	  }, [authError]);
	  const isMobileDevice = () => {
	    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
	    return /android|iphone|ipad|ipod|windows phone/i.test(userAgent);
	  };
	  const findLargestDataObject = arrayOfObjects => {
	    // Update the hierarchy
	    const hierarchy = {
	      'Small': 16,
	      'Medium': 32,
	      'Large': 64
	    };
	    let largestValue = 0;
	    arrayOfObjects.forEach(obj => {
	      const currentValue = hierarchy[obj.data];
	      if (currentValue > largestValue) {
	        largestValue = currentValue;
	      }
	    });
	    return largestValue;
	  };
	  reactExports.useEffect(() => {
	    // Only proceed if autoFetch is true and onComplete is a function
	    if (autoFetch && inferenceData && typeof onComplete === 'function') {
	      const handleAPIResponse = async event => {
	        if (event.data && event.data.source === 'content-script' && event.data.type === 'API_URL_RESPONSE' && event.data.unique === "Onairos-Response") {
	          const {
	            APIurl,
	            approved,
	            accessToken
	          } = event.data;
	          const trimSize = findLargestDataObject(approved);
	          // Trim the data array based on the allowed number of items
	          const trimmedData = inferenceData.slice(0, trimSize);
	          // Fetch the new anime data from the API URL
	          const jsonData = {
	            Input: trimmedData // Your request payload
	          };
	          try {
	            const response = await fetch(APIurl, {
	              method: 'POST',
	              headers: {
	                'Content-Type': 'application/json',
	                'Authorization': `Bearer ${accessToken}`
	              },
	              body: JSON.stringify(jsonData)
	            });
	            const data = await response.json();
	            onComplete(data);
	          } catch (error) {
	            console.error(error);
	            onComplete(null, error);
	          }
	        }
	      };
	      window.addEventListener('message', handleAPIResponse);
	      return () => {
	        window.removeEventListener('message', handleAPIResponse);
	      };
	    }
	  }, []);
	  const handleConnectionSelection = (dataRequester, key, index, type, reward, isSelected) => {
	    setSelectedRequests(prev => ({
	      ...prev,
	      [`${dataRequester}-${key}-${index}`]: {
	        type,
	        reward,
	        isSelected
	      }
	    }));
	  };
	  const changeGranted = value => {
	    setGranted(prev => Math.max(prev + value, 0));
	  };
	  const handleAPIRequestForMobile = async () => {
	    if (isMobileDevice()) {
	      setShowOverlay(true);
	    }
	    return;
	  };
	  const rejectDataRequest = () => {
	    setShowOverlay(false);
	    if (onComplete) {
	      onComplete('rejected');
	    }
	  };
	  const makeApiCall = async (approvedRequests, pin, othentSub) => {
	    const jsonData = {
	      Info: {
	        EncryptedUserPin: pin,
	        confirmations: approvedRequests,
	        web3Type: 'othent',
	        Domain: window.location.href,
	        proofMode: false,
	        OthentSub: othentSub
	      }
	    };
	    try {
	      const response = await fetch('https://api2.onairos.uk/getAPIurl', {
	        // const response = await fetch('http://localhost:8080/getAPIurl', {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        body: JSON.stringify(jsonData)
	      });
	      const data = await response.json();
	      if (autoFetch && onComplete) {
	        onComplete(data);
	      } else {
	        setAuthDialog({
	          show: true,
	          type: 'apiURL',
	          data: {
	            code: data,
	            // Updated from response.body.apiUrl to data.apiUrl
	            state: pin
	          }
	        });
	        // chrome.runtime.sendMessage({
	        //   source: 'dataRequestPage',
	        //   type: 'returnedAPIurl',
	        //   APIurl:response.body.apiUrl,
	        //   accessToken:response.body.token,
	        //   approved:selectedConnections.current,
	        // })
	      }
	    } catch (error) {
	      console.error(error);
	      if (onComplete) {
	        onComplete(null, error);
	      }
	    }
	  };
	  const sendDataRequest = async () => {
	    if (granted <= 0) return;
	    try {
	      // Retrieve approved requests
	      const approvedRequests = Object.values(selectedRequests).filter(req => req.isSelected).map(req => ({
	        type: req.type,
	        reward: req.reward
	      }));
	      if (encryptedPin == null && othentUser && !othentConnected) {
	        setAuthDialog({
	          show: true,
	          type: 'debug',
	          data: {
	            code: 'Connecting Othent Details',
	            state1: encryptedPin,
	            state2: othentConnected,
	            state3: othentUser
	          }
	        });
	        const appInfo = {
	          name: 'Onairos',
	          version: '1.0.0',
	          env: 'production'
	        };
	        const othent = new Othent({
	          appInfo,
	          throwErrors: false
	        });
	        const userDetails = await othent.connect();
	        const sha256 = await loadSha256();
	        const hashedSub = sha256(userDetails.sub).toString();
	        setHashedOthentSub(hashedSub);

	        // Wait for the pin to be retrieved
	        // const userOnairosDetails = await getPin((userDetails.sub).toString());
	        const userOnairosDetails = await getPin(hashedSub);
	        const pin = userOnairosDetails.result;
	        setEncryptedPin(pin);
	        // setAuthToken(userOnairosDetails.token);

	        setOthentConnected(true);
	        setAuthDialog({
	          show: true,
	          type: 'callback',
	          data: {
	            code: 'Just Before API',
	            state: userOnairosDetails.token
	          }
	        });

	        // Make API call with newly retrieved data
	        await makeApiCall(approvedRequests, pin, hashedSub);
	      } else {
	        // Make API call with existing state
	        if (encryptedPin && hashedOthentSub) {
	          await makeApiCall(approvedRequests, encryptedPin, hashedOthentSub);
	        } else {
	          console.error('Missing required authentication data');
	        }
	      }
	    } catch (error) {
	      console.error('Error in sendDataRequest:', error);
	    } finally {
	      setShowOverlay(false);
	    }
	  };
	  const OnairosPublicKey = `
    -----BEGIN PUBLIC KEY-----
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4wkWvRPaJiY8CwQ5BoJI
    amcGAYV91Bk8NrvWq4PXM+J/RJugfgTNCYKQ/c6g4xa1YES/tJEzFS7nf0Kdoqxm
    5aav0ru5vS4fc4vCOLTI9W1T7nj02NY91rogsQm2/KMxUQ8DaLeTZKi+0Wjsa9YO
    6XGGd1wh4azgQkj04MWW5J1EBCcBavKoY+C85oA9jkkklQ8nGWgbugmZs7eXHNQb
    qH8/ZHcB9Kx1CZ6XjQuVd6YE/A+swV+DksbkXANcYjr6SY/2TbB8GfpcOMM3bkyN
    Q8e0A51q5a8abfuAkDZXe67MwKMWu/626abwPZhJrKr5HhRZZDwPtnXlktYHhOK6
    lQIDAQAB
    -----END PUBLIC KEY-----
      `;
	  const domain = window.location.href;
	  const openTerminal = async () => {
	    if (isMobileDevice()) {
	      // Testing
	      await handleAPIRequestForMobile();
	      return;
	    }
	    console.log("openTerminal clicked");
	    window.postMessage({
	      source: 'webpage',
	      type: 'openTerminal',
	      webpageName: webpageName,
	      domain: domain,
	      key: "Key"
	    });
	  };
	  reactExports.useEffect(() => {
	    // Listener to receive messages
	    const handleMessage = event => {
	      console.log("Message received in useEffect:", event.data);
	      if (event.data && event.data.action === 'terminalOpened') {
	        ConnectOnairos();
	      }
	    };
	    window.addEventListener('message', handleMessage);
	    return () => {
	      window.removeEventListener('message', handleMessage);
	    };
	  }, []);
	  const ConnectOnairos = async () => {
	    try {
	      const appInfo = {
	        name: "Onairos",
	        version: "1.0.0",
	        env: "production"
	      };
	      const othent = new Othent({
	        appInfo,
	        throwErrors: false
	      });
	      // Get User Othent Secure Details
	      // const { connect} = await loadOthentKms();
	      const userDetails = await othent.connect();
	      const sha256 = await loadSha256();
	      const hashedOthentSub = sha256(userDetails.sub).toString();
	      const encryptedPin = await getPin(hashedOthentSub);
	      console.log("Got your Pin");
	      function convertToBuffer(string) {
	        try {
	          // Decode base64 string
	          const encodedData = window.atob(string);
	          const uint8Array = new Uint8Array(encodedData.length);
	          for (let i = 0; i < encodedData.length; i++) {
	            uint8Array[i] = encodedData.charCodeAt(i);
	          }
	          return uint8Array.buffer; // This is an ArrayBuffer
	        } catch (e) {
	          console.error("Error converting to Buffer :", e);
	        }
	      }
	      const bufferPIN = convertToBuffer(encryptedPin.result);

	      // const {decrypt }= await loadOthentKms();
	      console.log("Decrypting your Pin");
	      const userPin = await othent.decrypt(bufferPIN);
	      console.log("Decrypted Pin");
	      // RSA Encrypt the PIN to transmit to Terminal and backend
	      rsaEncrypt(OnairosPublicKey, userPin).then(encryptedData => {
	        // Prepare the data to be sent
	        window.postMessage({
	          source: 'webpage',
	          type: 'GET_API_URL',
	          webpageName: webpageName,
	          domain: domain,
	          requestData: requestData,
	          proofMode: proofMode,
	          HashedOthentSub: hashedOthentSub,
	          EncryptedUserPin: encryptedData
	        });
	      }).catch(error => {
	        console.error("Encryption failed:", error);
	      });
	    } catch (e) {
	      console.error("Error Sending Data to Terminal: ", e);
	    }
	  };

	  // Styling and button class based on visual type and login mode
	  const buttonClass = `flex items-center justify-center font-bold rounded cursor-pointer ${buttonType === 'pill' ? 'px-4 py-2' : 'w-12 h-12'} ${login ? 'bg-white border border-gray-300' : 'bg-transparent'}
    ${isMobileDevice() ? '' : 'OnairosConnect'}
    `;
	  const buttonStyle = {
	    flexDirection: textLayout === 'below' ? 'column' : 'row',
	    backgroundColor: login ? '#ffffff' : 'transparent',
	    color: login ? 'black' : textColor,
	    border: login ? '1px solid #ddd' : '1px solid transparent'
	  };

	  // Icon and text style based on the visualType
	  const logoStyle = {
	    width: '20px',
	    height: '20px',
	    marginRight: visualType === 'full' ? '12px' : '0' // Space between icon and text only in full mode
	  };
	  const getText = () => {
	    switch (loginType) {
	      case 'signUp':
	        return 'Sign Up with Onairos';
	      case 'signOut':
	        return 'Sign Out of Onairos';
	      default:
	        return 'Sign In with Onairos';
	    }
	  };

	  // Make sure you have this environment variable set

	  const fetchAccountInfo = async function (identifier) {
	    let isEmail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	    try {
	      const jsonData = isEmail ? {
	        Info: {
	          identifier: identifier
	        }
	      } : {
	        Info: {
	          userName: identifier
	        }
	      };
	      const endpoint = isEmail ? '/getAccountInfo/email' : '/getAccountInfo';
	      const response = await fetch(`${API_URL}${endpoint}`, {
	        method: 'POST',
	        headers: {
	          'Content-Type': 'application/json',
	          'Authorization': `Bearer ${localStorage.getItem('onairosToken')}`
	        },
	        body: JSON.stringify(jsonData)
	      });
	      if (!response.ok) {
	        throw new Error('Failed to fetch account info');
	      }
	      const data = await response.json();
	      if (data.AccountInfo === "No Account Found") {
	        NoAccount.current = true;
	        setAccountInfo(null);
	        return null;
	      }
	      setAccountInfo(data.AccountInfo);
	      if (data.AccountInfo.models) {
	        setActiveModels(data.AccountInfo.models);
	      } else {
	        NoModel.current = true;
	      }
	      if (data.AccountInfo.avatar) {
	        setAvatar(true);
	      }
	      if (data.AccountInfo.UserTraits) {
	        setTraits(true);
	      }
	      if (data.AccountInfo.othent) {
	        setOthentUser(true);
	      }

	      // // If we have account info and models, show the overlay with data requests
	      // if (data.AccountInfo && data.AccountInfo.models?.length > 0) {
	      //   setShowOverlay(true);
	      // }

	      return data.AccountInfo;
	    } catch (error) {
	      console.error('Error fetching account info:', error);
	      throw error;
	    }
	  };
	  const checkExistingToken = async () => {
	    try {
	      const onairosToken = localStorage.getItem('onairosToken');
	      const legacyToken = localStorage.getItem('token');
	      const token = onairosToken || legacyToken;
	      if (token) {
	        const response = await fetch('https://api2.onairos.uk/verifyToken', {
	          // const response = await fetch('http://localhost:8080/verifyToken', {
	          headers: {
	            'Authorization': `Bearer ${token}`
	          }
	        });
	        if (response.ok) {
	          const data = await response.json();
	          if (data.valid) {
	            setAuthToken(token);
	            setIsAuthenticated(true);
	            const username = localStorage.getItem('username');
	            await fetchAccountInfo(username);
	          } else {
	            localStorage.removeItem('onairosToken');
	            localStorage.removeItem('token');
	          }
	        }
	      }
	    } catch (error) {
	      console.error('Token verification failed:', error);
	    } finally {
	      setLoading(false);
	    }
	  };
	  reactExports.useEffect(() => {
	    if (isMobileDevice()) {
	      checkExistingToken();
	    }
	  }, []);
	  const handleCloseOverlay = () => {
	    setGranted(0);
	    setShowOverlay(false);
	  };

	  // Check for existing token and fetch account info on mount
	  reactExports.useEffect(() => {
	    const token = localStorage.getItem('onairosToken');
	    const username = localStorage.getItem('username');
	    if (token && username) {
	      fetchAccountInfo(username, false);
	    }
	  }, []);
	  const handleLoginSuccess = async function (identifier) {
	    let isEmail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	    try {
	      const accountData = await fetchAccountInfo(identifier, isEmail);
	      // Update authentication first
	      setIsAuthenticated(true);
	      // Then update account info
	      setShowOverlay(true);
	      // setAccountInfo(accountData);
	      return accountData;
	    } catch (error) {
	      console.error('Login process failed:', error);
	      throw error;
	    }
	  };

	  // Check for stored tokens on mount
	  reactExports.useEffect(() => {
	    const checkStoredAuth = async () => {
	      const token = localStorage.getItem('onairosToken');
	      const username = localStorage.getItem('username');
	      const othentToken = localStorage.getItem('othentToken');
	      if (token) {
	        try {
	          // Verify token is still valid
	          const response = await fetch(`${API_URL}/verifyToken`, {
	            method: 'POST',
	            headers: {
	              'Content-Type': 'application/json',
	              'Authorization': `Bearer ${token}`
	            }
	          });
	          if (response.ok) {
	            setIsAuthenticated(true);
	            if (username) {
	              await fetchAccountInfo(username, false);
	            } else if (othentToken) {
	              // Handle Othent stored session
	              const userDetails = JSON.parse(othentToken);
	              await fetchAccountInfo(userDetails.email, true);
	            }
	          } else {
	            // Clear invalid tokens
	            localStorage.removeItem('onairosToken');
	            localStorage.removeItem('username');
	            localStorage.removeItem('othentToken');
	          }
	        } catch (error) {
	          console.error('Token verification failed:', error);
	        }
	      }
	    };
	    checkStoredAuth();
	  }, []);
	  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement("div", {
	    className: "flex items-center justify-center"
	  }, /*#__PURE__*/React$1.createElement("button", {
	    className: buttonClass,
	    onClick: openTerminal,
	    style: buttonStyle
	  }, (visualType === 'full' || visualType === 'icon') && /*#__PURE__*/React$1.createElement("img", {
	    src: login ? "https://onairos.sirv.com/Images/OnairosWhite.png" : "https://onairos.sirv.com/Images/OnairosBlack.png",
	    alt: "Onairos Logo",
	    style: logoStyle,
	    className: `${buttonType === 'pill' ? 'w-6 h-6' : 'w-8 h-8'} object-contain`
	  }), (visualType === 'full' || visualType === 'textOnly') && /*#__PURE__*/React$1.createElement("span", {
	    className: `${login ? 'text-black' : textColor === 'black' ? 'text-black' : 'text-white'} ${visualType === 'icon' ? 'sr-only' : ''} ${textLayout === 'right' ? 'ml-2' : textLayout === 'left' ? 'mr-2' : ''}`
	  }, getText()))), authDialog.show &&
	  /*#__PURE__*/
	  // {false && 
	  React$1.createElement("div", {
	    className: "fixed inset-0 z-50 flex items-center justify-center"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "fixed inset-0 bg-black bg-opacity-50",
	    onClick: () => setAuthDialog({
	      show: false,
	      type: null,
	      data: null
	    })
	  }), /*#__PURE__*/React$1.createElement("div", {
	    className: "relative bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[80vh] overflow-y-auto"
	  }, /*#__PURE__*/React$1.createElement("button", {
	    onClick: () => setAuthDialog({
	      show: false,
	      type: null,
	      data: null
	    }),
	    className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600"
	  }, /*#__PURE__*/React$1.createElement("span", {
	    className: "sr-only"
	  }, "Close"), /*#__PURE__*/React$1.createElement("svg", {
	    className: "h-6 w-6",
	    fill: "none",
	    viewBox: "0 0 24 24",
	    stroke: "currentColor"
	  }, /*#__PURE__*/React$1.createElement("path", {
	    strokeLinecap: "round",
	    strokeLinejoin: "round",
	    strokeWidth: 2,
	    d: "M6 18L18 6M6 6l12 12"
	  }))), /*#__PURE__*/React$1.createElement("h3", {
	    className: "text-lg font-semibold mb-4"
	  }, authDialog.type === 'callback' ? 'Callback Details' : 'Authentication Result'), /*#__PURE__*/React$1.createElement("h3", {
	    className: "text-lg font-semibold mb-4"
	  }, authDialog.type === 'debug' ? 'Debug Results' : 'Authentication Result'), /*#__PURE__*/React$1.createElement("h3", {
	    className: "text-lg font-semibold mb-4"
	  }, authDialog.type === 'apiURL' ? 'API Url Returned' : 'Authentication Result'), /*#__PURE__*/React$1.createElement("div", {
	    className: "bg-gray-50 rounded p-4 overflow-x-auto"
	  }, /*#__PURE__*/React$1.createElement("pre", {
	    className: "text-sm"
	  }, JSON.stringify(authDialog.data, null, 2))), authDialog.type === 'auth' && /*#__PURE__*/React$1.createElement("div", {
	    className: `mt-4 p-3 rounded ${authDialog.data?.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`
	  }, authDialog.data?.success ? 'Authentication successful!' : 'Authentication failed'))), isLoading && /*#__PURE__*/React$1.createElement("div", {
	    className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "bg-white p-6 rounded-lg shadow-xl"
	  }, /*#__PURE__*/React$1.createElement("div", {
	    className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"
	  }), /*#__PURE__*/React$1.createElement("p", {
	    className: "mt-4 text-gray-600"
	  }, "Loading your account..."))), showOverlay && !isLoading && /*#__PURE__*/React$1.createElement(Overlay, {
	    setOthentConnected: setOthentConnected,
	    dataRequester: webpageName,
	    NoAccount: NoAccount,
	    NoModel: NoModel,
	    accountInfo: accountInfo,
	    activeModels: activeModels,
	    avatar: avatar,
	    traits: traits,
	    requestData: requestData,
	    handleConnectionSelection: handleConnectionSelection,
	    changeGranted: changeGranted,
	    granted: granted,
	    allowSubmit: granted > 0,
	    rejectDataRequest: rejectDataRequest,
	    sendDataRequest: sendDataRequest,
	    isAuthenticated: isAuthenticated,
	    onLoginSuccess: handleLoginSuccess,
	    onClose: handleCloseOverlay,
	    setOthentUser: setOthentUser,
	    setHashedOthentSub: setHashedOthentSub,
	    setEncryptedPin: setEncryptedPin
	  }));
	}

	// Configuration object for the Telegram SDK

	function Onairos(props) {
	  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(OnairosButton, props));
	}

	var sha256$3 = {exports: {}};

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var core$1 = {exports: {}};

	var core = core$1.exports;

	var hasRequiredCore;

	function requireCore () {
		if (hasRequiredCore) return core$1.exports;
		hasRequiredCore = 1;
		(function (module, exports) {
			(function (root, factory) {
			  {
			    // CommonJS
			    module.exports = factory();
			  }
			})(core, function () {
			  /*globals window, global, require*/

			  /**
			   * CryptoJS core components.
			   */
			  var CryptoJS = CryptoJS || function (Math, undefined$1) {
			    var crypto;

			    // Native crypto from window (Browser)
			    if (typeof window !== 'undefined' && window.crypto) {
			      crypto = window.crypto;
			    }

			    // Native crypto in web worker (Browser)
			    if (typeof self !== 'undefined' && self.crypto) {
			      crypto = self.crypto;
			    }

			    // Native crypto from worker
			    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
			      crypto = globalThis.crypto;
			    }

			    // Native (experimental IE 11) crypto from window (Browser)
			    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
			      crypto = window.msCrypto;
			    }

			    // Native crypto from global (NodeJS)
			    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
			      crypto = commonjsGlobal.crypto;
			    }

			    // Native crypto import via require (NodeJS)
			    if (!crypto && typeof commonjsRequire === 'function') {
			      try {
			        crypto = require('crypto');
			      } catch (err) {}
			    }

			    /*
			     * Cryptographically secure pseudorandom number generator
			     *
			     * As Math.random() is cryptographically not safe to use
			     */
			    var cryptoSecureRandomInt = function () {
			      if (crypto) {
			        // Use getRandomValues method (Browser)
			        if (typeof crypto.getRandomValues === 'function') {
			          try {
			            return crypto.getRandomValues(new Uint32Array(1))[0];
			          } catch (err) {}
			        }

			        // Use randomBytes method (NodeJS)
			        if (typeof crypto.randomBytes === 'function') {
			          try {
			            return crypto.randomBytes(4).readInt32LE();
			          } catch (err) {}
			        }
			      }
			      throw new Error('Native crypto module could not be used to get secure random number.');
			    };

			    /*
			     * Local polyfill of Object.create
			      */
			    var create = Object.create || function () {
			      function F() {}
			      return function (obj) {
			        var subtype;
			        F.prototype = obj;
			        subtype = new F();
			        F.prototype = null;
			        return subtype;
			      };
			    }();

			    /**
			     * CryptoJS namespace.
			     */
			    var C = {};

			    /**
			     * Library namespace.
			     */
			    var C_lib = C.lib = {};

			    /**
			     * Base object for prototypal inheritance.
			     */
			    var Base = C_lib.Base = function () {
			      return {
			        /**
			         * Creates a new object that inherits from this object.
			         *
			         * @param {Object} overrides Properties to copy into the new object.
			         *
			         * @return {Object} The new object.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var MyType = CryptoJS.lib.Base.extend({
			         *         field: 'value',
			         *
			         *         method: function () {
			         *         }
			         *     });
			         */
			        extend: function (overrides) {
			          // Spawn
			          var subtype = create(this);

			          // Augment
			          if (overrides) {
			            subtype.mixIn(overrides);
			          }

			          // Create default initializer
			          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
			            subtype.init = function () {
			              subtype.$super.init.apply(this, arguments);
			            };
			          }

			          // Initializer's prototype is the subtype object
			          subtype.init.prototype = subtype;

			          // Reference supertype
			          subtype.$super = this;
			          return subtype;
			        },
			        /**
			         * Extends this object and runs the init method.
			         * Arguments to create() will be passed to init().
			         *
			         * @return {Object} The new object.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var instance = MyType.create();
			         */
			        create: function () {
			          var instance = this.extend();
			          instance.init.apply(instance, arguments);
			          return instance;
			        },
			        /**
			         * Initializes a newly created object.
			         * Override this method to add some logic when your objects are created.
			         *
			         * @example
			         *
			         *     var MyType = CryptoJS.lib.Base.extend({
			         *         init: function () {
			         *             // ...
			         *         }
			         *     });
			         */
			        init: function () {},
			        /**
			         * Copies properties into this object.
			         *
			         * @param {Object} properties The properties to mix in.
			         *
			         * @example
			         *
			         *     MyType.mixIn({
			         *         field: 'value'
			         *     });
			         */
			        mixIn: function (properties) {
			          for (var propertyName in properties) {
			            if (properties.hasOwnProperty(propertyName)) {
			              this[propertyName] = properties[propertyName];
			            }
			          }

			          // IE won't copy toString using the loop above
			          if (properties.hasOwnProperty('toString')) {
			            this.toString = properties.toString;
			          }
			        },
			        /**
			         * Creates a copy of this object.
			         *
			         * @return {Object} The clone.
			         *
			         * @example
			         *
			         *     var clone = instance.clone();
			         */
			        clone: function () {
			          return this.init.prototype.extend(this);
			        }
			      };
			    }();

			    /**
			     * An array of 32-bit words.
			     *
			     * @property {Array} words The array of 32-bit words.
			     * @property {number} sigBytes The number of significant bytes in this word array.
			     */
			    var WordArray = C_lib.WordArray = Base.extend({
			      /**
			       * Initializes a newly created word array.
			       *
			       * @param {Array} words (Optional) An array of 32-bit words.
			       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
			       *
			       * @example
			       *
			       *     var wordArray = CryptoJS.lib.WordArray.create();
			       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
			       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
			       */
			      init: function (words, sigBytes) {
			        words = this.words = words || [];
			        if (sigBytes != undefined$1) {
			          this.sigBytes = sigBytes;
			        } else {
			          this.sigBytes = words.length * 4;
			        }
			      },
			      /**
			       * Converts this word array to a string.
			       *
			       * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
			       *
			       * @return {string} The stringified word array.
			       *
			       * @example
			       *
			       *     var string = wordArray + '';
			       *     var string = wordArray.toString();
			       *     var string = wordArray.toString(CryptoJS.enc.Utf8);
			       */
			      toString: function (encoder) {
			        return (encoder || Hex).stringify(this);
			      },
			      /**
			       * Concatenates a word array to this word array.
			       *
			       * @param {WordArray} wordArray The word array to append.
			       *
			       * @return {WordArray} This word array.
			       *
			       * @example
			       *
			       *     wordArray1.concat(wordArray2);
			       */
			      concat: function (wordArray) {
			        // Shortcuts
			        var thisWords = this.words;
			        var thatWords = wordArray.words;
			        var thisSigBytes = this.sigBytes;
			        var thatSigBytes = wordArray.sigBytes;

			        // Clamp excess bits
			        this.clamp();

			        // Concat
			        if (thisSigBytes % 4) {
			          // Copy one byte at a time
			          for (var i = 0; i < thatSigBytes; i++) {
			            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
			            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
			          }
			        } else {
			          // Copy one word at a time
			          for (var j = 0; j < thatSigBytes; j += 4) {
			            thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
			          }
			        }
			        this.sigBytes += thatSigBytes;

			        // Chainable
			        return this;
			      },
			      /**
			       * Removes insignificant bits.
			       *
			       * @example
			       *
			       *     wordArray.clamp();
			       */
			      clamp: function () {
			        // Shortcuts
			        var words = this.words;
			        var sigBytes = this.sigBytes;

			        // Clamp
			        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
			        words.length = Math.ceil(sigBytes / 4);
			      },
			      /**
			       * Creates a copy of this word array.
			       *
			       * @return {WordArray} The clone.
			       *
			       * @example
			       *
			       *     var clone = wordArray.clone();
			       */
			      clone: function () {
			        var clone = Base.clone.call(this);
			        clone.words = this.words.slice(0);
			        return clone;
			      },
			      /**
			       * Creates a word array filled with random bytes.
			       *
			       * @param {number} nBytes The number of random bytes to generate.
			       *
			       * @return {WordArray} The random word array.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var wordArray = CryptoJS.lib.WordArray.random(16);
			       */
			      random: function (nBytes) {
			        var words = [];
			        for (var i = 0; i < nBytes; i += 4) {
			          words.push(cryptoSecureRandomInt());
			        }
			        return new WordArray.init(words, nBytes);
			      }
			    });

			    /**
			     * Encoder namespace.
			     */
			    var C_enc = C.enc = {};

			    /**
			     * Hex encoding strategy.
			     */
			    var Hex = C_enc.Hex = {
			      /**
			       * Converts a word array to a hex string.
			       *
			       * @param {WordArray} wordArray The word array.
			       *
			       * @return {string} The hex string.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
			       */
			      stringify: function (wordArray) {
			        // Shortcuts
			        var words = wordArray.words;
			        var sigBytes = wordArray.sigBytes;

			        // Convert
			        var hexChars = [];
			        for (var i = 0; i < sigBytes; i++) {
			          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
			          hexChars.push((bite >>> 4).toString(16));
			          hexChars.push((bite & 0x0f).toString(16));
			        }
			        return hexChars.join('');
			      },
			      /**
			       * Converts a hex string to a word array.
			       *
			       * @param {string} hexStr The hex string.
			       *
			       * @return {WordArray} The word array.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
			       */
			      parse: function (hexStr) {
			        // Shortcut
			        var hexStrLength = hexStr.length;

			        // Convert
			        var words = [];
			        for (var i = 0; i < hexStrLength; i += 2) {
			          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
			        }
			        return new WordArray.init(words, hexStrLength / 2);
			      }
			    };

			    /**
			     * Latin1 encoding strategy.
			     */
			    var Latin1 = C_enc.Latin1 = {
			      /**
			       * Converts a word array to a Latin1 string.
			       *
			       * @param {WordArray} wordArray The word array.
			       *
			       * @return {string} The Latin1 string.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
			       */
			      stringify: function (wordArray) {
			        // Shortcuts
			        var words = wordArray.words;
			        var sigBytes = wordArray.sigBytes;

			        // Convert
			        var latin1Chars = [];
			        for (var i = 0; i < sigBytes; i++) {
			          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
			          latin1Chars.push(String.fromCharCode(bite));
			        }
			        return latin1Chars.join('');
			      },
			      /**
			       * Converts a Latin1 string to a word array.
			       *
			       * @param {string} latin1Str The Latin1 string.
			       *
			       * @return {WordArray} The word array.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
			       */
			      parse: function (latin1Str) {
			        // Shortcut
			        var latin1StrLength = latin1Str.length;

			        // Convert
			        var words = [];
			        for (var i = 0; i < latin1StrLength; i++) {
			          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
			        }
			        return new WordArray.init(words, latin1StrLength);
			      }
			    };

			    /**
			     * UTF-8 encoding strategy.
			     */
			    var Utf8 = C_enc.Utf8 = {
			      /**
			       * Converts a word array to a UTF-8 string.
			       *
			       * @param {WordArray} wordArray The word array.
			       *
			       * @return {string} The UTF-8 string.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
			       */
			      stringify: function (wordArray) {
			        try {
			          return decodeURIComponent(escape(Latin1.stringify(wordArray)));
			        } catch (e) {
			          throw new Error('Malformed UTF-8 data');
			        }
			      },
			      /**
			       * Converts a UTF-8 string to a word array.
			       *
			       * @param {string} utf8Str The UTF-8 string.
			       *
			       * @return {WordArray} The word array.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
			       */
			      parse: function (utf8Str) {
			        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
			      }
			    };

			    /**
			     * Abstract buffered block algorithm template.
			     *
			     * The property blockSize must be implemented in a concrete subtype.
			     *
			     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
			     */
			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
			      /**
			       * Resets this block algorithm's data buffer to its initial state.
			       *
			       * @example
			       *
			       *     bufferedBlockAlgorithm.reset();
			       */
			      reset: function () {
			        // Initial values
			        this._data = new WordArray.init();
			        this._nDataBytes = 0;
			      },
			      /**
			       * Adds new data to this block algorithm's buffer.
			       *
			       * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
			       *
			       * @example
			       *
			       *     bufferedBlockAlgorithm._append('data');
			       *     bufferedBlockAlgorithm._append(wordArray);
			       */
			      _append: function (data) {
			        // Convert string to WordArray, else assume WordArray already
			        if (typeof data == 'string') {
			          data = Utf8.parse(data);
			        }

			        // Append
			        this._data.concat(data);
			        this._nDataBytes += data.sigBytes;
			      },
			      /**
			       * Processes available data blocks.
			       *
			       * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
			       *
			       * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
			       *
			       * @return {WordArray} The processed data.
			       *
			       * @example
			       *
			       *     var processedData = bufferedBlockAlgorithm._process();
			       *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
			       */
			      _process: function (doFlush) {
			        var processedWords;

			        // Shortcuts
			        var data = this._data;
			        var dataWords = data.words;
			        var dataSigBytes = data.sigBytes;
			        var blockSize = this.blockSize;
			        var blockSizeBytes = blockSize * 4;

			        // Count blocks ready
			        var nBlocksReady = dataSigBytes / blockSizeBytes;
			        if (doFlush) {
			          // Round up to include partial blocks
			          nBlocksReady = Math.ceil(nBlocksReady);
			        } else {
			          // Round down to include only full blocks,
			          // less the number of blocks that must remain in the buffer
			          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
			        }

			        // Count words ready
			        var nWordsReady = nBlocksReady * blockSize;

			        // Count bytes ready
			        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

			        // Process blocks
			        if (nWordsReady) {
			          for (var offset = 0; offset < nWordsReady; offset += blockSize) {
			            // Perform concrete-algorithm logic
			            this._doProcessBlock(dataWords, offset);
			          }

			          // Remove processed words
			          processedWords = dataWords.splice(0, nWordsReady);
			          data.sigBytes -= nBytesReady;
			        }

			        // Return processed words
			        return new WordArray.init(processedWords, nBytesReady);
			      },
			      /**
			       * Creates a copy of this object.
			       *
			       * @return {Object} The clone.
			       *
			       * @example
			       *
			       *     var clone = bufferedBlockAlgorithm.clone();
			       */
			      clone: function () {
			        var clone = Base.clone.call(this);
			        clone._data = this._data.clone();
			        return clone;
			      },
			      _minBufferSize: 0
			    });

			    /**
			     * Abstract hasher template.
			     *
			     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
			     */
			    C_lib.Hasher = BufferedBlockAlgorithm.extend({
			      /**
			       * Configuration options.
			       */
			      cfg: Base.extend(),
			      /**
			       * Initializes a newly created hasher.
			       *
			       * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
			       *
			       * @example
			       *
			       *     var hasher = CryptoJS.algo.SHA256.create();
			       */
			      init: function (cfg) {
			        // Apply config defaults
			        this.cfg = this.cfg.extend(cfg);

			        // Set initial values
			        this.reset();
			      },
			      /**
			       * Resets this hasher to its initial state.
			       *
			       * @example
			       *
			       *     hasher.reset();
			       */
			      reset: function () {
			        // Reset data buffer
			        BufferedBlockAlgorithm.reset.call(this);

			        // Perform concrete-hasher logic
			        this._doReset();
			      },
			      /**
			       * Updates this hasher with a message.
			       *
			       * @param {WordArray|string} messageUpdate The message to append.
			       *
			       * @return {Hasher} This hasher.
			       *
			       * @example
			       *
			       *     hasher.update('message');
			       *     hasher.update(wordArray);
			       */
			      update: function (messageUpdate) {
			        // Append
			        this._append(messageUpdate);

			        // Update the hash
			        this._process();

			        // Chainable
			        return this;
			      },
			      /**
			       * Finalizes the hash computation.
			       * Note that the finalize operation is effectively a destructive, read-once operation.
			       *
			       * @param {WordArray|string} messageUpdate (Optional) A final message update.
			       *
			       * @return {WordArray} The hash.
			       *
			       * @example
			       *
			       *     var hash = hasher.finalize();
			       *     var hash = hasher.finalize('message');
			       *     var hash = hasher.finalize(wordArray);
			       */
			      finalize: function (messageUpdate) {
			        // Final message update
			        if (messageUpdate) {
			          this._append(messageUpdate);
			        }

			        // Perform concrete-hasher logic
			        var hash = this._doFinalize();
			        return hash;
			      },
			      blockSize: 512 / 32,
			      /**
			       * Creates a shortcut function to a hasher's object interface.
			       *
			       * @param {Hasher} hasher The hasher to create a helper for.
			       *
			       * @return {Function} The shortcut function.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
			       */
			      _createHelper: function (hasher) {
			        return function (message, cfg) {
			          return new hasher.init(cfg).finalize(message);
			        };
			      },
			      /**
			       * Creates a shortcut function to the HMAC's object interface.
			       *
			       * @param {Hasher} hasher The hasher to use in this HMAC helper.
			       *
			       * @return {Function} The shortcut function.
			       *
			       * @static
			       *
			       * @example
			       *
			       *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
			       */
			      _createHmacHelper: function (hasher) {
			        return function (message, key) {
			          return new C_algo.HMAC.init(hasher, key).finalize(message);
			        };
			      }
			    });

			    /**
			     * Algorithm namespace.
			     */
			    var C_algo = C.algo = {};
			    return C;
			  }(Math);
			  return CryptoJS;
			}); 
		} (core$1, core$1.exports));
		return core$1.exports;
	}

	var sha256$2 = sha256$3.exports;

	var hasRequiredSha256;

	function requireSha256 () {
		if (hasRequiredSha256) return sha256$3.exports;
		hasRequiredSha256 = 1;
		(function (module, exports) {
			(function (root, factory) {
			  {
			    // CommonJS
			    module.exports = factory(requireCore());
			  }
			})(sha256$2, function (CryptoJS) {
			  (function (Math) {
			    // Shortcuts
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;

			    // Initialization and round constants tables
			    var H = [];
			    var K = [];

			    // Compute constants
			    (function () {
			      function isPrime(n) {
			        var sqrtN = Math.sqrt(n);
			        for (var factor = 2; factor <= sqrtN; factor++) {
			          if (!(n % factor)) {
			            return false;
			          }
			        }
			        return true;
			      }
			      function getFractionalBits(n) {
			        return (n - (n | 0)) * 0x100000000 | 0;
			      }
			      var n = 2;
			      var nPrime = 0;
			      while (nPrime < 64) {
			        if (isPrime(n)) {
			          if (nPrime < 8) {
			            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
			          }
			          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
			          nPrime++;
			        }
			        n++;
			      }
			    })();

			    // Reusable object
			    var W = [];

			    /**
			     * SHA-256 hash algorithm.
			     */
			    var SHA256 = C_algo.SHA256 = Hasher.extend({
			      _doReset: function () {
			        this._hash = new WordArray.init(H.slice(0));
			      },
			      _doProcessBlock: function (M, offset) {
			        // Shortcut
			        var H = this._hash.words;

			        // Working variables
			        var a = H[0];
			        var b = H[1];
			        var c = H[2];
			        var d = H[3];
			        var e = H[4];
			        var f = H[5];
			        var g = H[6];
			        var h = H[7];

			        // Computation
			        for (var i = 0; i < 64; i++) {
			          if (i < 16) {
			            W[i] = M[offset + i] | 0;
			          } else {
			            var gamma0x = W[i - 15];
			            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
			            var gamma1x = W[i - 2];
			            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
			            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
			          }
			          var ch = e & f ^ ~e & g;
			          var maj = a & b ^ a & c ^ b & c;
			          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
			          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
			          var t1 = h + sigma1 + ch + K[i] + W[i];
			          var t2 = sigma0 + maj;
			          h = g;
			          g = f;
			          f = e;
			          e = d + t1 | 0;
			          d = c;
			          c = b;
			          b = a;
			          a = t1 + t2 | 0;
			        }

			        // Intermediate hash value
			        H[0] = H[0] + a | 0;
			        H[1] = H[1] + b | 0;
			        H[2] = H[2] + c | 0;
			        H[3] = H[3] + d | 0;
			        H[4] = H[4] + e | 0;
			        H[5] = H[5] + f | 0;
			        H[6] = H[6] + g | 0;
			        H[7] = H[7] + h | 0;
			      },
			      _doFinalize: function () {
			        // Shortcuts
			        var data = this._data;
			        var dataWords = data.words;
			        var nBitsTotal = this._nDataBytes * 8;
			        var nBitsLeft = data.sigBytes * 8;

			        // Add padding
			        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
			        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
			        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
			        data.sigBytes = dataWords.length * 4;

			        // Hash final blocks
			        this._process();

			        // Return final computed hash
			        return this._hash;
			      },
			      clone: function () {
			        var clone = Hasher.clone.call(this);
			        clone._hash = this._hash.clone();
			        return clone;
			      }
			    });

			    /**
			     * Shortcut function to the hasher's object interface.
			     *
			     * @param {WordArray|string} message The message to hash.
			     *
			     * @return {WordArray} The hash.
			     *
			     * @static
			     *
			     * @example
			     *
			     *     var hash = CryptoJS.SHA256('message');
			     *     var hash = CryptoJS.SHA256(wordArray);
			     */
			    C.SHA256 = Hasher._createHelper(SHA256);

			    /**
			     * Shortcut function to the HMAC's object interface.
			     *
			     * @param {WordArray|string} message The message to hash.
			     * @param {WordArray|string} key The secret key.
			     *
			     * @return {WordArray} The HMAC.
			     *
			     * @static
			     *
			     * @example
			     *
			     *     var hmac = CryptoJS.HmacSHA256(message, key);
			     */
			    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
			  })(Math);
			  return CryptoJS.SHA256;
			}); 
		} (sha256$3, sha256$3.exports));
		return sha256$3.exports;
	}

	var sha256Exports = requireSha256();
	var sha256 = /*@__PURE__*/getDefaultExportFromCjs(sha256Exports);

	var sha256$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		'default': sha256
	}, [sha256Exports]);

	exports.Onairos = Onairos;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
